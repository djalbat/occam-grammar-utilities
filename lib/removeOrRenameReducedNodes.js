"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeOrRenameReducedNodes;
var _reduced = _interopRequireDefault(require("./node/reduced"));
var _class = require("./utilities/class");
var _ruleName = require("./utilities/ruleName");
function removeOrRenameReducedNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName();
        var childNodes = nonTerminalNode.getChildNodes();
        childNodes = removeOrRenameReducedChildNodes(childNodes, ruleName);
        nonTerminalNode.setChildNodes(childNodes);
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function removeOrRenameReducedChildNodes(childNodes1, ruleName) {
    var childNodesLength = childNodes1.length;
    childNodes1 = childNodes1.reduce(function(childNodes, childNode) {
        var childNodeReducedNode = (0, _class).isInstanceOf(childNode, _reduced.default);
        if (childNodeReducedNode) {
            var reducedNode = childNode, reducedNodeRuleName = reducedNode.getRuleName(), reducedRuleName = reducedNodeRuleName, reducedRuleNameMatchesRuleName = (0, _ruleName).doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName);
            if (reducedRuleNameMatchesRuleName) {
                if (childNodesLength > 1) {
                    var _$ruleName = (0, _ruleName).ruleNameFromReducedRuleName(reducedRuleName);
                    childNode.setRuleName(_$ruleName);
                    removeOrRenameReducedNodes(childNode);
                    childNodes.push(childNode);
                } else {
                    var childNodeChildNodes = childNode.getChildNodes();
                    childNodeChildNodes = removeOrRenameReducedChildNodes(childNodeChildNodes);
                    childNodes = childNodes.concat(childNodeChildNodes);
                }
            } else {
                var _$ruleName1 = (0, _ruleName).ruleNameFromReducedRuleName(reducedRuleName);
                childNode.setRuleName(_$ruleName1);
                removeOrRenameReducedNodes(childNode);
                childNodes.push(childNode);
            }
        } else {
            removeOrRenameReducedNodes(childNode);
            childNodes.push(childNode);
        }
        return childNodes;
    }, []);
    return childNodes1;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVPclJlbmFtZVJlZHVjZWROb2Rlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFJlZHVjZWROb2RlIGZyb20gXCIuL25vZGUvcmVkdWNlZFwiO1xuXG5pbXBvcnQgeyBpc0luc3RhbmNlT2YgfSBmcm9tIFwiLi91dGlsaXRpZXMvY2xhc3NcIjtcbmltcG9ydCB7IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZSwgZG9lc1JlZHVjZWRSdWxlTmFtZU1hdGNoUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkTm9kZXMobm9kZSkge1xuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIGxldCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgIGNoaWxkTm9kZXMgPSByZW1vdmVPclJlbmFtZVJlZHVjZWRDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZS5zZXRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkQ2hpbGROb2RlcyhjaGlsZE5vZGVzLCBydWxlTmFtZSkge1xuICBjb25zdCBjaGlsZE5vZGVzTGVuZ3RoID0gY2hpbGROb2Rlcy5sZW5ndGg7XG5cbiAgY2hpbGROb2RlcyA9IGNoaWxkTm9kZXMucmVkdWNlKChjaGlsZE5vZGVzLCBjaGlsZE5vZGUpID0+IHtcbiAgICBjb25zdCBjaGlsZE5vZGVSZWR1Y2VkTm9kZSA9IGlzSW5zdGFuY2VPZihjaGlsZE5vZGUsIFJlZHVjZWROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVSZWR1Y2VkTm9kZSkge1xuICAgICAgY29uc3QgcmVkdWNlZE5vZGUgPSBjaGlsZE5vZGUsIC8vL1xuICAgICAgICAgICAgcmVkdWNlZE5vZGVSdWxlTmFtZSA9IHJlZHVjZWROb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkTm9kZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSBkb2VzUmVkdWNlZFJ1bGVOYW1lTWF0Y2hSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVOYW1lKTtcblxuICAgICAgaWYgKHJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSkge1xuICAgICAgICBpZiAoY2hpbGROb2Rlc0xlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpO1xuXG4gICAgICAgICAgY2hpbGROb2RlLnNldFJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICAgICAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY2hpbGROb2RlQ2hpbGROb2RlcyA9IGNoaWxkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgICAgICBjaGlsZE5vZGVDaGlsZE5vZGVzID0gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkQ2hpbGROb2RlcyhjaGlsZE5vZGVDaGlsZE5vZGVzKTtcblxuICAgICAgICAgIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLmNvbmNhdChjaGlsZE5vZGVDaGlsZE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKTtcblxuICAgICAgICBjaGlsZE5vZGUuc2V0UnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgICAgY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgIGNoaWxkTm9kZXMucHVzaChjaGlsZE5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZE5vZGVzO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGNoaWxkTm9kZXM7XG59XG4iXSwibmFtZXMiOlsicmVtb3ZlT3JSZW5hbWVSZWR1Y2VkTm9kZXMiLCJub2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwicmVtb3ZlT3JSZW5hbWVSZWR1Y2VkQ2hpbGROb2RlcyIsInNldENoaWxkTm9kZXMiLCJjaGlsZE5vZGVzTGVuZ3RoIiwibGVuZ3RoIiwicmVkdWNlIiwiY2hpbGROb2RlIiwiY2hpbGROb2RlUmVkdWNlZE5vZGUiLCJpc0luc3RhbmNlT2YiLCJSZWR1Y2VkTm9kZSIsInJlZHVjZWROb2RlIiwicmVkdWNlZE5vZGVSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsImRvZXNSZWR1Y2VkUnVsZU5hbWVNYXRjaFJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1l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