"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rewriteNodes;
    }
});
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _rewritten = /*#__PURE__*/ _interopRequireDefault(require("./node/rewritten"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/indirectly"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter, unshift = _necessary.arrayUtilities.unshift;
function rewriteNodes(node) {
    var nonTerminalNode = node; ///
    rewrite(nonTerminalNode);
    removeEpsilons(nonTerminalNode);
    removeIntermediaries(nonTerminalNode);
}
function rewrite(nonTerminalNode) {
    rewriteIndirectRepetition(nonTerminalNode);
    rewriteDirectRepetition(nonTerminalNode);
    rewriteDirectReduction(nonTerminalNode);
    rewriteIndirectReduction(nonTerminalNode);
    var childNodes = nonTerminalNode.getChildNodes();
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var _$nonTerminalNode = childNode; ///
            rewrite(_$nonTerminalNode);
        }
    });
}
function removeEpsilons(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    filter(childNodes, function(childNode) {
        var childNodeEpsilonNode = _instanceof(childNode, _occamParsers.EpsilonNode);
        if (!childNodeEpsilonNode) {
            return true;
        }
    });
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var _$nonTerminalNode = childNode; ///
            removeEpsilons(_$nonTerminalNode);
        }
    });
}
function removeIntermediaries(nonTerminalNode) {
    var nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), nonTerminalNodeChildNodes = nonTerminalNode.getChildNodes();
    var childNodes = nonTerminalNodeChildNodes, childNodesLength = childNodes.length;
    while(childNodesLength === 1){
        var firstChildNode = first(childNodes), firstChildNodeNonTerminalNode = firstChildNode.isNonTerminalNode();
        if (!firstChildNodeNonTerminalNode) {
            break;
        }
        var _$nonTerminalNode = firstChildNode, ruleName = _$nonTerminalNode.getRuleName();
        childNodes = _$nonTerminalNode.getChildNodes();
        if (ruleName === nonTerminalNodeRuleName) {
            var _nonTerminalNodeChildNodes;
            var start = 0, deleteCount = 1;
            (_nonTerminalNodeChildNodes = nonTerminalNodeChildNodes).splice.apply(_nonTerminalNodeChildNodes, [
                start,
                deleteCount
            ].concat(_toConsumableArray(childNodes)));
            break;
        }
        childNodesLength = childNodes.length;
    }
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var _$nonTerminalNode = childNode; ///
            removeIntermediaries(_$nonTerminalNode);
        }
    });
}
function rewriteDirectReduction(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstChildNodeReducedNode = _instanceof(firstChildNode, _directly.default);
    if (firstChildNodeReducedNode) {
        var firstDirectlyReducedChildNode = firstChildNode, reducedNode = firstDirectlyReducedChildNode, rewrittenNode = _rewritten.default.fromReducedNode(reducedNode), start = 0, deleteCount = 1;
        childNodes.splice(start, deleteCount, rewrittenNode);
    }
}
function rewriteDirectRepetition(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    var directlyRepeatedChildNodes = childNodes.filter(function(childNode) {
        return _instanceof(childNode, _directly1.default);
    }), directlyRepeatedChildNodesLength = directlyRepeatedChildNodes.length;
    if (directlyRepeatedChildNodesLength > 0) {
        var lastDirectlyRepeatedChildNode = last(directlyRepeatedChildNodes), index = childNodes.indexOf(lastDirectlyRepeatedChildNode), start = 0, deleteCount = index + 1, repeatedNode = lastDirectlyRepeatedChildNode, rewrittenNode = _rewritten.default.fromRepeatedNode(repeatedNode), deletedChildNodes = childNodes.splice(start, deleteCount, rewrittenNode);
        nonTerminalNode = rewrittenNode; ///
        childNodes = nonTerminalNode.getChildNodes(); ///
        deletedChildNodes.pop();
        unshift(childNodes, deletedChildNodes);
        rewriteDirectRepetition(nonTerminalNode);
    }
}
function rewriteIndirectReduction(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstChildNodeIndirectlyReducedNode = _instanceof(firstChildNode, _indirectly.default);
    if (firstChildNodeIndirectlyReducedNode) {
        var firstIndirectlyReducedChildNode = firstChildNode, reducedNode = firstIndirectlyReducedChildNode, rewrittenNode = _rewritten.default.fromReducedNode(reducedNode), start = 0, deleteCount = 1;
        childNodes.splice(start, deleteCount, rewrittenNode);
    }
}
function rewriteIndirectRepetition(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), indirectlyRepeatedChildNode = childNodes.find(function(childNode) {
        return _instanceof(childNode, _indirectly1.default);
    }) || null;
    if (indirectlyRepeatedChildNode !== null) {
        var _childNodes;
        var index = childNodes.indexOf(indirectlyRepeatedChildNode), start = index, deleteCount = 1, indirectlyRepeatedChildNodeChildNodes = indirectlyRepeatedChildNode.getChildNodes();
        (_childNodes = childNodes).splice.apply(_childNodes, [
            start,
            deleteCount
        ].concat(_toConsumableArray(indirectlyRepeatedChildNodeChildNodes)));
    }
}

//# sourceMappingURL=data:application/json;base64,