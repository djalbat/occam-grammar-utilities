"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rewriteNodes;
    }
});
var _necessary = require("necessary");
var _occamParsers = require("occam-parsers");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/indirectly"));
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var push = _necessary.arrayUtilities.push, last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first, front = _necessary.arrayUtilities.front, filter = _necessary.arrayUtilities.filter, forwardsSome = _necessary.arrayUtilities.forwardsSome;
function rewriteNodes(node) {
    rewriteRepeatedNodes(node);
    rewriteReducedNodes(node);
    removeEpsilonNodes(node);
}
function removeEpsilonNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, childNodes = nonTerminalNode.getChildNodes();
        filter(childNodes, function(childNode) {
            var childNodeEpsilonNode = _instanceof(childNode, _occamParsers.EpsilonNode);
            if (!childNodeEpsilonNode) {
                return true;
            }
        });
        childNodes.forEach(function(childNode) {
            var _$node = childNode; ///
            removeEpsilonNodes(_$node);
        });
    }
}
function rewriteReducedNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, childNodes = nonTerminalNode.getChildNodes(), nonTerminalNodeIndirectlyReducedNode = _instanceof(nonTerminalNode, _indirectly.default);
        if (nonTerminalNodeIndirectlyReducedNode) {
            var indirectlyReducedNode = nonTerminalNode, indirectlyReducedNodeRuleName = indirectlyReducedNode.getRuleName(), reducedRuleName = indirectlyReducedNodeRuleName, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName);
            indirectlyReducedNode.setRuleName(ruleName);
        }
        var firstChildNode = first(childNodes), firstChildNodeDirectlyReducedNode = _instanceof(firstChildNode, _directly.default);
        if (firstChildNodeDirectlyReducedNode) {
            var _childNodes;
            var directlyReducedNode = firstChildNode, start = 0, deleteCount = 1, directlyReducedNodeChildNodes = directlyReducedNode.getChildNodes();
            (_childNodes = childNodes).splice.apply(_childNodes, [
                start,
                deleteCount
            ].concat(_toConsumableArray(directlyReducedNodeChildNodes)));
        }
        childNodes.forEach(function(childNode) {
            var _$node = childNode;
            rewriteReducedNodes(_$node);
        });
    }
}
function rewriteRepeatedNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, childNodes = nonTerminalNode.getChildNodes(), lastChildNode = last(childNodes), lastChildNodeDirectlyRepeatedNode = _instanceof(lastChildNode, _directly1.default), lastChildNodeIndirectlyRepeatedNode = _instanceof(lastChildNode, _indirectly1.default);
        if (lastChildNodeDirectlyRepeatedNode) {
            var _childNodes;
            var directlyRepeatedNode = lastChildNode, directlyRepeatedNodeRuleName = directlyRepeatedNode.getRuleName(), repeatedRuleName = directlyRepeatedNodeRuleName, ruleName = (0, _ruleName.ruleNameFromRepeatedRuleName)(repeatedRuleName), childNodesFront = front(childNodes), start = 0, deleteCount = Infinity, newNonTerminalNode = new _occamParsers.NonTerminalNode(ruleName, childNodesFront), directlyRepeatedNodeChildNodes = directlyRepeatedNode.getChildNodes();
            (_childNodes = childNodes).splice.apply(_childNodes, [
                start,
                deleteCount,
                newNonTerminalNode
            ].concat(_toConsumableArray(directlyRepeatedNodeChildNodes)));
        }
        if (lastChildNodeIndirectlyRepeatedNode) {
            var firstChildNode = first(childNodes), directlyReducedNode = firstChildNode, indirectlyRepeatedNode = lastChildNode, directlyReducedNodeRuleName = directlyReducedNode.getRuleName(), reducedRuleName = directlyReducedNodeRuleName, ruleName1 = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName), childNodesLength = childNodes.length, start1 = 0, deleteCount1 = childNodesLength - 1, newNonTerminalNodeChildNodes = childNodes.splice(start1, deleteCount1), indirectlyRepeatedNodeChildNodes = indirectlyRepeatedNode.getChildNodes(), newNonTerminalNode1 = new _occamParsers.NonTerminalNode(ruleName1, newNonTerminalNodeChildNodes);
            childNodes.pop();
            push(childNodes, [
                newNonTerminalNode1
            ].concat(_toConsumableArray(indirectlyRepeatedNodeChildNodes)));
        }
        forwardsSome(childNodes, function(childNode, index) {
            var childNodeIndirectlyRepeatedNode = _instanceof(childNode, _indirectly1.default);
            if (childNodeIndirectlyRepeatedNode) {
                var indirectlyRepeatedNode = childNode, indirectlyRepeatedNodeChildNodes = indirectlyRepeatedNode.getChildNodes(), indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), repeatedRuleName = indirectlyRepeatedNodeRuleName, ruleName = (0, _ruleName.ruleNameFromRepeatedRuleName)(repeatedRuleName), start = 0, deleteCount = index, leadingChildNodes = childNodes.splice(start, deleteCount), newNonTerminalNodeChildNodes = _toConsumableArray(leadingChildNodes).concat(_toConsumableArray(indirectlyRepeatedNodeChildNodes)), newNonTerminalNode = new _occamParsers.NonTerminalNode(ruleName, newNonTerminalNodeChildNodes);
                childNodes.shift();
                childNodes.unshift(newNonTerminalNode);
                return true;
            }
        });
        childNodes.forEach(function(childNode) {
            var _$node = childNode; ///
            rewriteRepeatedNodes(_$node);
        });
    }
}

//# sourceMappingURL=data:application/json;base64,