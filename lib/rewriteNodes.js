"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rewriteNodes;
    }
});
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _rewritten = /*#__PURE__*/ _interopRequireDefault(require("./node/rewritten"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./node/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./node/repeated/indirectly"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first, front = _necessary.arrayUtilities.front, filter = _necessary.arrayUtilities.filter, unshift = _necessary.arrayUtilities.unshift;
function rewriteNodes(node) {
    var nonTerminalNode = node; ///
    rewrite(nonTerminalNode);
    removeEpsilons(nonTerminalNode);
}
function rewrite(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var _$nonTerminalNode = childNode; ///
            rewrite(_$nonTerminalNode);
        }
    });
    rewriteIndirectReduction(nonTerminalNode);
    rewriteDirectRecursionAndTrailingIndirectRepetition(nonTerminalNode);
}
function removeEpsilons(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    filter(childNodes, function(childNode) {
        var childNodeEpsilonNode = _instanceof(childNode, _occamParsers.EpsilonNode);
        if (!childNodeEpsilonNode) {
            return true;
        }
    });
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var _$nonTerminalNode = childNode;
            removeEpsilons(_$nonTerminalNode);
        }
    });
}
function rewriteDirectRecursion(nonTerminalNode) {
    var childNodes;
    childNodes = nonTerminalNode.getChildNodes();
    var firstChildNode = first(childNodes), directlyRepeatedChildNodes = childNodes.filter(function(childNode) {
        return _instanceof(childNode, _directly1.default);
    }), firstDirectlyReducedChildNode = firstChildNode, directlyRepeatedChildNodesLength = directlyRepeatedChildNodes.length;
    nonTerminalNode = rewriteTrailingDirectRepetition(nonTerminalNode); ///
    nonTerminalNode = rewriteLeadingIndirectRepetition(nonTerminalNode); ///
    childNodes = nonTerminalNode.getChildNodes();
    if (directlyRepeatedChildNodesLength > 1) {
        var directlyRepeatedChildNodesFront = front(directlyRepeatedChildNodes);
        unshift(childNodes, directlyRepeatedChildNodesFront);
    }
    childNodes.unshift(firstDirectlyReducedChildNode);
    rewrite(nonTerminalNode);
}
function rewriteDirectReduction(nonTerminalNode) {
    var ruleName = nonTerminalNode.getRuleName(), childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstDirectlyReducedChildNode = firstChildNode, reducedNode = firstDirectlyReducedChildNode, rewrittenNode = _rewritten.default.fromReducedNode(reducedNode), childNodesLength = childNodes.length, rewrittenNodeRuleName = rewrittenNode.getRuleName(), start = 0, deleteCount = 1;
    if (childNodesLength === 1 && ruleName === rewrittenNodeRuleName) {
        var _childNodes;
        var rewrittenNodeChildNodes = rewrittenNode.getChildNodes();
        (_childNodes = childNodes).splice.apply(_childNodes, [
            start,
            deleteCount
        ].concat(_toConsumableArray(rewrittenNodeChildNodes)));
    } else {
        childNodes.splice(start, deleteCount, rewrittenNode);
    }
}
function rewriteIndirectReduction(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstChildNodeIndirectlyReducedNode = _instanceof(firstChildNode, _indirectly.default);
    if (firstChildNodeIndirectlyReducedNode) {
        var firstIndirectlyReducedChildNode = firstChildNode, reducedNode = firstIndirectlyReducedChildNode, rewrittenNode = _rewritten.default.fromReducedNode(reducedNode), start = 0, deleteCount = 1;
        childNodes.splice(start, deleteCount, rewrittenNode);
    }
}
function rewriteTrailingDirectRepetition(nonTerminalNode) {
    var ruleName = nonTerminalNode.getRuleName(), childNodes = nonTerminalNode.getChildNodes(), directlyRepeatedChildNodes = childNodes.filter(function(childNode) {
        return _instanceof(childNode, _directly1.default);
    }), directlyRepeatedChildNodesLength = directlyRepeatedChildNodes.length, lastDirectlyRepeatedChildNode = last(directlyRepeatedChildNodes), trailingDirectlyRepeatedNode = lastDirectlyRepeatedChildNode, repeatedNode = trailingDirectlyRepeatedNode, rewrittenNode = _rewritten.default.fromRepeatedNode(repeatedNode), childNodesLength = childNodes.length, rewrittenNodeRuleName = rewrittenNode.getRuleName(), start = 0, deleteCount = 1 + directlyRepeatedChildNodesLength;
    if (childNodesLength === 1 && ruleName === rewrittenNodeRuleName) {
        var _childNodes;
        var rewrittenNodeChildNodes = rewrittenNode.getChildNodes();
        (_childNodes = childNodes).splice.apply(_childNodes, [
            start,
            deleteCount
        ].concat(_toConsumableArray(rewrittenNodeChildNodes)));
    } else {
        childNodes.splice(start, deleteCount, rewrittenNode);
        nonTerminalNode = rewrittenNode;
    }
    childNodes.splice(start, deleteCount, rewrittenNode);
    return nonTerminalNode;
}
function rewriteLeadingIndirectRepetition(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstChildNodeIndirectlyRepeatedNode = _instanceof(firstChildNode, _indirectly1.default);
    if (firstChildNodeIndirectlyRepeatedNode) {
        var leadingIndirectlyRepeatedNode = firstChildNode, repeatedNode = leadingIndirectlyRepeatedNode, rewrittenNode = _rewritten.default.fromRepeatedNode(repeatedNode), start = 0, deleteCount = 1;
        childNodes.splice(start, deleteCount, rewrittenNode);
        nonTerminalNode = rewrittenNode; ///
        nonTerminalNode = rewriteLeadingIndirectRepetition(nonTerminalNode);
    }
    return nonTerminalNode;
}
function rewriteTrailingIndirectRepetition(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), lastChildNode = last(childNodes), lastChildNodeIndirectlyRepeatedNode = _instanceof(lastChildNode, _indirectly1.default);
    if (lastChildNodeIndirectlyRepeatedNode) {
        var _childNodes;
        var trailingIndirectlyRepeatedChildNode = lastChildNode, childNodesLength = childNodes.length, start = childNodesLength - 1, deleteCount = 1, indirectlyRepeatedNodeChildNodes = trailingIndirectlyRepeatedChildNode.getChildNodes();
        (_childNodes = childNodes).splice.apply(_childNodes, [
            start,
            deleteCount
        ].concat(_toConsumableArray(indirectlyRepeatedNodeChildNodes)));
    }
}
function rewriteDirectRecursionAndTrailingIndirectRepetition(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes), firstChildNodeDirectlyReducedChildNode = _instanceof(firstChildNode, _directly.default);
    if (firstChildNodeDirectlyReducedChildNode) {
        rewriteTrailingIndirectRepetition(nonTerminalNode);
        var childNodes1 = nonTerminalNode.getChildNodes(), directlyRepeatedChildNodes = childNodes1.filter(function(childNode) {
            return _instanceof(childNode, _directly1.default);
        }), directlyRepeatedChildNodesLength = directlyRepeatedChildNodes.length;
        directlyRepeatedChildNodesLength === 0 ? rewriteDirectReduction(nonTerminalNode) : rewriteDirectRecursion(nonTerminalNode);
    }
}

//# sourceMappingURL=data:application/json;base64,