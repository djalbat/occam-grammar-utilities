'use strict';

var exampleBNF = '\n\n\n      document             ::=  ( rule | error )+ ;\n\n      rule                 ::=  name "::=" definitions ";" ;\n\n      definitions          ::=  definition ( "|" definition )* ;\n\n      definition           ::=  part+ ;\n\n      noWhitespacePart     ::=  "<NO_WHITESPACE>" part ;\n\n      optionalPart         ::=  part<NO_WHITESPACE>"?" ;\n\n      zeroOrMoreParts      ::=  part<NO_WHITESPACE>"*" ;\n\n      oneOrMoreParts       ::=  part<NO_WHITESPACE>"+" ;\n\n      lookAheadPart        ::=  part<NO_WHITESPACE>"!" ;\n\n      groupOfParts         ::=  "(" part part+ ")" ;\n\n      choiceOfParts        ::=  "(" part ( "|" part )+ ")" ;\n\n      part                 ::=  noWhitespacePart\n\n                             |  optionalPart\n\n                             |  zeroOrMoreParts\n\n                             |  oneOrMoreParts\n\n                             |  lookAheadPart\n\n                             |  groupOfParts\n\n                             |  choiceOfParts\n\n                             |  ruleName\n\n                             |  regularExpression\n\n                             |  significantTokenType\n\n                             |  terminalSymbol\n\n                             |  endOfLine\n\n                             |  epsilon\n\n                             |  wildcard\n\n                             ;\n\n      name                 ::=  [name] ;\n\n      ruleName             ::=  [name] ;\n\n      regularExpression    ::=  [regular-expression] ;\n\n      significantTokenType ::=  [type] ;\n\n      terminalSymbol       ::=  [string-literal] ;\n\n      endOfLine            ::=  "<END_OF_LINE>" ;\n\n      epsilon              ::=  "\u03B5" ;\n\n      wildcard             ::=  "." ;\n\n      error                ::=  . ;\n\n\n';

module.exports = exampleBNF;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL2JuZi5qcyJdLCJuYW1lcyI6WyJleGFtcGxlQk5GIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsb3hEQUFOOztBQTRFQUMsT0FBT0MsT0FBUCxHQUFpQkYsVUFBakIiLCJmaWxlIjoiYm5mLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBleGFtcGxlQk5GID0gYFxuXG5cbiAgICAgIGRvY3VtZW50ICAgICAgICAgICAgIDo6PSAgKCBydWxlIHwgZXJyb3IgKSsgO1xuXG4gICAgICBydWxlICAgICAgICAgICAgICAgICA6Oj0gIG5hbWUgXCI6Oj1cIiBkZWZpbml0aW9ucyBcIjtcIiA7XG5cbiAgICAgIGRlZmluaXRpb25zICAgICAgICAgIDo6PSAgZGVmaW5pdGlvbiAoIFwifFwiIGRlZmluaXRpb24gKSogO1xuXG4gICAgICBkZWZpbml0aW9uICAgICAgICAgICA6Oj0gIHBhcnQrIDtcblxuICAgICAgbm9XaGl0ZXNwYWNlUGFydCAgICAgOjo9ICBcIjxOT19XSElURVNQQUNFPlwiIHBhcnQgO1xuXG4gICAgICBvcHRpb25hbFBhcnQgICAgICAgICA6Oj0gIHBhcnQ8Tk9fV0hJVEVTUEFDRT5cIj9cIiA7XG5cbiAgICAgIHplcm9Pck1vcmVQYXJ0cyAgICAgIDo6PSAgcGFydDxOT19XSElURVNQQUNFPlwiKlwiIDtcblxuICAgICAgb25lT3JNb3JlUGFydHMgICAgICAgOjo9ICBwYXJ0PE5PX1dISVRFU1BBQ0U+XCIrXCIgO1xuXG4gICAgICBsb29rQWhlYWRQYXJ0ICAgICAgICA6Oj0gIHBhcnQ8Tk9fV0hJVEVTUEFDRT5cIiFcIiA7XG5cbiAgICAgIGdyb3VwT2ZQYXJ0cyAgICAgICAgIDo6PSAgXCIoXCIgcGFydCBwYXJ0KyBcIilcIiA7XG5cbiAgICAgIGNob2ljZU9mUGFydHMgICAgICAgIDo6PSAgXCIoXCIgcGFydCAoIFwifFwiIHBhcnQgKSsgXCIpXCIgO1xuXG4gICAgICBwYXJ0ICAgICAgICAgICAgICAgICA6Oj0gIG5vV2hpdGVzcGFjZVBhcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBvcHRpb25hbFBhcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB6ZXJvT3JNb3JlUGFydHNcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBvbmVPck1vcmVQYXJ0c1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIGxvb2tBaGVhZFBhcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBncm91cE9mUGFydHNcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBjaG9pY2VPZlBhcnRzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgcnVsZU5hbWVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICByZWd1bGFyRXhwcmVzc2lvblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIHNpZ25pZmljYW50VG9rZW5UeXBlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgdGVybWluYWxTeW1ib2xcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBlbmRPZkxpbmVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBlcHNpbG9uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgd2lsZGNhcmRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG5cbiAgICAgIG5hbWUgICAgICAgICAgICAgICAgIDo6PSAgW25hbWVdIDtcblxuICAgICAgcnVsZU5hbWUgICAgICAgICAgICAgOjo9ICBbbmFtZV0gO1xuXG4gICAgICByZWd1bGFyRXhwcmVzc2lvbiAgICA6Oj0gIFtyZWd1bGFyLWV4cHJlc3Npb25dIDtcblxuICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGUgOjo9ICBbdHlwZV0gO1xuXG4gICAgICB0ZXJtaW5hbFN5bWJvbCAgICAgICA6Oj0gIFtzdHJpbmctbGl0ZXJhbF0gO1xuXG4gICAgICBlbmRPZkxpbmUgICAgICAgICAgICA6Oj0gIFwiPEVORF9PRl9MSU5FPlwiIDtcblxuICAgICAgZXBzaWxvbiAgICAgICAgICAgICAgOjo9ICBcIs61XCIgO1xuXG4gICAgICB3aWxkY2FyZCAgICAgICAgICAgICA6Oj0gIFwiLlwiIDtcblxuICAgICAgZXJyb3IgICAgICAgICAgICAgICAgOjo9ICAuIDtcblxuXG5gO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4YW1wbGVCTkY7XG4iXX0=