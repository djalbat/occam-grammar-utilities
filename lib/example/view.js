"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _easyWithStyle = /*#__PURE__*/ _interopRequireDefault(require("easy-with-style"));
var _easy = require("easy");
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _easyLayout = require("easy-layout");
var _paragraph = /*#__PURE__*/ _interopRequireDefault(require("./paragraph"));
var _subHeading = /*#__PURE__*/ _interopRequireDefault(require("./subHeading"));
var _sizeable = /*#__PURE__*/ _interopRequireDefault(require("./div/sizeable"));
var _bnf = /*#__PURE__*/ _interopRequireDefault(require("./textarea/bnf"));
var _rules = /*#__PURE__*/ _interopRequireDefault(require("../utilities/rules"));
var _content = /*#__PURE__*/ _interopRequireDefault(require("./textarea/content"));
var _parseTree = /*#__PURE__*/ _interopRequireDefault(require("./textarea/parseTree"));
var _startRuleName = /*#__PURE__*/ _interopRequireDefault(require("./input/startRuleName"));
var _lexicalPattern = /*#__PURE__*/ _interopRequireDefault(require("./input/lexicalPattern"));
var _adjustedBNF = /*#__PURE__*/ _interopRequireDefault(require("./textarea/adjustedBNF"));
var _eliminateLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("../eliminateLeftRecursion"));
var _removeOrRenameIntermediateNodes = /*#__PURE__*/ _interopRequireDefault(require("../removeOrRenameIntermediateNodes"));
var _removeOrRenameIntermediateNodes1 = /*#__PURE__*/ _interopRequireDefault(require("./checkbox/removeOrRenameIntermediateNodes"));
var _parser = require("../utilities/parser");
var _constants = require("../constants");
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function _construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "\n\n  padding: 1rem;\n  \n"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
var rulesAsString = _rules.default.rulesAsString, ruleMapFromRules = _rules.default.ruleMapFromRules, rulesFromStartRuleAndRuleMap = _rules.default.rulesFromStartRuleAndRuleMap, startRuleFromRulesAndStartRuleName = _rules.default.startRuleFromRulesAndStartRuleName;
var View = /*#__PURE__*/ function(Element) {
    _inherits(View, Element);
    var _super = _createSuper(View);
    function View() {
        _classCallCheck(this, View);
        var _this;
        _this = _super.apply(this, arguments);
        _defineProperty(_assertThisInitialized(_this), "keyUpHandler", function(event, element) {
            _this.changeHandler();
        });
        _defineProperty(_assertThisInitialized(_this), "changeHandler", function(event, element) {
            try {
                var bnf = _this.getBNF(), startRuleName = _this.getStartRuleName();
                var rules = (0, _parser.rulesFromBNF)(bnf);
                var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRulesAndStartRuleName(rules, startRuleName);
                (0, _eliminateLeftRecursion.default)(startRule, ruleMap);
                rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap);
                var multiLine = true, rulesString = rulesAsString(rules, multiLine), adjustedBNF = rulesString; ///
                _this.setAdjustedBNF(adjustedBNF);
                var parseTree = _this.getParseTree(startRule, ruleMap);
                _this.setParseTree(parseTree);
            } catch (error) {
                console.log(error);
            }
        });
        return _this;
    }
    _createClass(View, [
        {
            key: "getParseTree",
            value: function getParseTree(startRule, ruleMap) {
                var parseTree = null;
                var lexicalPattern = this.getLexicalPattern(), unassigned = _constants.UNASSIGNED_ENTRY, custom = lexicalPattern, entries = [
                    {
                        custom: custom
                    },
                    {
                        unassigned: unassigned
                    }
                ], basicLexer = _occamLexers.BasicLexer.fromEntries(entries), basicParser = new _occamParsers.BasicParser(startRule, ruleMap), content = this.getContent(), tokens = basicLexer.tokenise(content), node = basicParser.parse(tokens);
                if (node !== null) {
                    var removeOrRenameIntermediateNodesCheckboxChecked = this.isRemoveOrRenameIntermediateNodesCheckboxChecked();
                    if (removeOrRenameIntermediateNodesCheckboxChecked) {
                        (0, _removeOrRenameIntermediateNodes.default)(node);
                    }
                    var abridged = true;
                    parseTree = node.asParseTree(tokens, abridged);
                }
                return parseTree;
            }
        },
        {
            key: "childElements",
            value: function childElements() {
                return [
                    /*#__PURE__*/ React.createElement(_easyLayout.ColumnsDiv, null, /*#__PURE__*/ React.createElement(_sizeable.default, null, /*#__PURE__*/ React.createElement(_easyLayout.RowsDiv, null, /*#__PURE__*/ React.createElement(_subHeading.default, null, "Lexical pattern"), /*#__PURE__*/ React.createElement(_lexicalPattern.default, {
                        onKeyUp: this.keyUpHandler
                    }), /*#__PURE__*/ React.createElement(_subHeading.default, null, "BNF"), /*#__PURE__*/ React.createElement(_bnf.default, {
                        onKeyUp: this.keyUpHandler
                    }), /*#__PURE__*/ React.createElement(_subHeading.default, null, "Adjusted BNF"), /*#__PURE__*/ React.createElement(_adjustedBNF.default, {
                        readOnly: true
                    }))), /*#__PURE__*/ React.createElement(_easyLayout.VerticalSplitterDiv, null), /*#__PURE__*/ React.createElement(_easyLayout.ColumnDiv, null, /*#__PURE__*/ React.createElement(_easyLayout.RowsDiv, null, /*#__PURE__*/ React.createElement(_subHeading.default, null, "Start rule name"), /*#__PURE__*/ React.createElement(_startRuleName.default, {
                        onKeyUp: this.keyUpHandler
                    }), /*#__PURE__*/ React.createElement(_subHeading.default, null, "Content"), /*#__PURE__*/ React.createElement(_content.default, {
                        onKeyUp: this.keyUpHandler
                    }), /*#__PURE__*/ React.createElement(_subHeading.default, null, "Parse tree"), /*#__PURE__*/ React.createElement(_parseTree.default, null), /*#__PURE__*/ React.createElement(_paragraph.default, null, /*#__PURE__*/ React.createElement(_removeOrRenameIntermediateNodes1.default, {
                        onChange: this.changeHandler,
                        checked: true
                    }), "Remove or rename intermediate nodes"))))
                ];
            }
        },
        {
            key: "initialise",
            value: function initialise() {
                this.assignContext();
                var _constructor = this.constructor, initialBNF = _constructor.initialBNF, initialContent = _constructor.initialContent, initialStartRuleName = _constructor.initialStartRuleName, initialLexicalPattern = _constructor.initialLexicalPattern, bnf = initialBNF, content = initialContent, startRuleName = initialStartRuleName, lexicalPattern = initialLexicalPattern; ///
                this.setBNF(bnf);
                this.setContent(content);
                this.setStartRuleName(startRuleName);
                this.setLexicalPattern(lexicalPattern);
                this.keyUpHandler();
            }
        }
    ]);
    return View;
}(_wrapNativeSuper(_easy.Element));
_defineProperty(View, "initialBNF", 'document                             ::=   ( topLevelInstruction | verticalSpace | error )+ ;\n\n\n\ntopLevelInstruction                  ::=   rule \n\n                                       |   axiom \n\n                                       |   lemma \n\n                                       |   theorem \n\n                                       |   conjecture \n\n                                       |   metalemma \n\n                                       |   metatheorem \n\n                                       |   metaconjecture\n\n                                       |   typeDeclaration \n                                           \n                                       |   variableDeclaration \n                                           \n                                       |   comparatorDeclaration \n                                           \n                                       |   combinatorDeclaration \n                                           \n                                       |   constructorDeclaration \n                                           \n                                       |   disjointTypeDeclaration \n                                           \n                                       |   metavariableDeclaration \n                                           \n                                       |   dependentTypeDeclaration \n                                           \n                                       |   typesDeclaration \n                                           \n                                       |   variablesDeclaration \n                                           \n                                       |   comparatorsDeclaration \n                                           \n                                       |   combinatorsDeclaration \n                                           \n                                       |   constructorsDeclaration \n                                           \n                                       |   disjointTypesDeclaration \n                                           \n                                       |   metavariablesDeclaration \n                                           \n                                       |   dependentTypesDeclaration \n                                           \n                                       ;\n\n\n\nverticalSpace                        ::=   <END_OF_LINE>+ ;\n\n\n\nerror                                ::=   . ;\n\n\n\nrule                                 ::=   "Rule" "(" label ( "," label )* ")" <END_OF_LINE> ( premise | premises )? conclusion metaproof? ;\n\naxiom                                ::=   "Axiom" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) ; \n\nlemma                                ::=   "Lemma" "(" label ( "," label )* ")"? <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof ;\n\ntheorem                              ::=   "Theorem" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof ;\n\nconjecture                           ::=   "Conjecture" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof? ;\n\nmetalemma                            ::=   "Metalemma" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) metaproof ;\n\nmetatheorem                          ::=   "Metatheorem" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) metaproof ;\n\nmetaconjecture                       ::=   "Metaconjecture" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) ;\n\ntypeDeclaration                      ::=   "Type" type ( ":" type )? <END_OF_LINE> ;\n \nvariableDeclaration                  ::=   "Variable" variable ":" type <END_OF_LINE> ;\n \ncomparatorDeclaration                ::=   "Comparator" statement <END_OF_LINE> ;\n \ncombinatorDeclaration                ::=   "Combinator" expression ( ":" type )? <END_OF_LINE> ;\n \nconstructorDeclaration               ::=   "Constructor" term ( ":" type )? <END_OF_LINE> ;\n \ndisjointTypeDeclaration              ::=   "DisjointType" disjointType ":" type ( "," type )+ <END_OF_LINE> ;\n                                       \nmetavariableDeclaration              ::=   "Metavariable" metavariable ":" ( "Statement" | "Context" ) <END_OF_LINE> ;\n \ndependentTypeDeclaration             ::=   "DependentType" dependentType ":" type <END_OF_LINE> ;\n                                       \ntypesDeclaration                     ::=   "Types" type ( ":"  type )? <END_OF_LINE> ;\n\nvariablesDeclaration                 ::=   "Variables" variable ( "," variable )+ ":" type <END_OF_LINE> ;\n \ncomparatorsDeclaration               ::=   "Comparators" statement ( "," statement )+ <END_OF_LINE> ;\n \ncombinatorsDeclaration               ::=   "Combinators" expression ( "," expression )+ ( ":" type )? <END_OF_LINE> ;\n \nconstructorsDeclaration              ::=   "Constructors" term ( "," term )+ ( ":" type )? <END_OF_LINE> ;\n \ndisjointTypesDeclaration             ::=   "DisjointTypes" disjointType ( "," disjointType )+ ":" type ( "," type )+ <END_OF_LINE> ;\n \nmetavariablesDeclaration             ::=   "Metavariables" metavariable ( "," metavariable )+ ":" ( "Statement" | "Context" ) <END_OF_LINE> ;\n \ndependentTypesDeclaration            ::=   "DependentTypes" dependentType ( "," dependentType )+ ":" type <END_OF_LINE> ;\n  \n\n  \npremise                              ::=   "Premise" <END_OF_LINE> unqualifiedMetastatement ;\n\npremises                             ::=   "Premises" <END_OF_LINE> unqualifiedMetastatement unqualifiedMetastatement+ ;\n\nconclusion                           ::=   "Conclusion" <END_OF_LINE> unqualifiedMetastatement ;\n\n\n\nmetaproof                            ::=   "Proof" <END_OF_LINE> \n\n                                           metastatementDefinition*\n\n                                           metaProofDerivation? \n                                          \n                                           qualifiedMetastatement ;\n                                          \n                                          \n\nmetaProofDerivation                  ::=   ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+  \n\n                                           "Therefore" <END_OF_LINE> ;                                           \n\nmetaIndicativeConditional            ::=   "Suppose" <END_OF_LINE> unqualifiedMetastatement+ \n\n                                           "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\nmetaSublemma                         ::=   "Suppose" <END_OF_LINE> \n\n                                           ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+ \n\n                                           ( \n                                          \n                                             "Then" <END_OF_LINE> \n                                            \n                                             ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+ \n                                          \n                                           )? \n                                          \n                                           "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\n\n\nproof                                ::=   "Proof" <END_OF_LINE> \n\n                                           statementDefinition*\n\n                                           proofDerivation? \n                                          \n                                           qualifiedStatement ;\n                                                                                         \n                                                                                         \n                                                                                         \nproofDerivation                      ::=   ( sublemma | qualifiedStatement )+ \n\n                                           "Therefore" <END_OF_LINE> ;\n\nindicativeConditional                ::=   "Suppose" <END_OF_LINE> unqualifiedStatement+ \n\n                                           "Hence" <END_OF_LINE> qualifiedStatement ;\n\nsublemma                             ::=   "Suppose" <END_OF_LINE> \n\n                                           ( subLemma | qualifiedStatement )+ \n\n                                           ( \n                                          \n                                             "Then" <END_OF_LINE> \n                                            \n                                             ( subLemma | qualifiedStatement )+ \n                                          \n                                           )? \n                                          \n                                           "Hence" <END_OF_LINE> qualifiedStatement ;\n\n\n\nmetastatementDefinition              ::=   "Let" unqualifiedMetastatement ;                                           \n                                          \nstatementDefinition                  ::=   "Let" unqualifiedStatement ;                                           \n\n\n\nunqualifiedMetastatement!            ::=   metastatement <END_OF_LINE> \n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedMetastatement!              ::=   metastatement qualification? <END_OF_LINE> \n\n                                       |   nonsense... qualification? <END_OF_LINE> \n                                        \n                                       ;\n\nunqualifiedStatement!                ::=   statement <END_OF_LINE>\n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedStatement!                  ::=   statement qualification? <END_OF_LINE> \n\n                                       |   nonsense... qualification? <END_OF_LINE> \n                                       \n                                       ;\n\n\n\nnonsense                             ::=   ( "by" | "from" | [name] | [custom] | [special] | [reserved] | [unassigned] )+ ;\n\n\n\nargument                             ::=   type | expression ;\n\n\n\nqualification                        ::=   ( "by" | "from" ) reference ;\n\n\n\ndependentType                        ::=   [name]<NO_WHITESPACE>"(" term ")" ;\n\n\n\nmetavariable                         ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\nreference                            ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\ncontext                              ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\nlabel                                ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\n\n\ndisjointType                         ::=   [name] ;\n\nvariable                             ::=   [name] ;\n\ntype                 ::= "String"\n\n                       | "Number"\n\n                       | "RealNumber"\n\n                       | "RationalNumber"\n\n                       | "Integer"\n\n                       | "NaturalNumber"\n\n                       | _\n\n                       ;\n\nterm!                ::= stringTerm\n\n                       | arithmeticTerm\n\n                       | _\n\n                       ;\n\nexpression!          ::= stringExpression\n\n                       | arithmeticExpression\n\n                       | _\n\n                       ;\n\nstatement!           ::= type ( "<" | "<=" | ">=" | ">" ) type\n\n                       | stringExpression ( "<" | "<=" | ">=" | ">" ) stringExpression\n\n                       | arithmeticAtatement\n\n                       | typeAssertion\n\n                       | equality\n\n                       ;\n\ntypeAssertion        ::= expression ":" type ;\n\nequality             ::= expression "=" expression ;\n\nmetastatement!       ::= contextDefinition\n\n                       | proofAssertion\n\n                       | metavariable\n\n                       | subproof\n\n                       ;\n\ncontextDefinition    ::= context "=" ( judgement | context ) ( "," ( judgement | context ) )* ;\n\nproofAssertion       ::= context "|-" judgement ;\n\njudgement            ::= reference "::" metastatement ;\n\nsubproof             ::= "[" metastatement "]" "..." metastatement ;\n\narithmeticTerm       ::= integer\n\n                       | naturalNumber\n\n                       | variable\n\n                       ;\n\narithmeticExpression ::= "(" argument ")"\n\n                       | argument ( "+" | "-" | "\xd7" | "\xf7" ) argument\n\n                       | arithmeticTerm\n\n                       ;\n\narithmeticAtatement  ::= argument ( "<" | "<=" | ">=" | ">" ) argument ;\n\nnaturalNumber        ::= "|" ( type | stringExpression ) "|"\n\n                       | "successor" <NO_WHITESPACE> "(" argument ")"\n\n                       | "predecessor" <NO_WHITESPACE> "(" argument ")"\n\n                       | "zero"\n\n                       | variable\n\n                       ;\n\ninteger              ::= "successor" <NO_WHITESPACE> "(" argument ")"\n\n                       | "predecessor" <NO_WHITESPACE> "(" argument ")"\n\n                       | "-" <NO_WHITESPACE> argument\n\n                       | naturalNumber\n\n                       | variable\n\n                       ;\n\nstringTerm           ::= operation\n\n                       | operator\n\n                       | [string-literal]\n\n                       | variable\n\n                       ;\n\nstringExpression     ::= "(" stringExpression ")"\n\n                       | type "+" type\n\n                       | type <NO_WHITESPACE> ( ( "[" "..." type "]" ) | ( "[" type "..." type "]" ) | ( "[" type "..." "]" ) )\n\n                       | stringExpression "+" stringExpression\n\n                       | stringExpression <NO_WHITESPACE> ( ( "[" "..." arithmeticExpression "]" ) | ( "[" arithmeticExpression "..." arithmeticExpression "]" ) | ( "[" arithmeticExpression "..." "]" ) )\n\n                       | stringTerm\n\n                       ;\n\noperation            ::= operator <NO_WHITESPACE> "(" stringExpression ")" ;\n\noperator             ::= "insert" <NO_WHITESPACE> "(" naturalNumber "," stringExpression ")"\n\n                       | "delete" <NO_WHITESPACE> "(" naturalNumber "," naturalNumber ")"\n\n                       | "empty" <NO_WHITESPACE> "(" <NO_WHITESPACE> ")"\n\n                       ;');
_defineProperty(View, "initialContent", "chfegegh");
_defineProperty(View, "initialStartRuleName", "S");
_defineProperty(View, "initialLexicalPattern", ".");
_defineProperty(View, "tagName", "div");
_defineProperty(View, "defaultProperties", {
    className: "view"
});
var _default = (0, _easyWithStyle.default)(View)(_templateObject());

//# sourceMappingURL=data:application/json;base64,