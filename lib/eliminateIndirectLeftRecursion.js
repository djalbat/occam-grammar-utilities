"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var find = _necessary.arrayUtilities.find, push = _necessary.arrayUtilities.push, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
var count = 0;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(rule, leftRecursiveDefinitions);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        greatestIndirectlyLeftRecursiveDefinition = ++count > 1 ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function directlyReduceRule(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = directlyLeftRecursiveDefinition.getRule(), disallowIsolated = false, directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, disallowIsolated);
    if (directlyReducedRule !== null) {
        var directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    return directlyReducedRule;
}
function directlyRepeatRule(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = directlyLeftRecursiveDefinition.getRule(), directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    return directlyRepeatedRule;
}
function indirectlyReduceRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName);
    var indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyReducedRule === null) {
        indirectlyReducedRule = _indirectly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions);
        ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
    }
    var vacuous = indirectlyReducedRule.isVacuous();
    if (!vacuous) {
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyReducedRule(indirectlyLeftRecursiveDefinition, indirectlyReducedRule), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), rule1 = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
        rule1.addDefinition(definition);
    }
}
function indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyRepeatedRuleName = (0, _ruleName.indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName)(ruleName, leftRecursiveRuleName);
    var indirectlyRepeatedRule = ruleMap[indirectlyRepeatedRuleName] || null;
    if (indirectlyRepeatedRule === null) {
        indirectlyRepeatedRule = _indirectly1.default.fromRuleLeftRecursiveRuleNameAndLeftRecursiveDefinitions(rule, leftRecursiveRuleName, leftRecursiveDefinitions);
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName), definition = replacementDefinition; ///
        rule.addDefinition(definition);
    }
    return indirectlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var directlyReducedRule = directlyReduceRule(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap), directlyRepeatedRule = directlyRepeatRule(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
    var rule = directlyLeftRecursiveDefinition.getRule(), definition = null, leftRecursiveRuleName = null, directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinition, leftRecursiveDefinitions);
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule);
    var removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    var addedLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule);
    amendLeftRecursiveDefinitions.apply(void 0, [
        leftRecursiveDefinitions,
        removedLeftRecursiveDefinitions
    ].concat(_toConsumableArray(addedLeftRecursiveDefinitions)));
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    indirectlyReduceRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
    var indirectlyRepeatedRule = indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap), removedLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions), addedLeftRecursiveDefinition = rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule);
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    for(var _len = arguments.length, addedLeftRecursiveDefinitions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        addedLeftRecursiveDefinitions[_key - 2] = arguments[_key];
    }
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    push(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule) {
    var least = indirectlyLeftRecursiveDefinition.isLeast(), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var definition = leftRecursiveDefinition.getDefinition();
    var rule = leftRecursiveDefinition.getRule(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), replacedDefinition = definition; ///
    definition = replacementDefinition; ///
    var addedLeftRecursiveDefinition = least ? _directly2.default.fromRuleAndDefinition(rule, definition) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition);
    definitionsIncludesDefinition ? rule.replaceDefinition(replacedDefinition, replacementDefinition) : rule.addDefinition(definition);
    return addedLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinition(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    }) || null;
    return directlyLeftRecursiveDefinitions;
}
function findDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinition, leftRecursiveDefinitions) {
    var rule = directlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly2.default);
            if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                if (leftRecursiveRuleName === null) {
                    return true;
                }
                var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(), indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
                if (indirectlyLeftRecursiveDefinitionDefinition !== definition && indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName === leftRecursiveRuleName) {
                    return true;
                }
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinitions, leftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule) {
    var rule = directlyLeftRecursiveDefinitions.getRule(), definition = null, leftRecursiveRuleName = null, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions), definitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        return definition;
    });
    if (directlyReducedRule == null) {
        rule.removeAllDefinitions();
    } else {
        var replacementDefinition = _replacementDefinition.default.fromDirectlyReducedRuleAndDirectlyRepeatedRule(directlyReducedRule, directlyRepeatedRule);
        rule.replaceAllDefinitions(replacementDefinition);
    }
    rule.addDefinitions(definitions);
    return directlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions) {
    var removedLeftRecursiveDefinitions;
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions);
        removedLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ].concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
        var definitions1 = removedLeftRecursiveDefinitions.map(function(removedLeftRecursiveDefinition) {
            var definition = removedLeftRecursiveDefinition.getDefinition();
            return definition;
        });
        rule.removeDefinitions(definitions1);
    } else {
        removedLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ];
    }
    return removedLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule) {
    var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions), indirectlyRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition, rule = indirectlyRecursiveDefinition.getRule(), addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        var directly = true, replacedDefinition = definition, replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, directlyRepeatedRule);
        definition = replacementDefinition; ///
        var addedLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition, directly); ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        return addedLeftRecursiveDefinition;
    });
    return addedLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var indirectlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly2.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5pbXBvcnQgUmVwbGFjZW1lbnREZWZpbml0aW9uIGZyb20gXCIuL3JlcGxhY2VtZW50RGVmaW5pdGlvblwiO1xuaW1wb3J0IEluZGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvaW5kaXJlY3RseVwiO1xuaW1wb3J0IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZXBlYXRlZC9pbmRpcmVjdGx5XCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9yZWN1cnNpdmVEZWZpbml0aW9uL2xlZnQvZGlyZWN0bHlcIjtcbmltcG9ydCBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4vcmVjdXJzaXZlRGVmaW5pdGlvbi9sZWZ0L2luZGlyZWN0bHlcIjtcblxuaW1wb3J0IHsgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuY29uc3QgeyBmaW5kLCBwdXNoLCBmaXJzdCwgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcztcblxubGV0IGNvdW50ID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBsZXQgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgd2hpbGUgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICAgIHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpID9cbiAgICAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSA6XG4gICAgICAgIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSArK2NvdW50ID4gMSA/IG51bGwgOiByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlyZWN0bHlSZWR1Y2VSdWxlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIGRpc2FsbG93SXNvbGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IERpcmVjdGx5UmVkdWNlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXNhbGxvd0lzb2xhdGVkKTtcblxuICBpZiAoZGlyZWN0bHlSZWR1Y2VkUnVsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZWR1Y2VkUnVsZS5nZXROYW1lKCk7XG5cbiAgICBydWxlTWFwW2RpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVkdWNlZFJ1bGU7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0bHlSZXBlYXRSdWxlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIGRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gRGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xuXG4gIHJldHVybiBkaXJlY3RseVJlcGVhdGVkUnVsZTtcbn1cblxuZnVuY3Rpb24gaW5kaXJlY3RseVJlZHVjZVJ1bGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICBsZXQgaW5kaXJlY3RseVJlZHVjZWRSdWxlID0gcnVsZU1hcFtpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lXSB8fCBudWxsO1xuXG4gIGlmIChpbmRpcmVjdGx5UmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICBpbmRpcmVjdGx5UmVkdWNlZFJ1bGUgPSBJbmRpcmVjdGx5UmVkdWNlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICAgIHJ1bGVNYXBbaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gPSBpbmRpcmVjdGx5UmVkdWNlZFJ1bGU7XG4gIH1cblxuICBjb25zdCB2YWN1b3VzID0gaW5kaXJlY3RseVJlZHVjZWRSdWxlLmlzVmFjdW91cygpO1xuXG4gIGlmICghdmFjdW91cykge1xuICAgIGNvbnN0IHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlZHVjZWRSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlZHVjZWRSdWxlKSxcbiAgICAgICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpLFxuICAgICAgICAgIHJ1bGUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHJlcGxhY2VtZW50RGVmaW5pdGlvbjsgLy8vXG5cbiAgICBydWxlLmFkZERlZmluaXRpb24oZGVmaW5pdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kaXJlY3RseVJlcGVhdFJ1bGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoKSxcbiAgICAgICAgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZShydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICBsZXQgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9IHJ1bGVNYXBbaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVdIHx8IG51bGw7XG5cbiAgaWYgKGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcbiAgICBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gSW5kaXJlY3RseVJlcGVhdGVkUnVsZS5mcm9tUnVsZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgICBydWxlTWFwW2luZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG5cbiAgICBjb25zdCByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSksXG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHJlcGxhY2VtZW50RGVmaW5pdGlvbjsgLy8vXG5cbiAgICBydWxlLmFkZERlZmluaXRpb24oZGVmaW5pdGlvbik7XG4gIH1cblxuICByZXR1cm4gaW5kaXJlY3RseVJlcGVhdGVkUnVsZTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IGRpcmVjdGx5UmVkdWNlUnVsZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IGRpcmVjdGx5UmVwZWF0UnVsZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgZGVmaW5pdGlvbiA9IG51bGwsXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IG51bGwsXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgbGV0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgcmV3cml0ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXJlY3RseVJlcGVhdGVkUnVsZSwgZGlyZWN0bHlSZWR1Y2VkUnVsZSk7XG5cbiAgY29uc3QgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IFtcbiAgICAuLi5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAuLi5pbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zXG4gIF07XG5cbiAgY29uc3QgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSByZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXJlY3RseVJlcGVhdGVkUnVsZSk7XG5cbiAgYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAuLi5hZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgaW5kaXJlY3RseVJlZHVjZVJ1bGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBpbmRpcmVjdGx5UmVwZWF0UnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCksXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSByZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJld3JpdGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUpO1xuXG4gIGFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgLi4uYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgZmlsdGVyKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmluY2x1ZGVzKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmICghcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcHVzaChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBsZWFzdCA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc0xlYXN0KCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKCk7XG5cbiAgbGV0IGRlZmluaXRpb24gPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCk7XG5cbiAgY29uc3QgcnVsZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGRlZmluaXRpb25zSW5jbHVkZXNEZWZpbml0aW9uID0gZGVmaW5pdGlvbnMuaW5jbHVkZXMoZGVmaW5pdGlvbiksXG4gICAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlcGVhdGVkUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUpLFxuICAgICAgICByZXBsYWNlZERlZmluaXRpb24gPSBkZWZpbml0aW9uOyAgLy8vXG5cbiAgZGVmaW5pdGlvbiA9IHJlcGxhY2VtZW50RGVmaW5pdGlvbjsgLy8vXG5cbiAgY29uc3QgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlYXN0ID8gLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVBbmREZWZpbml0aW9uKHJ1bGUsIGRlZmluaXRpb24pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBkZWZpbml0aW9uKTtcblxuICBkZWZpbml0aW9uc0luY2x1ZGVzRGVmaW5pdGlvbiA/XG4gICAgcnVsZS5yZXBsYWNlRGVmaW5pdGlvbihyZXBsYWNlZERlZmluaXRpb24sIHJlcGxhY2VtZW50RGVmaW5pdGlvbikgOlxuICAgICAgcnVsZS5hZGREZWZpbml0aW9uKGRlZmluaXRpb24pO1xuXG4gIHJldHVybiBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZmluZCgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG5cbiAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID09PSBydWxlKSB7XG4gICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pIHx8IG51bGw7XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgICAgICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9PT0gcnVsZSkge1xuICAgICAgICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGluc3RhbmNlb2YgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9PT0gcnVsZSkge1xuICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gaW5zdGFuY2VvZiBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sICAvLy9cbiAgICAgICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCksXG4gICAgICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoKTtcblxuICAgICAgICBpZiAoKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRlZmluaXRpb24gIT09IGRlZmluaXRpb24pICYmIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPT09IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlLCBkaXJlY3RseVJlZHVjZWRSdWxlKSB7XG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5nZXRSdWxlKCksXG4gICAgICAgIGRlZmluaXRpb24gPSBudWxsLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsLFxuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKTtcblxuICAgICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICBpZiAoZGlyZWN0bHlSZWR1Y2VkUnVsZSA9PSBudWxsKSB7XG4gICAgcnVsZS5yZW1vdmVBbGxEZWZpbml0aW9ucygpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tRGlyZWN0bHlSZWR1Y2VkUnVsZUFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlKGRpcmVjdGx5UmVkdWNlZFJ1bGUsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlKTtcblxuICAgIHJ1bGUucmVwbGFjZUFsbERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG4gIH1cblxuICBydWxlLmFkZERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG5cbiAgY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIGRlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgZGVmaW5pdGlvbnNJbmNsdWRlc0RlZmluaXRpb24gPSBkZWZpbml0aW9ucy5pbmNsdWRlcyhkZWZpbml0aW9uKTtcblxuICBpZiAoZGVmaW5pdGlvbnNJbmNsdWRlc0RlZmluaXRpb24pIHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbICAvLy9cbiAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbixcbiAgICAgIC4uLmluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcbiAgICBdO1xuXG4gICAgY29uc3QgZGVmaW5pdGlvbnMgPSByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgocmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgICBjb25zdCBkZWZpbml0aW9uID0gcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKTtcblxuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSk7XG5cbiAgICBydWxlLnJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gW1xuICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXJlY3RseVJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBmaXJzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBpbmRpcmVjdGx5UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgcnVsZSA9IGluZGlyZWN0bHlSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgbGV0IGRlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpO1xuXG4gICAgICAgICAgY29uc3QgZGlyZWN0bHkgPSB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sICAvLy9cbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGlyZWN0bHlSZXBlYXRlZFJ1bGUpO1xuXG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHJlcGxhY2VtZW50RGVmaW5pdGlvbjsgLy8vXG5cbiAgICAgICAgICBjb25zdCBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGVmaW5pdGlvbiwgZGlyZWN0bHkpOyAgLy8vXG5cbiAgICAgICAgICBydWxlLnJlcGxhY2VEZWZpbml0aW9uKHJlcGxhY2VkRGVmaW5pdGlvbiwgcmVwbGFjZW1lbnREZWZpbml0aW9uKTtcblxuICAgICAgICAgIHJldHVybiBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmQobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5mb3JFYWNoKChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBpZiAoZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPT09IG51bGwpIHtcbiAgICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uR3JlYXRlclRoYW5HcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc0dyZWF0ZXJUaGFuKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgaWYgKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247IC8vL1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImZpbmQiLCJhcnJheVV0aWxpdGllcyIsInB1c2giLCJmaXJzdCIsImZpbHRlciIsImNvdW50IiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZU1hcCIsImdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJ1bGUiLCJnZXRSdWxlIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiZGlyZWN0bHlSZWR1Y2VSdWxlIiwiZGlzYWxsb3dJc29sYXRlZCIsImRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJEaXJlY3RseVJlZHVjZWRSdWxlIiwiZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImdldE5hbWUiLCJkaXJlY3RseVJlcGVhdFJ1bGUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZSIsIkRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZVJ1bGUiLCJydWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlIiwiSW5kaXJlY3RseVJlZHVjZWRSdWxlIiwidmFjdW91cyIsImlzVmFjdW91cyIsInJlcGxhY2VtZW50RGVmaW5pdGlvbiIsIlJlcGxhY2VtZW50RGVmaW5pdGlvbiIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsImFkZERlZmluaXRpb24iLCJpbmRpcmVjdGx5UmVwZWF0UnVsZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV3cml0ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV3cml0ZUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zSW5jbHVkZXNMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluY2x1ZGVzIiwibGVhc3QiLCJpc0xlYXN0IiwiZ2V0RGVmaW5pdGlvbiIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uc0luY2x1ZGVzRGVmaW5pdGlvbiIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwicmVwbGFjZWREZWZpbml0aW9uIiwiRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21SdWxlQW5kRGVmaW5pdGlvbiIsIkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREZWZpbml0aW9uIiwicmVwbGFjZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRlZmluaXRpb24iLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJtYXAiLCJyZW1vdmVBbGxEZWZpbml0aW9ucyIsImZyb21EaXJlY3RseVJlZHVjZWRSdWxlQW5kRGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJyZXBsYWNlQWxsRGVmaW5pdGlvbnMiLCJhZGREZWZpbml0aW9ucyIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlbW92ZURlZmluaXRpb25zIiwiZmlyc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRpcmVjdGx5UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRpcmVjdGx5IiwiZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiZm9yRWFjaCIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpc0dyZWF0ZXJUaGFuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBa0JiLFNBY0M7OztlQWR1QkEsOEJBQThCOzs7eUJBaEJ2QixXQUFXOzZEQUVWLHlCQUF5Qjs4REFDeEIsMEJBQTBCOzBFQUN6Qix5QkFBeUI7K0RBQ3pCLDJCQUEyQjtnRUFDMUIsNEJBQTRCOzhEQUNuQixxQ0FBcUM7Z0VBQ25DLHVDQUF1Qzt3QkFFaUMsc0JBQXNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU1SSxJQUFRQyxJQUFJLEdBQTBCQyxVQUFjLGVBQUEsQ0FBNUNELElBQUksRUFBRUUsSUFBSSxHQUFvQkQsVUFBYyxlQUFBLENBQXRDQyxJQUFJLEVBQUVDLEtBQUssR0FBYUYsVUFBYyxlQUFBLENBQWhDRSxLQUFLLEVBQUVDLE1BQU0sR0FBS0gsVUFBYyxlQUFBLENBQXpCRyxNQUFNLEFBQW9CO0FBRXJELElBQUlDLEtBQUssR0FBRyxDQUFDLEFBQUM7QUFF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