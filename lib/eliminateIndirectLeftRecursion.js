"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateIndirectLeftRecursion;
var _necessary = require("necessary");
var _occamParsers = require("occam-parsers");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _class = require("./utilities/class");
var _part = require("./utilities/part");
var _parts = require("./utilities/parts");
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveRule;
        var indirectlyLeftRecursiveDefinitionRuleName = indirectlyLeftRecursiveDefinition.getRuleName(), indirectlyLeftRecursiveRuleName = indirectlyLeftRecursiveDefinitionRuleName, indirectlyLeftRecursiveRule = ruleMap[indirectlyLeftRecursiveRuleName];
        rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap);
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), implicitlyLeftRecursiveDefinitionRuleName = implicitlyLeftRecursiveDefinition.getRuleName(), implicitlyLeftRecursiveRuleName = implicitlyLeftRecursiveDefinitionRuleName, implicitlyLeftRecursiveRule = ruleMap[implicitlyLeftRecursiveRuleName];
        rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, indirectlyLeftRecursiveRule, leftRecursiveDefinitions, ruleMap);
        rewriteImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule, indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveRule = implicitlyLeftRecursiveRule; ///
        rewriteDirectlyLeftRecursiveRule(directlyLeftRecursiveRule, leftRecursiveDefinitions);
    });
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart, find = _necessary.arrayUtilities.find, tail = _necessary.arrayUtilities.tail, push = _necessary.arrayUtilities.push, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rewriteDirectlyLeftRecursiveRule(directlyLeftRecursiveRule, leftRecursiveDefinitions) {
    var rule = directlyLeftRecursiveRule, directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), definition = definitionFromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacedDefinition = directlyLeftRecursiveDefinition, replacementDefinition = definition; ///
    directlyLeftRecursiveRule.replaceDefinition(replacedDefinition, replacementDefinition);
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = leftRecursiveDefinition === directlyLeftRecursiveDefinition;
        if (!leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
}
function rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), reducedRuleName = reducedRule.getName(), repeatedRuleName = repeatedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
    ruleMap[repeatedRuleName] = repeatedRule;
}
function rewriteImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule, indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var reducedRule = _reduced.default.fromImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = leftRecursiveDefinition === indirectlyLeftRecursiveDefinition;
        if (!leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveRule.removeDefinition(indirectlyLeftRecursiveDefinition);
}
function mergeDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition;
    var definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }), firstDirectlyLeftRecursiveDefinition = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
    if (directlyLeftRecursiveDefinitionsLength === 1) {
        directlyLeftRecursiveDefinition = firstDirectlyLeftRecursiveDefinition;
    } else {
        var parts;
        parts = firstDirectlyLeftRecursiveDefinition.getParts(); ///
        var firstPart = first(parts), part = firstPart; ///
        var singleParts = directlyLeftRecursiveDefinitions.map(function(directlyLeftRecursiveDefinition) {
            var parts = directlyLeftRecursiveDefinition.getParts();
            parts.shift(); ///
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        parts = singleParts; ///
        var choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            part,
            choiceOfPartsPart
        ];
        var ruleName = firstDirectlyLeftRecursiveDefinition.getRuleName();
        directlyLeftRecursiveDefinition = _directly.default.fromRuleNameAndParts(ruleName, parts);
        filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
            var directlyLeftRecursiveDDefinitionsIncludesLeftRecursiveDefinition = directlyLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
            if (!directlyLeftRecursiveDDefinitionsIncludesLeftRecursiveDefinition) {
                return true;
            }
        });
        var definitions1 = tail(directlyLeftRecursiveDefinitions), replacedDefinition = firstDirectlyLeftRecursiveDefinition, replacementDefinition = directlyLeftRecursiveDefinition; ///
        rule.removeDefinitions(definitions1);
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
    }
    return directlyLeftRecursiveDefinition;
}
function rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, indirectlyLeftRecursiveRule, leftRecursiveDefinitions, ruleMap) {
    var _rule;
    var definitions = indirectlyLeftRecursiveRule.getDefinitions(), rewrittenDefinitions = definitions.map(function(definition, index) {
        var Definition = index === 0 ? _directly.default : _left.default;
        var definitionParts = definition.getParts(), implicitlyLeftRecursiveDefinitionParts = implicitlyLeftRecursiveDefinition.getParts();
        definitionParts = (0, _parts).cloneParts(definitionParts); ///
        implicitlyLeftRecursiveDefinitionParts = tail((0, _parts).cloneParts(implicitlyLeftRecursiveDefinitionParts)); ///
        var parts = _toConsumableArray(definitionParts).concat(_toConsumableArray(implicitlyLeftRecursiveDefinitionParts));
        var ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), recursiveRuleNames = null, leftRecursiveRuleNames = null; ///
        definition = new Definition(parts, ruleName, recursiveRuleNames, leftRecursiveRuleNames); ///
        var rewrittenDefinition = definition; ///
        return rewrittenDefinition;
    }), ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], replacedDefinition = implicitlyLeftRecursiveDefinition, replacementDefinitions = rewrittenDefinitions; ///
    (_rule = rule).replaceDefinition.apply(_rule, [
        replacedDefinition
    ].concat(_toConsumableArray(replacementDefinitions)));
    push(leftRecursiveDefinitions, rewrittenDefinitions);
}
function retrieveIndirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function definitionFromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var parts = directlyLeftRecursiveDefinition.getParts();
    parts.shift();
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), reducedPart = (0, _part).reducedPartFromRuleName(ruleName), repeatedPart = (0, _parts).repeatedPartFromParts(parts);
    parts = [
        reducedPart,
        repeatedPart
    ];
    var definition = new _occamParsers.Definition(parts);
    return definition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgUGFydHMsIERlZmluaXRpb24gfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgUmVkdWNlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZWR1Y2VkXCI7XG5pbXBvcnQgUmVwZWF0ZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVwZWF0ZWRcIjtcbmltcG9ydCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZS9sZWZ0XCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZS9sZWZ0L2RpcmVjdGx5XCI7XG5pbXBvcnQgSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnQvaW5kaXJlY3RseVwiO1xuXG5pbXBvcnQgeyBpc0luc3RhbmNlT2YgfSBmcm9tIFwiLi91dGlsaXRpZXMvY2xhc3NcIjtcbmltcG9ydCB7IHJlZHVjZWRQYXJ0RnJvbVJ1bGVOYW1lIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IGNsb25lUGFydHMsIHJlcGVhdGVkUGFydEZyb21QYXJ0cywgc2luZ2xlUGFydEZyb21QYXJ0cyB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IENob2ljZU9mUGFydHNQYXJ0IH0gPSBQYXJ0cyxcbiAgICAgIHsgZmluZCwgdGFpbCwgcHVzaCwgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHJldHJpZXZlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZm9yRWFjaCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgbGV0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGU7XG5cbiAgICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSwgIC8vL1xuICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSA9IHJ1bGVNYXBbaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZV07XG5cbiAgICByZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgcnVsZU1hcCk7XG5cbiAgICBjb25zdCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0SW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKCksXG4gICAgICAgICAgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUsICAvLy9cbiAgICAgICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSBydWxlTWFwW2ltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWVdO1xuXG4gICAgcmV3cml0ZUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKTtcblxuICAgIHJld3JpdGVJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKTtcblxuICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGU7ICAvLy9cblxuICAgIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZShkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgcnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIC8vL1xuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbWVyZ2VEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbkZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICByZXBsYWNlZERlZmluaXRpb24gPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gZGVmaW5pdGlvbjsgLy8vXG5cbiAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZS5yZXBsYWNlRGVmaW5pdGlvbihyZXBsYWNlZERlZmluaXRpb24sIHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG5cbiAgZmlsdGVyKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID09PSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmICghbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSA9IHJlZHVjZWRSdWxlO1xuXG4gIHJ1bGVNYXBbcmVwZWF0ZWRSdWxlTmFtZV0gPSByZXBlYXRlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZShpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZS5nZXROYW1lKCk7XG5cbiAgcnVsZU1hcFtyZWR1Y2VkUnVsZU5hbWVdID0gcmVkdWNlZFJ1bGU7XG5cbiAgZmlsdGVyKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPT09IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoIWxlZnRSZWN1cnNpdmVEZWZpbml0aW9uSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pXG5cbiAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlLnJlbW92ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZChkZWZpbml0aW9ucywgKGRlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGlzSW5zdGFuY2VPZihkZWZpbml0aW9uLCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZmlyc3REaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3QoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmxlbmd0aDtcblxuICBpZiAoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPT09IDEpIHtcbiAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3REaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBwYXJ0cztcblxuICAgIHBhcnRzID0gZmlyc3REaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFBhcnRzKCk7ICAvLy9cblxuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgIGNvbnN0IHNpbmdsZVBhcnRzID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0cyA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICAgICAgcGFydHMuc2hpZnQoKTsgIC8vL1xuXG4gICAgICBjb25zdCBzaW5nbGVQYXJ0ID0gc2luZ2xlUGFydEZyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgICAgIHJldHVybiBzaW5nbGVQYXJ0O1xuICAgIH0pO1xuXG4gICAgcGFydHMgPSBzaW5nbGVQYXJ0czsgIC8vL1xuXG4gICAgY29uc3QgY2hvaWNlT2ZQYXJ0c1BhcnQgPSBuZXcgQ2hvaWNlT2ZQYXJ0c1BhcnQocGFydHMpO1xuXG4gICAgcGFydHMgPSBbIC8vL1xuICAgICAgcGFydCxcbiAgICAgIGNob2ljZU9mUGFydHNQYXJ0XG4gICAgXVxuXG4gICAgY29uc3QgcnVsZU5hbWUgPSBmaXJzdERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKTtcblxuICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21SdWxlTmFtZUFuZFBhcnRzKHJ1bGVOYW1lLCBwYXJ0cyk7XG5cbiAgICBmaWx0ZXIobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZUREZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5pbmNsdWRlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIGlmICghZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRERlZmluaXRpb25zSW5jbHVkZXNMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGFpbChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgICAgcmVwbGFjZWREZWZpbml0aW9uID0gZmlyc3REaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG5cbiAgICBydWxlLnJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICAgIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCByZXBsYWNlbWVudERlZmluaXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICByZXdyaXR0ZW5EZWZpbml0aW9ucyA9IGRlZmluaXRpb25zLm1hcCgoZGVmaW5pdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBEZWZpbml0aW9uID0gKGluZGV4ID09PSAwKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcblxuICAgICAgICAgIGxldCBkZWZpbml0aW9uUGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgICAgICAgICBkZWZpbml0aW9uUGFydHMgPSBjbG9uZVBhcnRzKGRlZmluaXRpb25QYXJ0cyk7ICAvLy9cblxuICAgICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzID0gdGFpbChjbG9uZVBhcnRzKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzKSk7ICAvLy9cblxuICAgICAgICAgIGNvbnN0IHBhcnRzID0gW1xuICAgICAgICAgICAgLi4uZGVmaW5pdGlvblBhcnRzLFxuICAgICAgICAgICAgLi4uaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUGFydHNcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSBudWxsLCAgLy8vXG4gICAgICAgICAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IG51bGw7ICAvLy9cblxuICAgICAgICAgIGRlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihwYXJ0cywgcnVsZU5hbWUsIHJlY3Vyc2l2ZVJ1bGVOYW1lcywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7IC8vL1xuXG4gICAgICAgICAgY29uc3QgcmV3cml0dGVuRGVmaW5pdGlvbiA9IGRlZmluaXRpb247IC8vL1xuXG4gICAgICAgICAgcmV0dXJuIHJld3JpdHRlbkRlZmluaXRpb247XG4gICAgICAgIH0pLFxuICAgICAgICBydWxlTmFtZSA9IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbiA9IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgIC8vL1xuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb25zID0gcmV3cml0dGVuRGVmaW5pdGlvbnM7ICAvLy9cblxuICBydWxlLnJlcGxhY2VEZWZpbml0aW9uKHJlcGxhY2VkRGVmaW5pdGlvbiwgLi4ucmVwbGFjZW1lbnREZWZpbml0aW9ucyk7XG5cbiAgcHVzaChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJld3JpdHRlbkRlZmluaXRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmZpbHRlcigobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGlzSW5zdGFuY2VPZihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucztcbn1cblxuZnVuY3Rpb24gZGVmaW5pdGlvbkZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgbGV0IHBhcnRzID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHBhcnRzLnNoaWZ0KCk7XG5cbiAgY29uc3QgcnVsZU5hbWUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIHJlZHVjZWRQYXJ0ID0gcmVkdWNlZFBhcnRGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICByZXBlYXRlZFBhcnQgPSByZXBlYXRlZFBhcnRGcm9tUGFydHMocGFydHMpO1xuXG4gIHBhcnRzID0gWyAvLy9cbiAgICByZWR1Y2VkUGFydCxcbiAgICByZXBlYXRlZFBhcnRcbiAgXVxuXG4gIGNvbnN0IGRlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihwYXJ0cyk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb247XG59Il0sIm5hbWVzIjpbImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJ1bGVNYXAiLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV0cmlldmVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZm9yRWFjaCIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsInJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJnZXRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJyZXdyaXRlSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsInJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlIiwiQ2hvaWNlT2ZQYXJ0c1BhcnQiLCJQYXJ0cyIsImZpbmQiLCJhcnJheVV0aWxpdGllcyIsInRhaWwiLCJwdXNoIiwiZmlyc3QiLCJmaWx0ZXIiLCJydWxlIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIm1lcmdlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uIiwiZGVmaW5pdGlvbkZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVwbGFjZWREZWZpbml0aW9uIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwicmVwbGFjZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlZHVjZWRSdWxlIiwiUmVkdWNlZFJ1bGUiLCJmcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlIiwicmVwZWF0ZWRSdWxlIiwiUmVwZWF0ZWRSdWxlIiwicmVkdWNlZFJ1bGVOYW1lIiwiZ2V0TmFtZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJmcm9tSW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVEZWZpbml0aW9uIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpc0luc3RhbmNlT2YiLCJEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZmlyc3REaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwicGFydCIsInNpbmdsZVBhcnRzIiwibWFwIiwic2hpZnQiLCJzaW5nbGVQYXJ0Iiwic2luZ2xlUGFydEZyb21QYXJ0cyIsImNob2ljZU9mUGFydHNQYXJ0IiwicnVsZU5hbWUiLCJmcm9tUnVsZU5hbWVBbmRQYXJ0cyIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZUREZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmNsdWRlcyIsInJlbW92ZURlZmluaXRpb25zIiwicmV3cml0dGVuRGVmaW5pdGlvbnMiLCJpbmRleCIsIkRlZmluaXRpb24iLCJMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRlZmluaXRpb25QYXJ0cyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzIiwiY2xvbmVQYXJ0cyIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJyZXdyaXR0ZW5EZWZpbml0aW9uIiwicmVwbGFjZW1lbnREZWZpbml0aW9ucyIsIkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlZHVjZWRQYXJ0IiwicmVkdWNlZFBhcnRGcm9tUnVsZU5hbWUiLCJyZXBlYXRlZFBhcnQiLCJyZXBlYXRlZFBhcnRGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztrQkFrQldBLDhCQUE4QjtBQWhCdkIsSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBQ1IsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBRXpCLElBQUEsUUFBZ0Isa0NBQWhCLGdCQUFnQixFQUFBO0FBQ2YsSUFBQSxTQUFpQixrQ0FBakIsaUJBQWlCLEVBQUE7QUFDTixJQUFBLEtBQTZCLGtDQUE3Qiw2QkFBNkIsRUFBQTtBQUNyQixJQUFBLFNBQXNDLGtDQUF0QyxzQ0FBc0MsRUFBQTtBQUNwQyxJQUFBLFdBQXdDLGtDQUF4Qyx3Q0FBd0MsRUFBQTtBQUV6RCxJQUFBLE1BQW1CLFdBQW5CLG1CQUFtQixDQUFBO0FBQ1IsSUFBQSxLQUFrQixXQUFsQixrQkFBa0IsQ0FBQTtBQUNhLElBQUEsTUFBbUIsV0FBbkIsbUJBQW1CLENBQUE7QUFLM0UsU0FBU0EsOEJBQThCLENBQUNDLHdCQUF3QixFQUFFQyxPQUFPLEVBQUU7SUFDeEYsSUFBTUMsa0NBQWtDLEdBQUdDLDBDQUEwQyxDQUFDSCx3QkFBd0IsQ0FBQyxBQUFDO0lBRWhIRSxrQ0FBa0MsQ0FBQ0UsT0FBTyxDQUFDLFNBQUNDLGlDQUFpQyxFQUFLO1FBQ2hGLElBQUlDLHlCQUF5QixBQUFDO1FBRTlCLElBQU1DLHlDQUF5QyxHQUFHRixpQ0FBaUMsQ0FBQ0csV0FBVyxFQUFFLEVBQzNGQywrQkFBK0IsR0FBR0YseUNBQXlDLEVBQzNFRywyQkFBMkIsR0FBR1QsT0FBTyxDQUFDUSwrQkFBK0IsQ0FBQyxBQUFDO1FBRTdFRSxrQ0FBa0MsQ0FBQ0QsMkJBQTJCLEVBQUVULE9BQU8sQ0FBQyxDQUFDO1FBRXpFLElBQU1XLGlDQUFpQyxHQUFHUCxpQ0FBaUMsQ0FBQ1Esb0NBQW9DLEVBQUUsRUFDNUdDLHlDQUF5QyxHQUFHRixpQ0FBaUMsQ0FBQ0osV0FBVyxF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