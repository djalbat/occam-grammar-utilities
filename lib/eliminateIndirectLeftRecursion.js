"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _edge = /*#__PURE__*/ _interopRequireDefault(require("./edge"));
var _definition = /*#__PURE__*/ _interopRequireDefault(require("./definition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _array = require("./utilities/array");
var _context = require("./utilities/context");
var _definition1 = require("./utilities/definition");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateIndirectLeftRecursion(context) {
    var greatestNonTrivialCycle = findGreatestNonTrivialCycle(context);
    while(greatestNonTrivialCycle !== null){
        var ruleNames = greatestNonTrivialCycle, firstLastRuleName = (0, _array.firstLast)(ruleNames), secondLastRuleName = (0, _array.secondLast)(ruleNames), ruleName = firstLastRuleName, leftRecursiveRuleName = secondLastRuleName; ///
        rewriteIndirectLeftRecursion(ruleName, leftRecursiveRuleName, context);
        rewriteDirectedGraph(ruleName, leftRecursiveRuleName, context);
        greatestNonTrivialCycle = findGreatestNonTrivialCycle(context);
    }
}
function rewriteDirectedGraph(ruleName, leftRecursiveRuleName, context) {
    var directedGraph = context.directedGraph;
    var sourceVertex, targetVertex;
    sourceVertex = leftRecursiveRuleName; ///
    targetVertex = ruleName; ///
    directedGraph.removeEdgeBySourceVertexAndTargetVertex(sourceVertex, targetVertex);
    sourceVertex = ruleName; ///
    var edges = directedGraph.findEdgesBySourceVertex(sourceVertex);
    edges = edges.reduce(function(edges, edge) {
        var edgeTriviallyCyclic = edge.isTriviallyCyclic();
        if (!edgeTriviallyCyclic) {
            var sourceVertex = leftRecursiveRuleName, targetVertex = edge.getTargetVertex();
            edge = _edge.default.fromSourceVertexAndTargetVertex(sourceVertex, targetVertex);
            edges.push(edge);
        }
        return edges;
    }, []);
    directedGraph.addEdges(edges);
}
function greatestCycleFromCycles(cycles) {
    var greatestCycle = cycles.reduce(function(greatestCycle, cycle) {
        if (greatestCycle === null) {
            greatestCycle = cycle; ///
        } else {
            var cycleLength = cycle.length, greatestCycleLength = greatestCycle.length;
            if (cycleLength > greatestCycleLength) {
                greatestCycle = cycle; ///
            }
        }
        return greatestCycle;
    }, null);
    return greatestCycle;
}
function findGreatestNonTrivialCycle(context) {
    var directedGraph = context.directedGraph;
    var nonTrivialCycles = directedGraph.findNonTrivialCycles(), greatestNonTrivialCycle = greatestCycleFromCycles(nonTrivialCycles);
    return greatestNonTrivialCycle;
}
function rewriteIndirectLeftRecursion(ruleName, leftRecursiveRuleName, context) {
    var ruleMap = context.ruleMap;
    var rule = ruleMap[ruleName], leftRecursiveRule = ruleMap[leftRecursiveRuleName], leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveRule, function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition, leftRecursiveRuleNames = (0, _definition1.leftRecursiveRuleNamesFromDefinition)(definition), firstLeftRecursiveRuleName = (0, _array.first)(leftRecursiveRuleNames);
        if (firstLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context);
    var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var definitions;
    definitions = leftRecursiveDefinitions; ///
    leftRecursiveRule.removeDefinitions(definitions);
    definitions = rule.getDefinitions();
    definitions = definitions.reduce(function(definitions, definition) {
        var _$leftRecursiveRuleName = ruleName, definitionDirectlyLeftRecursive = (0, _definition1.isDefinitionDirectlyLeftRecursive)(definition, _$leftRecursiveRuleName);
        if (!definitionDirectlyLeftRecursive) {
            definition = _definition.default.fromDefinitionAndIndirectlyRepeatedRuleName(definition, indirectlyRepeatedRuleName); ///
            definitions.push(definition);
        }
        return definitions;
    }, []);
    leftRecursiveRule.addDefinitions(definitions);
}

//# sourceMappingURL=data:application/json;base64,