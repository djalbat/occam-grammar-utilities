"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateIndirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _rules = require("./utilities/rules");
var _ruleNames = require("./utilities/ruleNames");
var _definitions = require("./utilities/definitions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    indirectlyLeftRecursiveRules.forEach(function(indirectlyLeftRecursiveRule) {
        rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, leftRecursiveDefinitions, ruleMap);
    });
}
function reduceRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedLeftRecursiveDefinition = null;
    var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule);
    if (reducedRule !== null) {
        var definitions = indirectlyLeftRecursiveRule.getDefinitions(), lastDefinition = last(definitions), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        reducedLeftRecursiveDefinition = lastDefinition; ///
    }
    return reducedLeftRecursiveDefinition;
}
function repeatRule(indirectlyLeftRecursiveDefinition, index, ruleMap) {
    var repeatedRuleName = null;
    var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinitionAndIndex(indirectlyLeftRecursiveDefinition, index);
    if (repeatedRule !== null) {
        repeatedRuleName = repeatedRule.getName();
        ruleMap[repeatedRuleName] = repeatedRule;
    }
    return repeatedRuleName;
}
function retrieveLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition) {
    var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions(), lastLeftRecursiveDefinition = last(leftRecursiveDefinitions), leftRecursiveDefinition = lastLeftRecursiveDefinition; ///
    return leftRecursiveDefinition;
}
function rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, leftRecursiveDefinitions, ruleMap) {
    var reducedLeftRecursiveDefinition = reduceRule(indirectlyLeftRecursiveRule, ruleMap), leftRecursiveRuleNames = (0, _ruleNames.retrieveLeftRecursiveRuleNames)(indirectlyLeftRecursiveRule, _indirectly.default, function(indirectlyLeftRecursiveDefinition) {
        var leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
        return leftRecursiveRuleName;
    });
    leftRecursiveRuleNames.forEach(function(leftRecursiveRuleName, index) {
        var _rule;
        var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, leftRecursiveRuleName), indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions);
        var repeatedRuleName = repeatRule(indirectlyLeftRecursiveDefinition, index, ruleMap);
        var last = indirectlyLeftRecursiveDefinition.isLast(), leftRecursiveDefinition = retrieveLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition), ruleName = leftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], replacedDefinition = leftRecursiveDefinition, replacementDefinitions = last ? rewriteDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) : rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName);
        (_rule = rule).replaceDefinition.apply(_rule, [
            replacedDefinition
        ].concat(_toConsumableArray(replacementDefinitions)));
        if (last) {
            var firstReplacementDefinition = first(replacementDefinitions), leftRecursiveDefinition1 = firstReplacementDefinition; ///
            leftRecursiveDefinitions.push(leftRecursiveDefinition1);
        } else {
            var _$indirectlyLeftRecursiveRule = rule; ///
            rewriteIndirectlyLeftRecursiveRule(_$indirectlyLeftRecursiveRule, leftRecursiveDefinitions, ruleMap);
        }
    });
}
function retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = (0, _rules.retrieveLeftRecursiveRules)(leftRecursiveDefinitions, _indirectly.default, ruleMap);
    return indirectlyLeftRecursiveRules;
}
function rewriteDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) {
    var replacementDefinitions = [];
    var directlyLeftRecursiveDefinition;
    directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, repeatedRuleName); ///
    directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionAndLeftRecursiveDefinition(directlyLeftRecursiveDefinition, leftRecursiveDefinition); ///
    replacementDefinitions.push(directlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        leftRecursiveDefinition = _left.default.fromReducedLeftRecursiveDefinitionAndLeftRecursiveDefinition(reducedLeftRecursiveDefinition, leftRecursiveDefinition); ///
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) {
    var replacementDefinitions = [];
    indirectlyLeftRecursiveDefinition = _indirectly.default.fromIndirectlyLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, repeatedRuleName); ///
    indirectlyLeftRecursiveDefinition = _indirectly.default.fromIndirectlyLeftRecursiveDefinitionAndLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition); ///
    replacementDefinitions.push(indirectlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        leftRecursiveDefinition = _left.default.fromReducedLeftRecursiveDefinitionAndLeftRecursiveDefinition(reducedLeftRecursiveDefinition, leftRecursiveDefinition); ///
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, leftRecursiveRuleName) {
    var indirectlyLeftRecursiveDefinitions = (0, _definitions.retrieveLeftRecursiveDefinitions)(indirectlyLeftRecursiveRule, _indirectly.default, function(indirectlyLeftRecursiveDefinition) {
        var leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
        if (ruleName === leftRecursiveRuleName) {
            return true;
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,