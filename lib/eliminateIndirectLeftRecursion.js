"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _epsilon = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/epsilon"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _left = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var find = _necessary.arrayUtilities.find, push = _necessary.arrayUtilities.push, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var _rule;
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var disallowIsolated = false, directlyReducedRule = _directly.default.fromRule(rule, disallowIsolated);
    var directlyReducedRuleName = null;
    if (directlyReducedRule !== null) {
        directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    var directlyRepeatedRule = _directly1.default.fromRule(rule), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    var definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(definitions);
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    var removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        indirectlyLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, directlyRepeatedRuleName); ///
        return indirectlyLeftRecursiveDefinition;
    });
    var replacementDefinitions = _toConsumableArray(indirectlyLeftRecursiveDefinitions);
    if (directlyReducedRuleName !== null) {
        var leftRecursiveDefinition = _left.default.fromDirectlyReducedRuleName(directlyReducedRuleName);
        leftRecursiveDefinition = _left.default.fromLeftRecursiveDefinitionAndDirectlyRepeatedRuleName(leftRecursiveDefinition, directlyRepeatedRuleName); ///
        replacementDefinitions = _toConsumableArray(replacementDefinitions).concat([
            leftRecursiveDefinition
        ]);
    }
    (_rule = rule).replaceAllDefinitions.apply(_rule, _toConsumableArray(replacementDefinitions));
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions.apply(void 0, [
        leftRecursiveDefinitions,
        removedLeftRecursiveDefinitions
    ].concat(_toConsumableArray(addedLeftRecursiveDefinitions)));
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var _rule;
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), least = indirectlyLeftRecursiveDefinition.isLeast();
    // const epsilonRepeatedRule = EpsilonRepeatedRule.fromLeftRecursiveRuleName(leftRecursiveRuleName),
    //       epsilonRepeatedRuleName = epsilonRepeatedRule.getName();
    //
    // ruleMap[epsilonRepeatedRuleName] = epsilonRepeatedRule;
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var indirectlyRepeatedRuleName = (0, _ruleName.indirectlyRepeatedRuleNameFromRuleName)(ruleName), indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName), indirectlyRepeatedRule = ruleMap[indirectlyRepeatedRuleName] || null, indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyRepeatedRule === null) {
        indirectlyRepeatedRule = _indirectly1.default.fromRuleAndLeftRecursiveRuleName(rule, leftRecursiveRuleName);
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    }
    if (indirectlyReducedRule === null) {
        indirectlyReducedRule = _indirectly.default.fromRule(rule);
        if (indirectlyReducedRule !== null) {
            ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
        } else {
            indirectlyReducedRuleName = null;
        }
    }
    var definitions = rule.getDefinitions(), indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        indirectlyLeftRecursiveDefinition.removeTail();
    });
    var replacedDefinition = leftRecursiveDefinition, replacementDefinitions = [], replacementDefinition = least ? _directly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName), addedLeftRecursiveDefinition = replacementDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    replacementDefinitions.push(replacementDefinition);
    if (indirectlyReducedRuleName !== null) {
        var replacementDefinition1 = _left.default.fromLeftRecursiveDefinitionAndIndirectlyReducedRuleName(leftRecursiveDefinition, indirectlyReducedRuleName); ///
        replacementDefinitions.push(replacementDefinition1);
    }
    ruleName = leftRecursiveDefinition.getRuleName();
    rule = ruleMap[ruleName];
    (_rule = rule).replaceDefinition.apply(_rule, [
        replacedDefinition
    ].concat(_toConsumableArray(replacementDefinitions)));
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    for(var _len = arguments.length, addedLeftRecursiveDefinitions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        addedLeftRecursiveDefinitions[_key - 2] = arguments[_key];
    }
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    push(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions(), directlyLeftRecursiveDefinition = definitions.find(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = _instanceof(definition, _indirectly2.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgRXBzaWxvblJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2Vwc2lsb25cIjtcbmltcG9ydCBEaXJlY3RseVJlZHVjZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVkdWNlZC9kaXJlY3RseVwiO1xuaW1wb3J0IERpcmVjdGx5UmVwZWF0ZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVwZWF0ZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVkdWNlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZWR1Y2VkL2luZGlyZWN0bHlcIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVwZWF0ZWQvaW5kaXJlY3RseVwiO1xuaW1wb3J0IExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnRcIjtcbmltcG9ydCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnQvZGlyZWN0bHlcIjtcbmltcG9ydCBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4vZGVmaW5pdGlvbi9yZWN1cnNpdmUvbGVmdC9pbmRpcmVjdGx5XCI7XG5cbmltcG9ydCB7IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3J1bGVOYW1lXCI7XG5cbmNvbnN0IHsgZmluZCwgcHVzaCwgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgbGV0IGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIHdoaWxlIChncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlTWFwKTtcblxuICAgIChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSA/XG4gICAgICByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkgOlxuICAgICAgICByZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKTtcblxuICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXTtcblxuICBjb25zdCBkaXNhbGxvd0lzb2xhdGVkID0gZmFsc2UsXG4gICAgICAgIGRpcmVjdGx5UmVkdWNlZFJ1bGUgPSBEaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUsIGRpc2FsbG93SXNvbGF0ZWQpO1xuXG4gIGxldCBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IG51bGw7XG5cbiAgaWYgKGRpcmVjdGx5UmVkdWNlZFJ1bGUgIT09IG51bGwpIHtcbiAgICBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtkaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gPSBkaXJlY3RseVJlZHVjZWRSdWxlO1xuICB9XG5cbiAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBEaXJlY3RseVJlcGVhdGVkUnVsZS5mcm9tUnVsZShydWxlKSxcbiAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xuXG4gIGNvbnN0IGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgbGV0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgY29uc3QgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IFtcbiAgICAuLi5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAuLi5pbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zXG4gIF07XG5cbiAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSk7ICAvLy9cblxuICAgIHJldHVybiBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG4gIH0pO1xuXG4gIGxldCByZXBsYWNlbWVudERlZmluaXRpb25zID0gW1xuICAgIC4uLmluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcbiAgXTtcblxuICBpZiAoZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgIT09IG51bGwpIHtcbiAgICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tRGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUoZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUpO1xuXG4gICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSk7ICAvLy9cblxuICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbnMgPSBbXG4gICAgICAuLi5yZXBsYWNlbWVudERlZmluaXRpb25zLFxuICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25cbiAgICBdO1xuICB9XG5cbiAgcnVsZS5yZXBsYWNlQWxsRGVmaW5pdGlvbnMoLi4ucmVwbGFjZW1lbnREZWZpbml0aW9ucyk7XG5cbiAgY29uc3QgYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zOyAvLy9cblxuICBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIC4uLmFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgIGxlYXN0ID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmlzTGVhc3QoKTtcblxuICAvLyBjb25zdCBlcHNpbG9uUmVwZWF0ZWRSdWxlID0gRXBzaWxvblJlcGVhdGVkUnVsZS5mcm9tTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSksXG4gIC8vICAgICAgIGVwc2lsb25SZXBlYXRlZFJ1bGVOYW1lID0gZXBzaWxvblJlcGVhdGVkUnVsZS5nZXROYW1lKCk7XG4gIC8vXG4gIC8vIHJ1bGVNYXBbZXBzaWxvblJlcGVhdGVkUnVsZU5hbWVdID0gZXBzaWxvblJlcGVhdGVkUnVsZTtcblxuICBsZXQgcnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgIHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXTtcblxuICBsZXQgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gcnVsZU1hcFtpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gfHwgbnVsbCxcbiAgICAgIGluZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAoaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9PT0gbnVsbCkge1xuICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlLmZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKHJ1bGUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgICBydWxlTWFwW2luZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG4gIH1cblxuICBpZiAoaW5kaXJlY3RseVJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgaW5kaXJlY3RseVJlZHVjZWRSdWxlID0gSW5kaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgaWYgKGluZGlyZWN0bHlSZWR1Y2VkUnVsZSAhPT0gbnVsbCkge1xuICAgICAgcnVsZU1hcFtpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhkZWZpbml0aW9ucywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmZvckVhY2goKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5yZW1vdmVUYWlsKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlcGxhY2VkRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9ucyA9IFtdLFxuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBsZWFzdCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSkgOiAgLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUpLCAgLy8vXG4gICAgICAgIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXBsYWNlbWVudERlZmluaXRpb24sIC8vL1xuICAgICAgICByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgcmVwbGFjZW1lbnREZWZpbml0aW9ucy5wdXNoKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG5cbiAgaWYgKGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgIT09IG51bGwpIHtcbiAgICBjb25zdCByZXBsYWNlbWVudERlZmluaXRpb24gPSBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lKTsgIC8vL1xuXG4gICAgcmVwbGFjZW1lbnREZWZpbml0aW9ucy5wdXNoKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG4gIH1cblxuICBydWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCk7XG5cbiAgcnVsZSA9IHJ1bGVNYXBbcnVsZU5hbWVdO1xuXG4gIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCAuLi5yZXBsYWNlbWVudERlZmluaXRpb25zKTtcblxuICBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIC4uLmFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGZpbHRlcihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5pbmNsdWRlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoIXJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHB1c2gobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbnMuZmluZCgoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmIChkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGRlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoZGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgaWYgKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbiwgIC8vL1xuICAgICAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKCksXG4gICAgICAgICAgICBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGZpcnN0KGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpLFxuICAgICAgICAgICAgcnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZTsgLy8vXG5cbiAgICAgIGlmIChydWxlTmFtZSA9PT0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIC8vL1xuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZm9yRWFjaCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgaWYgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNHcmVhdGVyVGhhbihncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIGlmIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25HcmVhdGVyVGhhbkdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cbiJdLCJuYW1lcyI6WyJlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJmaW5kIiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiZmlyc3QiLCJmaWx0ZXIiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTWFwIiwiZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwicnVsZSIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJkaXNhbGxvd0lzb2xhdGVkIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZSIsIkRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJmcm9tUnVsZSIsImRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiRGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibWFwIiwiSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsInJlcGxhY2VtZW50RGVmaW5pdGlvbnMiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbURpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kRGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwicmVwbGFjZUFsbERlZmluaXRpb25zIiwiYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVhc3QiLCJpc0xlYXN0IiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZSIsIkluZGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJmcm9tUnVsZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsIkluZGlyZWN0bHlSZWR1Y2VkUnVsZSIsImZvckVhY2giLCJyZW1vdmVUYWlsIiwicmVwbGFjZWREZWZpbml0aW9uIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwiRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJyZXBsYWNlRGVmaW5pdGlvbiIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5jbHVkZXMiLCJkZWZpbml0aW9uIiwiZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkZWZpbml0aW9uSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpc0dyZWF0ZXJUaGFuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBaUJiLFNBYUM7OztlQWJ1QkEsOEJBQThCOzs7eUJBZnZCLFdBQVc7NERBRVYseUJBQXlCOzZEQUN6Qix5QkFBeUI7OERBQ3hCLDBCQUEwQjsrREFDekIsMkJBQTJCO2dFQUMxQiw0QkFBNEI7eURBQzNCLDZCQUE2Qjs4REFDckIsc0NBQXNDO2dFQUNwQyx3Q0FBd0M7d0JBRVEsc0JBQXNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVwSCxJQUFRQyxJQUFJLEdBQTBCQyxVQUFjLGVBQUEsQ0FBNUNELElBQUksRUFBRUUsSUFBSSxHQUFvQkQsVUFBYyxlQUFBLENBQXRDQyxJQUFJLEVBQUVDLEtBQUssR0FBYUYs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