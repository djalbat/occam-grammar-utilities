"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateIndirectLeftRecursion;
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _rules = require("./utilities/rules");
var _ruleNames = require("./utilities/ruleNames");
var _definitions = require("./utilities/definitions");
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    indirectlyLeftRecursiveRules.forEach(function(indirectlyLeftRecursiveRule) {
        var reducedRuleName = null, reducedLeftRecursiveDefinition = null;
        var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), implicitlyLeftRecursiveRuleNames = retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule);
        if (reducedRule !== null) {
            var indirectlyLeftRecursiveRuleDefinitions = indirectlyLeftRecursiveRule.getDefinitions(), lastIndirectlyLeftRecursiveRuleDefinition = last(indirectlyLeftRecursiveRuleDefinitions);
            reducedLeftRecursiveDefinition = lastIndirectlyLeftRecursiveRuleDefinition; ///
            reducedRuleName = reducedRule.getName();
            ruleMap[reducedRuleName] = reducedRule;
        }
        implicitlyLeftRecursiveRuleNames.forEach(function(implicitlyLeftRecursiveRuleName, index) {
            var _implicitlyLeftRecursiveRule;
            var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName), indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions);
            var repeatedRuleName = null;
            var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinitionAndIndex(indirectlyLeftRecursiveDefinition, index);
            if (repeatedRule !== null) {
                repeatedRuleName = repeatedRule.getName();
                ruleMap[repeatedRuleName] = repeatedRule;
            }
            var rewrittenIndirectlyLeftRecursiveDefinition = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName), implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), replacedDefinition = implicitlyLeftRecursiveDefinition, replacementDefinitions = rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition), implicitlyLeftRecursiveRule = ruleMap[implicitlyLeftRecursiveRuleName];
            (_implicitlyLeftRecursiveRule = implicitlyLeftRecursiveRule).replaceDefinition.apply(_implicitlyLeftRecursiveRule, [
                replacedDefinition
            ].concat(_toConsumableArray(replacementDefinitions)));
            var leftRecursiveDefinition = first(replacementDefinitions); ///
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
        });
    });
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first;
function retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = (0, _rules).retrieveLeftRecursiveRules(leftRecursiveDefinitions, _indirectly.default, ruleMap);
    return indirectlyLeftRecursiveRules;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndImplicitlyLeftRecursiveDefinition(parts, ruleName, implicitlyLeftRecursiveDefinition);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule) {
    var callback = function callback(indirectlyLeftRecursiveDefinition) {
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), ruleName = implicitlyLeftRecursiveDefinition.getRuleName();
        return ruleName;
    };
    var implicitlyLeftRecursiveRuleNames = (0, _ruleNames).retrieveLeftRecursiveRuleNames(indirectlyLeftRecursiveRule, _indirectly.default, callback);
    return implicitlyLeftRecursiveRuleNames;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName) {
    var directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, repeatedRuleName), rewrittenIndirectlyLeftRecursiveDefinition = directlyLeftRecursiveDefinition; ///
    return rewrittenIndirectlyLeftRecursiveDefinition;
}
function rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition) {
    var replacementDefinitions = [];
    var definition = rewrittenIndirectlyLeftRecursiveDefinition, directlyLeftRecursiveDefinition = _directly.default.fromImplicitlyLeftRecursiveDefinitionAndDefinition(implicitlyLeftRecursiveDefinition, definition);
    replacementDefinitions.push(directlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        var definition1 = reducedLeftRecursiveDefinition, leftRecursiveDefinition = _left.default.fromImplicitlyLeftRecursiveDefinitionAndDefinition(implicitlyLeftRecursiveDefinition, definition1);
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName) {
    var callback = function callback(indirectlyLeftRecursiveDefinition) {
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), ruleName = implicitlyLeftRecursiveDefinition.getRuleName();
        if (ruleName === implicitlyLeftRecursiveRuleName) {
            return true;
        }
    };
    var indirectlyLeftRecursiveDefinitions = (0, _definitions).retrieveLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, _indirectly.default, callback);
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,