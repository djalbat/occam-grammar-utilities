"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateIndirectLeftRecursion;
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _parts = require("./utilities/parts");
var _class = require("./utilities/class");
var _part = require("./utilities/part");
var _definitions = require("./utilities/definitions");
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    indirectlyLeftRecursiveRules.forEach(function(indirectlyLeftRecursiveRule) {
        var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var implicitlyLeftRecursiveRuleNames = retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule);
        implicitlyLeftRecursiveRuleNames.forEach(function(implicitlyLeftRecursiveRuleName, index) {
            var leftRecursiveDefinition, directlyLeftRecursiveDefinition;
            var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName), indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions), repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinitionAndIndex(indirectlyLeftRecursiveDefinition, index), repeatedRuleName = repeatedRule.getName();
            ruleMap[repeatedRuleName] = repeatedRule;
            var indirectlyLeftRecursiveRuleDefinitions = indirectlyLeftRecursiveRule.getDefinitions(), lastIndirectlyLeftRecursiveRuleDefinition = last(indirectlyLeftRecursiveRuleDefinitions);
            leftRecursiveDefinition = lastIndirectlyLeftRecursiveRuleDefinition; ///
            directlyLeftRecursiveDefinition = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName);
            var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), definitions = [
                directlyLeftRecursiveDefinition,
                leftRecursiveDefinition
            ];
            directlyLeftRecursiveDefinition = rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, definitions, ruleMap);
            leftRecursiveDefinition = directlyLeftRecursiveDefinition; ///
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
        });
    });
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last, tail = _necessary.arrayUtilities.tail;
function retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = [];
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], indirectlyLeftRecursiveRulesIncludesRule = indirectlyLeftRecursiveRules.includes(rule);
            if (!indirectlyLeftRecursiveRulesIncludesRule) {
                var indirectlyLeftRecursiveRule = rule; ///
                indirectlyLeftRecursiveRules.push(indirectlyLeftRecursiveRule);
            }
        }
    });
    return indirectlyLeftRecursiveRules;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, _indirectly.default);
    return indirectlyLeftRecursiveDefinition;
}
function retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule) {
    var implicitlyLeftRecursiveRuleNames = [], definitions = indirectlyLeftRecursiveRule.getDefinitions();
    definitions.forEach(function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _indirectly.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = definition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), implicitlyLeftRecursiveRuleNamesIncludesRuleName = implicitlyLeftRecursiveRuleNames.includes(ruleName);
            if (!implicitlyLeftRecursiveRuleNamesIncludesRuleName) {
                var implicitlyLeftRecursiveRuleName = ruleName; ///
                implicitlyLeftRecursiveRuleNames.push(implicitlyLeftRecursiveRuleName);
            }
        }
    });
    return implicitlyLeftRecursiveRuleNames;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName) {
    var parts = indirectlyLeftRecursiveDefinition.getParts();
    var firstPart = first(parts), repeatedRuleNamePart = (0, _part).ruleNamePartFromRuleName(repeatedRuleName);
    parts = [
        firstPart,
        repeatedRuleNamePart
    ];
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), directlyLeftRecursiveDefinition = _directly.default.fromRuleNameAndParts(ruleName, parts);
    return directlyLeftRecursiveDefinition;
}
function rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, definitions, ruleMap) {
    var _rule;
    var rewrittenDefinitions = definitions.map(function(definition, index) {
        var Definition = index === 0 ? _directly.default : _left.default;
        var definitionParts = definition.getParts(), implicitlyLeftRecursiveDefinitionParts = implicitlyLeftRecursiveDefinition.getParts();
        definitionParts = (0, _parts).cloneParts(definitionParts); ///
        implicitlyLeftRecursiveDefinitionParts = tail((0, _parts).cloneParts(implicitlyLeftRecursiveDefinitionParts)); ///
        var parts = _toConsumableArray(definitionParts).concat(_toConsumableArray(implicitlyLeftRecursiveDefinitionParts));
        var ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), recursiveRuleNames = null, leftRecursiveRuleNames = null; ///
        definition = new Definition(parts, ruleName, recursiveRuleNames, leftRecursiveRuleNames); ///
        var rewrittenDefinition = definition; ///
        return rewrittenDefinition;
    }), ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], replacedDefinition = implicitlyLeftRecursiveDefinition, replacementDefinitions = rewrittenDefinitions, firstRewrittenDefinition = first(rewrittenDefinitions), directlyLeftRecursiveDefinition = firstRewrittenDefinition; ///
    (_rule = rule).replaceDefinition.apply(_rule, [
        replacedDefinition
    ].concat(_toConsumableArray(replacementDefinitions)));
    return directlyLeftRecursiveDefinition;
}
function retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName) {
    var definitions = indirectlyLeftRecursiveRule.getDefinitions(), indirectlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _indirectly.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = definition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), ruleName = implicitlyLeftRecursiveDefinition.getRuleName();
            if (ruleName === implicitlyLeftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,