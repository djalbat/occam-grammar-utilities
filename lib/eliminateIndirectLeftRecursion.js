"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _left = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var find = _necessary.arrayUtilities.find, push = _necessary.arrayUtilities.push, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
var count = 0;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var _rule;
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var disallowIsolated = false, directlyReducedRule = _directly.default.fromRule(rule, disallowIsolated);
    var directlyReducedRuleName = null;
    if (directlyReducedRule !== null) {
        directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    var directlyRepeatedRule = _directly1.default.fromRule(rule), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    var definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(definitions);
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    var removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        indirectlyLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, directlyRepeatedRuleName); ///
        return indirectlyLeftRecursiveDefinition;
    });
    var replacementDefinitions = _toConsumableArray(indirectlyLeftRecursiveDefinitions);
    if (directlyReducedRuleName !== null) {
        var leftRecursiveDefinition = _left.default.fromDirectlyReducedRuleNameAndDirectlyRepeatedRuleName(directlyReducedRuleName, directlyRepeatedRuleName);
        replacementDefinitions = _toConsumableArray(replacementDefinitions).concat([
            leftRecursiveDefinition
        ]);
    }
    (_rule = rule).replaceAllDefinitions.apply(_rule, _toConsumableArray(replacementDefinitions));
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions.apply(void 0, [
        leftRecursiveDefinitions,
        removedLeftRecursiveDefinitions
    ].concat(_toConsumableArray(addedLeftRecursiveDefinitions)));
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), least = indirectlyLeftRecursiveDefinition.isLeast();
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var indirectlyRepeatedRule = _indirectly1.default.fromRuleAndLeftRecursiveRuleName(rule, leftRecursiveRuleName), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName), indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyReducedRule === null) {
        indirectlyReducedRule = _indirectly.default.fromRule(rule);
        ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
    }
    var definitions, replacedDefinition, replacementDefinition;
    definitions = rule.getDefinitions();
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
    replacedDefinition = indirectlyLeftRecursiveDefinition; ///
    replacementDefinition = _left.default.fromRuleNameAndLeftRecursiveRuleName(ruleName, leftRecursiveRuleName);
    rule.replaceDefinition(replacedDefinition, replacementDefinition);
    rule.removeDefinitions(indirectlyLeftRecursiveDefinitions);
    ruleName = leftRecursiveDefinition.getRuleName();
    rule = ruleMap[ruleName];
    definitions = rule.getDefinitions();
    var definitionsIncludesLeftRecursiveDefinition = definitions.includes(leftRecursiveDefinition), firstReplacementDefinition = least ? _directly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName); ///
    if (definitionsIncludesLeftRecursiveDefinition) {
        replacedDefinition = leftRecursiveDefinition; ///
        var secondReplacementDefinition = _left.default.fromLeftRecursiveDefinitionAndIndirectlyReducedRuleName(leftRecursiveDefinition, indirectlyReducedRuleName); ///
        rule.replaceDefinition(replacedDefinition, firstReplacementDefinition, secondReplacementDefinition);
    } else {
        addDefinition(rule, firstReplacementDefinition);
    }
    var addedLeftRecursiveDefinition = firstReplacementDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    for(var _len = arguments.length, addedLeftRecursiveDefinitions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        addedLeftRecursiveDefinitions[_key - 2] = arguments[_key];
    }
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    push(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions(), directlyLeftRecursiveDefinition = definitions.find(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = _instanceof(definition, _indirectly2.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}
function addDefinition(rule, definition) {
    var definitions = rule.getDefinitions();
    definitions.unshift(definition);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5pbXBvcnQgSW5kaXJlY3RseVJlZHVjZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVkdWNlZC9pbmRpcmVjdGx5XCI7XG5pbXBvcnQgSW5kaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2luZGlyZWN0bHlcIjtcbmltcG9ydCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZS9sZWZ0XCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZS9sZWZ0L2RpcmVjdGx5XCI7XG5pbXBvcnQgSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnQvaW5kaXJlY3RseVwiO1xuXG5pbXBvcnQgeyBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3J1bGVOYW1lXCI7XG5cbmNvbnN0IHsgZmluZCwgcHVzaCwgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmxldCBjb3VudCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgbGV0IGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIHdoaWxlIChncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlTWFwKTtcblxuICAgIChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSA/XG4gICAgICByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkgOlxuICAgICAgICByZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKTtcblxuICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKytjb3VudCA+IEluZmluaXR5ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBydWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV07XG5cbiAgY29uc3QgZGlzYWxsb3dJc29sYXRlZCA9IGZhbHNlLFxuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlID0gRGlyZWN0bHlSZWR1Y2VkUnVsZS5mcm9tUnVsZShydWxlLCBkaXNhbGxvd0lzb2xhdGVkKTtcblxuICBsZXQgZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBudWxsO1xuXG4gIGlmIChkaXJlY3RseVJlZHVjZWRSdWxlICE9PSBudWxsKSB7XG4gICAgZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBkaXJlY3RseVJlZHVjZWRSdWxlLmdldE5hbWUoKTtcblxuICAgIHJ1bGVNYXBbZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVdID0gZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbiAgfVxuXG4gIGNvbnN0IGRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gRGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGUocnVsZSksXG4gICAgICAgIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlLmdldE5hbWUoKTtcblxuICBydWxlTWFwW2RpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gPSBkaXJlY3RseVJlcGVhdGVkUnVsZTtcblxuICBjb25zdCBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIGxldCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXG4gICAgLi4uZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgLi4uaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuICBdO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUpOyAgLy8vXG5cbiAgICByZXR1cm4gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICB9KTtcblxuICBsZXQgcmVwbGFjZW1lbnREZWZpbml0aW9ucyA9IFtcbiAgICAuLi5pbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zXG4gIF07XG5cbiAgaWYgKGRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lICE9PSBudWxsKSB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tRGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVBbmREaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUoZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSk7XG5cbiAgICByZXBsYWNlbWVudERlZmluaXRpb25zID0gW1xuICAgICAgLi4ucmVwbGFjZW1lbnREZWZpbml0aW9ucyxcbiAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uXG4gICAgXTtcbiAgfVxuXG4gIHJ1bGUucmVwbGFjZUFsbERlZmluaXRpb25zKC4uLnJlcGxhY2VtZW50RGVmaW5pdGlvbnMpO1xuXG4gIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAuLi5hZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSgpLFxuICAgICAgICBsZWFzdCA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc0xlYXN0KCk7XG5cbiAgbGV0IHJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV07XG5cbiAgY29uc3QgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUocnVsZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSxcbiAgICAgICAgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlLmdldE5hbWUoKTtcblxuICBydWxlTWFwW2luZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG5cbiAgbGV0IGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbiAgICAgIGluZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAoaW5kaXJlY3RseVJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgaW5kaXJlY3RseVJlZHVjZWRSdWxlID0gSW5kaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZU1hcFtpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbiAgfVxuXG4gIGxldCBkZWZpbml0aW9ucyxcbiAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbixcbiAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbjtcblxuICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgcmVwbGFjZWREZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG5cbiAgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKHJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCByZXBsYWNlbWVudERlZmluaXRpb24pO1xuXG4gIHJ1bGUucmVtb3ZlRGVmaW5pdGlvbnMoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgcnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpO1xuXG4gIHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXTtcblxuICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICBjb25zdCBkZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBkZWZpbml0aW9ucy5pbmNsdWRlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiksXG4gICAgICAgIGZpcnN0UmVwbGFjZW1lbnREZWZpbml0aW9uID0gbGVhc3QgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSkgOiAgLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSk7ICAvLy9cblxuICBpZiAoZGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgcmVwbGFjZWREZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247IC8vL1xuXG4gICAgY29uc3Qgc2Vjb25kUmVwbGFjZW1lbnREZWZpbml0aW9uID0gTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZShsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSk7ICAvLy9cblxuICAgIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCBmaXJzdFJlcGxhY2VtZW50RGVmaW5pdGlvbiwgc2Vjb25kUmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBhZGREZWZpbml0aW9uKHJ1bGUsIGZpcnN0UmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbiAgfVxuXG4gIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdFJlcGxhY2VtZW50RGVmaW5pdGlvbiwgLy8vXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zOyAvLy9cblxuICBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIC4uLmFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGZpbHRlcihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5pbmNsdWRlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoIXJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHB1c2gobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbnMuZmluZCgoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmIChkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGRlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoZGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgaWYgKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbiwgIC8vL1xuICAgICAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKCksXG4gICAgICAgICAgICBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGZpcnN0KGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpLFxuICAgICAgICAgICAgcnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZTsgLy8vXG5cbiAgICAgIGlmIChydWxlTmFtZSA9PT0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIC8vL1xuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZm9yRWFjaCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgaWYgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNHcmVhdGVyVGhhbihncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIGlmIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25HcmVhdGVyVGhhbkdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gYWRkRGVmaW5pdGlvbihydWxlLCBkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGRlZmluaXRpb25zLnVuc2hpZnQoZGVmaW5pdGlvbik7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiZmluZCIsImFycmF5VXRpbGl0aWVzIiwicHVzaCIsImZpcnN0IiwiZmlsdGVyIiwiY291bnQiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTWFwIiwiZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiSW5maW5pdHkiLCJydWxlIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImRpc2FsbG93SXNvbGF0ZWQiLCJkaXJlY3RseVJlZHVjZWRSdWxlIiwiRGlyZWN0bHlSZWR1Y2VkUnVsZSIsImZyb21SdWxlIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJnZXROYW1lIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJEaXJlY3RseVJlcGVhdGVkUnVsZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJtYXAiLCJJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kRGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwicmVwbGFjZW1lbnREZWZpbml0aW9ucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tRGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVBbmREaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJyZXBsYWNlQWxsRGVmaW5pdGlvbnMiLCJhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJnZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJsZWFzdCIsImlzTGVhc3QiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZSIsIkluZGlyZWN0bHlSZWR1Y2VkUnVsZSIsInJlcGxhY2VkRGVmaW5pdGlvbiIsInJlcGxhY2VtZW50RGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInJlcGxhY2VEZWZpbml0aW9uIiwicmVtb3ZlRGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmNsdWRlcyIsImZpcnN0UmVwbGFjZW1lbnREZWZpbml0aW9uIiwiRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwic2Vjb25kUmVwbGFjZW1lbnREZWZpbml0aW9uIiwiZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImFkZERlZmluaXRpb24iLCJhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkZWZpbml0aW9uIiwiZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkZWZpbml0aW9uSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImZvckVhY2giLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25HcmVhdGVyVGhhbkdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaXNHcmVhdGVyVGhhbiIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OzsrQkFrQmIsU0FhQzs7O2VBYnVCQSw4QkFBOEI7Ozt5QkFoQnZCLFdBQVc7NkRBRVYseUJBQXlCOzhEQUN4QiwwQkFBMEI7K0RBQ3pCLDJCQUEyQjtnRUFDMUIsNEJBQTRCO3lEQUMzQiw2QkFBNkI7OERBQ3JCLHNDQUFzQztnRUFDcEMsd0NBQXdDO3dCQUVoQyxzQkFBc0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTVFLElBQVFDLElBQUksR0FBMEJDLFVBQWMsZUFBQSxDQUE1Q0QsSUFBSSxFQUFFRSxJQUFJLEdBQW9CRCxVQUFjLGVBQUEsQ0FBdENDLElBQUksRUFBRUMsS0FBSyxHQUFhRixVQUFjLGVBQUEsQ0FBaENFLEtBQUssRUFBRUMsTUFBTSxHQUFL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