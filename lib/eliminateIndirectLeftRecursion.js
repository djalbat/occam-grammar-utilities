"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _indirectlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyReduced"));
var _indirectlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyRepeated"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _context = require("./utilities/context");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var count = 0;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(rule, context);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
    var rule = directlyLeftRecursiveDefinition.getRule(), allowIsolated = true, directlyReducedRule = _directlyReduced.default.execute(directlyLeftRecursiveDefinition, allowIsolated, context), directlyRepeatedRule = _directlyRepeated.default.execute(directlyLeftRecursiveDefinition, context);
    var indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, context);
    var directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context), removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = _directlyLeftRecursive.default.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinitions)(addedLeftRecursiveDefinitions, context);
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context);
    if (indirectlyReducedRule !== null) {
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyReducedRule(indirectlyLeftRecursiveDefinition, indirectlyReducedRule), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), rule = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
        rule.addDefinition(definition);
    }
    var rule1 = indirectlyLeftRecursiveDefinition.getRule(), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
    var replacementDefinition1 = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName), definition1 = replacementDefinition1; ///
    rule1.addDefinition(definition1);
    var indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context), removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions, leftRecursiveDefinition1 = rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule);
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinition)(leftRecursiveDefinition1, context);
}
function rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var least = indirectlyLeftRecursiveDefinition.isLeast();
    var definition = leftRecursiveDefinition.getDefinition();
    var rule = leftRecursiveDefinition.getRule(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), replacedDefinition = definition; ///
    definition = replacementDefinition; ///
    leftRecursiveDefinition = least ? _directly.default.fromRuleAndDefinition(rule, definition) : _indirectly.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition);
    definitionsIncludesDefinition ? rule.replaceDefinition(replacedDefinition, replacementDefinition) : rule.addDefinition(definition);
    return leftRecursiveDefinition;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyLeftRecursiveDefinitions;
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
        indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, function(indirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(), indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
            if (indirectlyLeftRecursiveDefinitionDefinition !== definition && indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName === leftRecursiveRuleName) {
                return true;
            }
        }, context);
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ].concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
        var definitions1 = indirectlyLeftRecursiveDefinitions.map(function(removedLeftRecursiveDefinition) {
            var definition = removedLeftRecursiveDefinition.getDefinition();
            return definition;
        });
        rule.removeDefinitions(definitions1);
    } else {
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ];
    }
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,