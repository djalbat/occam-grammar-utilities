"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _replacement = /*#__PURE__*/ _interopRequireDefault(require("./definition/replacement"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _implicitlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/implicitlyReduced"));
var _indirectlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyReduced"));
var _indirectlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyRepeated"));
var _leftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/leftRecursive"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _indirectlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/indirectlyLeftRecursive"));
var _array = require("./utilities/array");
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var count = 0;
var maxCount = 1;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition; ///
        //       rule = indirectlyLeftRecursiveDefinition.getRule();
        //       directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(rule, context);
        //
        // if (directlyLeftRecursiveDefinition !== null) {
        //   rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context);
        // } else {
        var depth = indirectlyLeftRecursiveDefinition.getDepth();
        depth > 1 ? reduceIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        // }
        greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
// function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
//   const allowIsolated = true,
//         directlyReducedRule = DirectlyReducedRuleOperation.execute(directlyLeftRecursiveDefinition, allowIsolated, context),
//         directlyRepeatedRule = DirectlyRepeatedRuleOperation.execute(directlyLeftRecursiveDefinition, context);
//
//   const rule = directlyLeftRecursiveDefinition.getRule();
//
//   let indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, context);
//
//   const directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, context),
//         removedLeftRecursiveDefinitions = [
//           ...directlyLeftRecursiveDefinitions,
//           ...indirectlyLeftRecursiveDefinitions
//         ];
//
//   indirectlyLeftRecursiveDefinitions = DirectlyLeftRecursiveDefinitionOperation.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
//
//   const addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
//
//   removeLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, context);
//
//   addLeftRecursiveDefinitions(addedLeftRecursiveDefinitions, context);
// }
function reduceIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule(), leftRecursiveDefinitionRuleName = leftRecursiveDefinitionRule.getName(), leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveDefinitionRule, function(leftRecursiveDefinition) {
            var leftRecursiveDefinitionLeftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveDefinitionLeftRecursiveRuleName = (0, _array.first)(leftRecursiveDefinitionLeftRecursiveRuleNames);
            if (firstLeftRecursiveDefinitionLeftRecursiveRuleName === ruleName) {
                return true;
            }
        }, context), leftRecursiveRuleName = leftRecursiveDefinitionRuleName; ///
        var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
        var ruleMap = context.ruleMap;
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
        var definitions1 = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
            var definition = leftRecursiveDefinition.getDefinition();
            return definition;
        });
        leftRecursiveDefinitionRule.removeDefinitions(definitions1);
        definitions1 = rule.getDefinitions();
        definitions1.forEach(function(definition) {});
    // const addedLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition, ///
    //       removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    //
    // removeLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, context);
    //
    // addLeftRecursiveDefinition(addedLeftRecursiveDefinition, context);
    } else {
        var removedLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ];
        (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    }
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context);
        _indirectlyLeftRecursive.default.execute(indirectlyLeftRecursiveDefinition, context);
        var rule1 = indirectlyLeftRecursiveDefinition.getRule();
        var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule1, function(indirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
            if (leftRecursiveDefinition === indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition && leftRecursiveRuleName === indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName) {
                return true;
            }
        }, context);
        var directlyLeftRecursiveDefinition = _leftRecursive.default.execute(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule, indirectlyReducedRule, context);
        _implicitlyReduced.default.execute(directlyLeftRecursiveDefinition, rule1, context);
        var addedLeftRecursiveDefinition = directlyLeftRecursiveDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
        (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
        (0, _context.addLeftRecursiveDefinition)(addedLeftRecursiveDefinition, context);
    } else {
        var removedLeftRecursiveDefinitions1 = [
            indirectlyLeftRecursiveDefinition
        ];
        (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions1, context);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBSZXBsYWNlbWVudERlZmluaXRpb24gZnJvbSBcIi4vZGVmaW5pdGlvbi9yZXBsYWNlbWVudFwiO1xuaW1wb3J0IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZXBlYXRlZC9pbmRpcmVjdGx5XCI7XG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vcnVsZS9kaXJlY3RseVJlZHVjZWRcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vcnVsZS9kaXJlY3RseVJlcGVhdGVkXCI7XG5pbXBvcnQgSW1wbGljaXRseVJlZHVjZWRSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9ydWxlL2ltcGxpY2l0bHlSZWR1Y2VkXCI7XG5pbXBvcnQgSW5kaXJlY3RseVJlZHVjZWRSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9ydWxlL2luZGlyZWN0bHlSZWR1Y2VkXCI7XG5pbXBvcnQgSW5kaXJlY3RseVJlcGVhdGVkUnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vcnVsZS9pbmRpcmVjdGx5UmVwZWF0ZWRcIjtcbmltcG9ydCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vZGVmaW5pdGlvbi9sZWZ0UmVjdXJzaXZlXCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vZGVmaW5pdGlvbi9kaXJlY3RseUxlZnRSZWN1cnNpdmVcIjtcbmltcG9ydCBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24gZnJvbSBcIi4vb3BlcmF0aW9uL2RlZmluaXRpb24vaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IGFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLFxuICAgICAgICAgYWRkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLFxuICAgICAgICAgZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgIHJlbW92ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLFxuICAgICAgICAgZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLFxuICAgICAgICAgZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NvbnRleHRcIlxuXG5sZXQgY291bnQgPSAwO1xuXG5jb25zdCBtYXhDb3VudCA9IDE7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KSB7XG4gIGxldCBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGNvdW50KysgPj0gbWF4Q291bnQgPyBudWxsIDogcmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihjb250ZXh0KTtcblxuICB3aGlsZSAoZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gICAgLy8gICAgICAgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG4gICAgLy8gICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKHJ1bGUsIGNvbnRleHQpO1xuICAgIC8vXG4gICAgLy8gaWYgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAvLyAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG4gICAgLy8gfSBlbHNlIHtcbiAgICBjb25zdCBkZXB0aCA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZXB0aCgpO1xuXG4gICAgKGRlcHRoID4gMSkgP1xuICAgICAgcmVkdWNlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCkgOlxuICAgICAgICByZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG4gICAgLy8gfVxuXG4gICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBjb3VudCsrID49IG1heENvdW50ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG4gIH1cbn1cblxuLy8gZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4vLyAgIGNvbnN0IGFsbG93SXNvbGF0ZWQgPSB0cnVlLFxuLy8gICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlID0gRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbi5leGVjdXRlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGFsbG93SXNvbGF0ZWQsIGNvbnRleHQpLFxuLy8gICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IERpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG4vL1xuLy8gICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG4vL1xuLy8gICBsZXQgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpO1xuLy9cbi8vICAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgY29udGV4dCksXG4vLyAgICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXG4vLyAgICAgICAgICAgLi4uZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4vLyAgICAgICAgICAgLi4uaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuLy8gICAgICAgICBdO1xuLy9cbi8vICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24uZXhlY3V0ZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBkaXJlY3RseVJlcGVhdGVkUnVsZSwgZGlyZWN0bHlSZWR1Y2VkUnVsZSwgY29udGV4dCk7XG4vL1xuLy8gICBjb25zdCBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7IC8vL1xuLy9cbi8vICAgcmVtb3ZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGNvbnRleHQpO1xuLy9cbi8vICAgYWRkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbi8vIH1cblxuZnVuY3Rpb24gcmVkdWNlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCkge1xuICBjb25zdCBydWxlID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgZGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCksXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBkZWZpbml0aW9uc0luY2x1ZGVzRGVmaW5pdGlvbiA9IGRlZmluaXRpb25zLmluY2x1ZGVzKGRlZmluaXRpb24pO1xuXG4gIGlmIChkZWZpbml0aW9uc0luY2x1ZGVzRGVmaW5pdGlvbikge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKSxcbiAgICAgICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUsIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcygpLFxuICAgICAgICAgICAgICBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gZmlyc3QobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICAgICAgICAgICAgaWYgKGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPT09IHJ1bGVOYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGNvbnRleHQpLFxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWU7ICAvLy9cblxuICAgIGNvbnN0IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlLmZyb21SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlcGVhdGVkUnVsZS5nZXROYW1lKCk7XG5cbiAgICBjb25zdCB7IHJ1bGVNYXAgfSA9IGNvbnRleHQ7XG5cbiAgICBydWxlTWFwW2luZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG5cbiAgICBsZXQgZGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKTtcblxuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSk7XG5cbiAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUucmVtb3ZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gICAgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCk7XG5cbiAgICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG5cbiAgICB9KTtcblxuICAgIC8vIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgIC8vICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zOyAvLy9cbiAgICAvL1xuICAgIC8vIHJlbW92ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbiAgICAvL1xuICAgIC8vIGFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXG4gICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25cbiAgICBdO1xuXG4gICAgcmVtb3ZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGNvbnRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGNvbnN0IHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICBkZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKSxcbiAgICAgICAgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGRlZmluaXRpb25zSW5jbHVkZXNEZWZpbml0aW9uID0gZGVmaW5pdGlvbnMuaW5jbHVkZXMoZGVmaW5pdGlvbik7XG5cbiAgaWYgKGRlZmluaXRpb25zSW5jbHVkZXNEZWZpbml0aW9uKSB7XG4gICAgY29uc3QgaW5kaXJlY3RseVJlZHVjZWRSdWxlID0gSW5kaXJlY3RseVJlZHVjZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSxcbiAgICAgICAgICBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gSW5kaXJlY3RseVJlcGVhdGVkUnVsZU9wZXJhdGlvbi5leGVjdXRlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgICBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24uZXhlY3V0ZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xuXG4gICAgY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG5cbiAgICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKTtcblxuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoKSxcbiAgICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSgpLFxuICAgICAgICAgICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9PT0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pICYmIChsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPT09IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgY29udGV4dCk7XG5cbiAgICBjb25zdCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24uZXhlY3V0ZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUsIGluZGlyZWN0bHlSZWR1Y2VkUnVsZSwgY29udGV4dCk7XG5cbiAgICBJbXBsaWNpdGx5UmVkdWNlZFJ1bGVPcGVyYXRpb24uZXhlY3V0ZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlLCBjb250ZXh0KTtcblxuICAgIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgICByZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgY29udGV4dCk7XG5cbiAgICBhZGRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gW1xuICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uXG4gICAgXTtcblxuICAgIHJlbW92ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImNvdW50IiwibWF4Q291bnQiLCJjb250ZXh0IiwiZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGVwdGgiLCJnZXREZXB0aCIsInJlZHVjZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsInJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJydWxlIiwiZ2V0UnVsZSIsImRlZmluaXRpb24iLCJnZXREZWZpbml0aW9uIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImRlZmluaXRpb25zSW5jbHVkZXNEZWZpbml0aW9uIiwiaW5jbHVkZXMiLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJnZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUiLCJnZXROYW1lIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZmlyc3QiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwicnVsZU1hcCIsIm1hcCIsInJlbW92ZURlZmluaXRpb25zIiwiZm9yRWFjaCIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJJbmRpcmVjdGx5UmVkdWNlZFJ1bGVPcGVyYXRpb24iLCJleGVjdXRlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZU9wZXJhdGlvbiIsIkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uT3BlcmF0aW9uIiwiSW1wbGljaXRseVJlZHVjZWRSdWxlT3BlcmF0aW9uIiwiYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkEyQkE7OztlQUF3QkE7OztnRUF6QlU7K0RBQ0M7b0VBQ007cUVBQ0M7c0VBQ0M7c0VBQ0E7dUVBQ0M7a0VBQ0M7MEVBQ1E7NEVBQ0U7cUJBRWpDO3VCQVE0Qzs7Ozs7O0FBRWxFLElBQUlDLFFBQVE7QUFFWixJQUFNQyxXQUFXO0FBRUYsU0FBU0YsK0JBQStCRyxPQUFPLEVBQUU7SUFDOUQsSUFBSUMsNENBQTRDSCxXQUFXQyxXQUFXLElBQUksR0FBR0csSUFBQUEsMERBQWlELEVBQUNGLFFBQVE7SUFFdkksTUFBT0MsOENBQThDLElBQUksQ0FBRTtRQUN6RCxJQUFNRSxvQ0FBb0NGLDJDQUEyQyxHQUFHO1FBQ3hGLDREQUE0RDtRQUM1RCw4RkFBOEY7UUFDOUYsRUFBRTtRQUNG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