"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateIndirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _rules = require("./utilities/rules");
var _ruleNames = require("./utilities/ruleNames");
var _definitions = require("./utilities/definitions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules, indirectlyLeftRecursiveRulesLength;
    indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    indirectlyLeftRecursiveRulesLength = indirectlyLeftRecursiveRules.length;
    while(indirectlyLeftRecursiveRulesLength > 0){
        indirectlyLeftRecursiveRules.forEach(function(indirectlyLeftRecursiveRule) {
            rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap);
        });
        indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
        indirectlyLeftRecursiveRulesLength = indirectlyLeftRecursiveRules.length;
    }
}
function rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedLeftRecursiveDefinition = reduceIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap), leftRecursiveRuleNames = (0, _ruleNames.retrieveLeftRecursiveRuleNames)(indirectlyLeftRecursiveRule, _indirectly.default, function(indirectlyLeftRecursiveDefinition) {
        var leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
        return leftRecursiveRuleName;
    });
    leftRecursiveRuleNames.forEach(function(leftRecursiveRuleName, index) {
        var _implicitlyLeftRecursiveRule;
        var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, leftRecursiveRuleName), indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions);
        var repeatedRuleName = null;
        var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinitionAndIndex(indirectlyLeftRecursiveDefinition, index);
        if (repeatedRule !== null) {
            repeatedRuleName = repeatedRule.getName();
            ruleMap[repeatedRuleName] = repeatedRule;
        }
        var leftRecursiveDefinition;
        var rewrittenIndirectlyLeftRecursiveDefinition = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName), leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions(), lastLeftRecursiveDefinition = last(leftRecursiveDefinitions);
        leftRecursiveDefinition = lastLeftRecursiveDefinition; ///
        var replacedDefinition = leftRecursiveDefinition, replacementDefinitions = rewriteLeftRecursiveDefinition(leftRecursiveDefinitions, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition), implicitlyLeftRecursiveRule = ruleMap[leftRecursiveRuleName];
        (_implicitlyLeftRecursiveRule = implicitlyLeftRecursiveRule).replaceDefinition.apply(_implicitlyLeftRecursiveRule, [
            replacedDefinition
        ].concat(_toConsumableArray(replacementDefinitions)));
        leftRecursiveDefinition = first(replacementDefinitions); ///
        leftRecursiveDefinitions.push(leftRecursiveDefinition);
    });
}
function rewriteLeftRecursiveDefinition(leftRecursiveDefinitions, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition) {
    var replacementDefinitions = [];
    var definition = rewrittenIndirectlyLeftRecursiveDefinition, directlyLeftRecursiveDefinition = _indirectly.default.fromLeftRecursiveDefinitionsAndDefinition(leftRecursiveDefinitions, definition);
    replacementDefinitions.push(directlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        var definition1 = reducedLeftRecursiveDefinition, leftRecursiveDefinition = _left.default.fromImplicitlyLeftRecursiveDefinitionAndDefinition(leftRecursiveDefinition, definition1);
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function reduceIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedLeftRecursiveDefinition = null;
    var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule);
    if (reducedRule !== null) {
        var indirectlyLeftRecursiveRuleDefinitions = indirectlyLeftRecursiveRule.getDefinitions(), lastIndirectlyLeftRecursiveRuleDefinition = last(indirectlyLeftRecursiveRuleDefinitions);
        reducedLeftRecursiveDefinition = lastIndirectlyLeftRecursiveRuleDefinition; ///
        var reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
    }
    return reducedLeftRecursiveDefinition;
}
function retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = (0, _rules.retrieveLeftRecursiveRules)(leftRecursiveDefinitions, _indirectly.default, ruleMap);
    return indirectlyLeftRecursiveRules;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName) {
    var directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, repeatedRuleName), rewrittenIndirectlyLeftRecursiveDefinition = directlyLeftRecursiveDefinition; ///
    return rewrittenIndirectlyLeftRecursiveDefinition;
}
function retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, leftRecursiveRuleName) {
    var indirectlyLeftRecursiveDefinitions = (0, _definitions.retrieveLeftRecursiveDefinitions)(indirectlyLeftRecursiveRule, _indirectly.default, function(indirectlyLeftRecursiveDefinition) {
        var leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
        if (ruleName === leftRecursiveRuleName) {
            return true;
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,