"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _definition = /*#__PURE__*/ _interopRequireDefault(require("./definition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directedGraph = require("./utilities/directedGraph");
var _array = require("./utilities/array");
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateIndirectLeftRecursion(context) {
    var cycles = context.cycles, ruleMap = context.ruleMap;
    var greatestNonTrivialCycle = greatestNonTrivialCycleFromCycles(cycles);
    while(greatestNonTrivialCycle !== null){
        var cycle = greatestNonTrivialCycle, ruleNames = (0, _directedGraph.ruleNamesFromCycle)(cycle), firstLastRuleName = (0, _array.firstLast)(ruleNames), secondLastRuleName = (0, _array.secondLast)(ruleNames), ruleName = firstLastRuleName, leftRecursiveRuleName = secondLastRuleName, rule = ruleMap[ruleName], leftRecursiveRule = ruleMap[leftRecursiveRuleName];
        rewriteIndirectLeftRecursion(rule, leftRecursiveRule, context);
        debugger;
        greatestNonTrivialCycle = greatestNonTrivialCycleFromCycles(cycles);
    }
}
function rewriteIndirectLeftRecursion(rule, leftRecursiveRule, context) {
    var ruleName = rule.getName(), leftRecursiveRuleName = leftRecursiveRule.getName(), leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveRule, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionLeftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveDefinitionLeftRecursiveRuleName = (0, _array.first)(leftRecursiveDefinitionLeftRecursiveRuleNames);
        if (firstLeftRecursiveDefinitionLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context);
    var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    var ruleMap = context.ruleMap;
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var definition, definitions;
    definitions = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition.getDefinition();
        return definition;
    });
    leftRecursiveRule.removeDefinitions(definitions);
    var firstLeftRecursiveDefinition = (0, _array.first)(leftRecursiveDefinitions), leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
    definition = _definition.default.fromLeftRecursiveDefinition(leftRecursiveDefinition);
    leftRecursiveRule.addDefinition(definition);
    definitions = rule.getDefinitions();
    definitions = definitions.forEach(function(definition) {
        definition = _definition.default.fromDefinitionAndLeftRecursiveDefinition(definition, leftRecursiveDefinition); ///
        return definition;
    });
    leftRecursiveRule.addDefinitions(definitions);
}
function greatestNonTrivialCycleFromCycles(cycles) {
    var greatestNonTrivialCycle = null;
    var greatestCycle = greatestCycleFromCycles(cycles);
    if (greatestCycle !== null) {
        var greatestCycleLength = greatestCycle.length;
        if (greatestCycleLength > 1) {
            greatestNonTrivialCycle = greatestCycle; ///
        }
    }
    return greatestNonTrivialCycle;
}
function greatestCycleFromCycles(cycles) {
    var greatestCycle = cycles.reduce(function(greatestCycle, cycle) {
        if (greatestCycle === null) {
            greatestCycle = cycle; ///
        } else {
            var cycleLength = cycle.length, greatestCycleLength = greatestCycle.length;
            if (cycleLength > greatestCycleLength) {
                greatestCycle = cycle; ///
            }
        }
        return greatestCycle;
    }, null);
    return greatestCycle;
}

//# sourceMappingURL=data:application/json;base64,