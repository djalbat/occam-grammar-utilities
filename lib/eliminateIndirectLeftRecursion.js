"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _reduced = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced"));
var _repeated = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated"));
var _left = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _definitions = require("./utilities/definitions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(maximalIndirectlyLeftRecursiveDefinition !== null){
        var _rule;
        var indirectlyLeftRecursiveDefinition = maximalIndirectlyLeftRecursiveDefinition; ///
        var replacedDefinition = void 0, replacementDefinitions = void 0;
        var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions();
        var indirectlyLeftRecursiveDefinitions = void 0;
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(definitions), directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
        if (directlyLeftRecursiveDefinitionsLength > 0) {
        // let definitions;
        //
        // const directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions);
        //
        // reduceRule(rule, ruleMap);
        //
        // definitions = directlyLeftRecursiveDefinitions; ///
        //
        // rule.removeDefinitions(definitions);
        //
        // definitions = rule.getDefinitions();
        //
        // definitions = rewriteLeftRecursiveDefinitions(definitions, directlyLeftRecursiveDefinition, ruleName); ///
        //
        // rule.removeAllDefinitions();
        //
        // definitions.forEach((definition) => {
        //   rule.addDefinition(definition);
        // });
        //
        // const lastLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLastLeftRecursiveDefinition(),
        //       leftRecursiveDefinition = lastLeftRecursiveDefinition;  ///
        //
        // ruleName = leftRecursiveDefinition.getRuleName();
        //
        // rule = ruleMap[ruleName];
        //
        // const repeatedRuleName = repeatDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, ruleMap);
        //
        // replacedDefinition = leftRecursiveDefinition; ///
        //
        // replacementDefinitions = rewriteLeftRecursiveDefinitionsEx(definitions, leftRecursiveDefinition, repeatedRuleName, ruleName);
        } else {
            var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
            indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
            indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions); ///
            var last = indirectlyLeftRecursiveDefinition.isLast(), lastLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLastLeftRecursiveDefinition(), leftRecursiveDefinition = lastLeftRecursiveDefinition; ///
            var reducedRuleName = reduceRule(rule, ruleMap), repeatedRuleName = repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap);
            ruleName = leftRecursiveDefinition.getRuleName();
            rule = ruleMap[ruleName];
            replacedDefinition = leftRecursiveDefinition; ///
            replacementDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName, reducedRuleName, last);
        }
        var firstReplacementDefinition = first(replacementDefinitions), addedLeftRecursiveDefinition = firstReplacementDefinition, removedLeftRecursiveDefinitions = _toConsumableArray(indirectlyLeftRecursiveDefinitions).concat(_toConsumableArray(directlyLeftRecursiveDefinitions));
        (_rule = rule).replaceDefinition.apply(_rule, [
            replacedDefinition
        ].concat(_toConsumableArray(replacementDefinitions)));
        amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition); ///
        maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function reduceRule(rule, ruleMap) {
    var reducedRuleName = null;
    var reducedRule = _reduced.default.fromRule(rule);
    if (reducedRule !== null) {
        reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
    }
    return reducedRuleName;
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    leftRecursiveDefinitions.push(addedLeftRecursiveDefinition);
}
function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, directlyLeftRecursiveDefinition, ruleName) {
    leftRecursiveDefinitions = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
        leftRecursiveDefinition = _left.default.fromRuleNameLeftRecursiveDefinitionAndDirectlyLeftRecursiveDefinition(ruleName, leftRecursiveDefinition, directlyLeftRecursiveDefinition); ///
        return leftRecursiveDefinition;
    });
    return leftRecursiveDefinitions;
}
function rewriteLeftRecursiveDefinitionsEx(leftRecursiveDefinitions, leftRecursiveDefinition, repeatedRuleName, ruleName) {
    var replacementDefinitions = [];
    var replacementDefinition, leftRecursiveDefinitionA;
    var leftRecursiveDefinitionB = leftRecursiveDefinition; ///
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions);
    leftRecursiveDefinitionA = firstLeftRecursiveDefinition; ///
    replacementDefinition = _directly.default.fromLeftRecursiveDefinitionsRepeatedRuleNameAndRuleName(leftRecursiveDefinitionA, leftRecursiveDefinitionB, repeatedRuleName, ruleName); ///
    replacementDefinitions.push(replacementDefinition);
    replacementDefinition = _left.default.fromLeftRecursiveDefinitionRepeatedRuleNameAndRuleName(leftRecursiveDefinitionB, repeatedRuleName, ruleName); ///
    replacementDefinitions.push(replacementDefinition);
    return replacementDefinitions;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
        return directlyLeftRecursiveDefinition;
    });
    return directlyLeftRecursiveDefinition;
}
function repeatDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, ruleMap) {
    var repeatedRule = _repeated.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), repeatedRuleName = repeatedRule.getName();
    ruleMap[repeatedRuleName] = repeatedRule;
    return repeatedRuleName;
}
function repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var repeatedRuleName = null;
    var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);
    if (repeatedRule !== null) {
        repeatedRuleName = repeatedRule.getName();
        ruleMap[repeatedRuleName] = repeatedRule;
    }
    return repeatedRuleName;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName, reducedRuleName, last) {
    var replacementDefinitions = [], LeftRecursiveDefinition = last ? _directly.default : _indirectly.default, replacementDefinition = LeftRecursiveDefinition.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName); ///
    replacementDefinitions.push(replacementDefinition);
    if (reducedRuleName !== null) {
        var replacementDefinition1 = LeftRecursiveDefinition.fromLeftRecursiveDefinitionAndReducedRuleName(leftRecursiveDefinition, reducedRuleName); ///
        replacementDefinitions.push(replacementDefinition1);
    }
    return replacementDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = _instanceof(definition, _indirectly.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var maximalIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (maximalIndirectlyLeftRecursiveDefinition === null) {
            maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(maximalIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition) {
                maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return maximalIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,