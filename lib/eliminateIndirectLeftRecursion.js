"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateIndirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _definitions = require("./utilities/definitions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(maximalIndirectlyLeftRecursiveDefinition !== null){
        var _rule;
        var indirectlyLeftRecursiveDefinition = maximalIndirectlyLeftRecursiveDefinition, ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
        var definitions = rule.getDefinitions(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveRule = rule, reducedLeftRecursiveDefinition = reduceIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap), indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
        indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions); ///
        var last = indirectlyLeftRecursiveDefinition.isLast(), lastLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLastLeftRecursiveDefinition(), leftRecursiveDefinition = lastLeftRecursiveDefinition; ///
        ruleName = leftRecursiveDefinition.getRuleName();
        rule = ruleMap[ruleName];
        var repeatedRuleName = repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap), replacedDefinition = leftRecursiveDefinition, replacementDefinitions = last ? rewriteDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) : rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName), firstReplacementDefinition = first(replacementDefinitions), addedLeftRecursiveDefinition = firstReplacementDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
        (_rule = rule).replaceDefinition.apply(_rule, [
            replacedDefinition
        ].concat(_toConsumableArray(replacementDefinitions)));
        amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
        maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    leftRecursiveDefinitions.push(addedLeftRecursiveDefinition);
}
function reduceIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedLeftRecursiveDefinition = null;
    var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule);
    if (reducedRule !== null) {
        var definitions = indirectlyLeftRecursiveRule.getDefinitions(), lastDefinition = last(definitions), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        reducedLeftRecursiveDefinition = lastDefinition; ///
    }
    return reducedLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) {
    var replacementDefinitions = [];
    var directlyLeftRecursiveDefinition;
    directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName); ///
    replacementDefinitions.push(directlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        leftRecursiveDefinition = _left.default.fromReducedLeftRecursiveDefinitionAndLeftRecursiveDefinition(reducedLeftRecursiveDefinition, leftRecursiveDefinition); ///
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var repeatedRuleName = null;
    var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);
    if (repeatedRule !== null) {
        repeatedRuleName = repeatedRule.getName();
        ruleMap[repeatedRuleName] = repeatedRule;
    }
    return repeatedRuleName;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName) {
    var replacementDefinitions = [];
    indirectlyLeftRecursiveDefinition = _indirectly.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName); ///
    replacementDefinitions.push(indirectlyLeftRecursiveDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        leftRecursiveDefinition = _left.default.fromReducedLeftRecursiveDefinitionAndLeftRecursiveDefinition(reducedLeftRecursiveDefinition, leftRecursiveDefinition); ///
        replacementDefinitions.push(leftRecursiveDefinition);
    }
    return replacementDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        if (_instanceof(definition, _indirectly.default)) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var maximalIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (maximalIndirectlyLeftRecursiveDefinition === null) {
            maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(maximalIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition) {
                maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return maximalIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,