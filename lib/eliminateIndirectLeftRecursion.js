"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _array = require("./utilities/array");
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var count = 0;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(rule, context);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(context);
    }
}
function directlyReduceRule(directlyLeftRecursiveDefinition, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions, rule = directlyLeftRecursiveDefinition.getRule(), disallowIsolated = false, leftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions)), directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, disallowIsolated);
    if (directlyReducedRule !== null) {
        var directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    return directlyReducedRule;
}
function directlyRepeatRule(directlyLeftRecursiveDefinition, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions, rule = directlyLeftRecursiveDefinition.getRule(), leftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions)), directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    return directlyRepeatedRule;
}
function indirectlyReduceRule(indirectlyLeftRecursiveDefinition, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions, rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName);
    var indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyReducedRule === null) {
        var leftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
        indirectlyReducedRule = _indirectly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions);
        ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
    }
    var vacuous = indirectlyReducedRule.isVacuous();
    if (!vacuous) {
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyReducedRule(indirectlyLeftRecursiveDefinition, indirectlyReducedRule), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), rule1 = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
        rule1.addDefinition(definition);
    }
}
function indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, context) {
    var ruleMap = context.ruleMap, leftRecursiveDefinitions = context.leftRecursiveDefinitions, rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyRepeatedRuleName = (0, _ruleName.indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName)(ruleName, leftRecursiveRuleName);
    var indirectlyRepeatedRule = ruleMap[indirectlyRepeatedRuleName] || null;
    if (indirectlyRepeatedRule === null) {
        indirectlyRepeatedRule = _indirectly1.default.fromRuleLeftRecursiveRuleNameAndLeftRecursiveDefinitions(rule, leftRecursiveRuleName, leftRecursiveDefinitions);
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName), definition = replacementDefinition; ///
        rule.addDefinition(definition);
    }
    return indirectlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
    var directlyReducedRule = directlyReduceRule(directlyLeftRecursiveDefinition, context), directlyRepeatedRule = directlyRepeatRule(directlyLeftRecursiveDefinition, context);
    var indirectlyLeftRecursiveDefinitions;
    var rule = directlyLeftRecursiveDefinition.getRule(), definition = null, leftRecursiveRuleName = null, directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinition, context);
    indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, context);
    removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions);
    removeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule);
    addIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context);
}
function addLeftRecursiveDefinition(leftRecursiveDefinition, context) {
    var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
    if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
        addDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, context);
    }
    var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly2.default);
    if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
        addIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context);
    }
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    indirectlyReduceRule(indirectlyLeftRecursiveDefinition, context);
    var indirectlyRepeatedRule = indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, context), indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context), leftRecursiveDefinition = rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule);
    removeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context);
    addLeftRecursiveDefinition(leftRecursiveDefinition, context);
}
function rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var least = indirectlyLeftRecursiveDefinition.isLeast();
    var definition = leftRecursiveDefinition.getDefinition();
    var rule = leftRecursiveDefinition.getRule(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), replacedDefinition = definition; ///
    definition = replacementDefinition; ///
    leftRecursiveDefinition = least ? _directly2.default.fromRuleAndDefinition(rule, definition) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition);
    definitionsIncludesDefinition ? rule.replaceDefinition(replacedDefinition, replacementDefinition) : rule.addDefinition(definition);
    return leftRecursiveDefinition;
}
function addDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    directlyLeftRecursiveDefinitions.push(directlyLeftRecursiveDefinition);
}
function findDirectlyLeftRecursiveDefinition(rule, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, directlyLeftRecursiveDefinition = directlyLeftRecursiveDefinitions.find(function(directlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
        if (directlyLeftRecursiveDefinitionRule === rule) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function addIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions.push(indirectlyLeftRecursiveDefinition);
}
function findDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinition, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var rule = directlyLeftRecursiveDefinition.getRule();
    directlyLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions.filter(function(directlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
        if (directlyLeftRecursiveDefinitionRule === rule) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function addIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var indirectlyLeftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    var indirectlyLeftRecursiveDefinitionsA = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.push)(indirectlyLeftRecursiveDefinitionsA, indirectlyLeftRecursiveDefinitionsB);
}
function removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var directlyLeftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var directlyLeftRecursiveDefinitionsA = directlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(directlyLeftRecursiveDefinitionsA, directlyLeftRecursiveDefinitionsB);
}
function findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, context) {
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.filter(function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionRule = indirectlyLeftRecursiveDefinition.getRule();
        if (indirectlyLeftRecursiveDefinitionRule === rule) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(), indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
            if (indirectlyLeftRecursiveDefinitionDefinition !== definition && indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule, context) {
    var rule = directlyLeftRecursiveDefinitions.getRule(), definition = null, leftRecursiveRuleName = null, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, context), definitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        return definition;
    });
    if (directlyReducedRule == null) {
        rule.removeAllDefinitions();
    } else {
        var replacementDefinition = _replacementDefinition.default.fromDirectlyReducedRuleAndDirectlyRepeatedRule(directlyReducedRule, directlyRepeatedRule);
        rule.replaceAllDefinitions(replacementDefinition);
    }
    rule.addDefinitions(definitions);
    return directlyLeftRecursiveDefinitions;
}
function removeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var indirectlyLeftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    var indirectlyLeftRecursiveDefinitionsA = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(indirectlyLeftRecursiveDefinitionsA, indirectlyLeftRecursiveDefinitionsB);
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyLeftRecursiveDefinitions;
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
        indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, context);
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ].concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
        var definitions1 = indirectlyLeftRecursiveDefinitions.map(function(removedLeftRecursiveDefinition) {
            var definition = removedLeftRecursiveDefinition.getDefinition();
            return definition;
        });
        rule.removeDefinitions(definitions1);
    } else {
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ];
    }
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule) {
    var firstIndirectlyLeftRecursiveDefinition = (0, _array.first)(indirectlyLeftRecursiveDefinitions), indirectlyRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition, rule = indirectlyRecursiveDefinition.getRule();
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        var directly = true, replacedDefinition = definition, replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, directlyRepeatedRule);
        definition = replacementDefinition; ///
        indirectlyLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition, directly); ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(context) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,