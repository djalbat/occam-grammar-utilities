"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _implicitlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/implicitlyReduced"));
var _indirectlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyReduced"));
var _indirectlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyRepeated"));
var _leftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/leftRecursive"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _indirectlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/indirectlyLeftRecursive"));
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var count = 0;
var maxCount = Infinity;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition; ///
        //       rule = indirectlyLeftRecursiveDefinition.getRule();
        //       directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(rule, context);
        //
        // if (directlyLeftRecursiveDefinition !== null) {
        //   rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context);
        // } else {
        var depth = indirectlyLeftRecursiveDefinition.getDepth();
        depth > 1 ? reduceIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        // }
        greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
// function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
//   const allowIsolated = true,
//         directlyReducedRule = DirectlyReducedRuleOperation.execute(directlyLeftRecursiveDefinition, allowIsolated, context),
//         directlyRepeatedRule = DirectlyRepeatedRuleOperation.execute(directlyLeftRecursiveDefinition, context);
//
//   const rule = directlyLeftRecursiveDefinition.getRule();
//
//   let indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, context);
//
//   const directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, context),
//         removedLeftRecursiveDefinitions = [
//           ...directlyLeftRecursiveDefinitions,
//           ...indirectlyLeftRecursiveDefinitions
//         ];
//
//   indirectlyLeftRecursiveDefinitions = DirectlyLeftRecursiveDefinitionOperation.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
//
//   const addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
//
//   removeLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, context);
//
//   addLeftRecursiveDefinitions(addedLeftRecursiveDefinitions, context);
// }
function reduceIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context);
        _indirectlyLeftRecursive.default.execute(indirectlyLeftRecursiveDefinition, context);
        var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, function(indirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
            if (leftRecursiveDefinition === indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition && leftRecursiveRuleName === indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName) {
                return true;
            }
        }, context);
        indirectlyLeftRecursiveDefinition = _leftRecursive.default.execute(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule, indirectlyReducedRule, context); ///
        var addedLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
        (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
        (0, _context.addLeftRecursiveDefinition)(addedLeftRecursiveDefinition, context);
    } else {
        var removedLeftRecursiveDefinitions1 = [
            indirectlyLeftRecursiveDefinition
        ];
        (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions1, context);
    }
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context);
    _indirectlyLeftRecursive.default.execute(indirectlyLeftRecursiveDefinition, context);
    var rule = indirectlyLeftRecursiveDefinition.getRule();
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
        if (leftRecursiveDefinition === indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition && leftRecursiveRuleName === indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName) {
            return true;
        }
    }, context);
    var directlyLeftRecursiveDefinition = _leftRecursive.default.execute(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule, indirectlyReducedRule, context);
    _implicitlyReduced.default.execute(directlyLeftRecursiveDefinition, rule, context);
    var addedLeftRecursiveDefinition = directlyLeftRecursiveDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinition)(addedLeftRecursiveDefinition, context);
}

//# sourceMappingURL=data:application/json;base64,