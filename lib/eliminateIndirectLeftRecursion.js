"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _ruleName = require("./utilities/ruleName");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, find = _necessary.arrayUtilities.find, push = _necessary.arrayUtilities.push, filter = _necessary.arrayUtilities.filter;
var count = 0;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(rule, leftRecursiveDefinitions);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        greatestIndirectlyLeftRecursiveDefinition = ++count >= Infinity ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = directlyLeftRecursiveDefinition.getRule();
    var directlyReducedRule = directlyReduceRule(rule, leftRecursiveDefinitions, ruleMap), directlyRepeatedRule = directlyRepeatRule(rule, leftRecursiveDefinitions, ruleMap);
    var definition = null, leftRecursiveRuleName = null, directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions);
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule);
    var removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule); ///
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions.apply(void 0, [
        leftRecursiveDefinitions,
        removedLeftRecursiveDefinitions
    ].concat(_toConsumableArray(addedLeftRecursiveDefinitions)));
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    indirectlyReduceRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
    var indirectlyRepeatedRule = indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap), indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions), addedLeftRecursiveDefinition = rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), removedLeftRecursiveDefinitions = [
        leftRecursiveDefinition
    ].concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
}
function directlyReduceRule(rule, leftRecursiveDefinitions, ruleMap) {
    var disallowIsolated = false, directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, disallowIsolated);
    if (directlyReducedRule !== null) {
        var directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    return directlyReducedRule;
}
function directlyRepeatRule(rule, leftRecursiveDefinitions, ruleMap) {
    var directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    return directlyRepeatedRule;
}
function indirectlyReduceRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName);
    var indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyReducedRule === null) {
        indirectlyReducedRule = _indirectly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions);
        ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
    }
    var vacuous = indirectlyReducedRule.isVacuous();
    if (!vacuous) {
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyReducedRule(indirectlyLeftRecursiveDefinition, indirectlyReducedRule), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), rule1 = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
        rule1.addDefinition(definition);
    }
}
function indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyRepeatedRuleName = (0, _ruleName.indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName)(ruleName, leftRecursiveRuleName);
    var indirectlyRepeatedRule = ruleMap[indirectlyRepeatedRuleName] || null;
    if (indirectlyRepeatedRule === null) {
        indirectlyRepeatedRule = _indirectly1.default.fromRuleLeftRecursiveRuleNameAndLeftRecursiveDefinitions(rule, leftRecursiveRuleName, leftRecursiveDefinitions);
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    }
    return indirectlyRepeatedRule;
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    for(var _len = arguments.length, addedLeftRecursiveDefinitions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        addedLeftRecursiveDefinitions[_key - 2] = arguments[_key];
    }
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    push(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var least = indirectlyLeftRecursiveDefinition.isLeast(), replacedDefinition = leftRecursiveDefinition.getDefinition(), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), rule = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
    leftRecursiveDefinition = least ? _directly2.default.fromRuleAndDefinition(rule, definition) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition);
    var definitions = rule.getDefinitions(), definitionsIncludesReplacedDefinition = definitions.includes(replacedDefinition);
    definitionsIncludesReplacedDefinition ? rule.replaceDefinition(replacedDefinition, replacementDefinition) : rule.addDefinition(definition);
    return leftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinition(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    }) || null;
    return directlyLeftRecursiveDefinitions;
}
function findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly2.default);
            if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                if (leftRecursiveRuleName === null) {
                    return true;
                }
                var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(), indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
                if (indirectlyLeftRecursiveDefinitionDefinition !== definition && indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName === leftRecursiveRuleName) {
                    return true;
                }
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinitions, leftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule) {
    var rule = directlyLeftRecursiveDefinitions.getRule(), definition = null, leftRecursiveRuleName = null, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions), definitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        return definition;
    });
    if (directlyReducedRule == null) {
        rule.removeAllDefinitions();
    } else {
        var replacementDefinition = _replacementDefinition.default.fromDirectlyReducedRuleAndDirectlyRepeatedRule(directlyReducedRule, directlyRepeatedRule);
        rule.replaceAllDefinitions(replacementDefinition);
    }
    rule.addDefinitions(definitions);
    return directlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions) {
    // const rule = indirectlyLeftRecursiveDefinition.getRule(),
    //       definition = indirectlyLeftRecursiveDefinition.getDefinition(), ///
    //       leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
    //       indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions);
    //
    // indirectlyLeftRecursiveDefinitions.push(indirectlyLeftRecursiveDefinition);
    //
    // const definitions = indirectlyLeftRecursiveDefinitions.map((indirectlyLeftRecursiveDefinition) => {
    //         const definition = indirectlyLeftRecursiveDefinition.getDefinition();
    //
    //         return definition;
    //       }),
    //       replacedDefinition = definition,  ///
    //       replacementDefinition = ReplacementDefinition.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName);  ///
    //
    // rule.replaceDefinition(replacedDefinition, replacementDefinition);
    //
    // rule.removeDefinitions(definitions);
    //
    // return indirectlyLeftRecursiveDefinitions;
    var definition = indirectlyLeftRecursiveDefinition.getDefinition();
    var rule = indirectlyLeftRecursiveDefinition.getRule(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, leftRecursiveDefinitions);
    indirectlyLeftRecursiveDefinitions.push(indirectlyLeftRecursiveDefinition);
    var definitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        return definition;
    }), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName); ///
    definition = replacementDefinition; ///
    rule.removeDefinitions(definitions);
    rule.addDefinition(definition);
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule) {
    var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions), indirectlyRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition, rule = indirectlyRecursiveDefinition.getRule();
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        var directly = true, replacedDefinition = definition, replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, directlyRepeatedRule);
        definition = replacementDefinition; ///
        indirectlyLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition, directly); ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var indirectlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly2.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5pbXBvcnQgUmVwbGFjZW1lbnREZWZpbml0aW9uIGZyb20gXCIuL3JlcGxhY2VtZW50RGVmaW5pdGlvblwiO1xuaW1wb3J0IEluZGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvaW5kaXJlY3RseVwiO1xuaW1wb3J0IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZXBlYXRlZC9pbmRpcmVjdGx5XCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi9yZWN1cnNpdmVEZWZpbml0aW9uL2xlZnQvZGlyZWN0bHlcIjtcbmltcG9ydCBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4vcmVjdXJzaXZlRGVmaW5pdGlvbi9sZWZ0L2luZGlyZWN0bHlcIjtcblxuaW1wb3J0IHsgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuY29uc3QgeyBmaXJzdCwgZmluZCwgcHVzaCwgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcztcblxubGV0IGNvdW50ID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBsZXQgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgd2hpbGUgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICAgIHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpID9cbiAgICAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSA6XG4gICAgICAgIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSArK2NvdW50ID49IEluZmluaXR5ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG5cbiAgY29uc3QgZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IGRpcmVjdGx5UmVkdWNlUnVsZShydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IGRpcmVjdGx5UmVwZWF0UnVsZShydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IGRlZmluaXRpb24gPSBudWxsLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsLFxuICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGxldCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgZGlyZWN0bHlSZXBlYXRlZFJ1bGUsIGRpcmVjdGx5UmVkdWNlZFJ1bGUpO1xuXG4gIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgLi4uZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICAgLi4uaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuICAgICAgICBdO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSByZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXJlY3RseVJlcGVhdGVkUnVsZSk7IC8vL1xuXG4gIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAuLi5hZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKTtcblxuICBpbmRpcmVjdGx5UmVkdWNlUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCk7XG5cbiAgY29uc3QgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9IGluZGlyZWN0bHlSZXBlYXRSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSxcbiAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmV3cml0ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSksIC8vL1xuICAgICAgICByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gW1xuICAgICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLFxuICAgICAgICAgIC4uLmluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcbiAgICAgICAgXTtcblxuICBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RseVJlZHVjZVJ1bGUocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IGRpc2FsbG93SXNvbGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IERpcmVjdGx5UmVkdWNlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBkaXNhbGxvd0lzb2xhdGVkKTtcblxuICBpZiAoZGlyZWN0bHlSZWR1Y2VkUnVsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZWR1Y2VkUnVsZS5nZXROYW1lKCk7XG5cbiAgICBydWxlTWFwW2RpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVkdWNlZFJ1bGU7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0bHlSZXBlYXRSdWxlKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCkge1xuICBjb25zdCBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IERpcmVjdGx5UmVwZWF0ZWRSdWxlLmZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlLmdldE5hbWUoKTtcblxuICBydWxlTWFwW2RpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gPSBkaXJlY3RseVJlcGVhdGVkUnVsZTtcblxuICByZXR1cm4gZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIGluZGlyZWN0bHlSZWR1Y2VSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgbGV0IGluZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAoaW5kaXJlY3RseVJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgaW5kaXJlY3RseVJlZHVjZWRSdWxlID0gSW5kaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgICBydWxlTWFwW2luZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVdID0gaW5kaXJlY3RseVJlZHVjZWRSdWxlO1xuICB9XG5cbiAgY29uc3QgdmFjdW91cyA9IGluZGlyZWN0bHlSZWR1Y2VkUnVsZS5pc1ZhY3VvdXMoKTtcblxuICBpZiAoIXZhY3VvdXMpIHtcbiAgICBjb25zdCByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZWR1Y2VkUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZWR1Y2VkUnVsZSksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKSxcbiAgICAgICAgICBydWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICAgIGRlZmluaXRpb24gPSByZXBsYWNlbWVudERlZmluaXRpb247IC8vL1xuXG4gICAgcnVsZS5hZGREZWZpbml0aW9uKGRlZmluaXRpb24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGlyZWN0bHlSZXBlYXRSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgbGV0IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBydWxlTWFwW2luZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSB8fCBudWxsO1xuXG4gIGlmIChpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlID09PSBudWxsKSB7XG4gICAgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgcnVsZU1hcFtpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xuICB9XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIGFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgLi4uYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgZmlsdGVyKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmluY2x1ZGVzKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmICghcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcHVzaChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSkge1xuICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKTtcblxuICBjb25zdCBsZWFzdCA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc0xlYXN0KCksXG4gICAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKSwgLy8vXG4gICAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlcGVhdGVkUnVsZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUpLFxuICAgICAgICBydWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICBkZWZpbml0aW9uID0gcmVwbGFjZW1lbnREZWZpbml0aW9uOyAvLy9cblxuICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlYXN0ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVBbmREZWZpbml0aW9uKHJ1bGUsIGRlZmluaXRpb24pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGVmaW5pdGlvbik7XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGRlZmluaXRpb25zSW5jbHVkZXNSZXBsYWNlZERlZmluaXRpb24gPSBkZWZpbml0aW9ucy5pbmNsdWRlcyhyZXBsYWNlZERlZmluaXRpb24pO1xuXG4gIGRlZmluaXRpb25zSW5jbHVkZXNSZXBsYWNlZERlZmluaXRpb24gP1xuICAgIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCByZXBsYWNlbWVudERlZmluaXRpb24pIDpcbiAgICAgIHJ1bGUuYWRkRGVmaW5pdGlvbihkZWZpbml0aW9uKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBjb25zdCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5maW5kKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKTtcblxuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUgPT09IHJ1bGUpIHtcbiAgICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSkgfHwgbnVsbDtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9PT0gcnVsZSkge1xuICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGluc3RhbmNlb2YgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9PT0gcnVsZSkge1xuICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gaW5zdGFuY2VvZiBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sICAvLy9cbiAgICAgICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCksXG4gICAgICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoKTtcblxuICAgICAgICBpZiAoKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRlZmluaXRpb24gIT09IGRlZmluaXRpb24pICYmIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPT09IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlLCBkaXJlY3RseVJlZHVjZWRSdWxlKSB7XG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5nZXRSdWxlKCksXG4gICAgICAgIGRlZmluaXRpb24gPSBudWxsLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsLFxuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKTtcblxuICAgICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICBpZiAoZGlyZWN0bHlSZWR1Y2VkUnVsZSA9PSBudWxsKSB7XG4gICAgcnVsZS5yZW1vdmVBbGxEZWZpbml0aW9ucygpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tRGlyZWN0bHlSZWR1Y2VkUnVsZUFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlKGRpcmVjdGx5UmVkdWNlZFJ1bGUsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlKTtcblxuICAgIHJ1bGUucmVwbGFjZUFsbERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG4gIH1cblxuICBydWxlLmFkZERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgLy8gY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gIC8vICAgICAgIGRlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpLCAvLy9cbiAgLy8gICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSgpLFxuICAvLyAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuICAvL1xuICAvLyBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLnB1c2goaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcbiAgLy9cbiAgLy8gY29uc3QgZGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gIC8vICAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCk7XG4gIC8vXG4gIC8vICAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gIC8vICAgICAgIH0pLFxuICAvLyAgICAgICByZXBsYWNlZERlZmluaXRpb24gPSBkZWZpbml0aW9uLCAgLy8vXG4gIC8vICAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKTsgIC8vL1xuICAvL1xuICAvLyBydWxlLnJlcGxhY2VEZWZpbml0aW9uKHJlcGxhY2VkRGVmaW5pdGlvbiwgcmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbiAgLy9cbiAgLy8gcnVsZS5yZW1vdmVEZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG4gIC8vXG4gIC8vIHJldHVybiBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xuXG4gIGxldCBkZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldERlZmluaXRpb24oKTtcblxuICBjb25zdCBydWxlID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSgpLFxuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIGNvbnN0IGRlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5tYXAoKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpO1xuXG4gICAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgICAgIH0pLFxuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7ICAvLy9cblxuICBkZWZpbml0aW9uID0gcmVwbGFjZW1lbnREZWZpbml0aW9uOyAvLy9cblxuICBydWxlLnJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICBydWxlLmFkZERlZmluaXRpb24oZGVmaW5pdGlvbik7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGRpcmVjdGx5UmVwZWF0ZWRSdWxlKSB7XG4gIGNvbnN0IGZpcnN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3QoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGluZGlyZWN0bHlSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICBydWxlID0gaW5kaXJlY3RseVJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgbGV0IGRlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpO1xuXG4gICAgY29uc3QgZGlyZWN0bHkgPSB0cnVlLFxuICAgICAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sICAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERpcmVjdGx5UmVwZWF0ZWRSdWxlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGlyZWN0bHlSZXBlYXRlZFJ1bGUpO1xuXG4gICAgZGVmaW5pdGlvbiA9IHJlcGxhY2VtZW50RGVmaW5pdGlvbjsgLy8vXG5cbiAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZERlZmluaXRpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBkZWZpbml0aW9uLCBkaXJlY3RseSk7ICAvLy9cblxuICAgIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCByZXBsYWNlbWVudERlZmluaXRpb24pO1xuXG4gICAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbiAgfSk7XG5cbiAgcmV0dXJuIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmQobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5mb3JFYWNoKChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBpZiAoZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPT09IG51bGwpIHtcbiAgICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uR3JlYXRlclRoYW5HcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc0dyZWF0ZXJUaGFuKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgaWYgKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247IC8vL1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJmaW5kIiwicHVzaCIsImZpbHRlciIsImNvdW50IiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZU1hcCIsImdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJ1bGUiLCJnZXRSdWxlIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiSW5maW5pdHkiLCJkaXJlY3RseVJlZHVjZWRSdWxlIiwiZGlyZWN0bHlSZWR1Y2VSdWxlIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJkaXJlY3RseVJlcGVhdFJ1bGUiLCJkZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseVJlZHVjZVJ1bGUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiaW5kaXJlY3RseVJlcGVhdFJ1bGUiLCJyZXdyaXRlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJld3JpdGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRpc2FsbG93SXNvbGF0ZWQiLCJEaXJlY3RseVJlZHVjZWRSdWxlIiwiZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImdldE5hbWUiLCJEaXJlY3RseVJlcGVhdGVkUnVsZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJJbmRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJ2YWN1b3VzIiwiaXNWYWN1b3VzIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwiUmVwbGFjZW1lbnREZWZpbml0aW9uIiwiZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZWR1Y2VkUnVsZSIsImFkZERlZmluaXRpb24iLCJnZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmNsdWRlcyIsImxlYXN0IiwiaXNMZWFzdCIsInJlcGxhY2VkRGVmaW5pdGlvbiIsImdldERlZmluaXRpb24iLCJmcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsIkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tUnVsZUFuZERlZmluaXRpb24iLCJJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kRGVmaW5pdGlvbiIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uc0luY2x1ZGVzUmVwbGFjZWREZWZpbml0aW9uIiwicmVwbGFjZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkRlZmluaXRpb24iLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJtYXAiLCJyZW1vdmVBbGxEZWZpbml0aW9ucyIsImZyb21EaXJlY3RseVJlZHVjZWRSdWxlQW5kRGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJyZXBsYWNlQWxsRGVmaW5pdGlvbnMiLCJhZGREZWZpbml0aW9ucyIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVEZWZpbml0aW9ucyIsImZpcnN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseVJlY3Vyc2l2ZURlZmluaXRpb24iLCJkaXJlY3RseSIsImZyb21JbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREaXJlY3RseVJlcGVhdGVkUnVsZSIsImZvckVhY2giLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25HcmVhdGVyVGhhbkdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaXNHcmVhdGVyVGhhbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7OytCQWtCYixTQWNDOzs7ZUFkdUJBLDhCQUE4Qjs7O3lCQWhCdkIsV0FBVzs2REFFVix5QkFBeUI7OERBQ3hCLDBCQUEwQjswRUFDekIseUJBQXlCOytEQUN6QiwyQkFBMkI7Z0VBQzFCLDRCQUE0Qjs4REFDbkIscUNBQXFDO2dFQUNuQyx1Q0FBdUM7d0JBRWlDLHNCQUFzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFNUksSUFBUUMsS0FBSyxHQUF5QkMsVUFBYyxlQUFBLENBQTVDRCxLQUFLLEVBQUVFLElBQUksR0FBbUJELFVBQWMsZUFBQSxDQUFyQ0MsSUFBSSxFQUFFQyxJQUFJLEdBQWFGLFVBQWMsZUFBQSxDQUEvQkUsSUFBSSxFQUFFQyxNQUFNLEdBQUtILFVBQWMsZUFBQSxDQUF6QkcsTUFBTSxBQUFvQjtBQUVyRCxJQUFJQyxLQUFLLEdBQUcsQ0FBQyxBQUFDO0FBRUMsU0FBU04sOEJBQThCLENBQUNPLHdCQUF3QixFQUFFQyxPQUFPLEVBQUU7SUFDeEYsSUFBSUMseUNBQXlDLEdBQUdDLGlEQUFpRCxDQUFDSCx3QkFBd0IsQ0FBQyxBQUFDO0lBRTVILE1BQU9FLHlDQUF5QyxLQUFLLElBQUksQ0FBRTtRQUN6RCxJQUFNRSxpQ0FBaUMsR0FBR0YseUNBQXlDLEVBQzdFRyxJQUFJLEdBQUdELGlDQUFpQyxDQUFDRSxPQUFPLEVBQUUsRUFDbERDLCtCQUErQixHQUFHQyxtQ0FBbUMsQ0FBQ0gsSUFBSSxFQUFFTCx3QkFBd0IsQ0FBQyxB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