"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateIndirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _definitions = require("./utilities/definitions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(maximalIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = maximalIndirectlyLeftRecursiveDefinition, ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions();
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(definitions), directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
        if (directlyLeftRecursiveDefinitionsLength > 0) {
            var _rule;
            var definitions1 = void 0;
            var directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), reducedLeftRecursiveDefinition = reduceRule(rule, ruleMap), repeatedRuleName = repeatDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, ruleMap);
            definitions1 = directlyLeftRecursiveDefinitions; ///
            rule.removeDefinitions(definitions1);
            definitions1 = rule.getDefinitions();
            var _$leftRecursiveDefinitions = definitions1; ///
            _$leftRecursiveDefinitions = rewriteLeftRecursiveDefinitions(_$leftRecursiveDefinitions, directlyLeftRecursiveDefinition, ruleName); ///
            rule.removeAllDefinitions();
            definitions1 = _$leftRecursiveDefinitions; ///
            definitions1.forEach(function(definition) {
                rule.addDefinition(definition);
            });
            var last = indirectlyLeftRecursiveDefinition.isLast(), lastLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLastLeftRecursiveDefinition(), leftRecursiveDefinition = lastLeftRecursiveDefinition; ///
            var replacedDefinition = leftRecursiveDefinition, replacementDefinitions = rewriteLeftRecursiveDefinitionsEx(_$leftRecursiveDefinitions, leftRecursiveDefinition, repeatedRuleName, ruleName, last);
            ruleName = leftRecursiveDefinition.getRuleName();
            rule = ruleMap[ruleName];
            (_rule = rule).replaceDefinition.apply(_rule, [
                replacedDefinition
            ].concat(_toConsumableArray(replacementDefinitions)));
        }
        // const leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
        //       indirectlyLeftRecursiveRule = rule, ///
        //       reducedLeftRecursiveDefinition = reduceRule(indirectlyLeftRecursiveRule, ruleMap),
        //       indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
        //
        // indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions);  ///
        //
        // const last = indirectlyLeftRecursiveDefinition.isLast(),
        //       lastLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLastLeftRecursiveDefinition(),
        //       leftRecursiveDefinition = lastLeftRecursiveDefinition;  ///
        //
        // ruleName = leftRecursiveDefinition.getRuleName();
        // rule = ruleMap[ruleName];
        //
        // const repeatedRuleName = repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap),
        //       replacedDefinition = leftRecursiveDefinition, ///
        //       replacementDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName, last),
        //       firstReplacementDefinition = first(replacementDefinitions),
        //       addedLeftRecursiveDefinition = firstReplacementDefinition,  ///
        //       removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
        //
        // rule.replaceDefinition(replacedDefinition, ...replacementDefinitions);
        //
        // amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
        //
        // maximalIndirectlyLeftRecursiveDefinition = retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
        maximalIndirectlyLeftRecursiveDefinition = null;
    }
}
function reduceRule(rule, ruleMap) {
    var reducedLeftRecursiveDefinition = null;
    var reducedRule = _reduced.default.fromRule(rule);
    if (reducedRule !== null) {
        var leftRecursiveDefinition = _left.default.fromReducedRule(reducedRule), reducedRuleName = reducedRule.getName(), definitions = reducedRule.getDefinitions(), definition = leftRecursiveDefinition; ///
        rule.removeDefinitions(definitions);
        rule.addDefinition(definition);
        ruleMap[reducedRuleName] = reducedRule;
        reducedLeftRecursiveDefinition = definition; ///
    }
    return reducedLeftRecursiveDefinition;
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    leftRecursiveDefinitions.push(addedLeftRecursiveDefinition);
}
function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, directlyLeftRecursiveDefinition, ruleName) {
    leftRecursiveDefinitions = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
        leftRecursiveDefinition = _left.default.fromRuleNameLeftRecursiveDefinitionAndDirectlyLeftRecursiveDefinition(ruleName, leftRecursiveDefinition, directlyLeftRecursiveDefinition); ///
        return leftRecursiveDefinition;
    });
    return leftRecursiveDefinitions;
}
function rewriteLeftRecursiveDefinitionsEx(leftRecursiveDefinitions, leftRecursiveDefinition, repeatedRuleName, ruleName, last) {
    var replacementDefinitions = [];
    var replacementDefinition, leftRecursiveDefinitionA;
    var leftRecursiveDefinitionB = leftRecursiveDefinition; ///
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions);
    leftRecursiveDefinitionA = firstLeftRecursiveDefinition; ///
    replacementDefinition = _directly.default.fromLeftRecursiveDefinitionsAndRepeatedRuleName(leftRecursiveDefinitionA, leftRecursiveDefinitionB, repeatedRuleName); ///
    replacementDefinitions.push(replacementDefinition);
    replacementDefinition = _left.default.fromRuleNameAndLeftRecursiveDefinition(ruleName, leftRecursiveDefinitionB); ///
    replacementDefinitions.push(replacementDefinition);
    return replacementDefinitions;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
        return directlyLeftRecursiveDefinition;
    });
    return directlyLeftRecursiveDefinition;
}
function repeatDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, ruleMap) {
    var repeatedRule = _repeated.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), repeatedRuleName = repeatedRule.getName();
    ruleMap[repeatedRuleName] = repeatedRule;
    return repeatedRuleName;
}
function repeatIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var repeatedRuleName = null;
    var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);
    if (repeatedRule !== null) {
        repeatedRuleName = repeatedRule.getName();
        ruleMap[repeatedRuleName] = repeatedRule;
    }
    return repeatedRuleName;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        var leftRecursiveDefinitions = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions();
        indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName, last) {
    var replacementDefinitions = [], LeftRecursiveDefinition = last ? _directly.default : _indirectly.default, replacementDefinition = LeftRecursiveDefinition.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, repeatedRuleName); ///
    replacementDefinitions.push(replacementDefinition);
    if (reducedLeftRecursiveDefinition !== null) {
        var replacementDefinition1 = LeftRecursiveDefinition.fromReducedLeftRecursiveDefinitionAndLeftRecursiveDefinition(reducedLeftRecursiveDefinition, leftRecursiveDefinition); ///
        replacementDefinitions.push(replacementDefinition1);
    }
    return replacementDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = _instanceof(definition, _indirectly.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveMaximalIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var maximalIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (maximalIndirectlyLeftRecursiveDefinition === null) {
            maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(maximalIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanMaximalIndirectlyLeftRecursiveDefinition) {
                maximalIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return maximalIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,