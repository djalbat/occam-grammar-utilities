"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directlyRepeat = /*#__PURE__*/ _interopRequireDefault(require("./ruleOperation/directlyRepeat"));
var _directlyReduce = /*#__PURE__*/ _interopRequireDefault(require("./ruleOperation/directlyReduce"));
var _indirectlyReduce = /*#__PURE__*/ _interopRequireDefault(require("./ruleOperation/indirectlyReduce"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _array = require("./utilities/array");
var _ruleName = require("./utilities/ruleName");
var _context = require("./utilities/context");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var count = 0;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(rule, context);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(context);
    }
}
function directlyReduceRule(directlyLeftRecursiveDefinition, context) {
    var disallowIsolated = false, directlyReducedRule = _directlyReduce.default.execute(directlyLeftRecursiveDefinition, disallowIsolated, context);
    return directlyReducedRule;
}
function directlyRepeatRule(directlyLeftRecursiveDefinition, context) {
    var directlyRepeatedRule = _directlyRepeat.default.execute(directlyLeftRecursiveDefinition, context);
    return directlyRepeatedRule;
}
function indirectlyReduceRule(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyReducedRule = _indirectlyReduce.default.execute(indirectlyLeftRecursiveDefinition, context);
    if (indirectlyReducedRule !== null) {
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyReducedRule(indirectlyLeftRecursiveDefinition, indirectlyReducedRule), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), rule = leftRecursiveDefinition.getRule(), definition = replacementDefinition; ///
        rule.addDefinition(definition);
    }
}
function indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, context) {
    var ruleMap = context.ruleMap, indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions, rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = rule.getName(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyRepeatedRuleName = (0, _ruleName.indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName)(ruleName, leftRecursiveRuleName);
    var indirectlyRepeatedRule = ruleMap[indirectlyRepeatedRuleName] || null;
    if (indirectlyRepeatedRule === null) {
        indirectlyRepeatedRule = _indirectly.default.fromRuleLeftRecursiveRuleNameAndIndirectlyLeftRecursiveDefinitions(rule, leftRecursiveRuleName, indirectlyLeftRecursiveDefinitions);
        ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
        var replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, leftRecursiveRuleName), definition = replacementDefinition; ///
        rule.addDefinition(definition);
    }
    return indirectlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
    var directlyReducedRule = directlyReduceRule(directlyLeftRecursiveDefinition, context), directlyRepeatedRule = directlyRepeatRule(directlyLeftRecursiveDefinition, context);
    var directlyLeftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions;
    var rule = directlyLeftRecursiveDefinition.getRule(), definition = null, leftRecursiveRuleName = null;
    directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context);
    indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, definition, leftRecursiveRuleName, context);
    (0, _context.removeDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, context);
    directlyLeftRecursiveDefinitions = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    (0, _context.removeIndirectlyLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, context);
    indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule);
    (0, _context.addDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, context);
    (0, _context.addIndirectlyLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, context);
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    indirectlyReduceRule(indirectlyLeftRecursiveDefinition, context);
    var indirectlyRepeatedRule = indirectlyRepeatRule(indirectlyLeftRecursiveDefinition, context), indirectlyLeftRecursiveDefinitions = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context), leftRecursiveDefinition = rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule);
    (0, _context.removeIndirectlyLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinition)(leftRecursiveDefinition, context);
}
function rewriteLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var least = indirectlyLeftRecursiveDefinition.isLeast();
    var definition = leftRecursiveDefinition.getDefinition();
    var rule = leftRecursiveDefinition.getRule(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition), replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndIndirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule), replacedDefinition = definition; ///
    definition = replacementDefinition; ///
    leftRecursiveDefinition = least ? _directly.default.fromRuleAndDefinition(rule, definition) : _indirectly1.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition);
    definitionsIncludesDefinition ? rule.replaceDefinition(replacedDefinition, replacementDefinition) : rule.addDefinition(definition);
    return leftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinitions, directlyRepeatedRule, directlyReducedRule, context) {
    var rule = directlyLeftRecursiveDefinitions.getRule(), definition = null, leftRecursiveRuleName = null, indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, definition, leftRecursiveRuleName, context), definitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        return definition;
    });
    if (directlyReducedRule == null) {
        rule.removeAllDefinitions();
    } else {
        var replacementDefinition = _replacementDefinition.default.fromDirectlyReducedRuleAndDirectlyRepeatedRule(directlyReducedRule, directlyRepeatedRule);
        rule.replaceAllDefinitions(replacementDefinition);
    }
    rule.addDefinitions(definitions);
    return directlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyLeftRecursiveDefinitions;
    var rule = indirectlyLeftRecursiveDefinition.getRule(), definition = indirectlyLeftRecursiveDefinition.getDefinition(), definitions = rule.getDefinitions(), definitionsIncludesDefinition = definitions.includes(definition);
    if (definitionsIncludesDefinition) {
        var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
        indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, definition, leftRecursiveRuleName, context);
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ].concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
        var definitions1 = indirectlyLeftRecursiveDefinitions.map(function(removedLeftRecursiveDefinition) {
            var definition = removedLeftRecursiveDefinition.getDefinition();
            return definition;
        });
        rule.removeDefinitions(definitions1);
    } else {
        indirectlyLeftRecursiveDefinitions = [
            indirectlyLeftRecursiveDefinition
        ];
    }
    return indirectlyLeftRecursiveDefinitions;
}
function rewriteIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, directlyRepeatedRule) {
    var firstIndirectlyLeftRecursiveDefinition = (0, _array.first)(indirectlyLeftRecursiveDefinitions), indirectlyRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition, rule = indirectlyRecursiveDefinition.getRule();
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        var definition = indirectlyLeftRecursiveDefinition.getDefinition();
        var directly = true, replacedDefinition = definition, replacementDefinition = _replacementDefinition.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRule(indirectlyLeftRecursiveDefinition, directlyRepeatedRule);
        definition = replacementDefinition; ///
        indirectlyLeftRecursiveDefinition = _indirectly1.default.fromIndirectlyLeftRecursiveDefinitionAndDefinition(indirectlyLeftRecursiveDefinition, definition, directly); ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(context) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,