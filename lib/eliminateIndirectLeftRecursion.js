"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/indirectly"));
var _indirectly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _left = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
var _indirectly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/indirectly"));
var _ruleName = require("./utilities/ruleName");
var _definition = require("./utilities/definition");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var find = _necessary.arrayUtilities.find, push = _necessary.arrayUtilities.push, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
var count = 0;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var greatestIndirectlyLeftRecursiveDefinition = retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var _rule;
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var disallowIsolated = false, directlyReducedRule = _directly.default.fromRule(rule, disallowIsolated);
    var directlyReducedRuleName = null;
    if (directlyReducedRule !== null) {
        directlyReducedRuleName = directlyReducedRule.getName();
        ruleMap[directlyReducedRuleName] = directlyReducedRule;
    }
    var directlyRepeatedRule = _directly1.default.fromRule(rule), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    var definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(definitions);
    var indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    var removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.map(function(indirectlyLeftRecursiveDefinition) {
        indirectlyLeftRecursiveDefinition = _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionAndDirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, directlyRepeatedRuleName); ///
        return indirectlyLeftRecursiveDefinition;
    });
    var replacementDefinitions = _toConsumableArray(indirectlyLeftRecursiveDefinitions);
    if (directlyReducedRuleName !== null) {
        var leftRecursiveDefinition = _left.default.fromDirectlyReducedRuleNameAndDirectlyRepeatedRuleName(directlyReducedRuleName, directlyRepeatedRuleName);
        replacementDefinitions = _toConsumableArray(replacementDefinitions).concat([
            leftRecursiveDefinition
        ]);
    }
    (_rule = rule).replaceAllDefinitions.apply(_rule, _toConsumableArray(replacementDefinitions));
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions.apply(void 0, [
        leftRecursiveDefinitions,
        removedLeftRecursiveDefinitions
    ].concat(_toConsumableArray(addedLeftRecursiveDefinitions)));
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), lowest = indirectlyLeftRecursiveDefinition.isLowest();
    var leftRecursiveDefinitionRuleName = leftRecursiveDefinition.getRuleName(), leftRecursiveDefinitionRule = ruleMap[leftRecursiveDefinitionRuleName];
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
    var indirectlyRepeatedRule = _indirectly1.default.fromRuleAndLeftRecursiveRuleName(rule, leftRecursiveRuleName), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var indirectlyReducedLeftRecursiveDefinition = null, indirectlyReducedRuleName = (0, _ruleName.indirectlyReducedRuleNameFromRuleName)(ruleName), indirectlyReducedRule = ruleMap[indirectlyReducedRuleName] || null;
    if (indirectlyReducedRule === null) {
        indirectlyReducedRule = _indirectly.default.fromRule(rule);
        ruleMap[indirectlyReducedRuleName] = indirectlyReducedRule;
        var indirectlyReducedRuleDefinitions = indirectlyReducedRule.getDefinitions(), indirectlyReducedRuleDefinitionsLength = indirectlyReducedRuleDefinitions.length;
        if (indirectlyReducedRuleDefinitionsLength > 0) {
            indirectlyReducedLeftRecursiveDefinition = _left.default.fromLeftRecursiveDefinitionAndIndirectlyReducedRuleName(leftRecursiveDefinition, indirectlyReducedRuleName); ///
        }
    }
    var definitions = rule.getDefinitions(), replacedDefinition = indirectlyLeftRecursiveDefinition, leftRecursiveDefinitionUnary = (0, _definition.isDefinitionUnary)(leftRecursiveDefinition), unary = leftRecursiveDefinitionUnary, replacementDefinition = _left.default.fromRuleNameAndLeftRecursiveRuleName(ruleName, leftRecursiveRuleName, unary), indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions, leftRecursiveRuleName);
    rule.replaceDefinition(replacedDefinition, replacementDefinition);
    rule.removeDefinitions(indirectlyLeftRecursiveDefinitions);
    var addedLeftRecursiveDefinition = lowest ? _directly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName) : _indirectly2.default.fromIndirectlyLeftRecursiveDefinitionLeftRecursiveDefinitionAndIndirectlyRepeatedRuleName(indirectlyLeftRecursiveDefinition, leftRecursiveDefinition, indirectlyRepeatedRuleName), removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    leftRecursiveDefinitionRule.addDefinition(addedLeftRecursiveDefinition);
    leftRecursiveDefinitionRule.removeDefinition(leftRecursiveDefinition);
    if (indirectlyReducedLeftRecursiveDefinition !== null) {
        leftRecursiveDefinitionRule.addDefinition(indirectlyReducedLeftRecursiveDefinition);
    }
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions, addedLeftRecursiveDefinition);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    for(var _len = arguments.length, addedLeftRecursiveDefinitions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        addedLeftRecursiveDefinitions[_key - 2] = arguments[_key];
    }
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
    push(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function findDirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap) {
    var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions(), directlyLeftRecursiveDefinition = definitions.find(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly2.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(definitions) {
    var leftRecursiveRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var indirectlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionIndirectlyLeftRecursiveDefinition = _instanceof(definition, _indirectly2.default);
        if (definitionIndirectlyLeftRecursiveDefinition) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = definition, leftRecursiveRuleNames = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), ruleName = firstLeftRecursiveRuleName; ///
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var definitions = leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = findIndirectlyLeftRecursiveDefinitions(definitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        if (greatestIndirectlyLeftRecursiveDefinition === null) {
            greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
        } else {
            var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
            if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,