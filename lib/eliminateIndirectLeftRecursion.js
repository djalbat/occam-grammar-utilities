"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateIndirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _rules = require("./utilities/rules");
var _ruleNames = require("./utilities/ruleNames");
var _definitions = require("./utilities/definitions");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var last = _necessary.arrayUtilities.last, first = _necessary.arrayUtilities.first;
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    indirectlyLeftRecursiveRules.forEach(function(indirectlyLeftRecursiveRule) {
        var reducedRuleName = null, reducedLeftRecursiveDefinition = null;
        var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule);
        if (reducedRule !== null) {
            var indirectlyLeftRecursiveRuleDefinitions = indirectlyLeftRecursiveRule.getDefinitions(), lastIndirectlyLeftRecursiveRuleDefinition = last(indirectlyLeftRecursiveRuleDefinitions);
            reducedLeftRecursiveDefinition = lastIndirectlyLeftRecursiveRuleDefinition; ///
            reducedRuleName = reducedRule.getName();
            ruleMap[reducedRuleName] = reducedRule;
        }
        var implicitlyLeftRecursiveRuleNames = retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule);
        implicitlyLeftRecursiveRuleNames.forEach(function(implicitlyLeftRecursiveRuleName, index) {
            var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName), indirectlyLeftRecursiveDefinition = mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions);
            var repeatedRuleName = null;
            var repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveDefinitionAndIndex(indirectlyLeftRecursiveDefinition, index);
            if (repeatedRule !== null) {
                repeatedRuleName = repeatedRule.getName();
                ruleMap[repeatedRuleName] = repeatedRule;
            }
        // const rewrittenIndirectlyLeftRecursiveDefinition = rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName),
        //       implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
        //       replacedDefinition = implicitlyLeftRecursiveDefinition, ///
        //       replacementDefinitions = rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition),
        //       implicitlyLeftRecursiveRule = ruleMap[implicitlyLeftRecursiveRuleName];
        //
        // implicitlyLeftRecursiveRule.replaceDefinition(replacedDefinition, ...replacementDefinitions);
        //
        // const leftRecursiveDefinition = first(replacementDefinitions); ///
        //
        // leftRecursiveDefinitions.push(leftRecursiveDefinition);
        });
    });
}
function retrieveIndirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveRules = (0, _rules.retrieveLeftRecursiveRules)(leftRecursiveDefinitions, _indirectly.default, ruleMap);
    return indirectlyLeftRecursiveRules;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(indirectlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var indirectlyLeftRecursiveDefinition;
        var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions);
        indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition; ///
        // const implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();
        //
        // indirectlyLeftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromPartsRuleNameAndImplicitlyLeftRecursiveDefinition(parts, ruleName, implicitlyLeftRecursiveDefinition);
        return indirectlyLeftRecursiveDefinition;
    });
    return indirectlyLeftRecursiveDefinition;
}
function retrieveImplicitlyLeftRecursiveRuleNames(indirectlyLeftRecursiveRule) {
    var callback = function callback(indirectlyLeftRecursiveDefinition) {
    // const implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
    //       ruleName = implicitlyLeftRecursiveDefinition.getRuleName();
    //
    // return ruleName;
    };
    var implicitlyLeftRecursiveRuleNames = (0, _ruleNames.retrieveLeftRecursiveRuleNames)(indirectlyLeftRecursiveRule, _indirectly.default, callback);
    return implicitlyLeftRecursiveRuleNames;
}
function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, repeatedRuleName) {
    var directlyLeftRecursiveDefinition = _directly.default.fromIndirectlyLeftRecursiveDefinitionAndRepeatedRuleName(indirectlyLeftRecursiveDefinition, repeatedRuleName), rewrittenIndirectlyLeftRecursiveDefinition = directlyLeftRecursiveDefinition; ///
    return rewrittenIndirectlyLeftRecursiveDefinition;
}
// function rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, rewrittenIndirectlyLeftRecursiveDefinition, reducedLeftRecursiveDefinition) {
//   const replacementDefinitions = [];
//
//   const definition = rewrittenIndirectlyLeftRecursiveDefinition, ///
//         directlyLeftRecursiveDefinition = DirectlyLeftRecursiveDefinition.fromImplicitlyLeftRecursiveDefinitionAndDefinition(implicitlyLeftRecursiveDefinition, definition);
//
//   replacementDefinitions.push(directlyLeftRecursiveDefinition);
//
//   if (reducedLeftRecursiveDefinition !== null) {
//     const definition = reducedLeftRecursiveDefinition,  ///
//           leftRecursiveDefinition = LeftRecursiveDefinition.fromImplicitlyLeftRecursiveDefinitionAndDefinition(implicitlyLeftRecursiveDefinition, definition);
//
//     replacementDefinitions.push(leftRecursiveDefinition);
//   }
//
//   return replacementDefinitions;
// }
function retrieveIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveRule, implicitlyLeftRecursiveRuleName) {
    var callback = function callback(indirectlyLeftRecursiveDefinition) {
    // const implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
    //       ruleName = implicitlyLeftRecursiveDefinition.getRuleName();
    //
    // if (ruleName === implicitlyLeftRecursiveRuleName) {
    //   return true;
    // }
    };
    var indirectlyLeftRecursiveDefinitions = (0, _definitions.retrieveLeftRecursiveDefinitions)(indirectlyLeftRecursiveRule, _indirectly.default, callback);
    return indirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,