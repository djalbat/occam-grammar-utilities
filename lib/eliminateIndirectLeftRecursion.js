"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _definition = /*#__PURE__*/ _interopRequireDefault(require("./definition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _array = require("./utilities/array");
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var count = 0;
var maxCount = 1;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition; ///
        rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = count++ >= maxCount ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var rule = indirectlyLeftRecursiveDefinition.getRule(), ruleName = indirectlyLeftRecursiveDefinition.getRuleName(), leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule(), leftRecursiveDefinitionRuleName = leftRecursiveDefinitionRule.getName(), leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveDefinitionRule, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionLeftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveDefinitionLeftRecursiveRuleName = (0, _array.first)(leftRecursiveDefinitionLeftRecursiveRuleNames);
        if (firstLeftRecursiveDefinitionLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context), leftRecursiveRuleName = leftRecursiveDefinitionRuleName; ///
    var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    var ruleMap = context.ruleMap;
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var definition, definitions;
    definitions = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition.getDefinition();
        return definition;
    });
    leftRecursiveDefinitionRule.removeDefinitions(definitions);
    definition = _definition.default.fromLeftRecursiveDefinition(leftRecursiveDefinition);
    leftRecursiveDefinitionRule.addDefinition(definition);
    definitions = rule.getDefinitions();
    definitions = definitions.forEach(function(definition) {
        definition = _definition.default.fromDefinitionAndLeftRecursiveDefinition(definition, leftRecursiveDefinition); ///
        return definition;
    });
    leftRecursiveDefinitionRule.addDefinitions(definitions);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb25cIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVwZWF0ZWQvaW5kaXJlY3RseVwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiB9IGZyb20gXCIuL3V0aWxpdGllcy9jb250ZXh0XCJcblxubGV0IGNvdW50ID0gMDtcblxuY29uc3QgbWF4Q291bnQgPSAxO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCkge1xuICBsZXQgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBjb3VudCsrID49IG1heENvdW50ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG5cbiAgd2hpbGUgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247IC8vL1xuXG4gICAgcmV3cml0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xuXG4gICAgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBjb3VudCsrID49IG1heENvdW50ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV3cml0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgY29uc3QgcnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIHJ1bGVOYW1lID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZS5nZXROYW1lKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKCksXG4gICAgICAgICAgICAgICAgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgICAgICAgICBpZiAoZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gcnVsZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWU7ICAvLy9cblxuICBjb25zdCBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gSW5kaXJlY3RseVJlcGVhdGVkUnVsZS5mcm9tUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlLmdldE5hbWUoKTtcblxuICBjb25zdCB7IHJ1bGVNYXAgfSA9IGNvbnRleHQ7XG5cbiAgcnVsZU1hcFtpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xuXG4gIGxldCBkZWZpbml0aW9uLFxuICAgICAgZGVmaW5pdGlvbnM7XG5cbiAgZGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXREZWZpbml0aW9uKCk7XG5cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgfSk7XG5cbiAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlLnJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICBkZWZpbml0aW9uID0gRGVmaW5pdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZS5hZGREZWZpbml0aW9uKGRlZmluaXRpb24pO1xuXG4gIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGRlZmluaXRpb25zID0gZGVmaW5pdGlvbnMuZm9yRWFjaCgoZGVmaW5pdGlvbikgPT4geyAvLy9cbiAgICBkZWZpbml0aW9uID0gRGVmaW5pdGlvbi5mcm9tRGVmaW5pdGlvbkFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTsgIC8vL1xuXG4gICAgcmV0dXJuIGRlZmluaXRpb247XG4gIH0pO1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZS5hZGREZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiY291bnQiLCJtYXhDb3VudCIsImNvbnRleHQiLCJncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwicnVsZSIsImdldFJ1bGUiLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJnZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUiLCJnZXROYW1lIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZmlyc3QiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwicnVsZU1hcCIsImRlZmluaXRpb24iLCJkZWZpbml0aW9ucyIsIm1hcCIsImdldERlZmluaXRpb24iLCJyZW1vdmVEZWZpbml0aW9ucyIsIkRlZmluaXRpb24iLCJmcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJhZGREZWZpbml0aW9uIiwiZ2V0RGVmaW5pdGlvbnMiLCJmb3JFYWNoIiwiZnJvbURlZmluaXRpb25BbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFkZERlZmluaXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFZQTs7O2VBQXdCQTs7OytEQVZEOytEQUNZO3FCQUViO3VCQUMwRTs7Ozs7O0FBRWhHLElBQUlDLFFBQVE7QUFFWixJQUFNQyxXQUFXO0FBRUYsU0FBU0YsK0JBQStCRyxPQUFPLEVBQUU7SUFDOUQsSUFBSUMsNENBQTRDSCxXQUFXQyxXQUFXLElBQUksR0FBR0csSUFBQUEsMERBQWlELEVBQUNGLFFBQVE7SUFFdkksTUFBT0MsOENBQThDLElBQUksQ0FBRTtRQUN6RCxJQUFNRSxvQ0FBb0NGLDJDQUEyQyxHQUFHO1FBRXhGRyw2QkFBNkJELG1DQUFtQ0g7UUFFaEVDLDRDQUE0Q0gsV0FBV0MsV0FBVyxJQUFJLEdBQUdHLElBQUFBLDBEQUFpRCxFQUFDRixRQUFRO0lBQ3JJO0FBQ0Y7QUFFQSxTQUFTSSw2QkFBNkJELGlDQUFpQyxFQUFFSCxPQUFPLEVBQUU7SUFDaEYsSUFBTUssT0FBT0Ysa0NBQWtDRyxPQUFPLElBQ2hEQyxXQUFXSixrQ0FBa0NLLFdBQVcsSUFDeERDLDBCQUEwQk4sa0NBQWtDTywwQkFBMEIsSUFDdEZDLDhCQUE4QkYsd0JBQXdCSCxPQUFPLElBQzdETSxrQ0FBa0NELDRCQUE0QkUsT0FBTyxJQUNyRUMsMkJBQTJCQyxJQUFBQSxxQ0FBNEIsRUFBQ0osNkJBQTZCLFNBQUNGLHlCQUE0QjtRQUNoSCxJQUFNTyxnREFBZ0RQLHdCQUF3QlEseUJBQXlCLElBQ2pHQyxvREFBb0RDLElBQUFBLFlBQUssRUFBQ0g7UUFFaEUsSUFBSUUsc0RBQXNEWCxVQUFVO1lBQ2xFLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSCxHQUFHUCxVQUNIb0Isd0JBQXdCUixpQ0FBa0MsR0FBRztJQUVuRSxJQUFNUyx5QkFBeUJDLG1CQUFzQixDQUFDQyw0REFBNEQsQ0FBQ2hCLFVBQVVhLHVCQUF1Qk4sMkJBQzlJVSw2QkFBNkJILHVCQUF1QlIsT0FBTztJQUVqRSxJQUFNLEFBQUVZLFVBQVl6QixRQUFaeUI7SUFFUkEsT0FBTyxDQUFDRCwyQkFBMkIsR0FBR0g7SUFFdEMsSUFBSUssWUFDQUM7SUFFSkEsY0FBY2IseUJBQXlCYyxHQUFHLENBQUMsU0FBQ25CLHlCQUE0QjtRQUN0RSxJQUFNaUIsYUFBYWpCLHdCQUF3Qm9CLGFBQWE7UUFFeEQsT0FBT0g7SUFDVDtJQUVBZiw0QkFBNEJtQixpQkFBaUIsQ0FBQ0g7SUFFOUNELGFBQWFLLG1CQUFVLENBQUNDLDJCQUEyQixDQUFDdkI7SUFFcERFLDRCQUE0QnNCLGFBQWEsQ0FBQ1A7SUFFMUNDLGNBQWN0QixLQUFLNkIsY0FBYztJQUVqQ1AsY0FBY0EsWUFBWVEsT0FBTyxDQUFDLFNBQUNULFlBQWU7UUFDaERBLGFBQWFLLG1CQUFVLENBQUNLLHdDQUF3QyxDQUFDVixZQUFZakIsMEJBQTJCLEdBQUc7UUFFM0csT0FBT2lCO0lBQ1Q7SUFFQWYsNEJBQTRCMEIsY0FBYyxDQUFDVjtBQUM3QyJ9