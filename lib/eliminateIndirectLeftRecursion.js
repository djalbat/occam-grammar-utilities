"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _implicitlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/implicitlyReduced"));
var _indirectlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyReduced"));
var _indirectlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyRepeated"));
var _leftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/leftRecursive"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _indirectlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/indirectlyLeftRecursive"));
var _context = require("./utilities/context");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var count = 0;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(rule, context);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
    var allowIsolated = true, directlyReducedRule = _directlyReduced.default.execute(directlyLeftRecursiveDefinition, allowIsolated, context), directlyRepeatedRule = _directlyRepeated.default.execute(directlyLeftRecursiveDefinition, context);
    var rule = directlyLeftRecursiveDefinition.getRule();
    var indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, context);
    var directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context), removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = _directlyLeftRecursive.default.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinitions)(addedLeftRecursiveDefinitions, context);
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context);
    _indirectlyLeftRecursive.default.execute(indirectlyLeftRecursiveDefinition, context);
    var rule = indirectlyLeftRecursiveDefinition.getRule();
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
        if (leftRecursiveDefinition === indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition && leftRecursiveRuleName === indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName) {
            return true;
        }
    }, context);
    leftRecursiveDefinition = _leftRecursive.default.execute(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule, indirectlyReducedRule, context);
    _implicitlyReduced.default.execute(leftRecursiveDefinition, rule, context);
    var addedLeftRecursiveDefinition = leftRecursiveDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinition)(addedLeftRecursiveDefinition, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBEaXJlY3RseVJlZHVjZWRSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9ydWxlL2RpcmVjdGx5UmVkdWNlZFwiO1xuaW1wb3J0IERpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9ydWxlL2RpcmVjdGx5UmVwZWF0ZWRcIjtcbmltcG9ydCBJbXBsaWNpdGx5UmVkdWNlZFJ1bGVPcGVyYXRpb24gZnJvbSBcIi4vb3BlcmF0aW9uL3J1bGUvaW1wbGljaXRseVJlZHVjZWRcIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVkdWNlZFJ1bGVPcGVyYXRpb24gZnJvbSBcIi4vb3BlcmF0aW9uL3J1bGUvaW5kaXJlY3RseVJlZHVjZWRcIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9ydWxlL2luZGlyZWN0bHlSZXBlYXRlZFwiO1xuaW1wb3J0IExlZnRSZWN1cnNpdmVEZWZpbml0aW9uT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9kZWZpbml0aW9uL2xlZnRSZWN1cnNpdmVcIjtcbmltcG9ydCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9kZWZpbml0aW9uL2RpcmVjdGx5TGVmdFJlY3Vyc2l2ZVwiO1xuaW1wb3J0IEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vZGVmaW5pdGlvbi9pbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVwiO1xuXG5pbXBvcnQgeyBhZGRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbixcbiAgICAgICAgIGFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgIHJlbW92ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLFxuICAgICAgICAgZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLFxuICAgICAgICAgZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NvbnRleHRcIlxuXG5sZXQgY291bnQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCkge1xuICBsZXQgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGNvbnRleHQpO1xuXG4gIHdoaWxlIChncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICBydWxlID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocnVsZSwgY29udGV4dCk7XG5cbiAgICAoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkgP1xuICAgICAgcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSA6XG4gICAgICAgIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcblxuICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKytjb3VudCA+IEluZmluaXR5ID8gbnVsbCA6IHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGNvbnN0IGFsbG93SXNvbGF0ZWQgPSB0cnVlLFxuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlID0gRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbi5leGVjdXRlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGFsbG93SXNvbGF0ZWQsIGNvbnRleHQpLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IERpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgY29uc3QgcnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gIGxldCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgY29udGV4dCk7XG5cbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgY29udGV4dCksXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgLi4uZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICAgLi4uaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuICAgICAgICBdO1xuXG4gIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uT3BlcmF0aW9uLmV4ZWN1dGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGlyZWN0bHlSZXBlYXRlZFJ1bGUsIGRpcmVjdGx5UmVkdWNlZFJ1bGUsIGNvbnRleHQpO1xuXG4gIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgcmVtb3ZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGNvbnRleHQpO1xuXG4gIGFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGNvbnN0IGluZGlyZWN0bHlSZWR1Y2VkUnVsZSA9IEluZGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbi5leGVjdXRlKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCksXG4gICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcblxuICBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24uZXhlY3V0ZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xuXG4gIGNvbnN0IHJ1bGUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gIGxldCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpO1xuXG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoKSxcbiAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oKTtcblxuICAgICAgICAgIGlmICgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPT09IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSAmJiAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID09PSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlUnVsZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGNvbnRleHQpO1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24uZXhlY3V0ZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGUsIGluZGlyZWN0bHlSZWR1Y2VkUnVsZSwgY29udGV4dCk7XG5cbiAgSW1wbGljaXRseVJlZHVjZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJ1bGUsIGNvbnRleHQpO1xuXG4gIGNvbnN0IGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgLy8vXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zOyAvLy9cblxuICByZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgY29udGV4dCk7XG5cbiAgYWRkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oYWRkZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiY291bnQiLCJjb250ZXh0IiwiZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXRyaWV2ZUdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicnVsZSIsImdldFJ1bGUiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsInJld3JpdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJJbmZpbml0eSIsImFsbG93SXNvbGF0ZWQiLCJkaXJlY3RseVJlZHVjZWRSdWxlIiwiRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbiIsImV4ZWN1dGUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZSIsIkRpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmVtb3ZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiYWRkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlIiwiSW5kaXJlY3RseVJlZHVjZWRSdWxlT3BlcmF0aW9uIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsIkluZGlyZWN0bHlSZXBlYXRlZFJ1bGVPcGVyYXRpb24iLCJJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25PcGVyYXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiIsIkltcGxpY2l0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbiIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJhZGRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBcUJBOzs7ZUFBd0JBOzs7b0VBbkJpQjtxRUFDQztzRUFDQztzRUFDQTt1RUFDQztrRUFDQzswRUFDUTs0RUFDRTt1QkFRVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVsRSxJQUFJQyxRQUFRO0FBRUcsU0FBU0QsK0JBQStCRSxPQUFPLEVBQUU7SUFDOUQsSUFBSUMsNENBQTRDQyxJQUFBQSwwREFBaUQsRUFBQ0Y7SUFFbEcsTUFBT0MsOENBQThDLElBQUksQ0FBRTtRQUN6RCxJQUFNRSxvQ0FBb0NGLDJDQUNwQ0csT0FBT0Qsa0NBQWtDRSxPQUFPLElBQ2hEQyxrQ0FBa0NDLElBQUFBLDRDQUFtQyxFQUFDSCxNQUFNSjtRQUVqRk0sb0NBQW9DLElBQUksR0FDdkNFLDJCQUEyQkYsaUNBQWlDSCxtQ0FBbUNILFdBQzdGUyw2QkFBNkJOLG1DQUFtQ0gsUUFBUTtRQUU1RUMsNENBQTRDLEVBQUVGLFFBQVFXLFdBQVcsSUFBSSxHQUFHUixJQUFBQSwwREFBaUQsRUFBQ0YsUUFBUTtJQUNwSTtBQUNGO0FBRUEsU0FBU1EsMkJBQTJCRiwrQkFBK0IsRUFBRUgsaUNBQWlDLEVBQUVILE9BQU8sRUFBRTtJQUMvRyxJQUFNVyxnQkFBZ0IsSUFBSSxFQUNwQkMsc0JBQXNCQyx3QkFBNEIsQ0FBQ0MsT0FBTyxDQUFDUixpQ0FBaUNLLGVBQWVYLFVBQzNHZSx1QkFBdUJDLHlCQUE2QixDQUFDRixPQUFPLENBQUNSLGlDQUFpQ047SUFFcEcsSUFBTUksT0FBT0UsZ0NBQWdDRCxPQUFPO0lBRXBELElBQUlZLHFDQUFxQ0MsSUFBQUEsK0NBQXNDLEVBQUNkLE1BQU1KO0lBRXRGLElBQU1tQixtQ0FBbUNDLElBQUFBLDZDQUFvQyxFQUFDaEIsTUFBTUosVUFDOUVxQixrQ0FBa0MsQUFDaEMsbUJBQUdGLHlDQUNILG1CQUFHRjtJQUdYQSxxQ0FBcUNLLDhCQUF3QyxDQUFDUixPQUFPLENBQUNSLGlDQUFpQ1Msc0JBQXNCSCxxQkFBcUJaO0lBRWxLLElBQU11QixnQ0FBZ0NOLG9DQUFvQyxHQUFHO0lBRTdFTyxJQUFBQSx1Q0FBOEIsRUFBQ0gsaUNBQWlDckI7SUFFaEV5QixJQUFBQSxvQ0FBMkIsRUFBQ0YsK0JBQStCdkI7QUFDN0Q7QUFFQSxTQUFTUyw2QkFBNkJOLGlDQUFpQyxFQUFFSCxPQUFPLEVBQUU7SUFDaEYsSUFBTTBCLHdCQUF3QkMsMEJBQThCLENBQUNiLE9BQU8sQ0FBQ1gsbUNBQW1DSCxVQUNsRzRCLHlCQUF5QkMsMkJBQStCLENBQUNmLE9BQU8sQ0FBQ1gsbUNBQW1DSDtJQUUxRzhCLGdDQUEwQyxDQUFDaEIsT0FBTyxDQUFDWCxtQ0FBbUNIO0lBRXRGLElBQU1JLE9BQU9ELGtDQUFrQ0UsT0FBTztJQUV0RCxJQUFJMEIsMEJBQTBCNUIsa0NBQWtDNkIsMEJBQTBCO0lBRTFGLElBQU1DLHdCQUF3QjlCLGtDQUFrQytCLHdCQUF3QixJQUNsRmpCLHFDQUFxQ0MsSUFBQUEsK0NBQXNDLEVBQUNkLE1BQU0sU0FBQ0QsbUNBQXNDO1FBQ3ZILElBQU1nQyx5REFBeURoQyxrQ0FBa0MrQix3QkFBd0IsSUFDbkhFLDJEQUEyRGpDLGtDQUFrQzZCLDBCQUEwQjtRQUU3SCxJQUFJLEFBQUNELDRCQUE0QkssNERBQThESCwwQkFBMEJFLHdEQUF5RDtZQUNoTCxPQUFPLElBQUk7UUFDYixDQUFDO0lBQ0gsR0FBR25DO0lBRVQrQiwwQkFBMEJNLHNCQUFnQyxDQUFDdkIsT0FBTyxDQUFDWCxtQ0FBbUN5Qix3QkFBd0JGLHVCQUF1QjFCO0lBRXJKc0MsMEJBQThCLENBQUN4QixPQUFPLENBQUNpQix5QkFBeUIzQixNQUFNSjtJQUV0RSxJQUFNdUMsK0JBQStCUix5QkFDL0JWLGtDQUFrQ0osb0NBQW9DLEdBQUc7SUFFL0VPLElBQUFBLHVDQUE4QixFQUFDSCxpQ0FBaUNyQjtJQUVoRXdDLElBQUFBLG1DQUEwQixFQUFDRCw4QkFBOEJ2QztBQUMzRCJ9