"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _edge = /*#__PURE__*/ _interopRequireDefault(require("./edge"));
var _definition = /*#__PURE__*/ _interopRequireDefault(require("./definition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directedGraph = require("./utilities/directedGraph");
var _array = require("./utilities/array");
var _context = require("./utilities/context");
var _definition1 = require("./utilities/definition");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateIndirectLeftRecursion(context) {
    var greatestNonTrivialCycle = findGreatestNonTrivialCycle(context);
    while(greatestNonTrivialCycle !== null){
        var cycle = greatestNonTrivialCycle, ruleNames = (0, _directedGraph.ruleNamesFromCycle)(cycle), firstLastRuleName = (0, _array.firstLast)(ruleNames), secondLastRuleName = (0, _array.secondLast)(ruleNames), ruleName = firstLastRuleName, leftRecursiveRuleName = secondLastRuleName; ///
        rewriteIndirectLeftRecursion(ruleName, leftRecursiveRuleName, context);
        rewriteDirectedGraph(ruleName, leftRecursiveRuleName, context);
        greatestNonTrivialCycle = findGreatestNonTrivialCycle(context);
    }
}
function rewriteDirectedGraph(ruleName, leftRecursiveRuleName, context) {
    var directedGraph = context.directedGraph;
    var sourceVertex, targetVertex;
    sourceVertex = leftRecursiveRuleName; ///
    targetVertex = ruleName; ///
    directedGraph.removeEdgeBySourceVertexAndTargetVertex(sourceVertex, targetVertex);
    sourceVertex = ruleName; ///
    var edges = directedGraph.findEdgesBySourceVertex(sourceVertex);
    edges = edges.reduce(function(edges, edge) {
        var edgeTriviallyCyclic = edge.isTriviallyCyclic();
        if (!edgeTriviallyCyclic) {
            var sourceVertex = leftRecursiveRuleName, targetVertex = edge.getTargetVertex();
            edge = _edge.default.fromSourceVertexAndTargetVertex(sourceVertex, targetVertex);
            edges.push(edge);
        }
        return edges;
    }, []);
    directedGraph.addEdges(edges);
}
function greatestCycleFromCycles(cycles) {
    var greatestCycle = cycles.reduce(function(greatestCycle, cycle) {
        if (greatestCycle === null) {
            greatestCycle = cycle; ///
        } else {
            var cycleLength = cycle.length, greatestCycleLength = greatestCycle.length;
            if (cycleLength > greatestCycleLength) {
                greatestCycle = cycle; ///
            }
        }
        return greatestCycle;
    }, null);
    return greatestCycle;
}
function findGreatestNonTrivialCycle(context) {
    var directedGraph = context.directedGraph;
    var nonTrivialCycles = directedGraph.findNonTrivialCycles(), greatestNonTrivialCycle = greatestCycleFromCycles(nonTrivialCycles);
    return greatestNonTrivialCycle;
}
function rewriteIndirectLeftRecursion(ruleName, leftRecursiveRuleName, context) {
    var ruleMap = context.ruleMap;
    var rule = ruleMap[ruleName], leftRecursiveRule = ruleMap[leftRecursiveRuleName], leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveRule, function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition, leftRecursiveRuleNames = (0, _definition1.leftRecursiveRuleNamesFromDefinition)(definition), firstLeftRecursiveRuleName = (0, _array.first)(leftRecursiveRuleNames);
        if (firstLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context);
    var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var definitions;
    definitions = leftRecursiveDefinitions; ///
    leftRecursiveRule.removeDefinitions(definitions);
    definitions = rule.getDefinitions();
    definitions = definitions.reduce(function(definitions, definition) {
        var _$leftRecursiveRuleName = ruleName, definitionDirectlyLeftRecursive = (0, _definition1.isDefinitionDirectlyLeftRecursive)(definition, _$leftRecursiveRuleName);
        if (!definitionDirectlyLeftRecursive) {
            definition = _definition.default.fromDefinitionAndIndirectlyRepeatedRuleName(definition, indirectlyRepeatedRuleName); ///
            definitions.push(definition);
        }
        return definitions;
    }, []);
    leftRecursiveRule.addDefinitions(definitions);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBFZGdlIGZyb20gXCIuL2VkZ2VcIjtcbmltcG9ydCBEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb25cIjtcbmltcG9ydCBJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVwZWF0ZWQvaW5kaXJlY3RseVwiO1xuXG5pbXBvcnQgeyBydWxlTmFtZXNGcm9tQ3ljbGUgfSBmcm9tIFwiLi91dGlsaXRpZXMvZGlyZWN0ZWRHcmFwaFwiO1xuaW1wb3J0IHsgZmlyc3QsIGZpcnN0TGFzdCwgc2Vjb25kTGFzdCB9IGZyb20gXCIuL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9IGZyb20gXCIuL3V0aWxpdGllcy9jb250ZXh0XCJcbmltcG9ydCB7IGlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2RlZmluaXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpIHtcbiAgbGV0IGdyZWF0ZXN0Tm9uVHJpdmlhbEN5Y2xlID0gZmluZEdyZWF0ZXN0Tm9uVHJpdmlhbEN5Y2xlKGNvbnRleHQpO1xuXG4gIHdoaWxlIChncmVhdGVzdE5vblRyaXZpYWxDeWNsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGN5Y2xlID0gZ3JlYXRlc3ROb25Ucml2aWFsQ3ljbGUsICAvLy9cbiAgICAgICAgICBydWxlTmFtZXMgPSBydWxlTmFtZXNGcm9tQ3ljbGUoY3ljbGUpLFxuICAgICAgICAgIGZpcnN0TGFzdFJ1bGVOYW1lID0gZmlyc3RMYXN0KHJ1bGVOYW1lcyksXG4gICAgICAgICAgc2Vjb25kTGFzdFJ1bGVOYW1lID0gc2Vjb25kTGFzdChydWxlTmFtZXMpLFxuICAgICAgICAgIHJ1bGVOYW1lID0gZmlyc3RMYXN0UnVsZU5hbWUsIC8vL1xuICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IHNlY29uZExhc3RSdWxlTmFtZTsgLy8vXG5cbiAgICByZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uKHJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGNvbnRleHQpO1xuXG4gICAgcmV3cml0ZURpcmVjdGVkR3JhcGgocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgY29udGV4dCk7XG5cbiAgICBncmVhdGVzdE5vblRyaXZpYWxDeWNsZSA9IGZpbmRHcmVhdGVzdE5vblRyaXZpYWxDeWNsZShjb250ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0ZWRHcmFwaChydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgZGlyZWN0ZWRHcmFwaCB9ID0gY29udGV4dDtcblxuICBsZXQgc291cmNlVmVydGV4LFxuICAgICAgdGFyZ2V0VmVydGV4O1xuXG4gIHNvdXJjZVZlcnRleCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZTsgLy8vXG5cbiAgdGFyZ2V0VmVydGV4ID0gcnVsZU5hbWU7ICAvLy9cblxuICBkaXJlY3RlZEdyYXBoLnJlbW92ZUVkZ2VCeVNvdXJjZVZlcnRleEFuZFRhcmdldFZlcnRleChzb3VyY2VWZXJ0ZXgsIHRhcmdldFZlcnRleCk7XG5cbiAgc291cmNlVmVydGV4ID0gcnVsZU5hbWU7ICAvLy9cblxuICBsZXQgZWRnZXMgPSBkaXJlY3RlZEdyYXBoLmZpbmRFZGdlc0J5U291cmNlVmVydGV4KHNvdXJjZVZlcnRleCk7XG5cbiAgZWRnZXMgPSBlZGdlcy5yZWR1Y2UoKGVkZ2VzLCBlZGdlKSA9PiB7IC8vL1xuICAgIGNvbnN0IGVkZ2VUcml2aWFsbHlDeWNsaWMgPSBlZGdlLmlzVHJpdmlhbGx5Q3ljbGljKCk7XG5cbiAgICBpZiAoIWVkZ2VUcml2aWFsbHlDeWNsaWMpIHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgLy8vXG4gICAgICAgICAgICB0YXJnZXRWZXJ0ZXggPSBlZGdlLmdldFRhcmdldFZlcnRleCgpO1xuXG4gICAgICBlZGdlID0gRWRnZS5mcm9tU291cmNlVmVydGV4QW5kVGFyZ2V0VmVydGV4KHNvdXJjZVZlcnRleCwgdGFyZ2V0VmVydGV4KTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWRnZXM7XG4gIH0sIFtdKTtcblxuICBkaXJlY3RlZEdyYXBoLmFkZEVkZ2VzKGVkZ2VzKTtcbn1cblxuZnVuY3Rpb24gZ3JlYXRlc3RDeWNsZUZyb21DeWNsZXMoY3ljbGVzKSB7XG4gIGNvbnN0IGdyZWF0ZXN0Q3ljbGUgPSBjeWNsZXMucmVkdWNlKChncmVhdGVzdEN5Y2xlLCBjeWNsZSkgPT4ge1xuICAgIGlmIChncmVhdGVzdEN5Y2xlID09PSBudWxsKSB7XG4gICAgICBncmVhdGVzdEN5Y2xlID0gY3ljbGU7ICAvLy9cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3ljbGVMZW5ndGggPSBjeWNsZS5sZW5ndGgsXG4gICAgICAgICAgICBncmVhdGVzdEN5Y2xlTGVuZ3RoID0gZ3JlYXRlc3RDeWNsZS5sZW5ndGg7XG5cbiAgICAgIGlmIChjeWNsZUxlbmd0aCA+IGdyZWF0ZXN0Q3ljbGVMZW5ndGgpIHtcbiAgICAgICAgZ3JlYXRlc3RDeWNsZSA9IGN5Y2xlOyAgLy8vXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyZWF0ZXN0Q3ljbGU7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBncmVhdGVzdEN5Y2xlO1xufVxuXG5mdW5jdGlvbiBmaW5kR3JlYXRlc3ROb25Ucml2aWFsQ3ljbGUoY29udGV4dCkge1xuICBjb25zdCB7IGRpcmVjdGVkR3JhcGggfSA9IGNvbnRleHQ7XG5cbiAgbGV0IG5vblRyaXZpYWxDeWNsZXMgPSBkaXJlY3RlZEdyYXBoLmZpbmROb25Ucml2aWFsQ3ljbGVzKCksXG4gICAgICBncmVhdGVzdE5vblRyaXZpYWxDeWNsZSA9IGdyZWF0ZXN0Q3ljbGVGcm9tQ3ljbGVzKG5vblRyaXZpYWxDeWNsZXMpO1xuXG4gIHJldHVybiBncmVhdGVzdE5vblRyaXZpYWxDeWNsZTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcnVsZU1hcCB9ID0gY29udGV4dDtcblxuICBjb25zdCBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlID0gcnVsZU1hcFtsZWZ0UmVjdXJzaXZlUnVsZU5hbWVdLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVSdWxlLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgICAgICAgICAgZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICAgICAgICAgIGlmIChmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gcnVsZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgY29udGV4dCk7XG5cbiAgY29uc3QgaW5kaXJlY3RseVJlcGVhdGVkUnVsZSA9IEluZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlcGVhdGVkUnVsZS5nZXROYW1lKCk7XG5cbiAgcnVsZU1hcFtpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0gPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xuXG4gIGxldCBkZWZpbml0aW9ucztcblxuICBkZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGUucmVtb3ZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGRlZmluaXRpb25zID0gZGVmaW5pdGlvbnMucmVkdWNlKChkZWZpbml0aW9ucywgZGVmaW5pdGlvbikgPT4geyAvLy9cbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBydWxlTmFtZSwgLy8vXG4gICAgICAgICAgZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgaWYgKCFkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBkZWZpbml0aW9uID0gRGVmaW5pdGlvbi5mcm9tRGVmaW5pdGlvbkFuZEluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lKGRlZmluaXRpb24sIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lKTsgIC8vL1xuXG4gICAgICBkZWZpbml0aW9ucy5wdXNoKGRlZmluaXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbml0aW9ucztcbiAgfSwgW10pO1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlLmFkZERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcbn1cblxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImNvbnRleHQiLCJncmVhdGVzdE5vblRyaXZpYWxDeWNsZSIsImZpbmRHcmVhdGVzdE5vblRyaXZpYWxDeWNsZSIsImN5Y2xlIiwicnVsZU5hbWVzIiwicnVsZU5hbWVzRnJvbUN5Y2xlIiwiZmlyc3RMYXN0UnVsZU5hbWUiLCJmaXJzdExhc3QiLCJzZWNvbmRMYXN0UnVsZU5hbWUiLCJzZWNvbmRMYXN0IiwicnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZXdyaXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwicmV3cml0ZURpcmVjdGVkR3JhcGgiLCJkaXJlY3RlZEdyYXBoIiwic291cmNlVmVydGV4IiwidGFyZ2V0VmVydGV4IiwicmVtb3ZlRWRnZUJ5U291cmNlVmVydGV4QW5kVGFyZ2V0VmVydGV4IiwiZWRnZXMiLCJmaW5kRWRnZXNCeVNvdXJjZVZlcnRleCIsInJlZHVjZSIsImVkZ2UiLCJlZGdlVHJpdmlhbGx5Q3ljbGljIiwiaXNUcml2aWFsbHlDeWNsaWMiLCJnZXRUYXJnZXRWZXJ0ZXgiLCJFZGdlIiwiZnJvbVNvdXJjZVZlcnRleEFuZFRhcmdldFZlcnRleCIsInB1c2giLCJhZGRFZGdlcyIsImdyZWF0ZXN0Q3ljbGVGcm9tQ3ljbGVzIiwiY3ljbGVzIiwiZ3JlYXRlc3RDeWNsZSIsImN5Y2xlTGVuZ3RoIiwibGVuZ3RoIiwiZ3JlYXRlc3RDeWNsZUxlbmd0aCIsIm5vblRyaXZpYWxDeWNsZXMiLCJmaW5kTm9uVHJpdmlhbEN5Y2xlcyIsInJ1bGVNYXAiLCJydWxlIiwibGVmdFJlY3Vyc2l2ZVJ1bGUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZmlyc3QiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiSW5kaXJlY3RseVJlcGVhdGVkUnVsZSIsImZyb21SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImRlZmluaXRpb25zIiwicmVtb3ZlRGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJpc0RlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJEZWZpbml0aW9uIiwiZnJvbURlZmluaXRpb25BbmRJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImFkZERlZmluaXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFXQTs7O2VBQXdCQTs7O3lEQVRQOytEQUNNOytEQUNZOzZCQUVBO3FCQUNVO3VCQUNBOzJCQUMyQzs7Ozs7O0FBRXpFLFNBQVNBLCtCQUErQkMsT0FBTyxFQUFFO0lBQzlELElBQUlDLDBCQUEwQkMsNEJBQTRCRjtJQUUxRCxNQUFPQyw0QkFBNEIsSUFBSSxDQUFFO1FBQ3ZDLElBQU1FLFFBQVFGLHlCQUNSRyxZQUFZQyxJQUFBQSxpQ0FBa0IsRUFBQ0YsUUFDL0JHLG9CQUFvQkMsSUFBQUEsZ0JBQVMsRUFBQ0gsWUFDOUJJLHFCQUFxQkMsSUFBQUEsaUJBQVUsRUFBQ0wsWUFDaENNLFdBQVdKLG1CQUNYSyx3QkFBd0JILG9CQUFvQixHQUFHO1FBRXJESSw2QkFBNkJGLFVBQVVDLHVCQUF1Qlg7UUFFOURhLHFCQUFxQkgsVUFBVUMsdUJBQXVCWDtRQUV0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