"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _definition = /*#__PURE__*/ _interopRequireDefault(require("./definition"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/indirectly"));
var _directedGraph = require("./utilities/directedGraph");
var _array = require("./utilities/array");
var _context = require("./utilities/context");
var _definition1 = require("./utilities/definition");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateIndirectLeftRecursion(context) {
    var cycles = context.cycles, ruleMap = context.ruleMap;
    var greatestNonTrivialCycle = greatestNonTrivialCycleFromCycles(cycles);
    while(greatestNonTrivialCycle !== null){
        var cycle = greatestNonTrivialCycle, ruleNames = (0, _directedGraph.ruleNamesFromCycle)(cycle), firstLastRuleName = (0, _array.firstLast)(ruleNames), secondLastRuleName = (0, _array.secondLast)(ruleNames), ruleName = firstLastRuleName, leftRecursiveRuleName = secondLastRuleName, rule = ruleMap[ruleName], leftRecursiveRule = ruleMap[leftRecursiveRuleName];
        rewriteIndirectLeftRecursion(rule, leftRecursiveRule, context);
        debugger;
        greatestNonTrivialCycle = greatestNonTrivialCycleFromCycles(cycles);
    }
}
function rewriteIndirectLeftRecursion(rule, leftRecursiveRule, context) {
    var ruleMap = context.ruleMap;
    var ruleName = rule.getName(), leftRecursiveRuleName = leftRecursiveRule.getName(), leftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(leftRecursiveRule, function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition, leftRecursiveRuleNames = (0, _definition1.leftRecursiveRuleNamesFromDefinition)(definition), firstLeftRecursiveRuleName = (0, _array.first)(leftRecursiveRuleNames);
        if (firstLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context);
    var indirectlyRepeatedRule = _indirectly.default.fromRuleNameLeftRecursiveRuleNameAndLeftRecursiveDefinitions(ruleName, leftRecursiveRuleName, leftRecursiveDefinitions), indirectlyRepeatedRuleName = indirectlyRepeatedRule.getName();
    ruleMap[indirectlyRepeatedRuleName] = indirectlyRepeatedRule;
    var definitions;
    definitions = leftRecursiveDefinitions; ///
    leftRecursiveRule.removeDefinitions(definitions);
    definitions = rule.getDefinitions();
    definitions = definitions.map(function(definition) {
        definition = _definition.default.fromDefinitionAndIndirectlyRepeatedRuleName(definition, indirectlyRepeatedRuleName); ///
        return definition;
    });
    leftRecursiveRule.addDefinitions(definitions);
}
function greatestNonTrivialCycleFromCycles(cycles) {
    var greatestNonTrivialCycle = null;
    var greatestCycle = greatestCycleFromCycles(cycles);
    if (greatestCycle !== null) {
        var greatestCycleLength = greatestCycle.length;
        if (greatestCycleLength > 1) {
            greatestNonTrivialCycle = greatestCycle; ///
        }
    }
    return greatestNonTrivialCycle;
}
function greatestCycleFromCycles(cycles) {
    var greatestCycle = cycles.reduce(function(greatestCycle, cycle) {
        if (greatestCycle === null) {
            greatestCycle = cycle; ///
        } else {
            var cycleLength = cycle.length, greatestCycleLength = greatestCycle.length;
            if (cycleLength > greatestCycleLength) {
                greatestCycle = cycle; ///
            }
        }
        return greatestCycle;
    }, null);
    return greatestCycle;
}

//# sourceMappingURL=data:application/json;base64,