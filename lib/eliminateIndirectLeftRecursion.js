"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateIndirectLeftRecursion;
    }
});
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _indirectlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyReduced"));
var _indirectlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/indirectlyRepeated"));
var _leftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/leftRecursive"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _indirectlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/indirectlyLeftRecursive"));
var _context = require("./utilities/context");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var count = 0;
function eliminateIndirectLeftRecursion(context) {
    var greatestIndirectlyLeftRecursiveDefinition = (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    while(greatestIndirectlyLeftRecursiveDefinition !== null){
        var indirectlyLeftRecursiveDefinition = greatestIndirectlyLeftRecursiveDefinition, rule = indirectlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(rule, context);
        directlyLeftRecursiveDefinition !== null ? rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) : rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context);
        greatestIndirectlyLeftRecursiveDefinition = ++count > Infinity ? null : (0, _context.retrieveGreatestIndirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, indirectlyLeftRecursiveDefinition, context) {
    var allowIsolated = true, directlyReducedRule = _directlyReduced.default.execute(directlyLeftRecursiveDefinition, allowIsolated, context), directlyRepeatedRule = _directlyRepeated.default.execute(directlyLeftRecursiveDefinition, context);
    var rule = directlyLeftRecursiveDefinition.getRule();
    var indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, context);
    var directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context), removedLeftRecursiveDefinitions = _toConsumableArray(directlyLeftRecursiveDefinitions).concat(_toConsumableArray(indirectlyLeftRecursiveDefinitions));
    indirectlyLeftRecursiveDefinitions = _directlyLeftRecursive.default.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    var addedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinitions)(addedLeftRecursiveDefinitions, context);
}
function rewriteIndirectLeftRecursion(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyReducedRule = _indirectlyReduced.default.execute(indirectlyLeftRecursiveDefinition, context), indirectlyRepeatedRule = _indirectlyRepeated.default.execute(indirectlyLeftRecursiveDefinition, context);
    _indirectlyLeftRecursive.default.execute(indirectlyLeftRecursiveDefinition, context);
    var rule = indirectlyLeftRecursiveDefinition.getRule();
    var leftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
    var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitions = (0, _context.findIndirectlyLeftRecursiveDefinitions)(rule, function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getLeftRecursiveDefinition();
        if (leftRecursiveDefinition === indirectlyLeftRecursiveDefinitionLeftRecursiveDefinition && leftRecursiveRuleName === indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName) {
            return true;
        }
    }, context);
    leftRecursiveDefinition = _leftRecursive.default.execute(indirectlyLeftRecursiveDefinition, indirectlyRepeatedRule, indirectlyReducedRule, context);
    var addedLeftRecursiveDefinition = leftRecursiveDefinition, removedLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
    (0, _context.addLeftRecursiveDefinition)(addedLeftRecursiveDefinition, context);
}

//# sourceMappingURL=data:application/json;base64,