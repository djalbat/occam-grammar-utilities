'use strict';

var tarjan = require('occam-tarjan'),
    parsers = require('occam-parsers');

var UnitRule = require('./rule/unit'),
    UnitsRule = require('./rule/units'),
    FixedRule = require('./rule/fixed'),
    NonCyclicRule = require('./rule/nonCyclic'),
    ruleUtilities = require('./utilities/rule');

var Rule = parsers.Rule,
    Graph = tarjan.Graph,
    findRuleByName = ruleUtilities.findRuleByName;


function eliminateCycles(rules) {
  var graph = graphFromRules(rules),
      stronglyConnectedComponents = graph.getStronglyConnectedComponents(),
      nonCyclicRules = nonCyclicRulesFromStronglyConnectedComponents(stronglyConnectedComponents, rules);

  rules = rules.map(function (rule) {
    var ruleName = rule.getName(),
        nonCyclicRuleName = ruleName,
        ///
    nonCyclicRule = findRuleByName(nonCyclicRuleName, nonCyclicRules);

    if (nonCyclicRule !== null) {
      rule = nonCyclicRule; ///
    } else {
      var alreadyNonCyclicRuleName = ruleName,
          ///
      alreadyNonCyclicRule = findRuleByName(alreadyNonCyclicRuleName, rules); ///

      rule = alreadyNonCyclicRule; ///
    }

    return rule;
  });

  return rules;
}

module.exports = eliminateCycles;

function graphFromRules(rules) {
  var unitsRules = unitsRulesFromRules(rules),
      vertexLiterals = unitsRules.map(function (unitsRule) {
    var ruleName = unitsRule.getName(),
        unitDefinitionsRuleNames = unitsRule.getUnitDefinitionRuleNames(),
        vertexName = ruleName,
        ///
    descendantVertexNames = unitDefinitionsRuleNames,
        ///
    vertexLiteral = [vertexName, descendantVertexNames];

    return vertexLiteral;
  }),
      graph = Graph.fromVertexLiterals(vertexLiterals);

  return graph;
}

function unitsRulesFromRules(rules) {
  var unitsRules = rules.reduce(function (unitsRules, rule) {
    var unitsRule = UnitsRule.fromRule(rule);

    if (unitsRule !== null) {
      unitsRules.push(unitsRule);
    }

    return unitsRules;
  }, []);

  return unitsRules;
}

function nonCyclicRulesFromStronglyConnectedComponents(stronglyConnectedComponents, rules) {
  var nonCyclicRules = stronglyConnectedComponents.reduce(function (nonCyclicRules, stronglyConnectedComponent) {
    var stronglyConnectedComponentNonCyclic = stronglyConnectedComponent.isNonCyclic();

    if (stronglyConnectedComponentNonCyclic) {
      nonCyclicRuleFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules);
    } else {
      nonCyclicRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules);
    }

    return nonCyclicRules;
  }, []);

  return nonCyclicRules;
}

function nonCyclicRuleFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules) {
  var firstVertexName = stronglyConnectedComponent.getFirstVertexName(),
      name = firstVertexName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var nonCyclicRule = NonCyclicRule.fromRule(rule);

    nonCyclicRules.push(nonCyclicRule);
  }
}

function nonCyclicRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules) {
  var unitRules = unitRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      fixedRules = fixedRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      addedRules = addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules);

  nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules);
}

function addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules) {
  var addedRules = [],
      removedUnitRules = [];

  var unitRulesLength = unitRules.length;

  while (unitRulesLength > 0) {
    var unitRule = unitRules.shift(),
        unitRuleName = unitRule.getName();

    var removedUnitRule = unitRule; ///

    removedUnitRules.push(removedUnitRule);

    var unitRuleUnitRuleName = unitRule.getUnitRuleName(),
        fixedRuleName = unitRuleUnitRuleName,
        ///
    fixedRule = findRuleByName(fixedRuleName, fixedRules),
        addedRuleName = unitRuleName; ///

    var addedRule = findRuleByName(addedRuleName, addedRules);

    if (addedRule === null) {
      addedRule = Rule.fromRule(fixedRule);

      addedRule.setName(addedRuleName);

      addedRules.push(addedRule);
    } else {
      var fixedRuleDefinitions = fixedRule.getDefinitions();

      addedRule.addDefinitions(fixedRuleDefinitions);
    }

    var intermediateUnitRuleName = unitRuleUnitRuleName,
        ///
    intermediateUnitRule = findRuleByName(intermediateUnitRuleName, unitRules);

    if (intermediateUnitRule !== null) {
      var intermediateUnitRuleUnitRuleName = intermediateUnitRule.getUnitRuleName(),
          firstRuleName = unitRuleName,
          ///
      secondRuleName = intermediateUnitRuleUnitRuleName,
          ///
      unitRuleNonCyclic = firstRuleName !== secondRuleName;

      if (unitRuleNonCyclic) {
        unitRule = findUnitRuleByNames(firstRuleName, secondRuleName, removedUnitRules);

        if (unitRule === null) {
          unitRule = UnitRule.fromRuleNames(firstRuleName, secondRuleName);

          unitRules.unshift(unitRule);
        }
      }
    }

    unitRulesLength = unitRules.length;
  }

  return addedRules;
}

function nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules) {
  fixedRules.forEach(function (fixedRule) {
    var nonCyclicRule = fixedRule,
        ///
    nonCyclicRuleName = nonCyclicRule.getName(),
        addedRule = findRuleByName(nonCyclicRuleName, addedRules);

    if (addedRule !== null) {
      var addedRuleDefinitions = addedRule.getDefinitions();

      nonCyclicRule.addDefinitions(addedRuleDefinitions);
    }

    var nonCyclicRuleDefinitionsExist = nonCyclicRule.doDefinitionsExist();

    if (nonCyclicRuleDefinitionsExist) {
      nonCyclicRules.push(nonCyclicRule);
    }
  });
}

function unitRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var stronglyConnectedComponentVertexNames = stronglyConnectedComponent.getVertexNames(),
      unitsRules = unitsRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      ruleNames = stronglyConnectedComponentVertexNames,
      ///
  unitRules = unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames);

  return unitRules;
}

function unitsRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var unitsRules = stronglyConnectedComponent.reduceVertexNames(function (unitsRules, vertexName) {
    var name = vertexName,
        ///
    rule = findRuleByName(name, rules),
        unitsRule = UnitsRule.fromRule(rule);

    if (unitsRule !== null) {
      unitsRules.push(unitsRule);
    }

    return unitsRules;
  }, []);

  return unitsRules;
}

function unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames) {
  var unitRules = unitsRules.reduce(function (unitRules, unitsRule) {
    var unitsRuleName = unitsRule.getName();

    unitsRule.forEachUnitDefinition(function (unitDefinition) {
      var name = unitsRuleName,
          ///
      unitRule = UnitRule.fromNameAndUnitDefinition(name, unitDefinition),
          unitRuleNotCyclic = unitRule.isNotCyclic(),
          unitRuleIncludedInRuleNames = unitRule.isIncludedInRuleNames(ruleNames);

      if (unitRuleNotCyclic && unitRuleIncludedInRuleNames) {
        unitRules.push(unitRule);
      }
    });

    return unitRules;
  }, []);

  return unitRules;
}

function fixedRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var stronglyConnectedComponentVertexNames = stronglyConnectedComponent.getVertexNames(),
      ruleNames = stronglyConnectedComponentVertexNames,
      ///
  fixedRules = stronglyConnectedComponent.mapVertexNames(function (vertexName) {
    var name = vertexName,
        ///
    rule = findRuleByName(name, rules),
        fixedRule = FixedRule.fromRuleAndRuleNames(rule, ruleNames);

    return fixedRule;
  });

  return fixedRules;
}

function findUnitRuleByNames(firstRuleName, secondRuleName, unitRules) {
  var unitRule = unitRules.find(function (unitRule) {
    var unitRuleName = unitRule.getName(),
        unitRuleUnitRuleName = unitRule.getUnitRuleName(),
        found = unitRuleName === firstRuleName && unitRuleUnitRuleName === secondRuleName;

    return found;
  }) || null; ///

  return unitRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,