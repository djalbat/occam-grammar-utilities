'use strict';

var UnitRule = require('./rule/unit'),
    NonUnitsRule = require('./rule/nonUnits'),
    ruleUtilities = require('./utilities/rule');

var findRuleByName = ruleUtilities.findRuleByName;


function eliminateCycles(rules) {
  var unitRules = unitRulesFromRules(rules),
      nonUnitsRules = nonUnitsRulesFromRules(rules),
      newNonUnitsRules = newNonUnitsRulesFromUnitRulesAndNonUnitsRules(unitRules, nonUnitsRules);

  rules = rulesFromNonUnitsRulesAndNewNonUnitsRules(nonUnitsRules, newNonUnitsRules);

  return rules;
}

module.exports = eliminateCycles;

function unitRulesFromRules(rules) {
  var unitRules = [];

  rules.forEach(function (rule) {
    var name = rule.getName(),
        definitions = rule.getDefinitions();

    definitions.forEach(function (definition) {
      var unitRule = UnitRule.fromNameAndDefinition(name, definition);

      if (unitRule !== null) {
        unitRules.push(unitRule);
      }
    });
  });

  return unitRules;
}

function nonUnitsRulesFromRules(rules) {
  var nonUnitsRules = rules.map(function (rule) {
    var nonUnitsRule = NonUnitsRule.fromRule(rule);

    return nonUnitsRule;
  });

  return nonUnitsRules;
}

function newNonUnitsRulesFromUnitRulesAndNonUnitsRules(unitRules, nonUnitsRules) {
  var newNonUnitsRules = [],
      oldUnitRules = [];

  var unitRule = void 0;

  var _loop = function _loop() {
    var unitRuleCyclic = unitRule.isCyclic(),
        oldUnitsRulesIncludesUnitRule = checkOldUnitsRulesIncludesUnitRule(oldUnitRules, unitRule);

    if (unitRuleCyclic || oldUnitsRulesIncludesUnitRule) {
      return 'continue';
    }

    var oldUnitRule = unitRule,
        ///
    oldUnitRuleName = oldUnitRule.getName(),
        oldUnitRuleUnitDefinitionRuleName = oldUnitRule.getUnitDefinitionRuleName();

    oldUnitRules.push(oldUnitRule);

    nonUnitsRules.forEach(function (nonUnitsRule) {
      var nonUnitsRuleName = nonUnitsRule.getName();

      if (nonUnitsRuleName === oldUnitRuleUnitDefinitionRuleName) {
        var name = oldUnitRuleName,
            ///
        definitions = nonUnitsRule.getDefinitions(),
            newNonUnitsRule = NonUnitsRule.fromNameAndDefinitions(name, definitions);

        newNonUnitsRules.push(newNonUnitsRule);
      }
    });

    var newUnitRules = [];

    unitRules.forEach(function (unitRule) {
      var unitRuleName = unitRule.getName();

      if (unitRuleName === oldUnitRuleUnitDefinitionRuleName) {
        var unitRuleUnitDefinition = unitRule.getUnitDefinition(),
            name = oldUnitRuleName,
            ///
        unitDefinition = unitRuleUnitDefinition,
            ///
        newUnitRule = UnitRule.fromNameAndUnitDefinition(name, unitDefinition),
            oldUnitRulesIncludesNewUnitRule = checkOldUnitsRulesIncludesUnitRule(oldUnitRules, newUnitRule);

        if (!oldUnitRulesIncludesNewUnitRule) {
          newUnitRules.push(newUnitRule);
        }
      }
    });

    unitRules = [].concat(newUnitRules).concat(unitRules);
  };

  while (unitRule = unitRules.shift()) {
    var _ret = _loop();

    if (_ret === 'continue') continue;
  }

  return newNonUnitsRules;
}

function rulesFromNonUnitsRulesAndNewNonUnitsRules(nonUnitsRules, newNonUnitsRules) {
  var rules = [];

  newNonUnitsRules.forEach(function (newNonUnitsRule) {
    var name = newNonUnitsRule.getName(),
        definitions = newNonUnitsRule.getDefinitions(),
        nonUnitsRule = findRuleByName(name, nonUnitsRules);

    nonUnitsRule.addDefinitions(definitions);
  });

  nonUnitsRules.forEach(function (nonUnitsRule) {
    var nonUnitsRuleNonTrivial = nonUnitsRule.isNonTrivial();

    if (nonUnitsRuleNonTrivial) {
      var rule = nonUnitsRule; ///

      rules.push(rule);
    }
  });

  return rules;
}

function checkOldUnitsRulesIncludesUnitRule(oldUnitsRules, unitRule) {
  var oldUnitsRulesIncludesUnitRule = oldUnitsRules.reduce(function (oldUnitsRulesIncludesUnitRule, oldUnitRule) {
    if (!oldUnitsRulesIncludesUnitRule) {
      var oldUnitRuleMatchesUnitRule = oldUnitRule.matches(unitRule);

      oldUnitsRulesIncludesUnitRule = oldUnitRuleMatchesUnitRule; ///
    }

    return oldUnitsRulesIncludesUnitRule;
  }, false);

  return oldUnitsRulesIncludesUnitRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,