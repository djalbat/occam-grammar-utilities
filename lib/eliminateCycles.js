'use strict';

var parsers = require('occam-parsers');

var UnitRule = require('./rule/unit'),
    FixedRule = require('./rule/fixed'),
    NonUnitsRule = require('./rule/nonUnits'),
    NonCyclicRule = require('./rule/nonCyclic'),
    ruleUtilities = require('./utilities/rule');

var Rule = parsers.Rule,
    findRuleByName = ruleUtilities.findRuleByName;


function eliminateCycles(rules) {
  var nonUnitsRules = nonUnitsRulesFromRules(rules),
      unitRules = unitRulesFromRules(rules);

  rules = unitRules; ///

  return rules;
}

module.exports = eliminateCycles;

function nonUnitsRulesFromRules(rules) {
  var nonUnitsRules = [];

  rules.forEach(function (rule) {
    var nonUnitsRule = NonUnitsRule.fromRule(rule);

    if (nonUnitsRule !== null) {
      nonUnitsRules.push(nonUnitsRule);
    }
  });

  return nonUnitsRules;
}

function unitRulesFromRules(rules) {
  var unitRules = [];

  rules.forEach(function (rule) {
    var name = rule.getName(),
        definitions = rule.getDefinitions();

    definitions.forEach(function (definition) {
      var unitRule = UnitRule.fromNameAndDefinition(name, definition);

      if (unitRule !== null) {
        unitRules.push(unitRule);
      }
    });
  });

  return unitRules;
}

function nonCyclicRulesFromStronglyConnectedComponents(stronglyConnectedComponents, rules) {
  var nonCyclicRules = stronglyConnectedComponents.reduce(function (nonCyclicRules, stronglyConnectedComponent) {
    var stronglyConnectedComponentNonCyclic = stronglyConnectedComponent.isNonCyclic();

    if (stronglyConnectedComponentNonCyclic) {
      nonCyclicRuleFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules);
    } else {
      nonCyclicRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules);
    }

    return nonCyclicRules;
  }, []);

  return nonCyclicRules;
}

function nonCyclicRuleFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules) {
  var firstVertexName = stronglyConnectedComponent.getFirstVertexName(),
      name = firstVertexName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var nonCyclicRule = NonCyclicRule.fromRule(rule);

    nonCyclicRules.push(nonCyclicRule);
  }
}

function nonCyclicRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules, nonCyclicRules) {
  var unitRules = unitRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      fixedRules = fixedRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      addedRules = addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules);

  nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules);
}

function addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules) {
  var addedRules = [],
      removedUnitRules = [];

  var unitRulesLength = unitRules.length;

  while (unitRulesLength > 0) {
    var unitRule = unitRules.shift(),
        unitRuleName = unitRule.getName();

    var removedUnitRule = unitRule; ///

    removedUnitRules.push(removedUnitRule);

    var unitRuleUnitRuleName = unitRule.getUnitRuleName(),
        fixedRuleName = unitRuleUnitRuleName,
        ///
    fixedRule = findRuleByName(fixedRuleName, fixedRules),
        addedRuleName = unitRuleName; ///

    var addedRule = findRuleByName(addedRuleName, addedRules);

    if (addedRule === null) {
      addedRule = Rule.fromRule(fixedRule);

      addedRule.setName(addedRuleName);

      addedRules.push(addedRule);
    } else {
      var fixedRuleDefinitions = fixedRule.getDefinitions();

      addedRule.addDefinitions(fixedRuleDefinitions);
    }

    var intermediateUnitRuleName = unitRuleUnitRuleName,
        ///
    intermediateUnitRule = findRuleByName(intermediateUnitRuleName, unitRules);

    if (intermediateUnitRule !== null) {
      var intermediateUnitRuleUnitRuleName = intermediateUnitRule.getUnitRuleName(),
          firstRuleName = unitRuleName,
          ///
      secondRuleName = intermediateUnitRuleUnitRuleName,
          ///
      unitRuleNonCyclic = firstRuleName !== secondRuleName;

      if (unitRuleNonCyclic) {
        unitRule = findUnitRuleByNames(firstRuleName, secondRuleName, removedUnitRules);

        if (unitRule === null) {
          unitRule = UnitRule.fromRuleNames(firstRuleName, secondRuleName);

          unitRules.unshift(unitRule);
        }
      }
    }

    unitRulesLength = unitRules.length;
  }

  return addedRules;
}

function nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules) {
  fixedRules.forEach(function (fixedRule) {
    var nonCyclicRule = fixedRule,
        ///
    nonCyclicRuleName = nonCyclicRule.getName(),
        addedRule = findRuleByName(nonCyclicRuleName, addedRules);

    if (addedRule !== null) {
      var addedRuleDefinitions = addedRule.getDefinitions();

      nonCyclicRule.addDefinitions(addedRuleDefinitions);
    }

    var nonCyclicRuleDefinitions = nonCyclicRule.getDefinitions(),
        nonCyclicRuleDefinitionsExist = nonCyclicRuleDefinitions > 0;

    if (nonCyclicRuleDefinitionsExist) {
      nonCyclicRules.push(nonCyclicRule);
    }
  });
}

function unitRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var stronglyConnectedComponentVertexNames = stronglyConnectedComponent.getVertexNames(),
      unitsRules = unitsRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules),
      ruleNames = stronglyConnectedComponentVertexNames,
      ///
  unitRules = unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames);

  return unitRules;
}

function unitsRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var unitsRules = stronglyConnectedComponent.reduceVertexNames(function (unitsRules, vertexName) {
    var name = vertexName,
        ///
    rule = findRuleByName(name, rules),
        unitsRule = UnitsRule.fromRule(rule);

    if (unitsRule !== null) {
      unitsRules.push(unitsRule);
    }

    return unitsRules;
  }, []);

  return unitsRules;
}

function unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames) {
  var unitRules = unitsRules.reduce(function (unitRules, unitsRule) {
    var unitsRuleName = unitsRule.getName();

    unitsRule.forEachUnitDefinition(function (unitDefinition) {
      var name = unitsRuleName,
          ///
      unitRule = UnitRule.fromNameAndUnitDefinition(name, unitDefinition),
          unitRuleNotCyclic = unitRule.isNotCyclic(),
          unitRuleIncludedInRuleNames = unitRule.isIncludedInRuleNames(ruleNames);

      if (unitRuleNotCyclic && unitRuleIncludedInRuleNames) {
        unitRules.push(unitRule);
      }
    });

    return unitRules;
  }, []);

  return unitRules;
}

function fixedRulesFromStronglyConnectedComponent(stronglyConnectedComponent, rules) {
  var stronglyConnectedComponentVertexNames = stronglyConnectedComponent.getVertexNames(),
      ruleNames = stronglyConnectedComponentVertexNames,
      ///
  fixedRules = stronglyConnectedComponent.mapVertexNames(function (vertexName) {
    var name = vertexName,
        ///
    rule = findRuleByName(name, rules),
        fixedRule = FixedRule.fromRuleAndRuleNames(rule, ruleNames);

    return fixedRule;
  });

  return fixedRules;
}

function findUnitRuleByNames(firstRuleName, secondRuleName, unitRules) {
  var unitRule = unitRules.find(function (unitRule) {
    var unitRuleName = unitRule.getName(),
        unitRuleUnitRuleName = unitRule.getUnitRuleName(),
        found = unitRuleName === firstRuleName && unitRuleUnitRuleName === secondRuleName;

    return found;
  }) || null; ///

  return unitRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,