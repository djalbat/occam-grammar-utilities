'use strict';

var UnitRule = require('./rule/unit'),
    NonUnitsRule = require('./rule/nonUnits');

function eliminateCycles(rules) {
  var nonUnitsRules = nonUnitsRulesFromRules(rules),
      unitRules = unitRulesFromRules(rules),
      nonUnitRules = nonUnitRulesFromNonUnitsRulesAndUnitRules(nonUnitsRules, unitRules);

  rules = nonUnitRules; ///

  return rules;
}

module.exports = eliminateCycles;

function nonUnitsRulesFromRules(rules) {
  var nonUnitsRules = [];

  rules.forEach(function (rule) {
    var nonUnitsRule = NonUnitsRule.fromRule(rule);

    if (nonUnitsRule !== null) {
      nonUnitsRules.push(nonUnitsRule);
    }
  });

  return nonUnitsRules;
}

function unitRulesFromRules(rules) {
  var unitRules = [];

  rules.forEach(function (rule) {
    var name = rule.getName(),
        definitions = rule.getDefinitions();

    definitions.forEach(function (definition) {
      var unitRule = UnitRule.fromNameAndDefinition(name, definition);

      if (unitRule !== null) {
        unitRules.push(unitRule);
      }
    });
  });

  return unitRules;
}

function nonUnitRulesFromNonUnitsRulesAndUnitRules(nonUnitsRules, unitRules) {
  var nonUnitRules = [],
      oldUnitRules = [];

  var unitRulesLength = unitRules.length;

  while (unitRulesLength > 0) {
    var unitRule = unitRules.shift(),
        unitRuleNonCyclic = unitRule.isNonCyclic();

    if (unitRuleNonCyclic) {
      var oldUnitsRulesIncludesUnitRule = checkOldUnitsRulesIncludesUnitRule(oldUnitRules, unitRule);

      var oldUnitRule = unitRule; ///

      oldUnitRules.push(oldUnitRule);

      if (!oldUnitsRulesIncludesUnitRule) {
        (function () {
          var newUnitRules = [],
              oldUnitRuleName = oldUnitRule.getName(),
              oldUnitRuleUnitDefinitionRuleName = oldUnitRule.getUnitDefinitionRuleName();

          unitRules.forEach(function (unitRule) {
            var unitRuleName = unitRule.getName();

            if (unitRuleName === oldUnitRuleUnitDefinitionRuleName) {
              var unitRuleUnitDefinition = unitRule.getUnitDefinition(),
                  name = oldUnitRuleName,
                  ///
              unitDefinition = unitRuleUnitDefinition,
                  ///
              newUnitRule = UnitRule.fromNameAndUnitDefinition(name, unitDefinition),
                  oldUnitRulesIncludesNewUnitRule = checkOldUnitsRulesIncludesUnitRule(oldUnitRules, newUnitRule);

              if (!oldUnitRulesIncludesNewUnitRule) {
                newUnitRules.push(newUnitRule);
              }
            }
          });

          unitRules = [].concat(newUnitRules).concat(unitRules);
        })();
      }
    }

    unitRulesLength = unitRules.length;
  }

  return nonUnitRules;
}

function checkOldUnitsRulesIncludesUnitRule(oldUnitsRules, unitRule) {
  var oldUnitsRulesIncludesUnitRule = oldUnitsRules.reduce(function (oldUnitsRulesIncludesUnitRule, oldUnitRule) {
    if (!oldUnitsRulesIncludesUnitRule) {
      var oldUnitRuleMatchesUnitRule = oldUnitRule.matches(unitRule);

      oldUnitsRulesIncludesUnitRule = oldUnitRuleMatchesUnitRule; ///
    }

    return oldUnitsRulesIncludesUnitRule;
  }, false);

  return oldUnitsRulesIncludesUnitRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,