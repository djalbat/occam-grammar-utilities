'use strict';

var rulesUtilities = require('./utilities/rules');

var ruleNamesFromRules = rulesUtilities.ruleNamesFromRules,
    partRuleNamesFromRules = rulesUtilities.partRuleNamesFromRules;


function eliminateOrphanedRules(rules) {
  var excludingFirstRule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var ruleNames = ruleNamesFromRules(rules),
      partRuleNames = partRuleNamesFromRules(rules),
      orphanedRuleNames = orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames, excludingFirstRule),
      orphanedRuleNamesLength = orphanedRuleNames.length;

  while (orphanedRuleNamesLength > 0) {
    rules = filterRules(rules, orphanedRuleNames); ///

    ruleNames = ruleNamesFromRules(rules);
    partRuleNames = partRuleNamesFromRules(rules);
    orphanedRuleNames = orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames, excludingFirstRule);
    orphanedRuleNamesLength = orphanedRuleNames.length;
  }

  return rules;
}

module.exports = eliminateOrphanedRules;

function orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames, excludingFirstRule) {
  var orphanedRuleNames = ruleNames.filter(function (ruleName, index) {
    if (index === 0) {
      if (excludingFirstRule) {
        return false;
      }
    }

    var partRuleNamesIncludesRuleName = partRuleNames.includes(ruleName),
        ruleNameOrphanedRuleName = !partRuleNamesIncludesRuleName;

    if (ruleNameOrphanedRuleName) {
      return true;
    }
  });

  return orphanedRuleNames;
}

function filterRules(rules, orphanedRuleNames) {
  rules = rules.filter(function (rule) {
    var ruleName = rule.getName(),
        orphanedRuleNamesIncludesRuleName = orphanedRuleNames.includes(ruleName);

    if (!orphanedRuleNamesIncludesRuleName) {
      return true;
    }
  });

  return rules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVPcnBoYW5lZFJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzVXRpbGl0aWVzIiwicmVxdWlyZSIsInJ1bGVOYW1lc0Zyb21SdWxlcyIsInBhcnRSdWxlTmFtZXNGcm9tUnVsZXMiLCJlbGltaW5hdGVPcnBoYW5lZFJ1bGVzIiwicnVsZXMiLCJleGNsdWRpbmdGaXJzdFJ1bGUiLCJydWxlTmFtZXMiLCJwYXJ0UnVsZU5hbWVzIiwib3JwaGFuZWRSdWxlTmFtZXMiLCJvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzIiwib3JwaGFuZWRSdWxlTmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJmaWx0ZXJSdWxlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWx0ZXIiLCJydWxlTmFtZSIsImluZGV4IiwicGFydFJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUiLCJpbmNsdWRlcyIsInJ1bGVOYW1lT3JwaGFuZWRSdWxlTmFtZSIsInJ1bGUiLCJnZXROYW1lIiwib3JwaGFuZWRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsbUJBQVIsQ0FBdkI7O0lBRVFDLGtCLEdBQStDRixjLENBQS9DRSxrQjtJQUFvQkMsc0IsR0FBMkJILGMsQ0FBM0JHLHNCOzs7QUFFNUIsU0FBU0Msc0JBQVQsQ0FBZ0NDLEtBQWhDLEVBQWtFO0FBQUEsTUFBM0JDLGtCQUEyQix1RUFBTixJQUFNOztBQUNoRSxNQUFJQyxZQUFZTCxtQkFBbUJHLEtBQW5CLENBQWhCO0FBQUEsTUFDSUcsZ0JBQWdCTCx1QkFBdUJFLEtBQXZCLENBRHBCO0FBQUEsTUFFSUksb0JBQW9CQywrQ0FBK0NILFNBQS9DLEVBQTBEQyxhQUExRCxFQUF5RUYsa0JBQXpFLENBRnhCO0FBQUEsTUFHSUssMEJBQTBCRixrQkFBa0JHLE1BSGhEOztBQUtBLFNBQU9ELDBCQUEwQixDQUFqQyxFQUFvQztBQUNsQ04sWUFBUVEsWUFBWVIsS0FBWixFQUFtQkksaUJBQW5CLENBQVIsQ0FEa0MsQ0FDYTs7QUFFL0NGLGdCQUFZTCxtQkFBbUJHLEtBQW5CLENBQVo7QUFDQUcsb0JBQWdCTCx1QkFBdUJFLEtBQXZCLENBQWhCO0FBQ0FJLHdCQUFvQkMsK0NBQStDSCxTQUEvQyxFQUEwREMsYUFBMUQsRUFBeUVGLGtCQUF6RSxDQUFwQjtBQUNBSyw4QkFBMEJGLGtCQUFrQkcsTUFBNUM7QUFDRDs7QUFFRCxTQUFPUCxLQUFQO0FBQ0Q7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUJYLHNCQUFqQjs7QUFFQSxTQUFTTSw4Q0FBVCxDQUF3REgsU0FBeEQsRUFBbUVDLGFBQW5FLEVBQWtGRixrQkFBbEYsRUFBc0c7QUFDcEcsTUFBTUcsb0JBQW9CRixVQUFVUyxNQUFWLENBQWlCLFVBQVNDLFFBQVQsRUFBbUJDLEtBQW5CLEVBQTBCO0FBQ25FLFFBQUlBLFVBQVUsQ0FBZCxFQUFpQjtBQUNmLFVBQUlaLGtCQUFKLEVBQXdCO0FBQ3RCLGVBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsUUFBTWEsZ0NBQWdDWCxjQUFjWSxRQUFkLENBQXVCSCxRQUF2QixDQUF0QztBQUFBLFFBQ01JLDJCQUEyQixDQUFDRiw2QkFEbEM7O0FBR0EsUUFBSUUsd0JBQUosRUFBOEI7QUFDNUIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQWJ5QixDQUExQjs7QUFlQSxTQUFPWixpQkFBUDtBQUNEOztBQUVELFNBQVNJLFdBQVQsQ0FBcUJSLEtBQXJCLEVBQTRCSSxpQkFBNUIsRUFBK0M7QUFDN0NKLFVBQVFBLE1BQU1XLE1BQU4sQ0FBYSxVQUFTTSxJQUFULEVBQWU7QUFDbEMsUUFBTUwsV0FBV0ssS0FBS0MsT0FBTCxFQUFqQjtBQUFBLFFBQ01DLG9DQUFvQ2Ysa0JBQWtCVyxRQUFsQixDQUEyQkgsUUFBM0IsQ0FEMUM7O0FBR0EsUUFBSSxDQUFDTyxpQ0FBTCxFQUF3QztBQUN0QyxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUE8sQ0FBUjs7QUFTQSxTQUFPbkIsS0FBUDtBQUNEIiwiZmlsZSI6ImVsaW1pbmF0ZU9ycGhhbmVkUnVsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJ1bGVzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZXMnKTtcblxuY29uc3QgeyBydWxlTmFtZXNGcm9tUnVsZXMsIHBhcnRSdWxlTmFtZXNGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBlbGltaW5hdGVPcnBoYW5lZFJ1bGVzKHJ1bGVzLCBleGNsdWRpbmdGaXJzdFJ1bGUgPSB0cnVlKSB7XG4gIGxldCBydWxlTmFtZXMgPSBydWxlTmFtZXNGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgcGFydFJ1bGVOYW1lcyA9IHBhcnRSdWxlTmFtZXNGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgb3JwaGFuZWRSdWxlTmFtZXMgPSBvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzKHJ1bGVOYW1lcywgcGFydFJ1bGVOYW1lcywgZXhjbHVkaW5nRmlyc3RSdWxlKSxcbiAgICAgIG9ycGhhbmVkUnVsZU5hbWVzTGVuZ3RoID0gb3JwaGFuZWRSdWxlTmFtZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChvcnBoYW5lZFJ1bGVOYW1lc0xlbmd0aCA+IDApIHtcbiAgICBydWxlcyA9IGZpbHRlclJ1bGVzKHJ1bGVzLCBvcnBoYW5lZFJ1bGVOYW1lcyk7IC8vL1xuXG4gICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbVJ1bGVzKHJ1bGVzKTtcbiAgICBwYXJ0UnVsZU5hbWVzID0gcGFydFJ1bGVOYW1lc0Zyb21SdWxlcyhydWxlcyk7XG4gICAgb3JwaGFuZWRSdWxlTmFtZXMgPSBvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzKHJ1bGVOYW1lcywgcGFydFJ1bGVOYW1lcywgZXhjbHVkaW5nRmlyc3RSdWxlKTtcbiAgICBvcnBoYW5lZFJ1bGVOYW1lc0xlbmd0aCA9IG9ycGhhbmVkUnVsZU5hbWVzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBydWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbGltaW5hdGVPcnBoYW5lZFJ1bGVzO1xuXG5mdW5jdGlvbiBvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzKHJ1bGVOYW1lcywgcGFydFJ1bGVOYW1lcywgZXhjbHVkaW5nRmlyc3RSdWxlKSB7XG4gIGNvbnN0IG9ycGhhbmVkUnVsZU5hbWVzID0gcnVsZU5hbWVzLmZpbHRlcihmdW5jdGlvbihydWxlTmFtZSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIGlmIChleGNsdWRpbmdGaXJzdFJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lID0gcGFydFJ1bGVOYW1lcy5pbmNsdWRlcyhydWxlTmFtZSksXG4gICAgICAgICAgcnVsZU5hbWVPcnBoYW5lZFJ1bGVOYW1lID0gIXBhcnRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lO1xuXG4gICAgaWYgKHJ1bGVOYW1lT3JwaGFuZWRSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3JwaGFuZWRSdWxlTmFtZXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlclJ1bGVzKHJ1bGVzLCBvcnBoYW5lZFJ1bGVOYW1lcykge1xuICBydWxlcyA9IHJ1bGVzLmZpbHRlcihmdW5jdGlvbihydWxlKSB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICBvcnBoYW5lZFJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUgPSBvcnBoYW5lZFJ1bGVOYW1lcy5pbmNsdWRlcyhydWxlTmFtZSk7XG5cbiAgICBpZiAoIW9ycGhhbmVkUnVsZU5hbWVzSW5jbHVkZXNSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXX0=