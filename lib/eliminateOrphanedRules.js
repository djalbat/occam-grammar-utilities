'use strict';

var rulesUtilities = require('./utilities/rules');

var ruleNamesFromRules = rulesUtilities.ruleNamesFromRules,
    partRuleNamesFromRules = rulesUtilities.partRuleNamesFromRules;


function eliminateOrphanedRules(rules) {
  var ruleNames = ruleNamesFromRules(rules),
      partRuleNames = partRuleNamesFromRules(rules),
      orphanedRuleNames = orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames),
      orphanedRuleNamesLength = orphanedRuleNames.length;

  while (orphanedRuleNamesLength > 0) {
    rules = filterRules(rules, orphanedRuleNames); ///

    ruleNames = ruleNamesFromRules(rules);
    partRuleNames = partRuleNamesFromRules(rules);
    orphanedRuleNames = orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames);
    orphanedRuleNamesLength = orphanedRuleNames.length;
  }

  return rules;
}

module.exports = eliminateOrphanedRules;

function orphanedRuleNamesFromRuleNamesAndPartRuleNames(ruleNames, partRuleNames) {
  var orphanedRuleNames = [];

  ruleNames.forEach(function (ruleName, index) {
    if (index > 0) {
      var partRuleNamesIncludesRuleName = partRuleNames.includes(ruleName),
          ruleNameOrphanedRuleName = !partRuleNamesIncludesRuleName;

      if (ruleNameOrphanedRuleName) {
        var orphanedRuleName = ruleName;

        orphanedRuleNames.push(orphanedRuleName);
      }
    }
  });

  return orphanedRuleNames;
}

function filterRules(rules, orphanedRuleNames) {
  rules = rules.filter(function (rule) {
    var ruleName = rule.getName(),
        orphanedRuleNamesIncludesRuleName = orphanedRuleNames.includes(ruleName);

    if (!orphanedRuleNamesIncludesRuleName) {
      return true;
    }
  });

  return rules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVPcnBoYW5lZFJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzVXRpbGl0aWVzIiwicmVxdWlyZSIsInJ1bGVOYW1lc0Zyb21SdWxlcyIsInBhcnRSdWxlTmFtZXNGcm9tUnVsZXMiLCJlbGltaW5hdGVPcnBoYW5lZFJ1bGVzIiwicnVsZXMiLCJydWxlTmFtZXMiLCJwYXJ0UnVsZU5hbWVzIiwib3JwaGFuZWRSdWxlTmFtZXMiLCJvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzIiwib3JwaGFuZWRSdWxlTmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJmaWx0ZXJSdWxlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmb3JFYWNoIiwicnVsZU5hbWUiLCJpbmRleCIsInBhcnRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lIiwiaW5jbHVkZXMiLCJydWxlTmFtZU9ycGhhbmVkUnVsZU5hbWUiLCJvcnBoYW5lZFJ1bGVOYW1lIiwicHVzaCIsImZpbHRlciIsInJ1bGUiLCJnZXROYW1lIiwib3JwaGFuZWRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsbUJBQVIsQ0FBdkI7O0lBRVFDLGtCLEdBQStDRixjLENBQS9DRSxrQjtJQUFvQkMsc0IsR0FBMkJILGMsQ0FBM0JHLHNCOzs7QUFFNUIsU0FBU0Msc0JBQVQsQ0FBZ0NDLEtBQWhDLEVBQXVDO0FBQ3JDLE1BQUlDLFlBQVlKLG1CQUFtQkcsS0FBbkIsQ0FBaEI7QUFBQSxNQUNJRSxnQkFBZ0JKLHVCQUF1QkUsS0FBdkIsQ0FEcEI7QUFBQSxNQUVJRyxvQkFBb0JDLCtDQUErQ0gsU0FBL0MsRUFBMERDLGFBQTFELENBRnhCO0FBQUEsTUFHSUcsMEJBQTBCRixrQkFBa0JHLE1BSGhEOztBQUtBLFNBQU9ELDBCQUEwQixDQUFqQyxFQUFvQztBQUNsQ0wsWUFBUU8sWUFBWVAsS0FBWixFQUFtQkcsaUJBQW5CLENBQVIsQ0FEa0MsQ0FDYTs7QUFFL0NGLGdCQUFZSixtQkFBbUJHLEtBQW5CLENBQVo7QUFDQUUsb0JBQWdCSix1QkFBdUJFLEtBQXZCLENBQWhCO0FBQ0FHLHdCQUFvQkMsK0NBQStDSCxTQUEvQyxFQUEwREMsYUFBMUQsQ0FBcEI7QUFDQUcsOEJBQTBCRixrQkFBa0JHLE1BQTVDO0FBQ0Q7O0FBRUQsU0FBT04sS0FBUDtBQUNEOztBQUVEUSxPQUFPQyxPQUFQLEdBQWlCVixzQkFBakI7O0FBRUEsU0FBU0ssOENBQVQsQ0FBd0RILFNBQXhELEVBQW1FQyxhQUFuRSxFQUFrRjtBQUNoRixNQUFNQyxvQkFBb0IsRUFBMUI7O0FBRUFGLFlBQVVTLE9BQVYsQ0FBa0IsVUFBU0MsUUFBVCxFQUFtQkMsS0FBbkIsRUFBMEI7QUFDMUMsUUFBSUEsUUFBUSxDQUFaLEVBQWU7QUFDYixVQUFNQyxnQ0FBZ0NYLGNBQWNZLFFBQWQsQ0FBdUJILFFBQXZCLENBQXRDO0FBQUEsVUFDTUksMkJBQTJCLENBQUNGLDZCQURsQzs7QUFHQSxVQUFJRSx3QkFBSixFQUE4QjtBQUM1QixZQUFNQyxtQkFBbUJMLFFBQXpCOztBQUVBUiwwQkFBa0JjLElBQWxCLENBQXVCRCxnQkFBdkI7QUFDRDtBQUNGO0FBQ0YsR0FYRDs7QUFhQSxTQUFPYixpQkFBUDtBQUNEOztBQUVELFNBQVNJLFdBQVQsQ0FBcUJQLEtBQXJCLEVBQTRCRyxpQkFBNUIsRUFBK0M7QUFDN0NILFVBQVFBLE1BQU1rQixNQUFOLENBQWEsVUFBU0MsSUFBVCxFQUFlO0FBQ2xDLFFBQU1SLFdBQVdRLEtBQUtDLE9BQUwsRUFBakI7QUFBQSxRQUNNQyxvQ0FBb0NsQixrQkFBa0JXLFFBQWxCLENBQTJCSCxRQUEzQixDQUQxQzs7QUFHQSxRQUFJLENBQUNVLGlDQUFMLEVBQXdDO0FBQ3RDLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQTyxDQUFSOztBQVNBLFNBQU9yQixLQUFQO0FBQ0QiLCJmaWxlIjoiZWxpbWluYXRlT3JwaGFuZWRSdWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcnVsZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlcycpO1xuXG5jb25zdCB7IHJ1bGVOYW1lc0Zyb21SdWxlcywgcGFydFJ1bGVOYW1lc0Zyb21SdWxlcyB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZU9ycGhhbmVkUnVsZXMocnVsZXMpIHtcbiAgbGV0IHJ1bGVOYW1lcyA9IHJ1bGVOYW1lc0Zyb21SdWxlcyhydWxlcyksXG4gICAgICBwYXJ0UnVsZU5hbWVzID0gcGFydFJ1bGVOYW1lc0Zyb21SdWxlcyhydWxlcyksXG4gICAgICBvcnBoYW5lZFJ1bGVOYW1lcyA9IG9ycGhhbmVkUnVsZU5hbWVzRnJvbVJ1bGVOYW1lc0FuZFBhcnRSdWxlTmFtZXMocnVsZU5hbWVzLCBwYXJ0UnVsZU5hbWVzKSxcbiAgICAgIG9ycGhhbmVkUnVsZU5hbWVzTGVuZ3RoID0gb3JwaGFuZWRSdWxlTmFtZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChvcnBoYW5lZFJ1bGVOYW1lc0xlbmd0aCA+IDApIHtcbiAgICBydWxlcyA9IGZpbHRlclJ1bGVzKHJ1bGVzLCBvcnBoYW5lZFJ1bGVOYW1lcyk7IC8vL1xuXG4gICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbVJ1bGVzKHJ1bGVzKTtcbiAgICBwYXJ0UnVsZU5hbWVzID0gcGFydFJ1bGVOYW1lc0Zyb21SdWxlcyhydWxlcyk7XG4gICAgb3JwaGFuZWRSdWxlTmFtZXMgPSBvcnBoYW5lZFJ1bGVOYW1lc0Zyb21SdWxlTmFtZXNBbmRQYXJ0UnVsZU5hbWVzKHJ1bGVOYW1lcywgcGFydFJ1bGVOYW1lcyk7XG4gICAgb3JwaGFuZWRSdWxlTmFtZXNMZW5ndGggPSBvcnBoYW5lZFJ1bGVOYW1lcy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWxpbWluYXRlT3JwaGFuZWRSdWxlcztcblxuZnVuY3Rpb24gb3JwaGFuZWRSdWxlTmFtZXNGcm9tUnVsZU5hbWVzQW5kUGFydFJ1bGVOYW1lcyhydWxlTmFtZXMsIHBhcnRSdWxlTmFtZXMpIHtcbiAgY29uc3Qgb3JwaGFuZWRSdWxlTmFtZXMgPSBbXTtcblxuICBydWxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbihydWxlTmFtZSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICBjb25zdCBwYXJ0UnVsZU5hbWVzSW5jbHVkZXNSdWxlTmFtZSA9IHBhcnRSdWxlTmFtZXMuaW5jbHVkZXMocnVsZU5hbWUpLFxuICAgICAgICAgICAgcnVsZU5hbWVPcnBoYW5lZFJ1bGVOYW1lID0gIXBhcnRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lO1xuXG4gICAgICBpZiAocnVsZU5hbWVPcnBoYW5lZFJ1bGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IG9ycGhhbmVkUnVsZU5hbWUgPSBydWxlTmFtZTtcblxuICAgICAgICBvcnBoYW5lZFJ1bGVOYW1lcy5wdXNoKG9ycGhhbmVkUnVsZU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG9ycGhhbmVkUnVsZU5hbWVzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJSdWxlcyhydWxlcywgb3JwaGFuZWRSdWxlTmFtZXMpIHtcbiAgcnVsZXMgPSBydWxlcy5maWx0ZXIoZnVuY3Rpb24ocnVsZSkge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgb3JwaGFuZWRSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lID0gb3JwaGFuZWRSdWxlTmFtZXMuaW5jbHVkZXMocnVsZU5hbWUpO1xuXG4gICAgaWYgKCFvcnBoYW5lZFJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl19