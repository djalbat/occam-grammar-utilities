"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rewriteLeftRecursiveRules;
    }
});
var _rewritten = /*#__PURE__*/ _interop_require_default(require("./rule/rewritten"));
var _ruleNames = require("./utilities/ruleNames");
var _rule = require("./utilities/rule");
var _ruleName = require("./utilities/ruleName");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function rewriteLeftRecursiveRules(cycles, ruleMap) {
    var ruleNames = (0, _ruleNames.ruleNamesFromCycles)(cycles);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName];
        var rewrittenRule = _rewritten.default.fromRuleAndCycles(rule, cycles, ruleMap);
        rule = rewrittenRule; ///
        ruleMap[ruleName] = rule;
    });
    ruleNames.forEach(function(ruleName) {
        var directlyRepeatedRuleName = (0, _ruleName.directlyRepeatedRuleNameFromRuleName)(ruleName), directlyRepeatedRule = ruleMap[directlyRepeatedRuleName], directlyRepeatedRuleEffectivelyEmpty = (0, _rule.isRuleEffectivelyEmpty)(directlyRepeatedRule, ruleMap);
        if (directlyRepeatedRuleEffectivelyEmpty) {
            var directlyRepeatedRuleName1 = directlyRepeatedRule.getName();
            throw new Error("The '".concat(directlyRepeatedRuleName1, "' directly repeated rule is effectively empty."));
        }
    });
    ruleNames.forEach(function(ruleName) {
        var ruleCycles = ruleCyclesFromRuleNamdAndCyclces(ruleName, cycles), ruleCyclesIrreducible = ruleCycles.every(function(ruleCycle) {
            var ruleCycleIrreducible = isCycleIrreducible(ruleCycle, ruleMap);
            if (ruleCycleIrreducible) {
                return true;
            }
        });
        if (ruleCyclesIrreducible) {
            throw new Error("None of the cycles including the '".concat(ruleName, "' rule have a reduced rule."));
        }
    });
}
function isCycleIrreducible(cycle, ruleMap) {
    var ruleNames = (0, _ruleNames.ruleNamesFromCycle)(cycle), reducedRules = ruleNames.reduce(function(reducedRules, ruleName) {
        var reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName), reducedRule = ruleMap[reducedRuleName] || null;
        if (reducedRule !== null) {
            reducedRules.push(reducedRule);
        }
        return reducedRules;
    }, []), reducedRulesLength = reducedRules.length, cycleIrreducible = reducedRulesLength === 0; ///
    return cycleIrreducible;
}
function ruleCyclesFromRuleNamdAndCyclces(ruleName, cycles) {
    var ruleCycles = cycles.reduce(function(ruleCycles, cycle) {
        var ruleNames = (0, _ruleNames.ruleNamesFromCycle)(cycle), ruleNamesIncludeRuleName = ruleNames.includes(ruleName);
        if (ruleNamesIncludeRuleName) {
            var ruleCycle = cycle; ///
            ruleCycles.push(ruleCycle);
        }
        return ruleCycles;
    }, []);
    return ruleCycles;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmV3cml0dGVuUnVsZSBmcm9tIFwiLi9ydWxlL3Jld3JpdHRlblwiO1xuXG5pbXBvcnQge3J1bGVOYW1lc0Zyb21DeWNsZSwgcnVsZU5hbWVzRnJvbUN5Y2xlc30gZnJvbSBcIi4vdXRpbGl0aWVzL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgaXNSdWxlRWZmZWN0aXZlbHlFbXB0eSB9IGZyb20gXCIuL3V0aWxpdGllcy9ydWxlXCI7XG5pbXBvcnQge2RpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyhjeWNsZXMsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbUN5Y2xlcyhjeWNsZXMpO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGxldCBydWxlID0gcnVsZU1hcFtydWxlTmFtZV07XG5cbiAgICBjb25zdCByZXdyaXR0ZW5SdWxlID0gUmV3cml0dGVuUnVsZS5mcm9tUnVsZUFuZEN5Y2xlcyhydWxlLCBjeWNsZXMsIHJ1bGVNYXApO1xuXG4gICAgcnVsZSA9IHJld3JpdHRlblJ1bGU7IC8vL1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuICB9KTtcblxuICBydWxlTmFtZXMuZm9yRWFjaCgocnVsZU5hbWUpID0+IHtcbiAgICBjb25zdCBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICAgIGRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gcnVsZU1hcFtkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVdLFxuICAgICAgICAgIGRpcmVjdGx5UmVwZWF0ZWRSdWxlRWZmZWN0aXZlbHlFbXB0eSA9IGlzUnVsZUVmZmVjdGl2ZWx5RW1wdHkoZGlyZWN0bHlSZXBlYXRlZFJ1bGUsIHJ1bGVNYXApO1xuXG4gICAgaWYgKGRpcmVjdGx5UmVwZWF0ZWRSdWxlRWZmZWN0aXZlbHlFbXB0eSkge1xuICAgICAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAnJHtkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWV9JyBkaXJlY3RseSByZXBlYXRlZCBydWxlIGlzIGVmZmVjdGl2ZWx5IGVtcHR5LmApO1xuICAgIH1cbiAgfSk7XG5cbiAgcnVsZU5hbWVzLmZvckVhY2goKHJ1bGVOYW1lKSA9PiB7XG4gICAgY29uc3QgcnVsZUN5Y2xlcyA9IHJ1bGVDeWNsZXNGcm9tUnVsZU5hbWRBbmRDeWNsY2VzKHJ1bGVOYW1lLCBjeWNsZXMpLFxuICAgICAgICAgIHJ1bGVDeWNsZXNJcnJlZHVjaWJsZSA9IHJ1bGVDeWNsZXMuZXZlcnkoKHJ1bGVDeWNsZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcnVsZUN5Y2xlSXJyZWR1Y2libGUgPSBpc0N5Y2xlSXJyZWR1Y2libGUocnVsZUN5Y2xlLCBydWxlTWFwKTtcblxuICAgICAgICAgICAgaWYgKHJ1bGVDeWNsZUlycmVkdWNpYmxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgaWYgKHJ1bGVDeWNsZXNJcnJlZHVjaWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb25lIG9mIHRoZSBjeWNsZXMgaW5jbHVkaW5nIHRoZSAnJHtydWxlTmFtZX0nIHJ1bGUgaGF2ZSBhIHJlZHVjZWQgcnVsZS5gKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc0N5Y2xlSXJyZWR1Y2libGUoY3ljbGUsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbUN5Y2xlKGN5Y2xlKSxcbiAgICAgICAgcmVkdWNlZFJ1bGVzID0gcnVsZU5hbWVzLnJlZHVjZSgocmVkdWNlZFJ1bGVzLCBydWxlTmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgICAgICByZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSB8fCBudWxsO1xuXG4gICAgICAgICAgaWYgKHJlZHVjZWRSdWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZWR1Y2VkUnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlZHVjZWRSdWxlcztcbiAgICAgICAgfSwgW10pLFxuICAgICAgICByZWR1Y2VkUnVsZXNMZW5ndGggPSByZWR1Y2VkUnVsZXMubGVuZ3RoLFxuICAgICAgICBjeWNsZUlycmVkdWNpYmxlID0gKHJlZHVjZWRSdWxlc0xlbmd0aCA9PT0gMCk7IC8vL1xuXG4gIHJldHVybiBjeWNsZUlycmVkdWNpYmxlO1xufVxuXG5mdW5jdGlvbiBydWxlQ3ljbGVzRnJvbVJ1bGVOYW1kQW5kQ3ljbGNlcyhydWxlTmFtZSwgY3ljbGVzKSB7XG4gIGNvbnN0IHJ1bGVDeWNsZXMgPSBjeWNsZXMucmVkdWNlKChydWxlQ3ljbGVzLCBjeWNsZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGVOYW1lcyA9IHJ1bGVOYW1lc0Zyb21DeWNsZShjeWNsZSksXG4gICAgICBydWxlTmFtZXNJbmNsdWRlUnVsZU5hbWUgPSBydWxlTmFtZXMuaW5jbHVkZXMocnVsZU5hbWUpO1xuXG4gICAgaWYgKHJ1bGVOYW1lc0luY2x1ZGVSdWxlTmFtZSkge1xuICAgICAgY29uc3QgcnVsZUN5Y2xlID0gY3ljbGU7ICAvLy9cblxuICAgICAgcnVsZUN5Y2xlcy5wdXNoKHJ1bGVDeWNsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVDeWNsZXM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gcnVsZUN5Y2xlcztcbn0iXSwibmFtZXMiOlsicmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyIsImN5Y2xlcyIsInJ1bGVNYXAiLCJydWxlTmFtZXMiLCJydWxlTmFtZXNGcm9tQ3ljbGVzIiwiZm9yRWFjaCIsInJ1bGVOYW1lIiwicnVsZSIsInJld3JpdHRlblJ1bGUiLCJSZXdyaXR0ZW5SdWxlIiwiZnJvbVJ1bGVBbmRDeWNsZXMiLCJkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlRWZmZWN0aXZlbHlFbXB0eSIsImlzUnVsZUVmZmVjdGl2ZWx5RW1wdHkiLCJnZXROYW1lIiwiRXJyb3IiLCJydWxlQ3ljbGVzIiwicnVsZUN5Y2xlc0Zyb21SdWxlTmFtZEFuZEN5Y2xjZXMiLCJydWxlQ3ljbGVzSXJyZWR1Y2libGUiLCJldmVyeSIsInJ1bGVDeWNsZSIsInJ1bGVDeWNsZUlycmVkdWNpYmxlIiwiaXNDeWNsZUlycmVkdWNpYmxlIiwiY3ljbGUiLCJydWxlTmFtZXNGcm9tQ3ljbGUiLCJyZWR1Y2VkUnVsZXMiLCJyZWR1Y2UiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZSIsInB1c2giLCJyZWR1Y2VkUnVsZXNMZW5ndGgiLCJsZW5ndGgiLCJjeWNsZUlycmVkdWNpYmxlIiwicnVsZU5hbWVzSW5jbHVkZVJ1bGVOYW1lIiwiaW5jbHVkZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFRQTs7O2VBQXdCQTs7O2dFQU5FO3lCQUU0QjtvQkFDZjt3QkFDeUM7Ozs7OztBQUVqRSxTQUFTQSwwQkFBMEJDLE1BQU0sRUFBRUMsT0FBTztJQUMvRCxJQUFNQyxZQUFZQyxJQUFBQSw4QkFBbUIsRUFBQ0g7SUFFdENFLFVBQVVFLE9BQU8sQ0FBQyxTQUFDQztRQUNqQixJQUFJQyxPQUFPTCxPQUFPLENBQUNJLFNBQVM7UUFFNUIsSUFBTUUsZ0JBQWdCQyxrQkFBYSxDQUFDQyxpQkFBaUIsQ0FBQ0gsTUFBTU4sUUFBUUM7UUFFcEVLLE9BQU9DLGVBQWUsR0FBRztRQUV6Qk4sT0FBTyxDQUFDSSxTQUFTLEdBQUdDO0lBQ3RCO0lBRUFKLFVBQVVFLE9BQU8sQ0FBQyxTQUFDQztRQUNqQixJQUFNSywyQkFBMkJDLElBQUFBLDhDQUFvQyxFQUFDTixXQUNoRU8sdUJBQXVCWCxPQUFPLENBQUNTLHlCQUF5QixFQUN4REcsdUNBQXVDQyxJQUFBQSw0QkFBc0IsRUFBQ0Ysc0JBQXNCWDtRQUUxRixJQUFJWSxzQ0FBc0M7WUFDeEMsSUFBTUgsNEJBQTJCRSxxQkFBcUJHLE9BQU87WUFFN0QsTUFBTSxJQUFJQyxNQUFNLEFBQUMsUUFBZ0MsT0FBekJOLDJCQUF5QjtRQUNuRDtJQUNGO0lBRUFSLFVBQVVFLE9BQU8sQ0FBQyxTQUFDQztRQUNqQixJQUFNWSxhQUFhQyxpQ0FBaUNiLFVBQVVMLFNBQ3hEbUIsd0JBQXdCRixXQUFXRyxLQUFLLENBQUMsU0FBQ0M7WUFDeEMsSUFBTUMsdUJBQXVCQyxtQkFBbUJGLFdBQVdwQjtZQUUzRCxJQUFJcUIsc0JBQXNCO2dCQUN4QixPQUFPO1lBQ1Q7UUFDRjtRQUVOLElBQUlILHVCQUF1QjtZQUN6QixNQUFNLElBQUlILE1BQU0sQUFBQyxxQ0FBNkMsT0FBVFgsVUFBUztRQUNoRTtJQUNGO0FBQ0Y7QUFFQSxTQUFTa0IsbUJBQW1CQyxLQUFLLEVBQUV2QixPQUFPO0lBQ3hDLElBQU1DLFlBQVl1QixJQUFBQSw2QkFBa0IsRUFBQ0QsUUFDL0JFLGVBQWV4QixVQUFVeUIsTUFBTSxDQUFDLFNBQUNELGNBQWNyQjtRQUM3QyxJQUFNdUIsa0JBQWtCQyxJQUFBQSxxQ0FBMkIsRUFBQ3hCLFdBQ2xEeUIsY0FBYzdCLE9BQU8sQ0FBQzJCLGdCQUFnQixJQUFJO1FBRTVDLElBQUlFLGdCQUFnQixNQUFNO1lBQ3hCSixhQUFhSyxJQUFJLENBQUNEO1FBQ3BCO1FBRUEsT0FBT0o7SUFDVCxHQUFHLEVBQUUsR0FDTE0scUJBQXFCTixhQUFhTyxNQUFNLEVBQ3hDQyxtQkFBb0JGLHVCQUF1QixHQUFJLEdBQUc7SUFFeEQsT0FBT0U7QUFDVDtBQUVBLFNBQVNoQixpQ0FBaUNiLFFBQVEsRUFBRUwsTUFBTTtJQUN4RCxJQUFNaUIsYUFBYWpCLE9BQU8yQixNQUFNLENBQUMsU0FBQ1YsWUFBWU87UUFDNUMsSUFBTXRCLFlBQVl1QixJQUFBQSw2QkFBa0IsRUFBQ0QsUUFDbkNXLDJCQUEyQmpDLFVBQVVrQyxRQUFRLENBQUMvQjtRQUVoRCxJQUFJOEIsMEJBQTBCO1lBQzVCLElBQU1kLFlBQVlHLE9BQVEsR0FBRztZQUU3QlAsV0FBV2MsSUFBSSxDQUFDVjtRQUNsQjtRQUVBLE9BQU9KO0lBQ1QsR0FBRyxFQUFFO0lBRUwsT0FBT0E7QUFDVCJ9