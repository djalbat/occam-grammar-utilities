"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rewriteLeftRecursiveRules;
    }
});
var _rewritten = /*#__PURE__*/ _interop_require_default(require("./definition/rewritten"));
var _ruleNames = require("./utilities/ruleNames");
var _rule = require("./utilities/rule");
var _path = require("./utilities/path");
var _ruleName = require("./utilities/ruleName");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function rewriteLeftRecursiveRules(cycles, ruleMap) {
    var ruleNames = (0, _ruleNames.ruleNamesFromCycles)(cycles);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName];
        rewriteRecursiveRule(rule, cycles, ruleMap);
    });
    ruleNames.forEach(function(ruleName) {
        var directlyRepeatedRuleName = (0, _ruleName.directlyRepeatedRuleNameFromRuleName)(ruleName), directlyRepeatedRule = ruleMap[directlyRepeatedRuleName], directlyRepeatedRuleEffectivelyEmpty = (0, _rule.isRuleEffectivelyEmpty)(directlyRepeatedRule, ruleMap);
        if (directlyRepeatedRuleEffectivelyEmpty) {
            var directlyRepeatedRuleName1 = directlyRepeatedRule.getName();
            throw new Error("The '".concat(directlyRepeatedRuleName1, "' directly repeated rule is effectively empty."));
        }
    });
}
function rewriteRecursiveRule(rule, cycles, ruleMap) {
    var ruleName = rule.getName();
    rule.removeAllDefinitions();
    var paths = (0, _path.pathsFromRuleNameAndCycles)(ruleName, cycles), rewrittenDefinition = _rewritten.default.fromRuleName(ruleName, ruleMap), definition = rewrittenDefinition; ///
    rule.addDefinition(definition);
    paths.forEach(function(path) {
        var rewrittenDefinition = _rewritten.default.fromPath(path, ruleMap), definition = rewrittenDefinition; ///
        rule.addDefinition(definition);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmV3cml0dGVuRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uL3Jld3JpdHRlblwiO1xuXG5pbXBvcnQgeyBydWxlTmFtZXNGcm9tQ3ljbGVzIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgaXNSdWxlRWZmZWN0aXZlbHlFbXB0eSB9IGZyb20gXCIuL3V0aWxpdGllcy9ydWxlXCI7XG5pbXBvcnQgeyBwYXRoc0Zyb21SdWxlTmFtZUFuZEN5Y2xlcyB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoXCI7XG5pbXBvcnQgeyBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyhjeWNsZXMsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbUN5Y2xlcyhjeWNsZXMpO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXTtcblxuICAgIHJld3JpdGVSZWN1cnNpdmVSdWxlKHJ1bGUsIGN5Y2xlcywgcnVsZU1hcCk7XG4gIH0pO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBydWxlTWFwW2RpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZV0sXG4gICAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGVFZmZlY3RpdmVseUVtcHR5ID0gaXNSdWxlRWZmZWN0aXZlbHlFbXB0eShkaXJlY3RseVJlcGVhdGVkUnVsZSwgcnVsZU1hcCk7XG5cbiAgICBpZiAoZGlyZWN0bHlSZXBlYXRlZFJ1bGVFZmZlY3RpdmVseUVtcHR5KSB7XG4gICAgICBjb25zdCBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBkaXJlY3RseVJlcGVhdGVkUnVsZS5nZXROYW1lKCk7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlICcke2RpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZX0nIGRpcmVjdGx5IHJlcGVhdGVkIHJ1bGUgaXMgZWZmZWN0aXZlbHkgZW1wdHkuYCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZVJlY3Vyc2l2ZVJ1bGUocnVsZSwgY3ljbGVzLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgcnVsZS5yZW1vdmVBbGxEZWZpbml0aW9ucygpO1xuXG4gIGNvbnN0IHBhdGhzID0gcGF0aHNGcm9tUnVsZU5hbWVBbmRDeWNsZXMocnVsZU5hbWUsIGN5Y2xlcyksXG4gICAgICAgIHJld3JpdHRlbkRlZmluaXRpb24gPSBSZXdyaXR0ZW5EZWZpbml0aW9uLmZyb21SdWxlTmFtZShydWxlTmFtZSwgcnVsZU1hcCksXG4gICAgICAgIGRlZmluaXRpb24gPSByZXdyaXR0ZW5EZWZpbml0aW9uOyAvLy9cblxuICBydWxlLmFkZERlZmluaXRpb24oZGVmaW5pdGlvbik7XG5cbiAgcGF0aHMuZm9yRWFjaCgocGF0aCkgPT4ge1xuICAgIGNvbnN0IHJld3JpdHRlbkRlZmluaXRpb24gPSBSZXdyaXR0ZW5EZWZpbml0aW9uLmZyb21QYXRoKHBhdGgsIHJ1bGVNYXApLFxuICAgICAgICAgIGRlZmluaXRpb24gPSByZXdyaXR0ZW5EZWZpbml0aW9uOyAvLy9cblxuICAgIHJ1bGUuYWRkRGVmaW5pdGlvbihkZWZpbml0aW9uKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsicmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyIsImN5Y2xlcyIsInJ1bGVNYXAiLCJydWxlTmFtZXMiLCJydWxlTmFtZXNGcm9tQ3ljbGVzIiwiZm9yRWFjaCIsInJ1bGVOYW1lIiwicnVsZSIsInJld3JpdGVSZWN1cnNpdmVSdWxlIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZUVmZmVjdGl2ZWx5RW1wdHkiLCJpc1J1bGVFZmZlY3RpdmVseUVtcHR5IiwiZ2V0TmFtZSIsIkVycm9yIiwicmVtb3ZlQWxsRGVmaW5pdGlvbnMiLCJwYXRocyIsInBhdGhzRnJvbVJ1bGVOYW1lQW5kQ3ljbGVzIiwicmV3cml0dGVuRGVmaW5pdGlvbiIsIlJld3JpdHRlbkRlZmluaXRpb24iLCJmcm9tUnVsZU5hbWUiLCJkZWZpbml0aW9uIiwiYWRkRGVmaW5pdGlvbiIsInBhdGgiLCJmcm9tUGF0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBU0E7OztlQUF3QkE7OztnRUFQUTt5QkFFSTtvQkFDRztvQkFDSTt3QkFDVTs7Ozs7O0FBRXRDLFNBQVNBLDBCQUEwQkMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFDakUsSUFBTUMsWUFBWUMsSUFBQUEsOEJBQW1CLEVBQUNIO0lBRXRDRSxVQUFVRSxPQUFPLENBQUMsU0FBQ0MsVUFBYTtRQUM5QixJQUFNQyxPQUFPTCxPQUFPLENBQUNJLFNBQVM7UUFFOUJFLHFCQUFxQkQsTUFBTU4sUUFBUUM7SUFDckM7SUFFQUMsVUFBVUUsT0FBTyxDQUFDLFNBQUNDLFVBQWE7UUFDOUIsSUFBTUcsMkJBQTJCQyxJQUFBQSw4Q0FBb0MsRUFBQ0osV0FDaEVLLHVCQUF1QlQsT0FBTyxDQUFDTyx5QkFBeUIsRUFDeERHLHVDQUF1Q0MsSUFBQUEsNEJBQXNCLEVBQUNGLHNCQUFzQlQ7UUFFMUYsSUFBSVUsc0NBQXNDO1lBQ3hDLElBQU1ILDRCQUEyQkUscUJBQXFCRyxPQUFPO1lBRTdELE1BQU0sSUFBSUMsTUFBTSxBQUFDLFFBQWdDLE9BQXpCTiwyQkFBeUIsbURBQWlEO1FBQ3BHLENBQUM7SUFDSDtBQUNGO0FBRUEsU0FBU0QscUJBQXFCRCxJQUFJLEVBQUVOLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0lBQ25ELElBQU1JLFdBQVdDLEtBQUtPLE9BQU87SUFFN0JQLEtBQUtTLG9CQUFvQjtJQUV6QixJQUFNQyxRQUFRQyxJQUFBQSxnQ0FBMEIsRUFBQ1osVUFBVUwsU0FDN0NrQixzQkFBc0JDLGtCQUFtQixDQUFDQyxZQUFZLENBQUNmLFVBQVVKLFVBQ2pFb0IsYUFBYUgscUJBQXFCLEdBQUc7SUFFM0NaLEtBQUtnQixhQUFhLENBQUNEO0lBRW5CTCxNQUFNWixPQUFPLENBQUMsU0FBQ21CLE1BQVM7UUFDdEIsSUFBTUwsc0JBQXNCQyxrQkFBbUIsQ0FBQ0ssUUFBUSxDQUFDRCxNQUFNdEIsVUFDekRvQixhQUFhSCxxQkFBcUIsR0FBRztRQUUzQ1osS0FBS2dCLGFBQWEsQ0FBQ0Q7SUFDckI7QUFDRiJ9