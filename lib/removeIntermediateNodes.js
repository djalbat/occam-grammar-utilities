'use strict';

var NonRecursiveNode = require('./node/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveNode = require('./node/rightRecursive');

var ruleNameFromNonRecursiveRuleName = ruleNameUtilities.ruleNameFromNonRecursiveRuleName,
    checkNonRecursiveRuleNameMatchesRuleName = ruleNameUtilities.checkNonRecursiveRuleNameMatchesRuleName;


function removeIntermediateNodes(node) {
  removeRightRecursiveNodes(node);

  removeOrRenameNonRecursiveNodes(node);
}

module.exports = removeIntermediateNodes;

function removeRightRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeRightRecursiveChildNodes(childNodes);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRightRecursiveChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRightRecursiveNode = childNode instanceof RightRecursiveNode;

    if (childNodeRightRecursiveNode) {
      var childNodeChildNodes = childNode.getChildNodes();

      childNodeChildNodes = removeRightRecursiveChildNodes(childNodeChildNodes);

      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRightRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}

function removeOrRenameNonRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeOrRenameNonRecursiveChildNodes(childNodes, ruleName);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameNonRecursiveChildNodes(childNodes, ruleName) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeNonRecursiveNode = childNode instanceof NonRecursiveNode;

    if (childNodeNonRecursiveNode) {
      var nonRecursiveNode = childNode,
          ///
      nonRecursiveNodeRuleName = nonRecursiveNode.getRuleName(),
          nonRecursiveRuleName = nonRecursiveNodeRuleName,
          nonRecursiveRuleNameMatchesRuleName = checkNonRecursiveRuleNameMatchesRuleName(nonRecursiveRuleName, ruleName);

      if (nonRecursiveRuleNameMatchesRuleName) {
        var childNodeChildNodes = childNode.getChildNodes();

        childNodeChildNodes = removeOrRenameNonRecursiveChildNodes(childNodeChildNodes);

        childNodes = childNodes.concat(childNodeChildNodes);
      } else {
        var _ruleName = ruleNameFromNonRecursiveRuleName(nonRecursiveRuleName);

        childNode.setRuleName(_ruleName);

        removeOrRenameNonRecursiveNodes(childNode);

        childNodes.push(childNode);
      }
    } else {
      removeOrRenameNonRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZW1vdmVJbnRlcm1lZGlhdGVOb2Rlcy5qcyJdLCJuYW1lcyI6WyJOb25SZWN1cnNpdmVOb2RlIiwicmVxdWlyZSIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUmlnaHRSZWN1cnNpdmVOb2RlIiwicnVsZU5hbWVGcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWUiLCJjaGVja05vblJlY3Vyc2l2ZVJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lIiwicmVtb3ZlSW50ZXJtZWRpYXRlTm9kZXMiLCJub2RlIiwicmVtb3ZlUmlnaHRSZWN1cnNpdmVOb2RlcyIsInJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlTm9kZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJyZW1vdmVSaWdodFJlY3Vyc2l2ZUNoaWxkTm9kZXMiLCJzZXRDaGlsZE5vZGVzIiwicmVkdWNlIiwiY2hpbGROb2RlIiwiY2hpbGROb2RlUmlnaHRSZWN1cnNpdmVOb2RlIiwiY2hpbGROb2RlQ2hpbGROb2RlcyIsImNvbmNhdCIsInB1c2giLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzIiwiY2hpbGROb2RlTm9uUmVjdXJzaXZlTm9kZSIsIm5vblJlY3Vyc2l2ZU5vZGUiLCJub25SZWN1cnNpdmVOb2RlUnVsZU5hbWUiLCJub25SZWN1cnNpdmVSdWxlTmFtZSIsIm5vblJlY3Vyc2l2ZVJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lIiwic2V0UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLG1CQUFtQkMsUUFBUSxxQkFBUixDQUF6QjtBQUFBLElBQ01DLG9CQUFvQkQsUUFBUSxzQkFBUixDQUQxQjtBQUFBLElBRU1FLHFCQUFxQkYsUUFBUSx1QkFBUixDQUYzQjs7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SUFBWCxDQUFnQkosU0FBaEI7QUFDRDs7QUFFRCxXQUFPTCxVQUFQO0FBQ0QsR0EvQlksRUErQlYsRUEvQlUsQ0FBYjs7QUFpQ0EsU0FBT0EsVUFBUDtBQUVEIiwiZmlsZSI6InJlbW92ZUludGVybWVkaWF0ZU5vZGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOb25SZWN1cnNpdmVOb2RlID0gcmVxdWlyZSgnLi9ub2RlL25vblJlY3Vyc2l2ZScpLFxuICAgICAgcnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlTmFtZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVOb2RlID0gcmVxdWlyZSgnLi9ub2RlL3JpZ2h0UmVjdXJzaXZlJyk7XG5cbmNvbnN0IHsgcnVsZU5hbWVGcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWUsIGNoZWNrTm9uUmVjdXJzaXZlUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgfSA9IHJ1bGVOYW1lVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiByZW1vdmVJbnRlcm1lZGlhdGVOb2Rlcyhub2RlKSB7XG4gIHJlbW92ZVJpZ2h0UmVjdXJzaXZlTm9kZXMobm9kZSk7XG5cbiAgcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVOb2Rlcyhub2RlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVJbnRlcm1lZGlhdGVOb2RlcztcblxuZnVuY3Rpb24gcmVtb3ZlUmlnaHRSZWN1cnNpdmVOb2Rlcyhub2RlKSB7XG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlOyAvLy9cblxuICAgIGxldCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgIGNoaWxkTm9kZXMgPSByZW1vdmVSaWdodFJlY3Vyc2l2ZUNoaWxkTm9kZXMoY2hpbGROb2Rlcyk7XG5cbiAgICBub25UZXJtaW5hbE5vZGUuc2V0Q2hpbGROb2RlcyhjaGlsZE5vZGVzKVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJpZ2h0UmVjdXJzaXZlQ2hpbGROb2RlcyhjaGlsZE5vZGVzKSB7XG4gIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLnJlZHVjZSgoY2hpbGROb2RlcywgY2hpbGROb2RlKSA9PiB7XG4gICAgY29uc3QgY2hpbGROb2RlUmlnaHRSZWN1cnNpdmVOb2RlID0gKGNoaWxkTm9kZSBpbnN0YW5jZW9mIFJpZ2h0UmVjdXJzaXZlTm9kZSk7XG5cbiAgICBpZiAoY2hpbGROb2RlUmlnaHRSZWN1cnNpdmVOb2RlKSB7XG4gICAgICBsZXQgY2hpbGROb2RlQ2hpbGROb2RlcyA9IGNoaWxkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgIGNoaWxkTm9kZUNoaWxkTm9kZXMgPSByZW1vdmVSaWdodFJlY3Vyc2l2ZUNoaWxkTm9kZXMoY2hpbGROb2RlQ2hpbGROb2Rlcyk7XG5cbiAgICAgIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLmNvbmNhdChjaGlsZE5vZGVDaGlsZE5vZGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlUmlnaHRSZWN1cnNpdmVOb2RlcyhjaGlsZE5vZGUpO1xuXG4gICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGROb2RlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBjaGlsZE5vZGVzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVPclJlbmFtZU5vblJlY3Vyc2l2ZU5vZGVzKG5vZGUpIHtcbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgICBsZXQgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICBjaGlsZE5vZGVzID0gcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZS5zZXRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKSB7XG4gIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLnJlZHVjZSgoY2hpbGROb2RlcywgY2hpbGROb2RlKSA9PiB7XG4gICAgY29uc3QgY2hpbGROb2RlTm9uUmVjdXJzaXZlTm9kZSA9IChjaGlsZE5vZGUgaW5zdGFuY2VvZiBOb25SZWN1cnNpdmVOb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVOb25SZWN1cnNpdmVOb2RlKSB7XG4gICAgICBjb25zdCBub25SZWN1cnNpdmVOb2RlID0gY2hpbGROb2RlLCAvLy9cbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZU5vZGVSdWxlTmFtZSA9IG5vblJlY3Vyc2l2ZU5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZVJ1bGVOYW1lID0gbm9uUmVjdXJzaXZlTm9kZVJ1bGVOYW1lLFxuICAgICAgICAgICAgbm9uUmVjdXJzaXZlUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSBjaGVja05vblJlY3Vyc2l2ZVJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlTmFtZSk7XG5cbiAgICAgIGlmIChub25SZWN1cnNpdmVSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSkge1xuICAgICAgICBsZXQgY2hpbGROb2RlQ2hpbGROb2RlcyA9IGNoaWxkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgICAgY2hpbGROb2RlQ2hpbGROb2RlcyA9IHJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlQ2hpbGROb2RlcyhjaGlsZE5vZGVDaGlsZE5vZGVzKTtcblxuICAgICAgICBjaGlsZE5vZGVzID0gY2hpbGROb2Rlcy5jb25jYXQoY2hpbGROb2RlQ2hpbGROb2Rlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbU5vblJlY3Vyc2l2ZVJ1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgICAgICBjaGlsZE5vZGUuc2V0UnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgICAgIHJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlTm9kZXMoY2hpbGROb2RlKTtcblxuICAgICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVOb2RlcyhjaGlsZE5vZGUpO1xuXG4gICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGROb2RlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBjaGlsZE5vZGVzO1xuXG59XG4iXX0=