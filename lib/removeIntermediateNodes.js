'use strict';

var NonRecursiveNode = require('./node/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveNode = require('./node/rightRecursive');

var ruleNameFromNonRecursiveRuleName = ruleNameUtilities.ruleNameFromNonRecursiveRuleName,
    checkNonRecursiveRuleNameMatchesRuleName = ruleNameUtilities.checkNonRecursiveRuleNameMatchesRuleName;


function removeIntermediateNodes(node) {
  removeOrRenameNonRecursiveNodes(node);

  removeRightRecursiveNodes(node);
}

module.exports = removeIntermediateNodes;

function removeRightRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeRightRecursiveChildNodes(childNodes);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRightRecursiveChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRightRecursiveNode = childNode instanceof RightRecursiveNode;

    if (childNodeRightRecursiveNode) {
      var childNodeChildNodes = childNode.getChildNodes();

      childNodeChildNodes = removeRightRecursiveChildNodes(childNodeChildNodes);

      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRightRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}

function removeOrRenameNonRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeOrRenameNonRecursiveChildNodes(childNodes, ruleName);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameNonRecursiveChildNodes(childNodes, ruleName) {
  var childNodesLength = childNodes.length;

  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeNonRecursiveNode = childNode instanceof NonRecursiveNode;

    if (childNodeNonRecursiveNode) {
      var nonRecursiveNode = childNode,
          ///
      nonRecursiveNodeRuleName = nonRecursiveNode.getRuleName(),
          nonRecursiveRuleName = nonRecursiveNodeRuleName,
          nonRecursiveRuleNameMatchesRuleName = checkNonRecursiveRuleNameMatchesRuleName(nonRecursiveRuleName, ruleName);

      if (nonRecursiveRuleNameMatchesRuleName) {
        if (childNodesLength > 1) {
          var _ruleName = ruleNameFromNonRecursiveRuleName(nonRecursiveRuleName);

          childNode.setRuleName(_ruleName);

          removeOrRenameNonRecursiveNodes(childNode);

          childNodes.push(childNode);
        } else {
          var childNodeChildNodes = childNode.getChildNodes();

          childNodeChildNodes = removeOrRenameNonRecursiveChildNodes(childNodeChildNodes);

          childNodes = childNodes.concat(childNodeChildNodes);
        }
      } else {
        var _ruleName2 = ruleNameFromNonRecursiveRuleName(nonRecursiveRuleName);

        childNode.setRuleName(_ruleName2);

        removeOrRenameNonRecursiveNodes(childNode);

        childNodes.push(childNode);
      }
    } else {
      removeOrRenameNonRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,