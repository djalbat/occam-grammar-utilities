'use strict';

var ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveNode = require('./node/rightRecursive'),
    NonLeftRecursiveNode = require('./node/nonLeftRecursive');

var ruleNameFromNonLeftRecursiveRuleName = ruleNameUtilities.ruleNameFromNonLeftRecursiveRuleName,
    checkNonLeftRecursiveRuleNameMatchesRuleName = ruleNameUtilities.checkNonLeftRecursiveRuleNameMatchesRuleName;


function removeIntermediateNodes(node) {
  removeOrRenameNonLeftRecursiveNodes(node);

  removeRightRecursiveNodes(node);
}

module.exports = removeIntermediateNodes;

function removeRightRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeRightRecursiveChildNodes(childNodes);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRightRecursiveChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRightRecursiveNode = childNode instanceof RightRecursiveNode;

    if (childNodeRightRecursiveNode) {
      var childNodeChildNodes = childNode.getChildNodes();

      childNodeChildNodes = removeRightRecursiveChildNodes(childNodeChildNodes);

      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRightRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}

function removeOrRenameNonLeftRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeOrRenameNonLeftRecursiveChildNodes(childNodes, ruleName);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameNonLeftRecursiveChildNodes(childNodes, ruleName) {
  var childNodesLength = childNodes.length;

  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeNonLeftRecursiveNode = childNode instanceof NonLeftRecursiveNode;

    if (childNodeNonLeftRecursiveNode) {
      var nonLeftRecursiveNode = childNode,
          ///
      nonLeftRecursiveNodeRuleName = nonLeftRecursiveNode.getRuleName(),
          nonLeftRecursiveRuleName = nonLeftRecursiveNodeRuleName,
          ///
      nonLeftRecursiveRuleNameMatchesRuleName = checkNonLeftRecursiveRuleNameMatchesRuleName(nonLeftRecursiveRuleName, ruleName);

      if (nonLeftRecursiveRuleNameMatchesRuleName) {
        if (childNodesLength > 1) {
          var _ruleName = ruleNameFromNonLeftRecursiveRuleName(nonLeftRecursiveRuleName);

          childNode.setRuleName(_ruleName);

          removeOrRenameNonLeftRecursiveNodes(childNode);

          childNodes.push(childNode);
        } else {
          var childNodeChildNodes = childNode.getChildNodes();

          childNodeChildNodes = removeOrRenameNonLeftRecursiveChildNodes(childNodeChildNodes);

          childNodes = childNodes.concat(childNodeChildNodes);
        }
      } else {
        var _ruleName2 = ruleNameFromNonLeftRecursiveRuleName(nonLeftRecursiveRuleName);

        childNode.setRuleName(_ruleName2);

        removeOrRenameNonLeftRecursiveNodes(childNode);

        childNodes.push(childNode);
      }
    } else {
      removeOrRenameNonLeftRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,