'use strict';

var RightRecursiveRule = require('./rule/rightRecursive'),
    ImplicitlyLeftRecursiveRule = require('./rule/implicitlyLeftRecursive'),
    ImmediatelyLeftRecursiveRule = require('./rule/immediatelyLeftRecursive'),
    NonImmediatelyLeftRecursiveRule = require('./rule/nonImmediatelyLeftRecursive');

function eliminateImplicitLeftRecursion(rules) {
  var rightRecursiveRules = [],
      nonImmediatelyLeftRecursiveRules = [];

  rules.forEach(function (rule, index) {
    var begin = 0,
        end = index,
        ///
    previousNonLeftRecursiveRules = nonImmediatelyLeftRecursiveRules.slice(begin, end),
        previousRules = previousNonLeftRecursiveRules,
        ///
    implicitlyLeftRecursiveRule = ImplicitlyLeftRecursiveRule.fromRuleAndPreviousRules(rule, previousRules),
        immediatelyLeftRecursiveRule = implicitlyLeftRecursiveRule === null ? ImmediatelyLeftRecursiveRule.fromRule(rule) : ImmediatelyLeftRecursiveRule.fromImplicitlyLeftRecursiveRuleAndPreviousRules(implicitlyLeftRecursiveRule, previousRules);

    if (immediatelyLeftRecursiveRule === null) {
      var nonImmediatelyLeftRecursiveRule = rule; ///

      nonImmediatelyLeftRecursiveRules.push(nonImmediatelyLeftRecursiveRule);
    } else {
      var rightRecursiveRule = RightRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          _nonImmediatelyLeftRecursiveRule = NonImmediatelyLeftRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);

      rightRecursiveRules.push(rightRecursiveRule);

      nonImmediatelyLeftRecursiveRules.push(_nonImmediatelyLeftRecursiveRule);
    }
  });

  rules = [].concat(nonImmediatelyLeftRecursiveRules).concat(rightRecursiveRules);

  return rules;
}

module.exports = eliminateImplicitLeftRecursion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb24uanMiXSwibmFtZXMiOlsiUmlnaHRSZWN1cnNpdmVSdWxlIiwicmVxdWlyZSIsIkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsIkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJOb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIiwiZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uIiwicnVsZXMiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVzIiwibm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZXMiLCJmb3JFYWNoIiwicnVsZSIsImluZGV4IiwiYmVnaW4iLCJlbmQiLCJwcmV2aW91c05vbkxlZnRSZWN1cnNpdmVSdWxlcyIsInNsaWNlIiwicHJldmlvdXNSdWxlcyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsImZyb21SdWxlQW5kUHJldmlvdXNSdWxlcyIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUnVsZSIsImZyb21JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVBbmRQcmV2aW91c1J1bGVzIiwibm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsInB1c2giLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsImNvbmNhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLHFCQUFxQkMsUUFBUSx1QkFBUixDQUEzQjtBQUFBLElBQ01DLDhCQUE4QkQsUUFBUSxnQ0FBUixDQURwQztBQUFBLElBRU1FLCtCQUErQkYsUUFBUSxpQ0FBUixDQUZyQztBQUFBLElBR01HLGtDQUFrQ0gsUUFBUSxvQ0FBUixDQUh4Qzs7QUFLQSxTQUFTSSw4QkFBVCxDQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0MsTUFBTUMsc0JBQXNCLEVBQTVCO0FBQUEsTUFDTUMsbUNBQW1DLEVBRHpDOztBQUdBRixRQUFNRyxPQUFOLENBQWMsVUFBU0MsSUFBVCxFQUFlQyxLQUFmLEVBQXNCO0FBQ2xDLFFBQU1DLFFBQVEsQ0FBZDtBQUFBLFFBQ01DLE1BQU1GLEtBRFo7QUFBQSxRQUNvQjtBQUNkRyxvQ0FBZ0NOLGlDQUFpQ08sS0FBakMsQ0FBdUNILEtBQXZDLEVBQThDQyxHQUE5QyxDQUZ0QztBQUFBLFFBR01HLGdCQUFnQkYsNkJBSHRCO0FBQUEsUUFHc0Q7QUFDaERHLGtDQUE4QmYsNEJBQTRCZ0Isd0JBQTVCLENBQXFEUixJQUFyRCxFQUEyRE0sYUFBM0QsQ0FKcEM7QUFBQSxRQUtNRywrQkFBZ0NGLGdDQUFnQyxJQUFqQyxHQUNFZCw2QkFBNkJpQixRQUE3QixDQUFzQ1YsSUFBdEMsQ0FERixHQUVJUCw2QkFBNkJrQiwrQ0FBN0IsQ0FBNkVKLDJCQUE3RSxFQUEwR0QsYUFBMUcsQ0FQekM7O0FBU0EsUUFBSUcsaUNBQWlDLElBQXJDLEVBQTJDO0FBQ3pDLFVBQU1HLGtDQUFrQ1osSUFBeEMsQ0FEeUMsQ0FDTTs7QUFFL0NGLHVDQUFpQ2UsSUFBakMsQ0FBc0NELCtCQUF0QztBQUNELEtBSkQsTUFJTztBQUNMLFVBQU1FLHFCQUFxQnhCLG1CQUFtQnlCLGdDQUFuQixDQUFvRE4sNEJBQXBELENBQTNCO0FBQUEsVUFDTUcsbUNBQWtDbEIsZ0NBQWdDcUIsZ0NBQWhDLENBQWlFTiw0QkFBakUsQ0FEeEM7O0FBR0FaLDBCQUFvQmdCLElBQXBCLENBQXlCQyxrQkFBekI7O0FBRUFoQix1Q0FBaUNlLElBQWpDLENBQXNDRCxnQ0FBdEM7QUFDRDtBQUNGLEdBdEJEOztBQXdCQWhCLFVBQVEsR0FBR29CLE1BQUgsQ0FBVWxCLGdDQUFWLEVBQTRDa0IsTUFBNUMsQ0FBbURuQixtQkFBbkQsQ0FBUjs7QUFFQSxTQUFPRCxLQUFQO0FBQ0Q7O0FBRURxQixPQUFPQyxPQUFQLEdBQWlCdkIsOEJBQWpCIiwiZmlsZSI6ImVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvaW1wbGljaXRseUxlZnRSZWN1cnNpdmUnKSxcbiAgICAgIEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlJyksXG4gICAgICBOb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL25vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZScpO1xuXG5mdW5jdGlvbiBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlcyA9IFtdLFxuICAgICAgICBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlcyA9IFtdO1xuXG4gIHJ1bGVzLmZvckVhY2goZnVuY3Rpb24ocnVsZSwgaW5kZXgpIHtcbiAgICBjb25zdCBiZWdpbiA9IDAsXG4gICAgICAgICAgZW5kID0gaW5kZXgsICAvLy9cbiAgICAgICAgICBwcmV2aW91c05vbkxlZnRSZWN1cnNpdmVSdWxlcyA9IG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGVzLnNsaWNlKGJlZ2luLCBlbmQpLFxuICAgICAgICAgIHByZXZpb3VzUnVsZXMgPSBwcmV2aW91c05vbkxlZnRSZWN1cnNpdmVSdWxlcywgIC8vL1xuICAgICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSA9IEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZS5mcm9tUnVsZUFuZFByZXZpb3VzUnVsZXMocnVsZSwgcHJldmlvdXNSdWxlcyksXG4gICAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IChpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlLmZyb21SdWxlKHJ1bGUpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZUFuZFByZXZpb3VzUnVsZXMoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLCBwcmV2aW91c1J1bGVzKTtcblxuICAgIGlmIChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlID09PSBudWxsKSB7XG4gICAgICBjb25zdCBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlID0gcnVsZTsgIC8vL1xuXG4gICAgICBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlcy5wdXNoKG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgICBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlID0gTm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZS5mcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5wdXNoKHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgIG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGVzLnB1c2gobm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSk7XG4gICAgfVxuICB9KTtcblxuICBydWxlcyA9IFtdLmNvbmNhdChub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlcykuY29uY2F0KHJpZ2h0UmVjdXJzaXZlUnVsZXMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb247XG4iXX0=