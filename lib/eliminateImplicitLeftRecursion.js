'use strict';

var IntermediateRule = require('./rule/intermediate'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    ImplicitlyLeftRecursiveRule = require('./rule/implicitlyLeftRecursive'),
    ImmediatelyLeftRecursiveRule = require('./rule/immediatelyLeftRecursive'),
    NonImmediatelyLeftRecursiveRule = require('./rule/nonImmediatelyLeftRecursive');

function eliminateImplicitLeftRecursion(rules) {
  var rightRecursiveRules = [],
      nonImmediatelyLeftRecursiveRules = [];

  rules.forEach(function (rule, index) {
    var begin = 0,
        end = index,
        ///
    previousNonLeftRecursiveRules = nonImmediatelyLeftRecursiveRules.slice(begin, end),
        previousRules = previousNonLeftRecursiveRules,
        ///
    implicitlyLeftRecursiveRule = ImplicitlyLeftRecursiveRule.fromRuleAndPreviousRules(rule, previousRules);

    if (implicitlyLeftRecursiveRule !== null) {
      var intermediateRule = IntermediateRule.fromImplicitlyLeftRecursiveRuleAndPreviousRules(implicitlyLeftRecursiveRule, previousRules);

      rule = intermediateRule; ///
    }

    var immediatelyLeftRecursiveRule = ImmediatelyLeftRecursiveRule.fromRule(rule);

    if (immediatelyLeftRecursiveRule === null) {
      var nonImmediatelyLeftRecursiveRule = rule; ///

      nonImmediatelyLeftRecursiveRules.push(nonImmediatelyLeftRecursiveRule);
    } else {
      var rightRecursiveRule = RightRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          _nonImmediatelyLeftRecursiveRule = NonImmediatelyLeftRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);

      rightRecursiveRules.push(rightRecursiveRule);

      nonImmediatelyLeftRecursiveRules.push(_nonImmediatelyLeftRecursiveRule);
    }
  });

  rules = [].concat(nonImmediatelyLeftRecursiveRules).concat(rightRecursiveRules);

  return rules;
}

module.exports = eliminateImplicitLeftRecursion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb24uanMiXSwibmFtZXMiOlsiSW50ZXJtZWRpYXRlUnVsZSIsInJlcXVpcmUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIiwiTm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsImVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbiIsInJ1bGVzIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsIm5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGVzIiwiZm9yRWFjaCIsInJ1bGUiLCJpbmRleCIsImJlZ2luIiwiZW5kIiwicHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUnVsZXMiLCJzbGljZSIsInByZXZpb3VzUnVsZXMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUnVsZUFuZFByZXZpb3VzUnVsZXMiLCJpbnRlcm1lZGlhdGVSdWxlIiwiZnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZUFuZFByZXZpb3VzUnVsZXMiLCJpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIiwiZnJvbVJ1bGUiLCJub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIiwicHVzaCIsInJpZ2h0UmVjdXJzaXZlUnVsZSIsImZyb21JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIiwiY29uY2F0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsbUJBQW1CQyxRQUFRLHFCQUFSLENBQXpCO0FBQUEsSUFDTUMscUJBQXFCRCxRQUFRLHVCQUFSLENBRDNCO0FBQUEsSUFFTUUsOEJBQThCRixRQUFRLGdDQUFSLENBRnBDO0FBQUEsSUFHTUcsK0JBQStCSCxRQUFRLGlDQUFSLENBSHJDO0FBQUEsSUFJTUksa0NBQWtDSixRQUFRLG9DQUFSLENBSnhDOztBQU1BLFNBQVNLLDhCQUFULENBQXdDQyxLQUF4QyxFQUErQztBQUM3QyxNQUFNQyxzQkFBc0IsRUFBNUI7QUFBQSxNQUNNQyxtQ0FBbUMsRUFEekM7O0FBR0FGLFFBQU1HLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWVDLEtBQWYsRUFBc0I7QUFDbEMsUUFBTUMsUUFBUSxDQUFkO0FBQUEsUUFDTUMsTUFBTUYsS0FEWjtBQUFBLFFBQ29CO0FBQ2RHLG9DQUFnQ04saUNBQWlDTyxLQUFqQyxDQUF1Q0gsS0FBdkMsRUFBOENDLEdBQTlDLENBRnRDO0FBQUEsUUFHTUcsZ0JBQWdCRiw2QkFIdEI7QUFBQSxRQUdzRDtBQUNoREcsa0NBQThCZiw0QkFBNEJnQix3QkFBNUIsQ0FBcURSLElBQXJELEVBQTJETSxhQUEzRCxDQUpwQzs7QUFNQSxRQUFJQyxnQ0FBZ0MsSUFBcEMsRUFBMEM7QUFDeEMsVUFBTUUsbUJBQW1CcEIsaUJBQWlCcUIsK0NBQWpCLENBQWlFSCwyQkFBakUsRUFBOEZELGFBQTlGLENBQXpCOztBQUVBTixhQUFPUyxnQkFBUCxDQUh3QyxDQUdkO0FBQzNCOztBQUVELFFBQU1FLCtCQUErQmxCLDZCQUE2Qm1CLFFBQTdCLENBQXNDWixJQUF0QyxDQUFyQzs7QUFFQSxRQUFJVyxpQ0FBaUMsSUFBckMsRUFBMkM7QUFDekMsVUFBTUUsa0NBQWtDYixJQUF4QyxDQUR5QyxDQUNNOztBQUUvQ0YsdUNBQWlDZ0IsSUFBakMsQ0FBc0NELCtCQUF0QztBQUNELEtBSkQsTUFJTztBQUNMLFVBQU1FLHFCQUFxQnhCLG1CQUFtQnlCLGdDQUFuQixDQUFvREwsNEJBQXBELENBQTNCO0FBQUEsVUFDTUUsbUNBQWtDbkIsZ0NBQWdDc0IsZ0NBQWhDLENBQWlFTCw0QkFBakUsQ0FEeEM7O0FBR0FkLDBCQUFvQmlCLElBQXBCLENBQXlCQyxrQkFBekI7O0FBRUFqQix1Q0FBaUNnQixJQUFqQyxDQUFzQ0QsZ0NBQXRDO0FBQ0Q7QUFDRixHQTNCRDs7QUE2QkFqQixVQUFRLEdBQUdxQixNQUFILENBQVVuQixnQ0FBVixFQUE0Q21CLE1BQTVDLENBQW1EcEIsbUJBQW5ELENBQVI7O0FBRUEsU0FBT0QsS0FBUDtBQUNEOztBQUVEc0IsT0FBT0MsT0FBUCxHQUFpQnhCLDhCQUFqQiIsImZpbGUiOiJlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEludGVybWVkaWF0ZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvaW50ZXJtZWRpYXRlJyksXG4gICAgICBSaWdodFJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvcmlnaHRSZWN1cnNpdmUnKSxcbiAgICAgIEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9pbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZScpLFxuICAgICAgSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9pbW1lZGlhdGVseUxlZnRSZWN1cnNpdmUnKSxcbiAgICAgIE5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlJyk7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbihydWxlcykge1xuICBjb25zdCByaWdodFJlY3Vyc2l2ZVJ1bGVzID0gW10sXG4gICAgICAgIG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGVzID0gW107XG5cbiAgcnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlLCBpbmRleCkge1xuICAgIGNvbnN0IGJlZ2luID0gMCxcbiAgICAgICAgICBlbmQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgIHByZXZpb3VzTm9uTGVmdFJlY3Vyc2l2ZVJ1bGVzID0gbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZXMuc2xpY2UoYmVnaW4sIGVuZCksXG4gICAgICAgICAgcHJldmlvdXNSdWxlcyA9IHByZXZpb3VzTm9uTGVmdFJlY3Vyc2l2ZVJ1bGVzLCAgLy8vXG4gICAgICAgICAgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlID0gSW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLmZyb21SdWxlQW5kUHJldmlvdXNSdWxlcyhydWxlLCBwcmV2aW91c1J1bGVzKTtcblxuICAgIGlmIChpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGludGVybWVkaWF0ZVJ1bGUgPSBJbnRlcm1lZGlhdGVSdWxlLmZyb21JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVBbmRQcmV2aW91c1J1bGVzKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgcHJldmlvdXNSdWxlcyk7XG5cbiAgICAgIHJ1bGUgPSBpbnRlcm1lZGlhdGVSdWxlOyAgLy8vXG4gICAgfVxuXG4gICAgY29uc3QgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9PT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IHJ1bGU7ICAvLy9cblxuICAgICAgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZXMucHVzaChub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlID0gUmlnaHRSZWN1cnNpdmVSdWxlLmZyb21JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICAgICAgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IE5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZXMucHVzaChyaWdodFJlY3Vyc2l2ZVJ1bGUpO1xuXG4gICAgICBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlcy5wdXNoKG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUpO1xuICAgIH1cbiAgfSk7XG5cbiAgcnVsZXMgPSBbXS5jb25jYXQobm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZXMpLmNvbmNhdChyaWdodFJlY3Vyc2l2ZVJ1bGVzKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uO1xuIl19