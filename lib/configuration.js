'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ruleUtilities = require('./utilities/rule');

var findRuleByName = ruleUtilities.findRuleByName;

var Configuration = function () {
  function Configuration(immediatelyLeftRecursiveDefinitionsMap, indirectlyLeftRecursiveDefinitionsMap, rules) {
    _classCallCheck(this, Configuration);

    this.immediatelyLeftRecursiveDefinitionsMap = immediatelyLeftRecursiveDefinitionsMap;

    this.indirectlyLeftRecursiveDefinitionsMap = indirectlyLeftRecursiveDefinitionsMap;

    this.rules = rules;
  }

  _createClass(Configuration, [{
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }, {
    key: 'getIndirectlyLeftRecursiveRuleNames',
    value: function getIndirectlyLeftRecursiveRuleNames() {
      var indirectlyLeftRecursiveRuleNames = Object.keys(this.indirectlyLeftRecursiveDefinitionsMap);

      return indirectlyLeftRecursiveRuleNames;
    }
  }, {
    key: 'getImmediatelyLeftRecursiveRuleNames',
    value: function getImmediatelyLeftRecursiveRuleNames() {
      var immediatelyLeftRecursiveRuleNames = Object.keys(this.immediatelyLeftRecursiveDefinitionsMap);

      return immediatelyLeftRecursiveRuleNames;
    }
  }, {
    key: 'getImmediatelyLeftRecursiveDefinitions',
    value: function getImmediatelyLeftRecursiveDefinitions(ruleName) {
      var immediatelyLeftRecursiveDefinitions = this.immediatelyLeftRecursiveDefinitionsMap[ruleName];

      return immediatelyLeftRecursiveDefinitions;
    }
  }, {
    key: 'findRule',
    value: function findRule(ruleName) {
      var name = ruleName,
          ///
      rule = findRuleByName(name, this.rules);

      return rule;
    }
  }, {
    key: 'isRulePresent',
    value: function isRulePresent(ruleName) {
      var rule = this.findRule(ruleName),
          rulePresent = rule !== null;

      return rulePresent;
    }
  }, {
    key: 'isDefinitionIndirectlyLeftRecursiveDefinition',
    value: function isDefinitionIndirectlyLeftRecursiveDefinition(definition, ruleName) {
      var indirectlyLeftRecursiveDefinitions = this.indirectlyLeftRecursiveDefinitionsMap[ruleName],
          indirectlyLeftRecursiveDefinitionsIncludesDefinition = indirectlyLeftRecursiveDefinitions.includes(definition),
          definitionIndirectlyRecursiveDefinition = indirectlyLeftRecursiveDefinitionsIncludesDefinition; ///

      return definitionIndirectlyRecursiveDefinition;
    }
  }, {
    key: 'forEachRule',
    value: function forEachRule(callback) {
      this.rules.forEach(callback);
    }
  }, {
    key: 'forEachIndirectlyLeftRecursiveRule',
    value: function forEachIndirectlyLeftRecursiveRule(callback) {
      var _this = this;

      var indirectlyLeftRecursiveRuleNames = this.getIndirectlyLeftRecursiveRuleNames();

      indirectlyLeftRecursiveRuleNames.forEach(function (mappedRuleName) {
        var mappedRule = _this.findRule(mappedRuleName);

        callback(mappedRule);
      });
    }
  }, {
    key: 'forEachIndirectlyLeftRecursiveRuleName',
    value: function forEachIndirectlyLeftRecursiveRuleName(callback) {
      var indirectlyLeftRecursiveRuleNames = this.getIndirectlyLeftRecursiveRuleNames();

      indirectlyLeftRecursiveRuleNames.forEach(callback);
    }
  }, {
    key: 'forEachImmediatelyLeftRecursiveRule',
    value: function forEachImmediatelyLeftRecursiveRule(callback) {
      var _this2 = this;

      var immediatelyLeftRecursiveRuleNames = this.getImmediatelyLeftRecursiveRuleNames();

      immediatelyLeftRecursiveRuleNames.forEach(function (mappedRuleName) {
        var mappedRule = _this2.findRule(mappedRuleName);

        callback(mappedRule);
      });
    }
  }, {
    key: 'forEachImmediatelyLeftRecursiveRuleName',
    value: function forEachImmediatelyLeftRecursiveRuleName(callback) {
      var immediatelyLeftRecursiveRuleNames = this.getImmediatelyLeftRecursiveRuleNames();

      immediatelyLeftRecursiveRuleNames.forEach(callback);
    }
  }, {
    key: 'addNonRecursiveRule',
    value: function addNonRecursiveRule(nonRecursiveRule) {
      var rule = nonRecursiveRule; ///

      this.rules.push(rule);
    }
  }, {
    key: 'addRightRecursiveRule',
    value: function addRightRecursiveRule(rightRecursiveRule) {
      var rule = rightRecursiveRule; ///

      this.rules.push(rule);
    }
  }, {
    key: 'mapImmediatelyLeftRecursiveDefinition',
    value: function mapImmediatelyLeftRecursiveDefinition(ruleName, immediatelyLeftRecursiveDefinition) {
      if (!this.immediatelyLeftRecursiveDefinitionsMap[ruleName]) {
        this.immediatelyLeftRecursiveDefinitionsMap[ruleName] = [];
      }

      var immediatelyLeftRecursiveDefinitions = this.immediatelyLeftRecursiveDefinitionsMap[ruleName];

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);
    }
  }, {
    key: 'mapIndirectlyLeftRecursiveDefinition',
    value: function mapIndirectlyLeftRecursiveDefinition(ruleName, indirectlyLeftRecursiveDefinition) {
      if (!this.indirectlyLeftRecursiveDefinitionsMap[ruleName]) {
        this.indirectlyLeftRecursiveDefinitionsMap[ruleName] = [];
      }

      var indirectlyLeftRecursiveDefinitions = this.indirectlyLeftRecursiveDefinitionsMap[ruleName];

      indirectlyLeftRecursiveDefinitions.push(indirectlyLeftRecursiveDefinition);
    }
  }], [{
    key: 'fromRules',
    value: function fromRules(rules) {
      var immediatelyLeftRecursiveDefinitionsMap = {},
          indirectlyLeftRecursiveDefinitionsMap = {},
          configuration = new Configuration(immediatelyLeftRecursiveDefinitionsMap, indirectlyLeftRecursiveDefinitionsMap, rules);

      return configuration;
    }
  }]);

  return Configuration;
}();

module.exports = Configuration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,