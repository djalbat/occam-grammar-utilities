'use strict';

var necessary = require('necessary');

var partUtilities = require('./utilities/part'),
    ruleUtilities = require('./utilities/rule'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    last = arrayUtilities.last,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    nonRecursiveRuleNameFromRuleName = ruleNameUtilities.nonRecursiveRuleNameFromRuleName,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var ruleNames = [];

  eliminateLeftRecursionFromRules(rules, ruleNames);
}

module.exports = eliminateLeftRecursion;

function eliminateLeftRecursionFromRules(rules, ruleNames) {
  rules.forEach(function (rule) {
    return eliminateLeftRecursionFromRule(rule, ruleNames, rules);
  });
}

function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rules);

    if (recursiveDefinition !== null) {
      recursiveDefinitions.push(recursiveDefinition);
    } else {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
        nonRecursiveRuleName = nonRecursiveRule.getName(),
        nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleName(nonRecursiveRuleName),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart,
        ///
    ruleName = ruleNamePart.getRuleName();

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(definition, ruleName, ruleNames, rules);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImplicitLeftRecursionFromDefinition(definition, ruleName, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(definition, ruleName, ruleNames, rules) {
  var recursiveDefinition = null;

  var firstRuleName = first(ruleNames),
      ruleNameTopmostRuleName = ruleName === firstRuleName;

  if (ruleNameTopmostRuleName) {
    var lastRuleName = last(ruleNames),
        _ruleName = lastRuleName,
        ///
    rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName),
        nonRecursiveRuleName = nonRecursiveRuleNameFromRuleName(_ruleName),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName);

    recursiveDefinition = RecursiveDefinition.fromNonRecursiveRuleNameAndRightRecursiveRuleName(nonRecursiveRuleName, rightRecursiveRuleName);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}

function eliminateImplicitLeftRecursionFromDefinition(definition, ruleName, ruleNames, rules) {
  var recursiveDefinition = null;

  var name = ruleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJwYXJ0VXRpbGl0aWVzIiwicnVsZVV0aWxpdGllcyIsIk5vblJlY3Vyc2l2ZVJ1bGUiLCJydWxlTmFtZVV0aWxpdGllcyIsIlJpZ2h0UmVjdXJzaXZlUnVsZSIsIlJlY3Vyc2l2ZURlZmluaXRpb24iLCJOb25SZWN1cnNpdmVEZWZpbml0aW9uIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsImxhc3QiLCJmaW5kUnVsZUJ5TmFtZSIsImlzUGFydFJ1bGVOYW1lUGFydCIsIm5vblJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmlnaHRSZWN1cnNpdmVSdWxlTmFtZUZyb21SdWxlTmFtZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlcyIsInJ1bGVOYW1lcyIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yRWFjaCIsInJ1bGUiLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwicmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJub25SZWN1cnNpdmVEZWZpbml0aW9ucyIsImNvbmNhdCIsImRlZmluaXRpb24iLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uIiwicHVzaCIsIm5vblJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCIsImxlbmd0aCIsInJ1bGVSZWN1cnNpdmUiLCJub25SZWN1cnNpdmVSdWxlIiwiZnJvbU5vblJlY3Vyc2l2ZURlZmluaXRpb25zQW5kUnVsZU5hbWVzIiwibm9uUmVjdXJzaXZlUnVsZU5hbWUiLCJmcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWUiLCJzZXREZWZpbml0aW9ucyIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJydWxlTmFtZVBhcnQiLCJnZXRSdWxlTmFtZSIsImVsaW1pbmF0ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbiIsImVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uIiwiZmlyc3RSdWxlTmFtZSIsInJ1bGVOYW1lVG9wbW9zdFJ1bGVOYW1lIiwibGFzdFJ1bGVOYW1lIiwicmlnaHRSZWN1cnNpdmVSdWxlTmFtZSIsInJpZ2h0UmVjdXJzaXZlUnVsZSIsImZyb21EZWZpbml0aW9uQW5kUmlnaHRSZWN1cnNpdmVSdWxlTmFtZSIsImZyb21Ob25SZWN1cnNpdmVSdWxlTmFtZUFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsZ0JBQWdCRCxRQUFRLGtCQUFSLENBQXRCO0FBQUEsSUFDTUUsZ0JBQWdCRixRQUFRLGtCQUFSLENBRHRCO0FBQUEsSUFFTUcsbUJBQW1CSCxRQUFRLHFCQUFSLENBRnpCO0FBQUEsSUFHTUksb0JBQW9CSixRQUFRLHNCQUFSLENBSDFCO0FBQUEsSUFJTUsscUJBQXFCTCxRQUFRLHVCQUFSLENBSjNCO0FBQUEsSUFLTU0sc0JBQXNCTixRQUFRLHdCQUFSLENBTDVCO0FBQUEsSUFNTU8seUJBQXlCUCxRQUFRLDJCQUFSLENBTi9COztBQVFNLElBQUVRLGNBQUYsR0FBcUJULFNBQXJCLENBQUVTLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ2tCRCxjQURsQixDQUNFQyxLQURGO0FBQUEsSUFDU0MsSUFEVCxHQUNrQkYsY0FEbEIsQ0FDU0UsSUFEVDtBQUFBLElBRUVDLGNBRkYsR0FFcUJULGFBRnJCLENBRUVTLGNBRkY7QUFBQSxJQUdFQyxrQkFIRixHQUd5QlgsYUFIekIsQ0FH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Q2lCO0FBQ25DO0FBQ0Y7O0FBRUQsU0FBT0MsbUJBQVA7QUFDRCIsImZpbGUiOiJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgcGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3BhcnQnKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlJyksXG4gICAgICBOb25SZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL25vblJlY3Vyc2l2ZScpLFxuICAgICAgcnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlTmFtZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZScpLFxuICAgICAgTm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi9ub25SZWN1cnNpdmUnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmaXJzdCwgbGFzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlOYW1lIH0gPSBydWxlVXRpbGl0aWVzLFxuICAgICAgeyBpc1BhcnRSdWxlTmFtZVBhcnQgfSA9IHBhcnRVdGlsaXRpZXMsXG4gICAgICB7IG5vblJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihydWxlcykge1xuICBjb25zdCBydWxlTmFtZXMgPSBbXTtcblxuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVzKHJ1bGVzLCBydWxlTmFtZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb247XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMocnVsZXMsIHJ1bGVOYW1lcykge1xuICBydWxlcy5mb3JFYWNoKChydWxlKSA9PiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcykpO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcykge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICBydWxlTmFtZXMgPSBydWxlTmFtZXMuY29uY2F0KHJ1bGVOYW1lKTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKHJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBub25SZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbjsgIC8vL1xuXG4gICAgICBub25SZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKG5vblJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPSByZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGgsXG4gICAgICAgIHJ1bGVSZWN1cnNpdmUgPSAocmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPiAwKTtcblxuICBpZiAocnVsZVJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IG5vblJlY3Vyc2l2ZVJ1bGUgPSBOb25SZWN1cnNpdmVSdWxlLmZyb21Ob25SZWN1cnNpdmVEZWZpbml0aW9uc0FuZFJ1bGVOYW1lcyhub25SZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU5hbWVzKSxcbiAgICAgICAgICBub25SZWN1cnNpdmVSdWxlTmFtZSA9IG5vblJlY3Vyc2l2ZVJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25SZWN1cnNpdmVEZWZpbml0aW9uLmZyb21Ob25SZWN1cnNpdmVSdWxlTmFtZShub25SZWN1cnNpdmVSdWxlTmFtZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgICAuLi5yZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb25cbiAgICAgICAgICBdO1xuXG4gICAgcnVsZS5zZXREZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgICBydWxlcy5wdXNoKG5vblJlY3Vyc2l2ZVJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQoZmlyc3RQYXJ0KTtcblxuICBpZiAoZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0KSB7XG4gICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb24gPT09IG51bGwpIHtcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb24gPSBlbGltaW5hdGVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWUsIHJ1bGVOYW1lcywgcnVsZXMpO1xuICAgIH1cblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uID0gZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWUsIHJ1bGVOYW1lcywgcnVsZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWUsIHJ1bGVOYW1lcywgcnVsZXMpIHtcbiAgbGV0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gIGNvbnN0IGZpcnN0UnVsZU5hbWUgPSBmaXJzdChydWxlTmFtZXMpLFxuICAgICAgICBydWxlTmFtZVRvcG1vc3RSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gZmlyc3RSdWxlTmFtZSk7XG5cbiAgaWYgKHJ1bGVOYW1lVG9wbW9zdFJ1bGVOYW1lKSB7XG4gICAgY29uc3QgbGFzdFJ1bGVOYW1lID0gbGFzdChydWxlTmFtZXMpLFxuICAgICAgICAgIHJ1bGVOYW1lID0gbGFzdFJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZSA9IHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICAgIG5vblJlY3Vyc2l2ZVJ1bGVOYW1lID0gbm9uUmVjdXJzaXZlUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tRGVmaW5pdGlvbkFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUoZGVmaW5pdGlvbiwgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgICByZWN1cnNpdmVEZWZpbml0aW9uID0gUmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWVBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lLCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgIHJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZSwgcnVsZU5hbWVzLCBydWxlcykge1xuICBsZXQgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgbmFtZSA9IHJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJ1bGUgPSBmaW5kUnVsZUJ5TmFtZShuYW1lLCBydWxlcyk7XG5cbiAgaWYgKHJ1bGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBydWxlUmVjdXJzaXZlID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVOYW1lcywgcnVsZXMpO1xuXG4gICAgaWYgKHJ1bGVSZWN1cnNpdmUpIHtcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb24gPSBkZWZpbml0aW9uOyAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cbiJdfQ==