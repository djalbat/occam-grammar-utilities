'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var partUtilities = require('./utilities/part'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    first = arrayUtilities.first,
    last = arrayUtilities.last,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    ruleFromDefinition = definitionUtilities.ruleFromDefinition,
    isDDefinitionImmediateLeftRecursiveDefinition = definitionUtilities.isDDefinitionImmediateLeftRecursiveDefinition,
    resetRightRecursiveRuleNameCount = ruleNameUtilities.resetRightRecursiveRuleNameCount,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var map = {};

  removeImmediateLeftRecursionFromRules(rules, map);
}

module.exports = eliminateLeftRecursion;

function removeImmediateLeftRecursionFromRules(rules, map) {
  rules.forEach(function (rule) {
    var ruleNames = [];

    removeImmediateLeftRecursionFromRule(rule, ruleNames, rules, map);
  });
}

function removeImmediateLeftRecursionFromRule(rule, ruleNames, rules, map) {
  var ruleName = rule.getName(),
      ruleNamesIncludesRuleName = ruleNames.includes(ruleName);

  if (ruleNamesIncludesRuleName) {
    return;
  }

  ruleNames = [].concat(_toConsumableArray(ruleNames), [ruleName]);

  var definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var firstRuleName = first(ruleNames),
        ruleName = firstRuleName,
        ///
    definitionImmediatelyLeftRecursiveDefinition = isDDefinitionImmediateLeftRecursiveDefinition(definition, ruleName);

    if (definitionImmediatelyLeftRecursiveDefinition) {
      if (!map[ruleName]) {
        map[ruleName] = [];
      }

      var immediatelyLeftRecursiveDefinitions = map[ruleName],
          immediatelyLeftRecursiveDefinition = definition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }

    var rule = ruleFromDefinition(definition, rules);

    if (rule !== null) {
      removeImmediateLeftRecursionFromRule(rule, ruleNames, rules, map);
    }
  });
}

function eliminateLeftRecursionFromRules(rules) {
  rules.forEach(function (rule) {
    var ruleNames = [];

    resetRightRecursiveRuleNameCount();

    eliminateLeftRecursionFromRule(rule, ruleNames, rules);
  });
}

function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleRecursive = false;

  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rules);

    if (recursiveDefinition !== null) {
      ruleRecursive = true;

      recursiveDefinitions.push(recursiveDefinition);
    } else {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  if (ruleRecursive) {
    var _definitions = recursiveDefinitions,
        ///
    nonRecursiveDefinitionsLength = nonRecursiveDefinitions.length;

    if (nonRecursiveDefinitionsLength > 0) {
      var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
          nonRecursiveRuleName = nonRecursiveRule.getName(),
          nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleName(nonRecursiveRuleName),
          definition = nonRecursiveDefinition; ///

      _definitions.push(definition);

      rules.push(nonRecursiveRule);
    }

    rule.setDefinitions(_definitions);
  }

  return ruleRecursive;
}

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      name = ruleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      firstRuleName = first(ruleNames),
      ruleNameTopmostRuleName = ruleName === firstRuleName;

  if (ruleNameTopmostRuleName) {
    var lastRuleName = last(ruleNames),
        _ruleName = lastRuleName,
        ///
    rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName);

    recursiveDefinition = RecursiveDefinition.fromRuleNamePartAndRightRecursiveRuleName(ruleNamePart, rightRecursiveRuleName);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbInBhcnRVdGlsaXRpZXMiLCJyZXF1aXJlIiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiTm9uUmVjdXJzaXZlUnVsZSIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwiUmVjdXJzaXZlRGVmaW5pdGlvbiIsImRlZmluaXRpb25VdGlsaXRpZXMiLCJOb25SZWN1cnNpdmVEZWZpbml0aW9uIiwiZmluZFJ1bGVCeU5hbWUiLCJpc1BhcnRSdWxlTmFtZVBhcnQiLCJmaXJzdCIsImxhc3QiLCJmb3JFYWNoV2l0aFJlbW92ZSIsInJ1bGVGcm9tRGVmaW5pdGlvbiIsImlzRERlZmluaXRpb25JbW1lZGlhdGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlc2V0UmlnaHRSZWN1cnNpdmVSdWxlTmFtZUNvdW50IiwicmlnaHRSZWN1cnNpdmVSdWxlTmFtZUZyb21SdWxlTmFtZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlcyIsIm1hcCIsInJlbW92ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yRWFjaCIsInJ1bGUiLCJydWxlTmFtZXMiLCJyZW1vdmVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lIiwiaW5jbHVkZXMiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImZpcnN0UnVsZU5hbWUiLCJkZWZpbml0aW9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInB1c2giLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVzIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZVJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwibm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJjb25jYXQiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uIiwibm9uUmVjdXJzaXZlRGVmaW5pdGlvbiIsIm5vblJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoIiwibGVuZ3RoIiwibm9uUmVjdXJzaXZlUnVsZSIsImZyb21Ob25SZWN1cnNpdmVEZWZpbml0aW9uc0FuZFJ1bGVOYW1lcyIsIm5vblJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZnJvbU5vblJlY3Vyc2l2ZVJ1bGVOYW1lIiwic2V0RGVmaW5pdGlvbnMiLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwicnVsZU5hbWVQYXJ0IiwiZWxpbWluYXRlSW1tZWRpYXRlTGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uIiwiZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24iLCJnZXRSdWxlTmFtZSIsIm5hbWUiLCJydWxlTmFtZVRvcG1vc3RSdWxlTmFtZSIsImxhc3RSdWxlTmFtZSIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tRGVmaW5pdGlvbkFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJmcm9tUnVsZU5hbWVQYXJ0QW5kUmlnaHRSZWN1cnNpdmVSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsa0JBQVIsQ0FBdEI7QUFBQSxJQUNNQyxnQkFBZ0JELFFBQVEsa0JBQVIsQ0FEdEI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsbUJBQVIsQ0FGdkI7QUFBQSxJQUdNRyxtQkFBbUJILFFBQVEscUJBQVIs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QUFldUQsSUFBZixFQUFxQjdDLEtBQXJCLENBRmI7O0FBSUEsTUFBSU0sU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLFFBQU1pQixnQkFBZ0JELCtCQUErQmhCLElBQS9CLEVBQXFDQyxTQUFyQyxFQUFnRFAsS0FBaEQsQ0FBdEI7O0FBRUEsUUFBSXVCLGFBQUosRUFBbUI7QUFDakJJLDRCQUFzQlosVUFBdEIsQ0FEaUIsQ0FDaUI7QUFDbkM7QUFDRjs7QUFFRCxTQUFPWSxtQkFBUDtBQUNEOztBQUVELFNBQVNlLDZDQUFULENBQXVEM0IsVUFBdkQsRUFBbUUwQixZQUFuRSxFQUFpRmxDLFNBQWpGLEVBQTRGUCxLQUE1RixFQUFtRztBQUNqRyxNQUFJMkIsc0JBQXNCLElBQTFCOztBQUVBLE1BQU1sQixXQUFXZ0MsYUFBYUcsV0FBYixFQUFqQjtBQUFBLE1BQ001QixnQkFBZ0J4QixNQUFNZSxTQUFOLENBRHRCO0FBQUEsTUFFTXVDLDBCQUEyQnJDLGFBQWFPLGFBRjlDOztBQUlBLE1BQUk4Qix1QkFBSixFQUE2QjtBQUMzQixRQUFNQyxlQUFldEQsS0FBS2MsU0FBTCxDQUFyQjtBQUFBLFFBQ01FLFlBQVdzQyxZQURqQjtBQUFBLFFBQ2dDO0FBQzFCQyw2QkFBeUJsRCxtQ0FBbUNXLFNBQW5DLENBRi9CO0FBQUEsUUFHTXdDLHFCQUFxQi9ELG1CQUFtQmdFLHVDQUFuQixDQUEyRG5DLFVBQTNELEVBQXVFaUMsc0JBQXZFLENBSDNCOztBQUtBckIsMEJBQXNCeEMsb0JBQW9CZ0UseUNBQXBCLENBQThEVixZQUE5RCxFQUE0RU8sc0JBQTVFLENBQXRCOztBQUVBaEQsVUFBTW9CLElBQU4sQ0FBVzZCLGtCQUFYO0FBQ0Q7O0FBRUQsU0FBT3RCLG1CQUFQO0FBQ0QiLCJmaWxlIjoiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3BhcnQnKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBOb25SZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL25vblJlY3Vyc2l2ZScpLFxuICAgICAgcnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlTmFtZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZScpLFxuICAgICAgZGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2RlZmluaXRpb24nKSxcbiAgICAgIE5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vbm9uUmVjdXJzaXZlJyk7XG5cbmNvbnN0IHsgZmluZFJ1bGVCeU5hbWUgfSA9IHJ1bGVVdGlsaXRpZXMsXG4gICAgICB7IGlzUGFydFJ1bGVOYW1lUGFydCB9ID0gcGFydFV0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QsIGxhc3QsIGZvckVhY2hXaXRoUmVtb3ZlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcnVsZUZyb21EZWZpbml0aW9uLCBpc0REZWZpbml0aW9uSW1tZWRpYXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gfSA9IGRlZmluaXRpb25VdGlsaXRpZXMsXG4gICAgICB7IHJlc2V0UmlnaHRSZWN1cnNpdmVSdWxlTmFtZUNvdW50LCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihydWxlcykge1xuICBjb25zdCBtYXAgPSB7fTtcblxuICByZW1vdmVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVzKHJ1bGVzLCBtYXApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb247XG5cbmZ1bmN0aW9uIHJlbW92ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMocnVsZXMsIG1hcCkge1xuICBydWxlcy5mb3JFYWNoKChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWVzID0gW107XG5cbiAgICByZW1vdmVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcywgbWFwKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlTmFtZXMsIHJ1bGVzLCBtYXApIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWVzSW5jbHVkZXNSdWxlTmFtZSA9IHJ1bGVOYW1lcy5pbmNsdWRlcyhydWxlTmFtZSk7XG5cbiAgaWYgKHJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBydWxlTmFtZXMgPSBbIC4uLnJ1bGVOYW1lcywgcnVsZU5hbWUgXTtcblxuICBjb25zdCBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICBmb3JFYWNoV2l0aFJlbW92ZShkZWZpbml0aW9ucywgKGRlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBmaXJzdFJ1bGVOYW1lID0gZmlyc3QocnVsZU5hbWVzKSxcbiAgICAgICAgICBydWxlTmFtZSA9IGZpcnN0UnVsZU5hbWUsIC8vL1xuICAgICAgICAgIGRlZmluaXRpb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaXNERGVmaW5pdGlvbkltbWVkaWF0ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRlZmluaXRpb24sIHJ1bGVOYW1lKTtcblxuICAgIGlmIChkZWZpbml0aW9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgaWYgKCFtYXBbcnVsZU5hbWVdKSB7XG4gICAgICAgIG1hcFtydWxlTmFtZV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBtYXBbcnVsZU5hbWVdLFxuICAgICAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb247ICAvLy9cblxuICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgcnVsZSA9IHJ1bGVGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlcyk7XG5cbiAgICBpZiAocnVsZSAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlSW1tZWRpYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVOYW1lcywgcnVsZXMsIG1hcClcbiAgICB9XG4gIH0pO1xufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMocnVsZXMpIHtcbiAgcnVsZXMuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGVOYW1lcyA9IFtdO1xuXG4gICAgcmVzZXRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lQ291bnQoKTtcblxuICAgIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlTmFtZXMsIHJ1bGVzKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVOYW1lcywgcnVsZXMpIHtcbiAgbGV0IHJ1bGVSZWN1cnNpdmUgPSBmYWxzZTtcblxuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICBydWxlTmFtZXMgPSBydWxlTmFtZXMuY29uY2F0KHJ1bGVOYW1lKTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICBydWxlUmVjdXJzaXZlID0gdHJ1ZTtcblxuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChyZWN1cnNpdmVEZWZpbml0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb247ICAvLy9cblxuICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChub25SZWN1cnNpdmVEZWZpbml0aW9uKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChydWxlUmVjdXJzaXZlKSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbnMgPSByZWN1cnNpdmVEZWZpbml0aW9ucywgLy8vXG4gICAgICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPSBub25SZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgICBpZiAobm9uUmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBub25SZWN1cnNpdmVSdWxlID0gTm9uUmVjdXJzaXZlUnVsZS5mcm9tTm9uUmVjdXJzaXZlRGVmaW5pdGlvbnNBbmRSdWxlTmFtZXMobm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVOYW1lcyksXG4gICAgICAgICAgICBub25SZWN1cnNpdmVSdWxlTmFtZSA9IG5vblJlY3Vyc2l2ZVJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IE5vblJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbU5vblJlY3Vyc2l2ZVJ1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lKSxcbiAgICAgICAgICAgIGRlZmluaXRpb24gPSBub25SZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cblxuICAgICAgZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uKTtcblxuICAgICAgcnVsZXMucHVzaChub25SZWN1cnNpdmVSdWxlKTtcbiAgICB9XG5cbiAgICBydWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBydWxlUmVjdXJzaXZlO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWVzLCBydWxlcykge1xuICBsZXQgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gaXNQYXJ0UnVsZU5hbWVQYXJ0KGZpcnN0UGFydCk7XG5cbiAgaWYgKGZpcnN0UGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbiA9PT0gbnVsbCkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZVBhcnQsIHJ1bGVOYW1lcywgcnVsZXMpO1xuICAgIH1cblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uID0gZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWVQYXJ0LCBydWxlTmFtZXMsIHJ1bGVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWVQYXJ0LCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IGZpbmRSdWxlQnlOYW1lKG5hbWUsIHJ1bGVzKTtcblxuICBpZiAocnVsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJ1bGVSZWN1cnNpdmUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcyk7XG5cbiAgICBpZiAocnVsZVJlY3Vyc2l2ZSkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb247IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWVQYXJ0LCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBmaXJzdFJ1bGVOYW1lID0gZmlyc3QocnVsZU5hbWVzKSxcbiAgICAgICAgcnVsZU5hbWVUb3Btb3N0UnVsZU5hbWUgPSAocnVsZU5hbWUgPT09IGZpcnN0UnVsZU5hbWUpO1xuXG4gIGlmIChydWxlTmFtZVRvcG1vc3RSdWxlTmFtZSkge1xuICAgIGNvbnN0IGxhc3RSdWxlTmFtZSA9IGxhc3QocnVsZU5hbWVzKSxcbiAgICAgICAgICBydWxlTmFtZSA9IGxhc3RSdWxlTmFtZSwgIC8vL1xuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUgPSByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbURlZmluaXRpb25BbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKGRlZmluaXRpb24sIHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lUGFydEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUocnVsZU5hbWVQYXJ0LCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgIHJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuIl19