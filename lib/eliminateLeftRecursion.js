'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var necessary = require('necessary');

var ruleUtilities = require('./utilities/rule'),
    RecursiveDefinition = require('./definition/recursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    DirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/directly'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    findRule = ruleUtilities.findRule;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      replacementDefinitions = [];

  replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules);

  rewriteReplacementDefinitions(replacementDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions, rules) {
  var recursiveDefinition = IndirectlyLeftRecursiveDefinition.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || DirectlyLeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition) || LeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition) || RecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

  if (recursiveDefinition !== null) {
    recursiveDefinition.replace(rules);

    var recursiveDefinitionIndirectlyLeftRecursiveDefinition = recursiveDefinition instanceof IndirectlyLeftRecursiveDefinition;

    if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
      var indirectlyLeftRecursiveDefinition = recursiveDefinition,
          ///
      implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();

      implicitlyLeftRecursiveDefinition.replace(rules);
    }

    var replacementDefinition = recursiveDefinition; ///

    if (replacementDefinition !== null) {
      replacementDefinitions.push(replacementDefinition);
    }
  }

  return recursiveDefinition;
}

function replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  definitions.forEach(function (definition) {
    var definitionRecursiveDefinition = definition instanceof RecursiveDefinition,
        recursiveDefinition = definitionRecursiveDefinition ? definition : ///
    replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions, rules);

    if (recursiveDefinition !== null) {
      var previousRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          previousRecursiveRuleNames = previousRecursiveDefinitions.map(function (previousRecursiveDefinition) {
        return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
      }),
          recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);

        if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = previousRecursiveDefinitions; ///

            replaceDefinitions(_rule, _recursiveDefinitions, replacementDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteReplacementDefinitions(replacementDefinitions, rules) {
  replacementDefinitions.forEach(function (replacementDefinition) {
    return replacementDefinition.rewrite(rules);
  });
}

function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
  var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
      recursiveRuleName = recursiveDefinitionRuleName; ///

  return recursiveRuleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,