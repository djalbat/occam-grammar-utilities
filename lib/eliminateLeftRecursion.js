"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interop_require_default(require("./directedGraph"));
var _createReducedRules = /*#__PURE__*/ _interop_require_default(require("./createReducedRules"));
var _rewriteLeftRecursiveRules = /*#__PURE__*/ _interop_require_default(require("./rewriteLeftRecursiveRules"));
var _createDirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createDirectlyRepeatedRules"));
var _createIndirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createIndirectlyRepeatedRules"));
var _directedGraph1 = require("./utilities/directedGraph");
var _labels = require("./labels");
var _leftRecursive = require("./utilities/leftRecursive");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var filter = _necessary.arrayUtilities.filter, ruleMapFromRules = _occamparsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamparsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamparsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), ruleNamesMap = ruleNamesMapFromRuleMao(ruleMap), cycles = cyclesFromStartRule(startRule, ruleMap, ruleNamesMap);
    (0, _createReducedRules.default)(cycles, ruleMap);
    (0, _createIndirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _createDirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _rewriteLeftRecursiveRules.default)(cycles, ruleMap, ruleNamesMap);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}
function directedGraphFromStartRule(startRule, ruleMap, ruleNamesMap) {
    var startRuleName = startRule.getName(), edges = (0, _directedGraph1.edgesFromStartRule)(startRule, ruleMap, ruleNamesMap), startVertex = startRuleName, directedGraph = _directedGraph.default.fromEdgesAndStartVertex(edges, startVertex);
    return directedGraph;
}
function cyclesFromStartRule(startRule, ruleMap, ruleNamesMap) {
    var directedGraph = directedGraphFromStartRule(startRule, ruleMap, ruleNamesMap), cycles = directedGraph.findCycles();
    filter(cycles, function(cycle) {
        var cycleLeftRecursive = isCycleLeftRecursive(cycle);
        if (cycleLeftRecursive) {
            return true;
        }
    });
    return cycles;
}
function ruleNamesMapFromRuleMao(ruleMap) {
    var ruleNamesMap = {}, ruleNames = Object.keys(ruleMap);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName], leftRecursiveRuleNames = (0, _leftRecursive.leftRecursiveRuleNamesFromRule)(rule, ruleMap), ruleNames = leftRecursiveRuleNames; ///
        ruleNamesMap[ruleName] = ruleNames;
    });
    return ruleNamesMap;
}
function isCycleLeftRecursive(cycle) {
    var cycleLeftRecursive = cycle.everyEdge(function(edge) {
        var label = edge.getLabel(), labelLeftRecursiveLabel = label === _labels.LEFT_RECURSIVE_LABEL, edgeLeftRecursive = labelLeftRecursiveLabel; ///
        if (edgeLeftRecursive) {
            return true;
        }
    });
    return cycleLeftRecursive;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IHJ1bGVzVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IERpcmVjdGVkR3JhcGggZnJvbSBcIi4vZGlyZWN0ZWRHcmFwaFwiO1xuaW1wb3J0IGNyZWF0ZVJlZHVjZWRSdWxlcyBmcm9tIFwiLi9jcmVhdGVSZWR1Y2VkUnVsZXNcIjtcbmltcG9ydCByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzIGZyb20gXCIuL3Jld3JpdGVMZWZ0UmVjdXJzaXZlUnVsZXNcIjtcbmltcG9ydCBjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzXCI7XG5pbXBvcnQgY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXNcIjtcblxuaW1wb3J0IHsgZWRnZXNGcm9tU3RhcnRSdWxlIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2RpcmVjdGVkR3JhcGhcIjtcbmltcG9ydCB7IExFRlRfUkVDVVJTSVZFX0xBQkVMIH0gZnJvbSBcIi4vbGFiZWxzXCI7XG5pbXBvcnQgeyBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVJ1bGUgfSBmcm9tIFwiLi91dGlsaXRpZXMvbGVmdFJlY3Vyc2l2ZVwiO1xuXG5jb25zdCB7IGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBydWxlTmFtZXNNYXAgPSBydWxlTmFtZXNNYXBGcm9tUnVsZU1hbyhydWxlTWFwKSxcbiAgICAgICAgY3ljbGVzID0gY3ljbGVzRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCk7XG5cbiAgY3JlYXRlUmVkdWNlZFJ1bGVzKGN5Y2xlcywgcnVsZU1hcCk7XG5cbiAgY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMoY3ljbGVzLCBydWxlTWFwKTtcblxuICBjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMoY3ljbGVzLCBydWxlTWFwKTtcblxuICByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzKGN5Y2xlcywgcnVsZU1hcCwgcnVsZU5hbWVzTWFwKTtcblxuICBydWxlcyA9IHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RlZEdyYXBoRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCkge1xuICBjb25zdCBzdGFydFJ1bGVOYW1lID0gc3RhcnRSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgZWRnZXMgPSBlZGdlc0Zyb21TdGFydFJ1bGUoc3RhcnRSdWxlLCBydWxlTWFwLCBydWxlTmFtZXNNYXApLFxuICAgICAgICBzdGFydFZlcnRleCA9IHN0YXJ0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgZGlyZWN0ZWRHcmFwaCA9IERpcmVjdGVkR3JhcGguZnJvbUVkZ2VzQW5kU3RhcnRWZXJ0ZXgoZWRnZXMsIHN0YXJ0VmVydGV4KTtcblxuICByZXR1cm4gZGlyZWN0ZWRHcmFwaDtcbn1cblxuZnVuY3Rpb24gY3ljbGVzRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCkge1xuICBjb25zdCBkaXJlY3RlZEdyYXBoID0gZGlyZWN0ZWRHcmFwaEZyb21TdGFydFJ1bGUoc3RhcnRSdWxlLCBydWxlTWFwLCBydWxlTmFtZXNNYXApLFxuICAgICAgICBjeWNsZXMgPSBkaXJlY3RlZEdyYXBoLmZpbmRDeWNsZXMoKTtcblxuICBmaWx0ZXIoY3ljbGVzLCAoY3ljbGUpID0+IHtcbiAgICBjb25zdCBjeWNsZUxlZnRSZWN1cnNpdmUgPSBpc0N5Y2xlTGVmdFJlY3Vyc2l2ZShjeWNsZSk7XG5cbiAgICBpZiAoY3ljbGVMZWZ0UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjeWNsZXM7XG59XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lc01hcEZyb21SdWxlTWFvKHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZU5hbWVzTWFwID0ge30sXG4gICAgICAgIHJ1bGVOYW1lcyA9IE9iamVjdC5rZXlzKHJ1bGVNYXApO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXSxcbiAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21SdWxlKHJ1bGUsIHJ1bGVNYXApLFxuICAgICAgICAgIHJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7IC8vL1xuXG4gICAgcnVsZU5hbWVzTWFwW3J1bGVOYW1lXSA9IHJ1bGVOYW1lcztcbiAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lc01hcDtcbn1cblxuZnVuY3Rpb24gaXNDeWNsZUxlZnRSZWN1cnNpdmUoY3ljbGUpIHtcbiAgY29uc3QgY3ljbGVMZWZ0UmVjdXJzaXZlID0gY3ljbGUuZXZlcnlFZGdlKChlZGdlKSA9PiB7XG4gICAgY29uc3QgbGFiZWwgPSBlZGdlLmdldExhYmVsKCksXG4gICAgICAgICAgbGFiZWxMZWZ0UmVjdXJzaXZlTGFiZWwgPSAobGFiZWwgPT09IExFRlRfUkVDVVJTSVZFX0xBQkVMKSxcbiAgICAgICAgICBlZGdlTGVmdFJlY3Vyc2l2ZSA9IGxhYmVsTGVmdFJlY3Vyc2l2ZUxhYmVsOyAgLy8vXG5cbiAgICBpZiAoZWRnZUxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGN5Y2xlTGVmdFJlY3Vyc2l2ZTtcbn1cbiJdLCJuYW1lcyI6WyJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIiwiZmlsdGVyIiwiYXJyYXlVdGlsaXRpZXMiLCJydWxlTWFwRnJvbVJ1bGVzIiwicnVsZXNVdGlsaXRpZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwicnVsZXMiLCJydWxlTWFwIiwic3RhcnRSdWxlIiwicnVsZU5hbWVzTWFwIiwicnVsZU5hbWVzTWFwRnJvbVJ1bGVNYW8iLCJjeWNsZXMiLCJjeWNsZXNGcm9tU3RhcnRSdWxlIiwiY3JlYXRlUmVkdWNlZFJ1bGVzIiwiY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMiLCJjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMiLCJyZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzIiwiZGlyZWN0ZWRHcmFwaEZyb21TdGFydFJ1bGUiLCJzdGFydFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImVkZ2VzIiwiZWRnZXNGcm9tU3RhcnRSdWxlIiwic3RhcnRWZXJ0ZXgiLCJkaXJlY3RlZEdyYXBoIiwiRGlyZWN0ZWRHcmFwaCIsImZyb21FZGdlc0FuZFN0YXJ0VmVydGV4IiwiZmluZEN5Y2xlcyIsImN5Y2xlIiwiY3ljbGVMZWZ0UmVjdXJzaXZlIiwiaXNDeWNsZUxlZnRSZWN1cnNpdmUiLCJydWxlTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInJ1bGVOYW1lIiwicnVsZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVJ1bGUiLCJldmVyeUVkZ2UiLCJlZGdlIiwibGFiZWwiLCJnZXRMYWJlbCIsImxhYmVsTGVmdFJlY3Vyc2l2ZUxhYmVsIiwiTEVGVF9SRUNVUlNJVkVfTEFCRUwiLCJlZGdlTGVmdFJlY3Vyc2l2ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBa0JBOzs7ZUFBd0JBOzs7eUJBaEJPOzRCQUNBO29FQUVMO3lFQUNLO2dGQUNPO2tGQUNFO29GQUNFOzhCQUVQO3NCQUNFOzZCQUNVOzs7Ozs7QUFFL0MsSUFBTSxBQUFFQyxTQUFXQyx5QkFBYyxDQUF6QkQsUUFDQUUsbUJBQXVFQyw0QkFBYyxDQUFyRkQsa0JBQWtCRSxxQkFBcURELDRCQUFjLENBQW5FQyxvQkFBb0JDLCtCQUFpQ0YsNEJBQWMsQ0FBL0NFO0FBRS9CLFNBQVNOLHVCQUF1Qk8sS0FBSztJQUNsRCxJQUFNQyxVQUFVTCxpQkFBaUJJLFFBQzNCRSxZQUFZSixtQkFBbUJFLFFBQy9CRyxlQUFlQyx3QkFBd0JILFVBQ3ZDSSxTQUFTQyxvQkFBb0JKLFdBQVdELFNBQVNFO0lBRXZESSxJQUFBQSwyQkFBa0IsRUFBQ0YsUUFBUUo7SUFFM0JPLElBQUFBLHNDQUE2QixFQUFDSCxRQUFRSjtJQUV0Q1EsSUFBQUEsb0NBQTJCLEVBQUNKLFFBQVFKO0lBRXBDUyxJQUFBQSxrQ0FBeUIsRUFBQ0wsUUFBUUosU0FBU0U7SUFFM0NILFFBQVFELDZCQUE2QkcsV0FBV0QsVUFBVSxHQUFHO0lBRTdELE9BQU9EO0FBQ1Q7QUFFQSxTQUFTVywyQkFBMkJULFNBQVMsRUFBRUQsT0FBTyxFQUFFRSxZQUFZO0lBQ2xFLElBQU1TLGdCQUFnQlYsVUFBVVcsT0FBTyxJQUNqQ0MsUUFBUUMsSUFBQUEsa0NBQWtCLEVBQUNiLFdBQVdELFNBQVNFLGVBQy9DYSxjQUFjSixlQUNkSyxnQkFBZ0JDLHNCQUFhLENBQUNDLHVCQUF1QixDQUFDTCxPQUFPRTtJQUVuRSxPQUFPQztBQUNUO0FBRUEsU0FBU1gsb0JBQW9CSixTQUFTLEVBQUVELE9BQU8sRUFBRUUsWUFBWTtJQUMzRCxJQUFNYyxnQkFBZ0JOLDJCQUEyQlQsV0FBV0QsU0FBU0UsZUFDL0RFLFNBQVNZLGNBQWNHLFVBQVU7SUFFdkMxQixPQUFPVyxRQUFRLFNBQUNnQjtRQUNkLElBQU1DLHFCQUFxQkMscUJBQXFCRjtRQUVoRCxJQUFJQyxvQkFBb0I7WUFDdEIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPakI7QUFDVDtBQUVBLFNBQVNELHdCQUF3QkgsT0FBTztJQUN0QyxJQUFNRSxlQUFlLENBQUMsR0FDaEJxQixZQUFZQyxPQUFPQyxJQUFJLENBQUN6QjtJQUU5QnVCLFVBQVVHLE9BQU8sQ0FBQyxTQUFDQztRQUNqQixJQUFNQyxPQUFPNUIsT0FBTyxDQUFDMkIsU0FBUyxFQUN4QkUseUJBQXlCQyxJQUFBQSw2Q0FBOEIsRUFBQ0YsTUFBTTVCLFVBQzlEdUIsWUFBWU0sd0JBQXdCLEdBQUc7UUFFN0MzQixZQUFZLENBQUN5QixTQUFTLEdBQUdKO0lBQzNCO0lBRUEsT0FBT3JCO0FBQ1Q7QUFFQSxTQUFTb0IscUJBQXFCRixLQUFLO0lBQ2pDLElBQU1DLHFCQUFxQkQsTUFBTVcsU0FBUyxDQUFDLFNBQUNDO1FBQzFDLElBQU1DLFFBQVFELEtBQUtFLFFBQVEsSUFDckJDLDBCQUEyQkYsVUFBVUcsNEJBQW9CLEVBQ3pEQyxvQkFBb0JGLHlCQUEwQixHQUFHO1FBRXZELElBQUlFLG1CQUFtQjtZQUNyQixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9oQjtBQUNUIn0=