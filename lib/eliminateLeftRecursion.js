'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonTerminalDefinition = require('./definition/nonTerminal'),
    NonRecursiveDefinition = require('./definition/nonRecursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly'),
    ImmediatelyLeftRecursiveDefinition = require('./definition/leftRecursive/immediately');

var addToArrayMap = objectUtilities.addToArrayMap,
    findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    ruleNamesFromDefinition = definitionUtilities.ruleNamesFromDefinition,
    isDefinitionRecursiveDefinition = definitionUtilities.isDefinitionRecursiveDefinition,
    isDefinitionLeftRecursiveDefinition = definitionUtilities.isDefinitionLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  createNonRecursiveRules(immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitions, rules);

  createRightRecursiveRules(immediatelyLeftRecursiveDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

      if (recursiveDefinitionLeftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition,
            ///
        leftRecursiveDefinitionStrictlyLeftRecursive = leftRecursiveDefinition.isStrictlyLeftRecursive();

        if (leftRecursiveDefinitionStrictlyLeftRecursive) {
          var strictlyLeftRecursiveDefinition = leftRecursiveDefinition,
              ///
          immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

          immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

          return true;
        }

        var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName();

        var cyclicRecursiveDefinition = null;

        recursiveDefinitions.some(function (recursiveDefinition) {
          var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
              recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === leftRecursiveRuleName;

          if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
            cyclicRecursiveDefinition = recursiveDefinition; ///

            return true;
          }
        });

        if (cyclicRecursiveDefinition !== null) {
          var index = recursiveDefinitions.indexOf(cyclicRecursiveDefinition),
              cyclicRecursiveDefinitions = recursiveDefinitions.slice(index),
              cyclicRecursiveDefinitionsLeftRecursive = cyclicRecursiveDefinitions.every(function (cyclicRecursiveDefinition) {
            var cyclicRecursiveDefinitionLeftRecursive = cyclicRecursiveDefinition.isLeftRecursive();

            if (cyclicRecursiveDefinitionLeftRecursive) {
              return true;
            }
          });

          if (cyclicRecursiveDefinitionsLeftRecursive) {
            var indirectlyLeftRecursiveDefinition = cyclicRecursiveDefinition,
                ///
            _immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

            _immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

            immediatelyLeftRecursiveDefinitions.push(_immediatelyLeftRecursiveDefinition);

            return true;
          }

          return;
        }
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var ruleNames = ruleNamesFromDefinition(definition);

      ruleNames.forEach(function (ruleName) {
        var name = ruleName,
            ///
        rule = findRuleByName(name, rules);

        if (rule !== null) {
          removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
        }
      });
    } else {
      return true;
    }
  });
}

function createRightRecursiveRules(immediatelyLeftRecursiveDefinitions, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitions);

  ruleNames.forEach(function (ruleName) {
    var immediatelyLeftRecursiveDefinitions = immediatelyLeftRecursiveDefinitions[ruleName],
        rightRecursiveDefinitions = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
      var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

      return rightRecursiveDefinition;
    }),
        rightRecursiveRule = RightRecursiveRule.fromRuleNameAndRightRecursiveDefinitions(ruleName, rightRecursiveDefinitions);

    rules.push(rightRecursiveRule);
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitions, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitions);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName),
        nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(recursiveDefinition);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(immediatelyLeftRecursiveDefinitions, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitions);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    rules.push(nonRecursiveRule);

    rule.clearDefinitions();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,