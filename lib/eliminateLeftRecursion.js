'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition'),
    NonRecursiveRuleNameDefinition = require('./definition/nonRecursiveRuleName'),
    NonRecursiveAndRightRecursiveRuleNamesDefinition = require('./definition/nonRecursiveAndRightRecursiveRuleNames');

var findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    areElementsEqual = arrayUtilities.areElementsEqual,
    addToArrayMap = objectUtilities.addToArrayMap,
    forEachNameValueWithRemove = objectUtilities.forEachNameValueWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitionsMap = {};

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.join(' ,');

    throw new Error('Left recursion cannot be eliminated from the ' + ruleNamesString + ' rule or rules.');
  }
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

      if (recursiveDefinitionStrictlyLeftRecursive) {
        var strictlyLeftRecursiveDefinition = recursiveDefinition,
            ///
        immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

        addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

        return true;
      }

      var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

      if (recursiveDefinitionLeftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition,
            ///
        indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

        if (indirectlyLeftRecursiveDefinition !== null) {
          var _immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

          _immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

          addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, _immediatelyLeftRecursiveDefinition);

          return true;
        }
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var name = recursiveRuleName,
              ///
          _rule = findRuleByName(name, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  forEachNameValueWithRemove(immediatelyLeftRecursiveDefinitionsMap, function (ruleName, immediatelyLeftRecursiveDefinitions) {
    var remove = false;

    remove = rewriteStrictlyLeftRecursiveRule(ruleName, immediatelyLeftRecursiveDefinitions, rules);

    return remove;
  });
}

function rewriteStrictlyLeftRecursiveRule(ruleName, immediatelyLeftRecursiveDefinitions, rules) {
  var remove = false;

  var ruleStrictlyLeftRecursive = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();
  });

  if (ruleStrictlyLeftRecursive) {
    var ruleRewritable = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
      return immediatelyLeftRecursiveDefinition.isRewritable();
    });

    if (ruleRewritable) {
      var lookAheads = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.isLookAhead();
      }),
          lookAheadsEqual = areElementsEqual(lookAheads);

      if (lookAheadsEqual) {
        var name = ruleName,
            ///
        rule = findRuleByName(name, rules),
            nonRecursiveRule = NonRecursiveRule.fromRule(rule),
            rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);

        rules.push(nonRecursiveRule);

        rules.push(rightRecursiveRule);

        var firstLookAhead = first(lookAheads),
            lookAhead = firstLookAhead,
            ///
        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromRuleName(ruleName),
            nonRecursiveAndRightRecursiveRuleNamesDefinition = NonRecursiveAndRightRecursiveRuleNamesDefinition.fromRuleNameAndLookAhead(ruleName, lookAhead),
            definitions = [nonRecursiveAndRightRecursiveRuleNamesDefinition, nonRecursiveRuleNameDefinition];

        rule.setDefinitions(definitions);

        remove = true;
      }
    }
  }

  return remove;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,