"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _retrieveLeftRecursiveDefinitions = /*#__PURE__*/ _interopRequireDefault(require("./retrieveLeftRecursiveDefinitions"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), rule = startRule, recursiveDefinitions = [], leftRecursiveDefinitions = [];
    (0, _retrieveLeftRecursiveDefinitions.default)(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    (0, _eliminateIndirectLeftRecursion.default)(leftRecursiveDefinitions, ruleMap);
    (0, _eliminateDirectLeftRecursion.default)(leftRecursiveDefinitions, ruleMap);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5pbXBvcnQgcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgZnJvbSBcIi4vcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMsIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZSA9IHN0YXJ0UnVsZSwgLy8vXG4gICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25zID0gW10sXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IFtdO1xuXG4gIHJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIHJlY3Vyc2l2ZURlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKTtcblxuICBydWxlcyA9IHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlTWFwRnJvbVJ1bGVzIiwicnVsZXNVdGlsaXRpZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwicnVsZXMiLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwicnVsZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBVWIsU0FnQkM7OztlQWhCdUJBLHNCQUFzQjs7OzRCQVJmLGVBQWU7aUZBRUwsZ0NBQWdDO21GQUM5QixrQ0FBa0M7cUZBQ2hDLG9DQUFvQzs7Ozs7O0FBRWpGLElBQVFDLGdCQUFnQixHQUF1REMsYUFBYyxlQUFBLENBQXJGRCxnQkFBZ0IsRUFBRUUsa0JBQWtCLEdBQW1DRCxhQUFjLGVBQUEsQ0FBbkVDLGtCQUFrQixFQUFFQyw0QkFBNEIsR0FBS0YsYUFBYyxlQUFBLENBQS9DRSw0QkFBNEIsQUFBb0I7QUFFL0UsU0FBU0osc0JBQXNCLENBQUNLLEtBQUssRUFBRTtJQUNwRCxJQUFNQyxTQUFTLEdBQUdILGtCQUFrQixDQUFDRSxLQUFLLENBQUMsRUFDckNFLE9BQU8sR0FBR04sZ0JBQWdCLENBQUNJLEtBQUssQ0FBQyxFQUNqQ0csSUFBSSxHQUFHRixTQUFTLEVBQ2hCRyxvQkFBb0IsR0FBRyxFQUFFLEVBQ3pCQyx3QkFBd0IsR0FBRyxFQUFFLEFBQUM7SUFFcENDLElBQUFBLGlDQUFnQyxRQUFBLEVBQUNILElBQUksRUFBRUMsb0JBQW9CLEVBQUVDLHdCQUF3QixFQUFFSCxPQUFPLENBQUMsQ0FBQztJQUVoR0ssSUFBQUEsK0JBQThCLFFBQUEsRUFBQ0Ysd0JBQXdCLEVBQUVILE9BQU8sQ0FBQyxDQUFDO0lBRWxFTSxJQUFBQSw2QkFBNEIsUUFBQSxFQUFDSCx3QkFBd0IsRUFBRUgsT0FBTyxDQUFDLENBQUM7SUFFaEVGLEtBQUssR0FBR0QsNEJBQTRCLENBQUNFLFNBQVMsRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHO0lBRTdELE9BQU9GLEtBQUssQ0FBQztBQUNmLENBQUMifQ==