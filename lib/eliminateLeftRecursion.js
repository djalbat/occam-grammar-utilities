"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interop_require_default(require("./directedGraph"));
var _createReducedRules = /*#__PURE__*/ _interop_require_default(require("./createReducedRules"));
var _rewriteLeftRecursiveRules = /*#__PURE__*/ _interop_require_default(require("./rewriteLeftRecursiveRules"));
var _createDirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createDirectlyRepeatedRules"));
var _createIndirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createIndirectlyRepeatedRules"));
var _directedGraph1 = require("./utilities/directedGraph");
var _labels = require("./labels");
var _leftRecursive = require("./utilities/leftRecursive");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var filter = _necessary.arrayUtilities.filter, ruleMapFromRules = _occamparsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamparsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamparsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), ruleNamesMap = ruleNamesMapFromRuleMao(ruleMap), cycles = cyclesFromStartRule(startRule, ruleMap, ruleNamesMap);
    (0, _createReducedRules.default)(cycles, ruleMap);
    (0, _createIndirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _createDirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _rewriteLeftRecursiveRules.default)(cycles, ruleMap, ruleNamesMap);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}
function directedGraphFromStartRule(startRule, ruleMap, ruleNamesMap) {
    var startRuleName = startRule.getName(), edges = (0, _directedGraph1.edgesFromStartRule)(startRule, ruleMap, ruleNamesMap), startVertex = startRuleName, directedGraph = _directedGraph.default.fromEdgesAndStartVertex(edges, startVertex);
    return directedGraph;
}
function ruleNamesMapFromRuleMao(ruleMap) {
    var ruleNamesMap = {}, ruleNames = Object.keys(ruleMap);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName], leftRecursiveRuleNames = (0, _leftRecursive.leftRecursiveRuleNamesFromRule)(rule, ruleMap), ruleNames = leftRecursiveRuleNames; ///
        ruleNamesMap[ruleName] = ruleNames;
    });
    return ruleNamesMap;
}
function isCycleLeftRecursive(cycle) {
    var cycleLeftRecursive = cycle.everyEdge(function(edge) {
        var label = edge.getLabel(), labelLeftRecursiveLabel = label === _labels.LEFT_RECURSIVE_LABEL, edgeLeftRecursive = labelLeftRecursiveLabel; ///
        if (edgeLeftRecursive) {
            return true;
        }
    });
    return cycleLeftRecursive;
}
function cyclesFromStartRule(startRule, ruleMap, ruleNamesMap) {
    var directedGraph = directedGraphFromStartRule(startRule, ruleMap, ruleNamesMap), cycles = directedGraph.findCycles();
    filter(cycles, function(cycle) {
        var cycleLeftRecursive = isCycleLeftRecursive(cycle);
        if (cycleLeftRecursive) {
            return true;
        }
    });
    return cycles;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IHJ1bGVzVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IERpcmVjdGVkR3JhcGggZnJvbSBcIi4vZGlyZWN0ZWRHcmFwaFwiO1xuaW1wb3J0IGNyZWF0ZVJlZHVjZWRSdWxlcyBmcm9tIFwiLi9jcmVhdGVSZWR1Y2VkUnVsZXNcIjtcbmltcG9ydCByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzIGZyb20gXCIuL3Jld3JpdGVMZWZ0UmVjdXJzaXZlUnVsZXNcIjtcbmltcG9ydCBjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzXCI7XG5pbXBvcnQgY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXNcIjtcblxuaW1wb3J0IHsgZWRnZXNGcm9tU3RhcnRSdWxlIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2RpcmVjdGVkR3JhcGhcIjtcbmltcG9ydCB7IExFRlRfUkVDVVJTSVZFX0xBQkVMIH0gZnJvbSBcIi4vbGFiZWxzXCI7XG5pbXBvcnQgeyBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVJ1bGUgfSBmcm9tIFwiLi91dGlsaXRpZXMvbGVmdFJlY3Vyc2l2ZVwiO1xuXG5jb25zdCB7IGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBydWxlTmFtZXNNYXAgPSBydWxlTmFtZXNNYXBGcm9tUnVsZU1hbyhydWxlTWFwKSxcbiAgICAgICAgY3ljbGVzID0gY3ljbGVzRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCk7XG5cbiAgY3JlYXRlUmVkdWNlZFJ1bGVzKGN5Y2xlcywgcnVsZU1hcCk7XG5cbiAgY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMoY3ljbGVzLCBydWxlTWFwKTtcblxuICBjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMoY3ljbGVzLCBydWxlTWFwKTtcblxuICByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzKGN5Y2xlcywgcnVsZU1hcCwgcnVsZU5hbWVzTWFwKTtcblxuICBydWxlcyA9IHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RlZEdyYXBoRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCkge1xuICBjb25zdCBzdGFydFJ1bGVOYW1lID0gc3RhcnRSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgZWRnZXMgPSBlZGdlc0Zyb21TdGFydFJ1bGUoc3RhcnRSdWxlLCBydWxlTWFwLCBydWxlTmFtZXNNYXApLFxuICAgICAgICBzdGFydFZlcnRleCA9IHN0YXJ0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgZGlyZWN0ZWRHcmFwaCA9IERpcmVjdGVkR3JhcGguZnJvbUVkZ2VzQW5kU3RhcnRWZXJ0ZXgoZWRnZXMsIHN0YXJ0VmVydGV4KTtcblxuICByZXR1cm4gZGlyZWN0ZWRHcmFwaDtcbn1cblxuZnVuY3Rpb24gcnVsZU5hbWVzTWFwRnJvbVJ1bGVNYW8ocnVsZU1hcCkge1xuICBjb25zdCBydWxlTmFtZXNNYXAgPSB7fSxcbiAgICAgICAgcnVsZU5hbWVzID0gT2JqZWN0LmtleXMocnVsZU1hcCk7XG5cbiAgcnVsZU5hbWVzLmZvckVhY2goKHJ1bGVOYW1lKSA9PiB7XG4gICAgY29uc3QgcnVsZSA9IHJ1bGVNYXBbcnVsZU5hbWVdLFxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVJ1bGUocnVsZSwgcnVsZU1hcCksXG4gICAgICAgICAgcnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lczsgLy8vXG5cbiAgICBydWxlTmFtZXNNYXBbcnVsZU5hbWVdID0gcnVsZU5hbWVzO1xuICB9KTtcblxuICByZXR1cm4gcnVsZU5hbWVzTWFwO1xufVxuXG5mdW5jdGlvbiBpc0N5Y2xlTGVmdFJlY3Vyc2l2ZShjeWNsZSkge1xuICBjb25zdCBjeWNsZUxlZnRSZWN1cnNpdmUgPSBjeWNsZS5ldmVyeUVkZ2UoKGVkZ2UpID0+IHtcbiAgICBjb25zdCBsYWJlbCA9IGVkZ2UuZ2V0TGFiZWwoKSxcbiAgICAgICAgICBsYWJlbExlZnRSZWN1cnNpdmVMYWJlbCA9IChsYWJlbCA9PT0gTEVGVF9SRUNVUlNJVkVfTEFCRUwpLFxuICAgICAgICAgIGVkZ2VMZWZ0UmVjdXJzaXZlID0gbGFiZWxMZWZ0UmVjdXJzaXZlTGFiZWw7ICAvLy9cblxuICAgIGlmIChlZGdlTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY3ljbGVMZWZ0UmVjdXJzaXZlO1xufVxuXG5mdW5jdGlvbiBjeWNsZXNGcm9tU3RhcnRSdWxlKHN0YXJ0UnVsZSwgcnVsZU1hcCwgcnVsZU5hbWVzTWFwKSB7XG4gIGNvbnN0IGRpcmVjdGVkR3JhcGggPSBkaXJlY3RlZEdyYXBoRnJvbVN0YXJ0UnVsZShzdGFydFJ1bGUsIHJ1bGVNYXAsIHJ1bGVOYW1lc01hcCksXG4gICAgICAgIGN5Y2xlcyA9IGRpcmVjdGVkR3JhcGguZmluZEN5Y2xlcygpO1xuXG4gIGZpbHRlcihjeWNsZXMsIChjeWNsZSkgPT4ge1xuICAgIGNvbnN0IGN5Y2xlTGVmdFJlY3Vyc2l2ZSA9IGlzQ3ljbGVMZWZ0UmVjdXJzaXZlKGN5Y2xlKTtcblxuICAgIGlmIChjeWNsZUxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGN5Y2xlcztcbn1cblxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJmaWx0ZXIiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInJ1bGVNYXAiLCJzdGFydFJ1bGUiLCJydWxlTmFtZXNNYXAiLCJydWxlTmFtZXNNYXBGcm9tUnVsZU1hbyIsImN5Y2xlcyIsImN5Y2xlc0Zyb21TdGFydFJ1bGUiLCJjcmVhdGVSZWR1Y2VkUnVsZXMiLCJjcmVhdGVJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlcyIsImNyZWF0ZURpcmVjdGx5UmVwZWF0ZWRSdWxlcyIsInJld3JpdGVMZWZ0UmVjdXJzaXZlUnVsZXMiLCJkaXJlY3RlZEdyYXBoRnJvbVN0YXJ0UnVsZSIsInN0YXJ0UnVsZU5hbWUiLCJnZXROYW1lIiwiZWRnZXMiLCJlZGdlc0Zyb21TdGFydFJ1bGUiLCJzdGFydFZlcnRleCIsImRpcmVjdGVkR3JhcGgiLCJEaXJlY3RlZEdyYXBoIiwiZnJvbUVkZ2VzQW5kU3RhcnRWZXJ0ZXgiLCJydWxlTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInJ1bGVOYW1lIiwicnVsZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVJ1bGUiLCJpc0N5Y2xlTGVmdFJlY3Vyc2l2ZSIsImN5Y2xlIiwiY3ljbGVMZWZ0UmVjdXJzaXZlIiwiZXZlcnlFZGdlIiwiZWRnZSIsImxhYmVsIiwiZ2V0TGFiZWwiLCJsYWJlbExlZnRSZWN1cnNpdmVMYWJlbCIsIkxFRlRfUkVDVVJTSVZFX0xBQkVMIiwiZWRnZUxlZnRSZWN1cnNpdmUiLCJmaW5kQ3ljbGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFrQkE7OztlQUF3QkE7Ozt5QkFoQk87NEJBQ0E7b0VBRUw7eUVBQ0s7Z0ZBQ087a0ZBQ0U7b0ZBQ0U7OEJBRVA7c0JBQ0U7NkJBQ1U7Ozs7OztBQUUvQyxJQUFNLEFBQUVDLFNBQVdDLHlCQUFjLENBQXpCRCxRQUNBRSxtQkFBdUVDLDRCQUFjLENBQXJGRCxrQkFBa0JFLHFCQUFxREQsNEJBQWMsQ0FBbkVDLG9CQUFvQkMsK0JBQWlDRiw0QkFBYyxDQUEvQ0U7QUFFL0IsU0FBU04sdUJBQXVCTyxLQUFLO0lBQ2xELElBQU1DLFVBQVVMLGlCQUFpQkksUUFDM0JFLFlBQVlKLG1CQUFtQkUsUUFDL0JHLGVBQWVDLHdCQUF3QkgsVUFDdkNJLFNBQVNDLG9CQUFvQkosV0FBV0QsU0FBU0U7SUFFdkRJLElBQUFBLDJCQUFrQixFQUFDRixRQUFRSjtJQUUzQk8sSUFBQUEsc0NBQTZCLEVBQUNILFFBQVFKO0lBRXRDUSxJQUFBQSxvQ0FBMkIsRUFBQ0osUUFBUUo7SUFFcENTLElBQUFBLGtDQUF5QixFQUFDTCxRQUFRSixTQUFTRTtJQUUzQ0gsUUFBUUQsNkJBQTZCRyxXQUFXRCxVQUFVLEdBQUc7SUFFN0QsT0FBT0Q7QUFDVDtBQUVBLFNBQVNXLDJCQUEyQlQsU0FBUyxFQUFFRCxPQUFPLEVBQUVFLFlBQVk7SUFDbEUsSUFBTVMsZ0JBQWdCVixVQUFVVyxPQUFPLElBQ2pDQyxRQUFRQyxJQUFBQSxrQ0FBa0IsRUFBQ2IsV0FBV0QsU0FBU0UsZUFDL0NhLGNBQWNKLGVBQ2RLLGdCQUFnQkMsc0JBQWEsQ0FBQ0MsdUJBQXVCLENBQUNMLE9BQU9FO0lBRW5FLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTYix3QkFBd0JILE9BQU87SUFDdEMsSUFBTUUsZUFBZSxDQUFDLEdBQ2hCaUIsWUFBWUMsT0FBT0MsSUFBSSxDQUFDckI7SUFFOUJtQixVQUFVRyxPQUFPLENBQUMsU0FBQ0M7UUFDakIsSUFBTUMsT0FBT3hCLE9BQU8sQ0FBQ3VCLFNBQVMsRUFDeEJFLHlCQUF5QkMsSUFBQUEsNkNBQThCLEVBQUNGLE1BQU14QixVQUM5RG1CLFlBQVlNLHdCQUF3QixHQUFHO1FBRTdDdkIsWUFBWSxDQUFDcUIsU0FBUyxHQUFHSjtJQUMzQjtJQUVBLE9BQU9qQjtBQUNUO0FBRUEsU0FBU3lCLHFCQUFxQkMsS0FBSztJQUNqQyxJQUFNQyxxQkFBcUJELE1BQU1FLFNBQVMsQ0FBQyxTQUFDQztRQUMxQyxJQUFNQyxRQUFRRCxLQUFLRSxRQUFRLElBQ3JCQywwQkFBMkJGLFVBQVVHLDRCQUFvQixFQUN6REMsb0JBQW9CRix5QkFBMEIsR0FBRztRQUV2RCxJQUFJRSxtQkFBbUI7WUFDckIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPUDtBQUNUO0FBRUEsU0FBU3hCLG9CQUFvQkosU0FBUyxFQUFFRCxPQUFPLEVBQUVFLFlBQVk7SUFDM0QsSUFBTWMsZ0JBQWdCTiwyQkFBMkJULFdBQVdELFNBQVNFLGVBQy9ERSxTQUFTWSxjQUFjcUIsVUFBVTtJQUV2QzVDLE9BQU9XLFFBQVEsU0FBQ3dCO1FBQ2QsSUFBTUMscUJBQXFCRixxQkFBcUJDO1FBRWhELElBQUlDLG9CQUFvQjtZQUN0QixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU96QjtBQUNUIn0=