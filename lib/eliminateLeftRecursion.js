"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _parts = require("./utilities/parts");
var _class = require("./utilities/class");
var _rule = require("./utilities/rule");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, rewrittenRules = [], recursiveDefinitions = [], leftRecursiveDefinitions = [];
    retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap);
    // eliminateDirectLeftRecursion(rewrittenRules, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first;
function eliminateDirectLeftRecursion(rewrittenRules, ruleMap) {
    rewrittenRules.forEach(function(rewrittenRule) {
        return rewrittenRule.rewrite(ruleMap);
    });
}
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), indirectlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap), implicitlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, ruleMap), indirectlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(indirectlyLeftRecursiveRule), implicitlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(implicitlyLeftRecursiveRule);
        if (indirectlyLeftRecursiveRuleDirectlyLeftRecursive && implicitlyLeftRecursiveRuleDirectlyLeftRecursive) {
            var indirectlyLeftRecursiveDefinitionString = indirectlyLeftRecursiveDefinition.asString(), implicitlyLeftRecursiveDefinitionString = implicitlyLeftRecursiveDefinition.asString();
            throw new Error("The rules containing the '".concat(indirectlyLeftRecursiveDefinitionString, "' indirectly left recursive and ").concat(implicitlyLeftRecursiveDefinitionString, " implicitly left recursive definitions are both additionally directly recursive and therefore cannot be rewritten."));
        }
        var directlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? indirectlyLeftRecursiveRule : implicitlyLeftRecursiveRule, nonDirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? implicitlyLeftRecursiveRule : indirectlyLeftRecursiveRule; ///
        reduceRule(nonDirectlyLeftRecursiveRule, ruleMap);
        var rule = directlyLeftRecursiveRule, ruleName = nonDirectlyLeftRecursiveRule.getName(), definitions = nonDirectlyLeftRecursiveRule.getDefinitions(), leftRecursiveRuleName = ruleName, _$leftRecursiveDefinitions = leftRecursiveDefinitionsFromRuleAndLeftRecursiveRuleName(rule, leftRecursiveRuleName);
        _$leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
            var _directlyLeftRecursiveRule;
            var rewrittenDefinitions = rewrittenDefinitionsFromLeftRecursiveDefinitionAndDefinitions(leftRecursiveDefinition, definitions), replacedDefinition = leftRecursiveDefinition, replacementDefinitions = rewrittenDefinitions; ///
            (_directlyLeftRecursiveRule = directlyLeftRecursiveRule).replaceDefinition.apply(_directlyLeftRecursiveRule, [
                replacedDefinition
            ].concat(_toConsumableArray(replacementDefinitions)));
        });
        mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule);
        reduceRule(directlyLeftRecursiveRule, ruleMap);
    });
}
function reduceRule(rule, ruleMap) {
    var reducedRule = _reduced.default.fromRule(rule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
}
function retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var recursiveDefinition;
    var ruleName = rule.getName(), definitionRecursiveDefinition = (0, _class).isInstanceOf(definition, _recursive.default);
    if (definitionRecursiveDefinition) {
        recursiveDefinition = definition; ///
    } else {
        var leftRecursiveDefinition = _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _left.default.fromRuleNameAndDefinition(ruleName, definition);
        if (leftRecursiveDefinition !== null) {
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
            recursiveDefinition = leftRecursiveDefinition; ///
        } else {
            recursiveDefinition = _recursive.default.fromRuleNameAndDefinition(ruleName, definition);
        }
        if (recursiveDefinition !== null) {
            var replacedDefinition = definition, replacementDefinition = recursiveDefinition; ///
            rule.replaceDefinition(replacedDefinition, replacementDefinition);
            var recursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(recursiveDefinition, _indirectly.default);
            if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                var indirectlyLeftRecursiveDefinition = recursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), leftRecursiveDefinition1 = implicitlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), ruleName1 = implicitlyLeftRecursiveDefinition.getRuleName(), replacedDefinition1 = leftRecursiveDefinition1, replacementDefinition1 = implicitlyLeftRecursiveDefinition; ///
                rule = ruleMap[ruleName1];
                rule.replaceDefinition(replacedDefinition1, replacementDefinition1);
            }
        }
    }
    return recursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        var recursiveDefinition = retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                var previousRecursiveDefinitionRuleName = previousRecursiveDefinition.getRuleName(), previousRecursiveRuleName = previousRecursiveDefinitionRuleName; ///
                return previousRecursiveRuleName;
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var _$recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, _$recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}
function mergeDirectlyLeftRecursiveDefinitions(rule) {}
function leftRecursiveDefinitionsFromRuleAndLeftRecursiveRuleName(rule, leftRecursiveRuleName) {
    var definitions = rule.getDefinitions(), leftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _left.default);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames);
            if (firstLeftRecursiveRuleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return leftRecursiveDefinitions;
}
function rewrittenDefinitionFromLeftRecursiveDefinitionAndDefinition(leftRecursiveDefinition, definition, Definition) {
    var definitionParts = definition.getParts(), leftRecursiveDefinitionParts = leftRecursiveDefinition.getParts();
    definitionParts = (0, _parts).cloneParts(definitionParts); ///
    leftRecursiveDefinitionParts = tail((0, _parts).cloneParts(leftRecursiveDefinitionParts)); ///
    var parts = _toConsumableArray(definitionParts).concat(_toConsumableArray(leftRecursiveDefinitionParts));
    definition = new Definition(parts); ///
    var rewrittenDefinition = definition; ///
    return rewrittenDefinition;
}
function rewrittenDefinitionsFromLeftRecursiveDefinitionAndDefinitions(leftRecursiveDefinition, definitions) {
    var rewrittenDefinitions = definitions.map(function(definition, index) {
        var Definition = index === 0 ? _directly.default : _left.default, rewrittenDefinition = rewrittenDefinitionFromLeftRecursiveDefinitionAndDefinition(leftRecursiveDefinition, definition, Definition);
        return rewrittenDefinition;
    });
    return rewrittenDefinitions;
}

//# sourceMappingURL=data:application/json;base64,