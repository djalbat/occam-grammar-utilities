'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ReducedRule = require('./rule/reduced'),
    RepeatedRule = require('./rule/repeated'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    ReducedRuleNameDefinition = require('./definition/reducedRuleName'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    addInFrontOfLast = arrayUtilities.addInFrontOfLast,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionNonStrictlyLeftRecursive = recursiveDefinition.isNonStrictlyLeftRecursive();

  if (recursiveDefinitionNonStrictlyLeftRecursive) {
    var nonStrictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    leftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var immediatelyLeftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) || rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules);

    var reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var _definitions = void 0;

      _definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, _definitions);

      rules.push(reducedRule);

      var reducedRuleNameDefinition = ReducedRuleNameDefinition.fromReducedRuleName(reducedRuleName);

      _definitions = [reducedRuleNameDefinition];

      rule.setDefinitions(_definitions);
    }

    var rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        definitions = rule.getDefinitions(),
        definition = rewrittenDefinition; ///

    addInFrontOfLast(definitions, definition);

    var repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

    var repeatedRule = findRule(repeatedRuleName, rules);

    if (repeatedRule === null) {
      repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

      rules.push(repeatedRule);
    }

    var repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    repeatedRule.addRepeatedDefinition(repeatedDefinition);

    return true;
  }
}

function rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules) {
  var nonStrictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isNonStrictlyLeftRecursive();

  if (nonStrictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var definitions = void 0;

      var rule = findRule(ruleName, rules);

      definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

      rules.push(reducedRule);

      var lookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          leftRecursiveRuleName = ruleName,
          ///
      reducedRuleNameDefinition = ReducedRuleNameDefinition.fromRuleName(ruleName),
          reducedAndRepeatedRuleNamesDefinition = ReducedAndRepeatedRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);

      definitions = [reducedAndRepeatedRuleNamesDefinition, reducedRuleNameDefinition];

      rule.setDefinitions(definitions);

      return true;
    }
  }

  /*
  let rule,
      definitions,
      reducedRule,
      reducedRuleNameDefinition;
   rule = findRule(ruleName, rules);
   const immediatelyLeftRecursiveRule = rule;  ///
   reducedRule = ReducedRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);
   const repeatedRule = RepeatedRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);
   rules.push(reducedRule);
   rules.push(repeatedRule);
   const firstLookAhead = first(lookAheads),
        firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
        lookAhead = firstLookAhead, ///
        leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
   reducedRuleNameDefinition = ReducedRuleNameDefinition.fromRuleName(ruleName);
   const reducedAndRepeatedRuleNamesDefinition = ReducedAndRepeatedRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);
   definitions = [
    reducedAndRepeatedRuleNamesDefinition,
    reducedRuleNameDefinition
  ];
   immediatelyLeftRecursiveRule.setDefinitions(definitions);
   const indirectlyLeftRecursiveRuleName = leftRecursiveRuleName, ///
        indirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleName(indirectlyLeftRecursiveRuleName, rules),
        firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
        immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition, ///
        indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition();
   reducedRule = ReducedRule.fromIndirectlyLeftRecursiveRuleAndIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition);
   const ruleNameDefinition = RuleNameDefinition.fromRuleName(ruleName);
   reducedRuleNameDefinition = ReducedRuleNameDefinition.fromLeftRecursiveRuleName(leftRecursiveRuleName);
   definitions = [
    ruleNameDefinition,
    reducedRuleNameDefinition
  ];
   indirectlyLeftRecursiveRule.setDefinitions(definitions);
   rules.push(reducedRule);
  */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIlJlZHVjZWRSdWxlIiwicmVxdWlyZSIsIlJlcGVhdGVkUnVsZSIsInJ1bGVVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUmVwZWF0ZWREZWZpbml0aW9uIiwiUmV3cml0dGVuRGVmaW5pdGlvbiIsIlJlY3Vyc2l2ZURlZmluaXRpb24iLCJSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvblV0aWxpdGllcyIsImZpbmRSdWxlIiwiZmlyc3QiLCJhZGRJbkZyb250T2ZMYXN0IiwiZm9yRWFjaFdpdGhSZW1vdmUiLCJmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlcyIsImZpcnN0UnVsZSIsInJ1bGUiLCJyZWN1cnNpdmVEZWZpbml0aW9ucyIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmVtb3ZlSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZU5hbWVzIiwibWFwIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldFJ1bGVOYW1lIiwicnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwicnVsZU5hbWVzU3RyaW5nIiwicmVkdWNlIiwicnVsZU5hbWUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZW1vdmVTdHJpY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZURlZmluaXRpb25TdHJpY3RseUxlZnRSZWN1cnNpdmUiLCJpc1N0cmljdGx5TGVmdFJlY3Vyc2l2ZSIsInN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwdXNoIiwicmVtb3ZlTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZURlZmluaXRpb25Ob25TdHJpY3RseUxlZnRSZWN1cnNpdmUiLCJpc05vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSIsIm5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldE5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImZyb21EZWZpbml0aW9uQW5kUnVsZU5hbWUiLCJyZW1vdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJnZXRSZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVzIiwiZm9yRWFjaCIsInJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lc0luY2x1ZGVzUmVjdXJzaXZlUnVsZU5hbWUiLCJpbmNsdWRlcyIsInJld3JpdGFibGUiLCJpc1Jld3JpdGFibGUiLCJyZXdyaXRlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJld3JpdGVJbW1lZGlhdGVseUFuZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJzdHJpY3RseUxlZnRSZWN1cnNpdmUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZSIsImZyb21SZWR1Y2VkUnVsZU5hbWVBbmREZWZpbml0aW9ucyIsInJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24iLCJmcm9tUmVkdWNlZFJ1bGVOYW1lIiwic2V0RGVmaW5pdGlvbnMiLCJyZXdyaXR0ZW5EZWZpbml0aW9uIiwiZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwiZnJvbVJlcGVhdGVkUnVsZU5hbWUiLCJyZXBlYXRlZERlZmluaXRpb24iLCJhZGRSZXBlYXRlZERlZmluaXRpb24iLCJub25TdHJpY3RseUxlZnRSZWN1cnNpdmUiLCJsb29rQWhlYWQiLCJpc0xvb2tBaGVhZCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImZyb21SdWxlTmFtZSIsInJlZHVjZWRBbmRSZXBlYXRlZFJ1bGVOYW1lc0RlZmluaXRpb24iLCJSZWR1Y2VkQW5kUmVwZWF0ZWRSdWxlTmFtZXNEZWZpbml0aW9uIiwiZnJvbVJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTG9va0FoZWFkIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLGNBQWNDLFFBQVEsZ0JBQVIsQ0FBcEI7QUFBQSxJQUNNQyxlQUFlRCxRQUFRLGlCQUFSLENBRHJCO0FBQUEsSUFFTUUsZ0JBQWdCRixRQUFRLGtCQUFSLENBRnRCO0FBQUEsSUFHTUcsaUJBQWlCSCxRQUFRLG1CQUFSLENBSHZCO0FBQUEsSUFJTUksb0JBQW9CSixRQUFRLHNCQUFSLENBSjFCO0FBQUEsSUFLTUsscUJBQXFCTCxRQUFRLHVCQUFSLENBTDNCO0FBQUEsSUFNTU0sc0JBQXNCTixRQUFRLHdCQUFSLENBTjVCO0FBQUEsSUFPTU8sc0JBQXNCUCxRQUFRLHdCQUFSLENBUDVCO0FBQUEsSUFRTVEsNEJBQTRCUixRQUFRLDhCQUFSLENBUmxDO0FBQUEsSUFTTVMsK0JBQStCVCxRQUFRLGlDQUFSLENBVHJDOztBQVdNLElBQUVVLFFBQUYsR0FBZVIsYUFBZixDQUFFUSxRQUFGO0FBQUEsSUFDRUMsS0FERixHQUNpRFIsY0FEakQsQ0FDRVEsS0FERjtBQUFBLElBQ1NDLGdCQURULEdBQ2lEVCxjQURqRCxDQUNTUyxnQkFEVDtBQUFBLElBQzJCQyxpQkFEM0IsR0FDaURWLGNBRGpELENBQzJCVSxpQkFEM0I7QUFBQSxJQUVFQyxxQ0FGRixHQUU0Q0wsNEJBRjVDLENBRUVL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U0FBckgsQ0FIOUM7O0FBS0EvQixvQkFBYyxDQUNabUMscUNBRFksRUFFWmYseUJBRlksQ0FBZDs7QUFLQWxELFdBQUtvRCxjQUFMLENBQW9CdEIsV0FBcEI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVERCIsImZpbGUiOiJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWR1Y2VkUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9yZWR1Y2VkJyksXG4gICAgICBSZXBlYXRlZFJ1bGUgPSByZXF1aXJlKCcuL3J1bGUvcmVwZWF0ZWQnKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBydWxlTmFtZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3J1bGVOYW1lJyksXG4gICAgICBSZXBlYXRlZERlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vcmVwZWF0ZWQnKSxcbiAgICAgIFJld3JpdHRlbkRlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vcmV3cml0dGVuJyksXG4gICAgICBSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZScpLFxuICAgICAgUmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi9yZWR1Y2VkUnVsZU5hbWUnKSxcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9yZWN1cnNpdmVEZWZpbml0aW9uJyk7XG5cbmNvbnN0IHsgZmluZFJ1bGUgfSA9IHJ1bGVVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0LCBhZGRJbkZyb250T2ZMYXN0LCBmb3JFYWNoV2l0aFJlbW92ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gfSA9IHJlY3Vyc2l2ZURlZmluaXRpb25VdGlsaXRpZXMsXG4gICAgICB7IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUsIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgZmlyc3RSdWxlID0gZmlyc3QocnVsZXMpLFxuICAgICAgICBydWxlID0gZmlyc3RSdWxlLCAvLy9cbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICByZW1vdmVJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVzKTtcblxuICByZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcyk7XG5cbiAgY29uc3QgcnVsZU5hbWVzID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCkpLFxuICAgICAgICBydWxlTmFtZXNMZW5ndGggPSBydWxlTmFtZXMubGVuZ3RoO1xuXG4gIGlmIChydWxlTmFtZXNMZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcnVsZU5hbWVzU3RyaW5nID0gcnVsZU5hbWVzLnJlZHVjZSgocnVsZU5hbWVzU3RyaW5nLCBydWxlTmFtZSkgPT4ge1xuICAgICAgcnVsZU5hbWVzU3RyaW5nID0gKHJ1bGVOYW1lc1N0cmluZyAhPT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBgJHtydWxlTmFtZXNTdHJpbmd9LCAnJHtydWxlTmFtZX0nYCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGAnJHtydWxlTmFtZX0nYDtcblxuICAgICAgcmV0dXJuIHJ1bGVOYW1lc1N0cmluZztcbiAgICB9LCAnJyk7XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYExlZnQgcmVjdXJzaW9uIGNhbm5vdCBiZSBlbGltaW5hdGVkIGZyb20gdGhlIGZvbGxpb3dpbmcgcnVsZSBvciBydWxlczogJHtydWxlTmFtZXNTdHJpbmd9LmApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbjtcblxuZnVuY3Rpb24gcmVtb3ZlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5pc1N0cmljdGx5TGVmdFJlY3Vyc2l2ZSgpO1xuXG4gIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlKSB7XG4gICAgY29uc3Qgc3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlY3Vyc2l2ZURlZmluaXRpb24sICAvLy9cbiAgICAgICAgICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gc3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG5cbiAgICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbk5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSA9IHJlY3Vyc2l2ZURlZmluaXRpb24uaXNOb25TdHJpY3RseUxlZnRSZWN1cnNpdmUoKTtcblxuICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbk5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IG5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBub25TdHJpY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgICBpZiAoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG5cbiAgICAgIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLnB1c2goaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGZvckVhY2hXaXRoUmVtb3ZlKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EZWZpbml0aW9uQW5kUnVsZU5hbWUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHJlbW92ZSA9IHJlbW92ZVN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocmVjdXJzaXZlRGVmaW5pdGlvbiwgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgfHwgcmVtb3ZlTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9ucyA9IFsgLi4ucmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlY3Vyc2l2ZURlZmluaXRpb24gXTtcblxuICAgICAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSZWN1cnNpdmVSdWxlTmFtZXMoKSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZXMgPSByZWN1cnNpdmVEZWZpbml0aW9ucy5tYXAoKHJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSk7XG5cbiAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcy5mb3JFYWNoKChyZWN1cnNpdmVSdWxlTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVzSW5jbHVkZXNSZWN1cnNpdmVSdWxlTmFtZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZXMuaW5jbHVkZXMocmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgICAgIGlmICghcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lc0luY2x1ZGVzUmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJlY3Vyc2l2ZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICAgICAgcnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICAgICAgICBpZiAocnVsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVtb3ZlSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMsIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcykge1xuICBmb3JFYWNoV2l0aFJlbW92ZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCByZXdyaXRhYmxlID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc1Jld3JpdGFibGUoKTtcblxuICAgIGlmIChyZXdyaXRhYmxlKSB7XG4gICAgICBjb25zdCByZW1vdmUgPSByZXdyaXRlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlcylcbiAgICAgICAgICAgICAgICAgICB8fCByZXdyaXRlSW1tZWRpYXRlbHlBbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJ1bGVzKTtcblxuICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlcykge1xuICBjb25zdCBzdHJpY3RseUxlZnRSZWN1cnNpdmUgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmlzU3RyaWN0bHlMZWZ0UmVjdXJzaXZlKCk7XG5cbiAgaWYgKHN0cmljdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGUgPSBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpO1xuXG4gICAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICAgIGxldCByZWR1Y2VkUnVsZSA9IGZpbmRSdWxlKHJlZHVjZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG4gICAgaWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgICBsZXQgZGVmaW5pdGlvbnM7XG5cbiAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SZWR1Y2VkUnVsZU5hbWVBbmREZWZpbml0aW9ucyhyZWR1Y2VkUnVsZU5hbWUsIGRlZmluaXRpb25zKTtcblxuICAgICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cbiAgICAgIGNvbnN0IHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24gPSBSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uLmZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKTtcblxuICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb25cbiAgICAgIF07XG5cbiAgICAgIHJ1bGUuc2V0RGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuICAgIH1cblxuICAgIGNvbnN0IHJld3JpdHRlbkRlZmluaXRpb24gPSBSZXdyaXR0ZW5EZWZpbml0aW9uLmZyb21JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICAgIGRlZmluaXRpb24gPSByZXdyaXR0ZW5EZWZpbml0aW9uOyAvLy9cblxuICAgIGFkZEluRnJvbnRPZkxhc3QoZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xuXG4gICAgY29uc3QgcmVwZWF0ZWRSdWxlTmFtZSA9IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgbGV0IHJlcGVhdGVkUnVsZSA9IGZpbmRSdWxlKHJlcGVhdGVkUnVsZU5hbWUsIHJ1bGVzKTtcblxuICAgIGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcbiAgICAgIHJlcGVhdGVkUnVsZSA9IFJlcGVhdGVkUnVsZS5mcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKTtcblxuICAgICAgcnVsZXMucHVzaChyZXBlYXRlZFJ1bGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcGVhdGVkRGVmaW5pdGlvbiA9IFJlcGVhdGVkRGVmaW5pdGlvbi5mcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIHJlcGVhdGVkUnVsZS5hZGRSZXBlYXRlZERlZmluaXRpb24ocmVwZWF0ZWREZWZpbml0aW9uKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVJbW1lZGlhdGVseUFuZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcnVsZXMpIHtcbiAgY29uc3Qgbm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc05vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSgpO1xuXG4gIGlmIChub25TdHJpY3RseUxlZnRSZWN1cnNpdmUpIHtcbiAgICBjb25zdCBydWxlTmFtZSA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgbGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICBpZiAocmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICAgIGxldCBkZWZpbml0aW9ucztcblxuICAgICAgY29uc3QgcnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SZWR1Y2VkUnVsZU5hbWVBbmREZWZpbml0aW9ucyhyZWR1Y2VkUnVsZU5hbWUsIGRlZmluaXRpb25zKTtcblxuICAgICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cbiAgICAgIGNvbnN0IGxvb2tBaGVhZCA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNMb29rQWhlYWQoKSxcbiAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IHJ1bGVOYW1lLCAvLy9cbiAgICAgICAgICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24gPSBSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uLmZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgICAgICByZWR1Y2VkQW5kUmVwZWF0ZWRSdWxlTmFtZXNEZWZpbml0aW9uID0gUmVkdWNlZEFuZFJlcGVhdGVkUnVsZU5hbWVzRGVmaW5pdGlvbi5mcm9tUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRMb29rQWhlYWQocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbG9va0FoZWFkKTtcblxuICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgIHJlZHVjZWRBbmRSZXBlYXRlZFJ1bGVOYW1lc0RlZmluaXRpb24sXG4gICAgICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb25cbiAgICAgIF07XG5cbiAgICAgIHJ1bGUuc2V0RGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKlxuICBsZXQgcnVsZSxcbiAgICAgIGRlZmluaXRpb25zLFxuICAgICAgcmVkdWNlZFJ1bGUsXG4gICAgICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uO1xuXG4gIHJ1bGUgPSBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpO1xuXG4gIGNvbnN0IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSBydWxlOyAgLy8vXG5cbiAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKTtcblxuICBjb25zdCByZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVOYW1lQW5kSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZU5hbWUsIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICBydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcblxuICBydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG5cbiAgY29uc3QgZmlyc3RMb29rQWhlYWQgPSBmaXJzdChsb29rQWhlYWRzKSxcbiAgICAgICAgZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKSxcbiAgICAgICAgbG9va0FoZWFkID0gZmlyc3RMb29rQWhlYWQsIC8vL1xuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZTsgLy8vXG5cbiAgcmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IFJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICBjb25zdCByZWR1Y2VkQW5kUmVwZWF0ZWRSdWxlTmFtZXNEZWZpbml0aW9uID0gUmVkdWNlZEFuZFJlcGVhdGVkUnVsZU5hbWVzRGVmaW5pdGlvbi5mcm9tUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRMb29rQWhlYWQocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbG9va0FoZWFkKTtcblxuICBkZWZpbml0aW9ucyA9IFtcbiAgICByZWR1Y2VkQW5kUmVwZWF0ZWRSdWxlTmFtZXNEZWZpbml0aW9uLFxuICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb25cbiAgXTtcblxuICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAvLy9cbiAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZShpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgIGZpcnN0SW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0SW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgLy8vXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKCk7XG5cbiAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlQW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICBjb25zdCBydWxlTmFtZURlZmluaXRpb24gPSBSdWxlTmFtZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uID0gUmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgZGVmaW5pdGlvbnMgPSBbXG4gICAgcnVsZU5hbWVEZWZpbml0aW9uLFxuICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb25cbiAgXTtcblxuICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUuc2V0RGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuXG4gIHJ1bGVzLnB1c2gocmVkdWNlZFJ1bGUpO1xuICAqL1xufVxuIl19