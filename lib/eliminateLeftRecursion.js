'use strict';

var necessary = require('necessary');

var partUtilities = require('./utilities/part'),
    ruleUtilities = require('./utilities/rule'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    last = arrayUtilities.last,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    resetRightRecursiveRuleNameCount = ruleNameUtilities.resetRightRecursiveRuleNameCount,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var ruleNames = [];

  resetRightRecursiveRuleNameCount();

  eliminateLeftRecursionFromRules(rules, ruleNames);
}

module.exports = eliminateLeftRecursion;

function eliminateLeftRecursionFromRules(rules, ruleNames) {
  rules.forEach(function (rule) {
    return eliminateLeftRecursionFromRule(rule, ruleNames, rules);
  });
}

function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rules);

    if (recursiveDefinition !== null) {
      recursiveDefinitions.push(recursiveDefinition);
    } else {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
        nonRecursiveRuleName = nonRecursiveRule.getName(),
        nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleName(nonRecursiveRuleName),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      name = ruleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      firstRuleName = first(ruleNames),
      ruleNameTopmostRuleName = ruleName === firstRuleName;

  if (ruleNameTopmostRuleName) {
    var lastRuleName = last(ruleNames),
        _ruleName = lastRuleName,
        ///
    rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName);

    recursiveDefinition = RecursiveDefinition.fromRuleNamePartAndRightRecursiveRuleName(ruleNamePart, rightRecursiveRuleName);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,