"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _class = require("./utilities/class");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, recursiveDefinitions = [], leftRecursiveDefinitions = [];
    retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleMap);
    var reducedRules = retrieveReducedRules(ruleMap);
    rewriteReducedRules(reducedRules, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function rewriteReducedRules(reducedRules, ruleMap) {
    reducedRules.forEach(function(reducedRule) {
        reducedRule.rewrite(ruleMap);
    });
}
function retrieveReducedRules(ruleMap) {
    var rules = Object.values(ruleMap), reducedRules1 = rules.reduce(function(reducedRules, rule) {
        var ruleReducedRule = (0, _class).isInstanceOf(rule, _reduced.default);
        if (ruleReducedRule) {
            var reducedRule = rule; ///
            reducedRules.push(reducedRule);
        }
        return reducedRules;
    }, []);
    return reducedRules1;
}
function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleMap) {
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        leftRecursiveDefinition.rewrite(ruleMap);
    });
}
function retrieveLeftRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions) {
    var leftRecursiveDefinitionMatchesDefinition1 = leftRecursiveDefinitions.some(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionMatchesDefinition = leftRecursiveDefinition.match(definition);
        if (leftRecursiveDefinitionMatchesDefinition) {
            return true;
        }
    });
    if (leftRecursiveDefinitionMatchesDefinition1) {
        return;
    }
    var leftRecursiveDefinition1 = _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions);
    if (leftRecursiveDefinition1 !== null) {
        leftRecursiveDefinitions.push(leftRecursiveDefinition1);
    }
}
function retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var ruleName1 = rule.getName(), definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        retrieveLeftRecursiveDefinition(ruleName1, definition, recursiveDefinitions, leftRecursiveDefinitions);
        var recursiveDefinition = _left.default.fromRuleNameAndDefinition(ruleName1, definition) || _recursive.default.fromRuleNameAndDefinition(ruleName1, definition);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var _$recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, _$recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}
function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(), recursiveRuleName = recursiveDefinitionRuleName; ///
    return recursiveRuleName;
}

//# sourceMappingURL=data:application/json;base64,