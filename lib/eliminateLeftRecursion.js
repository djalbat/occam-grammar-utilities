'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition'),
    NonRecursiveRuleNameDefinition = require('./definition/nonRecursiveRuleName'),
    NonRecursiveAndRightRecursiveRuleNamesDefinition = require('./definition/nonRecursiveAndRightRecursiveRuleNames');

var findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    addToArrayMap = objectUtilities.addToArrayMap,
    forEachKeyWithRemove = objectUtilities.forEachKeyWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitionsMap = {};

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

      if (recursiveDefinitionStrictlyLeftRecursive) {
        var strictlyLeftRecursiveDefinition = recursiveDefinition,
            ///
        immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

        addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

        return true;
      }

      var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

      if (recursiveDefinitionLeftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition,
            ///
        indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

        if (indirectlyLeftRecursiveDefinition !== null) {
          var _immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

          _immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

          addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, _immediatelyLeftRecursiveDefinition);

          return true;
        }
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var name = recursiveRuleName,
              ///
          _rule = findRuleByName(name, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  forEachKeyWithRemove(immediatelyLeftRecursiveDefinitionsMap, function (ruleName, immediatelyLeftRecursiveDefinitions) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        nonRecursiveRule = NonRecursiveRule.fromRule(rule),
        rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);

    rules.push(nonRecursiveRule);

    rules.push(rightRecursiveRule);

    var firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
        immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition,
        ///
    nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromRuleName(ruleName),
        nonRecursiveAndRightRecursiveRuleNamesDefinition = NonRecursiveAndRightRecursiveRuleNamesDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        definitions = [nonRecursiveAndRightRecursiveRuleNamesDefinition, nonRecursiveRuleNameDefinition];

    rule.setDefinitions(definitions);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,