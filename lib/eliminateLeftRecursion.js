"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interop_require_default(require("./directedGraph"));
var _createReducedRules = /*#__PURE__*/ _interop_require_default(require("./createReducedRules"));
var _rewriteLeftRecursiveRules = /*#__PURE__*/ _interop_require_default(require("./rewriteLeftRecursiveRules"));
var _createDirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createDirectlyRepeatedRules"));
var _createIndirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createIndirectlyRepeatedRules"));
var _labels = require("./labels");
var _directedGraph1 = require("./utilities/directedGraph");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var filter = _necessary.arrayUtilities.filter, ruleMapFromRules = _occamparsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamparsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamparsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), cycles = cyclesFromRuleMapAndStartRule(ruleMap, startRule);
    (0, _createReducedRules.default)(cycles, ruleMap);
    (0, _createIndirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _createDirectlyRepeatedRules.default)(cycles, ruleMap);
    (0, _rewriteLeftRecursiveRules.default)(cycles, ruleMap);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}
function directedGraphFromRuleMapAndStartRule(ruleMap, startRule) {
    var startRuleName = startRule.getName(), edges = (0, _directedGraph1.edgesFromStartRuleAndRuleMap)(startRule, ruleMap), startVertex = startRuleName, directedGraph = _directedGraph.default.fromEdgesAndStartVertex(edges, startVertex);
    return directedGraph;
}
function cyclesFromRuleMapAndStartRule(ruleMap, startRule) {
    var directedGraph = directedGraphFromRuleMapAndStartRule(ruleMap, startRule), cycles = directedGraph.findCycles();
    filter(cycles, function(cycle) {
        var cycleLeftRecursive = isCycleLeftRecursive(cycle);
        if (cycleLeftRecursive) {
            return true;
        }
    });
    return cycles;
}
function isCycleLeftRecursive(cycle) {
    var cycleLeftRecursive = cycle.everyEdge(function(edge) {
        var label = edge.getLabel(), labelLeftRecursiveLabel = label === _labels.LEFT_RECURSIVE_LABEL, edgeLeftRecursive = labelLeftRecursiveLabel; ///
        if (edgeLeftRecursive) {
            return true;
        }
    });
    return cycleLeftRecursive;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IHJ1bGVzVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IERpcmVjdGVkR3JhcGggZnJvbSBcIi4vZGlyZWN0ZWRHcmFwaFwiO1xuaW1wb3J0IGNyZWF0ZVJlZHVjZWRSdWxlcyBmcm9tIFwiLi9jcmVhdGVSZWR1Y2VkUnVsZXNcIjtcbmltcG9ydCByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzIGZyb20gXCIuL3Jld3JpdGVMZWZ0UmVjdXJzaXZlUnVsZXNcIjtcbmltcG9ydCBjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzXCI7XG5pbXBvcnQgY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXMgZnJvbSBcIi4vY3JlYXRlSW5kaXJlY3RseVJlcGVhdGVkUnVsZXNcIjtcblxuaW1wb3J0IHsgTEVGVF9SRUNVUlNJVkVfTEFCRUwgfSBmcm9tIFwiLi9sYWJlbHNcIjtcbmltcG9ydCB7IGVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSBmcm9tIFwiLi91dGlsaXRpZXMvZGlyZWN0ZWRHcmFwaFwiO1xuXG5jb25zdCB7IGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBjeWNsZXMgPSBjeWNsZXNGcm9tUnVsZU1hcEFuZFN0YXJ0UnVsZShydWxlTWFwLCBzdGFydFJ1bGUpO1xuXG4gIGNyZWF0ZVJlZHVjZWRSdWxlcyhjeWNsZXMsIHJ1bGVNYXApO1xuXG4gIGNyZWF0ZUluZGlyZWN0bHlSZXBlYXRlZFJ1bGVzKGN5Y2xlcywgcnVsZU1hcCk7XG5cbiAgY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzKGN5Y2xlcywgcnVsZU1hcCk7XG5cbiAgcmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyhjeWNsZXMsIHJ1bGVNYXApO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdGVkR3JhcGhGcm9tUnVsZU1hcEFuZFN0YXJ0UnVsZShydWxlTWFwLCBzdGFydFJ1bGUpIHtcbiAgY29uc3Qgc3RhcnRSdWxlTmFtZSA9IHN0YXJ0UnVsZS5nZXROYW1lKCksXG4gICAgICAgIGVkZ2VzID0gZWRnZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApLFxuICAgICAgICBzdGFydFZlcnRleCA9IHN0YXJ0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgZGlyZWN0ZWRHcmFwaCA9IERpcmVjdGVkR3JhcGguZnJvbUVkZ2VzQW5kU3RhcnRWZXJ0ZXgoZWRnZXMsIHN0YXJ0VmVydGV4KTtcblxuICByZXR1cm4gZGlyZWN0ZWRHcmFwaDtcbn1cblxuZnVuY3Rpb24gY3ljbGVzRnJvbVJ1bGVNYXBBbmRTdGFydFJ1bGUocnVsZU1hcCwgc3RhcnRSdWxlKSB7XG4gIGNvbnN0IGRpcmVjdGVkR3JhcGggPSBkaXJlY3RlZEdyYXBoRnJvbVJ1bGVNYXBBbmRTdGFydFJ1bGUocnVsZU1hcCwgc3RhcnRSdWxlKSxcbiAgICAgICAgY3ljbGVzID0gZGlyZWN0ZWRHcmFwaC5maW5kQ3ljbGVzKCk7XG5cbiAgZmlsdGVyKGN5Y2xlcywgKGN5Y2xlKSA9PiB7XG4gICAgY29uc3QgY3ljbGVMZWZ0UmVjdXJzaXZlID0gaXNDeWNsZUxlZnRSZWN1cnNpdmUoY3ljbGUpO1xuXG4gICAgaWYgKGN5Y2xlTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY3ljbGVzO1xufVxuXG5mdW5jdGlvbiBpc0N5Y2xlTGVmdFJlY3Vyc2l2ZShjeWNsZSkge1xuICBjb25zdCBjeWNsZUxlZnRSZWN1cnNpdmUgPSBjeWNsZS5ldmVyeUVkZ2UoKGVkZ2UpID0+IHtcbiAgICBjb25zdCBsYWJlbCA9IGVkZ2UuZ2V0TGFiZWwoKSxcbiAgICAgICAgICBsYWJlbExlZnRSZWN1cnNpdmVMYWJlbCA9IChsYWJlbCA9PT0gTEVGVF9SRUNVUlNJVkVfTEFCRUwpLFxuICAgICAgICAgIGVkZ2VMZWZ0UmVjdXJzaXZlID0gbGFiZWxMZWZ0UmVjdXJzaXZlTGFiZWw7ICAvLy9cblxuICAgIGlmIChlZGdlTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY3ljbGVMZWZ0UmVjdXJzaXZlO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJmaWx0ZXIiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInJ1bGVNYXAiLCJzdGFydFJ1bGUiLCJjeWNsZXMiLCJjeWNsZXNGcm9tUnVsZU1hcEFuZFN0YXJ0UnVsZSIsImNyZWF0ZVJlZHVjZWRSdWxlcyIsImNyZWF0ZUluZGlyZWN0bHlSZXBlYXRlZFJ1bGVzIiwiY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzIiwicmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyIsImRpcmVjdGVkR3JhcGhGcm9tUnVsZU1hcEFuZFN0YXJ0UnVsZSIsInN0YXJ0UnVsZU5hbWUiLCJnZXROYW1lIiwiZWRnZXMiLCJlZGdlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwic3RhcnRWZXJ0ZXgiLCJkaXJlY3RlZEdyYXBoIiwiRGlyZWN0ZWRHcmFwaCIsImZyb21FZGdlc0FuZFN0YXJ0VmVydGV4IiwiZmluZEN5Y2xlcyIsImN5Y2xlIiwiY3ljbGVMZWZ0UmVjdXJzaXZlIiwiaXNDeWNsZUxlZnRSZWN1cnNpdmUiLCJldmVyeUVkZ2UiLCJlZGdlIiwibGFiZWwiLCJnZXRMYWJlbCIsImxhYmVsTGVmdFJlY3Vyc2l2ZUxhYmVsIiwiTEVGVF9SRUNVUlNJVkVfTEFCRUwiLCJlZGdlTGVmdFJlY3Vyc2l2ZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBaUJBOzs7ZUFBd0JBOzs7eUJBZk87NEJBQ0E7b0VBRUw7eUVBQ0s7Z0ZBQ087a0ZBQ0U7b0ZBQ0U7c0JBRUw7OEJBQ1E7Ozs7OztBQUU3QyxJQUFNLEFBQUVDLFNBQVdDLHlCQUFjLENBQXpCRCxRQUNBRSxtQkFBdUVDLDRCQUFjLENBQXJGRCxrQkFBa0JFLHFCQUFxREQsNEJBQWMsQ0FBbkVDLG9CQUFvQkMsK0JBQWlDRiw0QkFBYyxDQUEvQ0U7QUFFL0IsU0FBU04sdUJBQXVCTyxLQUFLO0lBQ2xELElBQU1DLFVBQVVMLGlCQUFpQkksUUFDM0JFLFlBQVlKLG1CQUFtQkUsUUFDL0JHLFNBQVNDLDhCQUE4QkgsU0FBU0M7SUFFdERHLElBQUFBLDJCQUFrQixFQUFDRixRQUFRRjtJQUUzQkssSUFBQUEsc0NBQTZCLEVBQUNILFFBQVFGO0lBRXRDTSxJQUFBQSxvQ0FBMkIsRUFBQ0osUUFBUUY7SUFFcENPLElBQUFBLGtDQUF5QixFQUFDTCxRQUFRRjtJQUVsQ0QsUUFBUUQsNkJBQTZCRyxXQUFXRCxVQUFVLEdBQUc7SUFFN0QsT0FBT0Q7QUFDVDtBQUVBLFNBQVNTLHFDQUFxQ1IsT0FBTyxFQUFFQyxTQUFTO0lBQzlELElBQU1RLGdCQUFnQlIsVUFBVVMsT0FBTyxJQUNqQ0MsUUFBUUMsSUFBQUEsNENBQTRCLEVBQUNYLFdBQVdELFVBQ2hEYSxjQUFjSixlQUNkSyxnQkFBZ0JDLHNCQUFhLENBQUNDLHVCQUF1QixDQUFDTCxPQUFPRTtJQUVuRSxPQUFPQztBQUNUO0FBRUEsU0FBU1gsOEJBQThCSCxPQUFPLEVBQUVDLFNBQVM7SUFDdkQsSUFBTWEsZ0JBQWdCTixxQ0FBcUNSLFNBQVNDLFlBQzlEQyxTQUFTWSxjQUFjRyxVQUFVO0lBRXZDeEIsT0FBT1MsUUFBUSxTQUFDZ0I7UUFDZCxJQUFNQyxxQkFBcUJDLHFCQUFxQkY7UUFFaEQsSUFBSUMsb0JBQW9CO1lBQ3RCLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT2pCO0FBQ1Q7QUFFQSxTQUFTa0IscUJBQXFCRixLQUFLO0lBQ2pDLElBQU1DLHFCQUFxQkQsTUFBTUcsU0FBUyxDQUFDLFNBQUNDO1FBQzFDLElBQU1DLFFBQVFELEtBQUtFLFFBQVEsSUFDckJDLDBCQUEyQkYsVUFBVUcsNEJBQW9CLEVBQ3pEQyxvQkFBb0JGLHlCQUEwQixHQUFHO1FBRXZELElBQUlFLG1CQUFtQjtZQUNyQixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9SO0FBQ1QifQ==