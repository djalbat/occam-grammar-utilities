"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interopRequireDefault(require("./directedGraph"));
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _ruleMap = require("./utilities/ruleMap");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), edges = (0, _ruleMap.edgesFromStartRuleAndRuleMap)(startRule, ruleMap), directedGraph = _directedGraph.default.fromEdges(edges), startRuleName = startRule.getName(), startVertex = startRuleName, context = {
        ruleMap: ruleMap,
        directedGraph: directedGraph
    };
    directedGraph.removeNonCyclicEdges(startVertex);
    (0, _eliminateIndirectLeftRecursion.default)(context);
    (0, _eliminateDirectLeftRecursion.default)(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBEaXJlY3RlZEdyYXBoIGZyb20gXCIuL2RpcmVjdGVkR3JhcGhcIjtcbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5cbmltcG9ydCB7IGVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU1hcFwiO1xuXG5jb25zdCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBlZGdlcyA9IGVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKSxcbiAgICAgICAgZGlyZWN0ZWRHcmFwaCA9IERpcmVjdGVkR3JhcGguZnJvbUVkZ2VzKGVkZ2VzKSxcbiAgICAgICAgc3RhcnRSdWxlTmFtZSA9IHN0YXJ0UnVsZS5nZXROYW1lKCksXG4gICAgICAgIHN0YXJ0VmVydGV4ID0gc3RhcnRSdWxlTmFtZSwgIC8vL1xuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIHJ1bGVNYXAsXG4gICAgICAgICAgZGlyZWN0ZWRHcmFwaFxuICAgICAgICB9O1xuXG4gIGRpcmVjdGVkR3JhcGgucmVtb3ZlTm9uQ3ljbGljRWRnZXMoc3RhcnRWZXJ0ZXgpO1xuXG4gIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInJ1bGVNYXAiLCJzdGFydFJ1bGUiLCJlZGdlcyIsImVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJkaXJlY3RlZEdyYXBoIiwiRGlyZWN0ZWRHcmFwaCIsImZyb21FZGdlcyIsInN0YXJ0UnVsZU5hbWUiLCJnZXROYW1lIiwic3RhcnRWZXJ0ZXgiLCJjb250ZXh0IiwicmVtb3ZlTm9uQ3ljbGljRWRnZXMiLCJlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFZQTs7O2VBQXdCQTs7OzRCQVZPO2tFQUVMO2lGQUNlO21GQUNFO3VCQUVFOzs7Ozs7QUFFN0MsSUFBUUMsbUJBQXVFQyw0QkFBYyxDQUFyRkQsa0JBQWtCRSxxQkFBcURELDRCQUFjLENBQW5FQyxvQkFBb0JDLCtCQUFpQ0YsNEJBQWMsQ0FBL0NFO0FBRS9CLFNBQVNKLHVCQUF1QkssS0FBSyxFQUFFO0lBQ3BELElBQU1DLFVBQVVMLGlCQUFpQkksUUFDM0JFLFlBQVlKLG1CQUFtQkUsUUFDL0JHLFFBQVFDLElBQUFBLHFDQUE0QixFQUFDRixXQUFXRCxVQUNoREksZ0JBQWdCQyxzQkFBYSxDQUFDQyxTQUFTLENBQUNKLFFBQ3hDSyxnQkFBZ0JOLFVBQVVPLE9BQU8sSUFDakNDLGNBQWNGLGVBQ2RHLFVBQVU7UUFDUlYsU0FBQUE7UUFDQUksZUFBQUE7SUFDRjtJQUVOQSxjQUFjTyxvQkFBb0IsQ0FBQ0Y7SUFFbkNHLElBQUFBLHVDQUE4QixFQUFDRjtJQUUvQkcsSUFBQUEscUNBQTRCLEVBQUNIO0lBRTdCWCxRQUFRRCw2QkFBNkJHLFdBQVdELFVBQVUsR0FBRztJQUU3RCxPQUFPRDtBQUNUIn0=