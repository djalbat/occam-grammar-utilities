'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RuleNameDefinition = require('./definition/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonLeftRecursiveRule = require('./rule/nonLeftRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition'),
    NonLeftRecursiveRuleNameDefinition = require('./definition/nonLeftRecursiveRuleName'),
    NonLeftRecursiveAndRightRecursiveRuleNamesDefinition = require('./definition/nonLeftRecursiveAndRightRecursiveRuleNames');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName,
    nonLeftRecursiveRuleNameFromRuleName = ruleNameUtilities.nonLeftRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeImmediatelyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

  if (recursiveDefinitionLeftRecursive) {
    var leftRecursiveDefinition = recursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeImmediatelyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var _ruleName2 = immediatelyLeftRecursiveDefinition.getRuleName(),
        rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName2),
        nonLeftRecursiveRuleName = nonLeftRecursiveRuleNameFromRuleName(_ruleName2);

    var nonLeftRecursiveRule = findRule(nonLeftRecursiveRuleName, rules);

    if (nonLeftRecursiveRule === null) {
      var definitions = void 0;

      var rule = findRule(_ruleName2, rules);

      definitions = rule.getDefinitions();

      nonLeftRecursiveRule = NonLeftRecursiveRule.fromNonLeftRecursiveRuleNameAndDefinitions(nonLeftRecursiveRuleName, definitions);

      rules.push(nonLeftRecursiveRule);

      var lookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          leftRecursiveRuleName = _ruleName2,
          ///
      nonLeftRecursiveRuleNameDefinition = NonLeftRecursiveRuleNameDefinition.fromRuleName(_ruleName2),
          nonLeftRecursiveAndRightRecursiveRuleNamesDefinition = NonLeftRecursiveAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(_ruleName2, leftRecursiveRuleName, lookAhead);

      definitions = [nonLeftRecursiveAndRightRecursiveRuleNamesDefinition, nonLeftRecursiveRuleNameDefinition];

      rule.setDefinitions(definitions);
    } else {
      var _rule2 = findRule(_ruleName2, rules),
          _definitions = _rule2.getDefinitions(),
          firstDefinition = first(_definitions),
          immediatelyLeftRecursiveDefinitionLookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          _nonLeftRecursiveAndRightRecursiveRuleNamesDefinition = firstDefinition,
          ///
      nonLeftRecursiveAndRightRecursiveRuleNamesDefinitionLookAhead = _nonLeftRecursiveAndRightRecursiveRuleNamesDefinition.isLookAhead();

      if (immediatelyLeftRecursiveDefinitionLookAhead !== nonLeftRecursiveAndRightRecursiveRuleNamesDefinitionLookAhead) {
        return false;
      }
    }

    var rightRecursiveRule = findRule(rightRecursiveRuleName, rules);

    if (rightRecursiveRule === null) {
      rightRecursiveRule = RightRecursiveRule.fromRightRecursiveRuleName(rightRecursiveRuleName);

      rules.push(rightRecursiveRule);
    }

    var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    rightRecursiveRule.addRightRecursiveDefinition(rightRecursiveDefinition);

    return true;
  }
}

function rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  var remove = false;

  var ruleRewritable = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.isRewritable();
  });

  if (ruleRewritable) {
    var ruleNonStrictlyLeftRecursive = !immediatelyLeftRecursiveDefinitions.some(function (immediatelyLeftRecursiveDefinition) {
      return immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();
    });

    if (ruleNonStrictlyLeftRecursive) {
      var lookAheads = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.isLookAhead();
      }),
          lookAheadsEqual = areElementsEqual(lookAheads),
          leftRecursiveRuleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.getLeftRecursiveRuleName();
      }),
          leftRecursiveRuleNamesEqual = areElementsEqual(leftRecursiveRuleNames);

      if (lookAheadsEqual && leftRecursiveRuleNamesEqual) {
        var rule = void 0,
            definitions = void 0,
            nonLeftRecursiveRule = void 0,
            nonLeftRecursiveRuleNameDefinition = void 0;

        rule = findRule(ruleName, rules);

        var immediatelyLeftRecursiveRule = rule; ///

        nonLeftRecursiveRule = NonLeftRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);

        var rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);

        rules.push(nonLeftRecursiveRule);

        rules.push(rightRecursiveRule);

        var firstLookAhead = first(lookAheads),
            firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
            lookAhead = firstLookAhead,
            ///
        leftRecursiveRuleName = firstLeftRecursiveRuleName; ///

        nonLeftRecursiveRuleNameDefinition = NonLeftRecursiveRuleNameDefinition.fromRuleName(ruleName);

        var nonLeftRecursiveAndRightRecursiveRuleNamesDefinition = NonLeftRecursiveAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);

        definitions = [nonLeftRecursiveAndRightRecursiveRuleNamesDefinition, nonLeftRecursiveRuleNameDefinition];

        immediatelyLeftRecursiveRule.setDefinitions(definitions);

        var indirectlyLeftRecursiveRuleName = leftRecursiveRuleName,
            ///
        indirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleName(indirectlyLeftRecursiveRuleName, rules),
            firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
            immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition,
            ///
        indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition();

        nonLeftRecursiveRule = NonLeftRecursiveRule.fromIndirectlyLeftRecursiveRuleAndIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition);

        var ruleNameDefinition = RuleNameDefinition.fromRuleName(ruleName);

        nonLeftRecursiveRuleNameDefinition = NonLeftRecursiveRuleNameDefinition.fromLeftRecursiveRuleName(leftRecursiveRuleName);

        definitions = [ruleNameDefinition, nonLeftRecursiveRuleNameDefinition];

        indirectlyLeftRecursiveRule.setDefinitions(definitions);

        rules.push(nonLeftRecursiveRule);

        remove = true;
      }
    }
  }

  return remove;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,