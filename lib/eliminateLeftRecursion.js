'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var necessary = require('necessary');

var types = require('./types'),
    ruleUtilities = require('./utilities/rule'),
    RecursiveDefinition = require('./definition/recursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    DirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/directly'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    findRule = ruleUtilities.findRule,
    INDIRECTLY_LEFT_RECURSIVE_TYPE = types.INDIRECTLY_LEFT_RECURSIVE_TYPE;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      replacementDefinitions = [];

  replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules);

  rewriteReplacementDefinitions(replacementDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions, rules) {
  var recursiveDefinition = IndirectlyLeftRecursiveDefinition.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || DirectlyLeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition) || LeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition) || RecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

  if (recursiveDefinition !== null) {
    recursiveDefinition.replace(rules);

    var type = recursiveDefinition.getType(),
        typeIndirectlyLeftRecursiveType = type === INDIRECTLY_LEFT_RECURSIVE_TYPE,
        recursiveDefinitionIndirectlyLeftRecursiveDefinition = typeIndirectlyLeftRecursiveType; ///

    if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
      var indirectlyLeftRecursiveDefinition = recursiveDefinition,
          ///
      implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();

      implicitlyLeftRecursiveDefinition.replace(rules);
    }

    var replacementDefinition = recursiveDefinition; ///

    if (replacementDefinition !== null) {
      replacementDefinitions.push(replacementDefinition);
    }
  }

  return recursiveDefinition;
}

function replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  definitions.forEach(function (definition) {
    var definitionRecursiveDefinition = definition instanceof RecursiveDefinition,
        recursiveDefinition = definitionRecursiveDefinition ? definition : ///
    replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions, rules);

    if (recursiveDefinition !== null) {
      var previousRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          previousRecursiveRuleNames = previousRecursiveDefinitions.map(function (previousRecursiveDefinition) {
        return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
      }),
          recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);

        if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = previousRecursiveDefinitions; ///

            replaceDefinitions(_rule, _recursiveDefinitions, replacementDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteReplacementDefinitions(replacementDefinitions, rules) {
  replacementDefinitions.forEach(function (replacementDefinition) {
    return replacementDefinition.rewrite(rules);
  });
}

function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
  var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
      recursiveRuleName = recursiveDefinitionRuleName; ///

  return recursiveRuleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJ0eXBlcyIsInJ1bGVVdGlsaXRpZXMiLCJSZWN1cnNpdmVEZWZpbml0aW9uIiwiTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsImZpbmRSdWxlIiwiSU5ESVJFQ1RMWV9MRUZUX1JFQ1VSU0lWRV9UWVBFIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVzIiwiZmlyc3RSdWxlIiwicnVsZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmVwbGFjZW1lbnREZWZpbml0aW9ucyIsInJlcGxhY2VEZWZpbml0aW9ucyIsInJld3JpdGVSZXBsYWNlbWVudERlZmluaXRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcGxhY2VEZWZpbml0aW9uIiwicnVsZU5hbWUiLCJkZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZURlZmluaXRpb25BbmRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZyb21SdWxlTmFtZUFuZERlZmluaXRpb24iLCJyZXBsYWNlIiwidHlwZSIsImdldFR5cGUiLCJ0eXBlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVUeXBlIiwicmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImdldEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlcGxhY2VtZW50RGVmaW5pdGlvbiIsInB1c2giLCJnZXROYW1lIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImZvckVhY2giLCJkZWZpbml0aW9uUmVjdXJzaXZlRGVmaW5pdGlvbiIsInByZXZpb3VzUmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJwcmV2aW91c1JlY3Vyc2l2ZVJ1bGVOYW1lcyIsIm1hcCIsInByZXZpb3VzUmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJnZXRSZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVSdWxlTmFtZSIsInByZXZpb3VzUmVjdXJzaXZlUnVsZU5hbWVzSW5jbHVkZXNSZWN1cnNpdmVSdWxlTmFtZSIsImluY2x1ZGVzIiwicmV3cml0ZSIsInJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSIsImdldFJ1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxRQUFRRCxRQUFRLFNBQVIsQ0FBZDtBQUFBLElBQ01FLGdCQUFnQkYsUUFBUSxrQkFBUixDQUR0QjtBQUFBLElBRU1HLHNCQUFzQkgsUUFBUSx3QkFBUixDQUY1QjtBQUFBLElBR01JLDBCQUEwQkosUUFBUSw0QkFBUixDQUhoQztBQUFBLElBSU1LLGtDQUFrQ0wsUUFBUSxxQ0FBUixDQUp4QztBQUFBLElBS01NLG9DQUFvQ04sUUFBUSx1Q0FBUixDQUwxQzs7QUFPTSxJQUFFTyxjQUFGLEdBQXFCUixTQUFyQixDQUFFUSxjQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZRCxjQURaLENBQ0VDLEtBREY7QUFBQSxJQUVFQyxRQUZGLEdBRWVQLGFBRmYsQ0FFRU8sUUFGRjtBQUFBLElBR0VDLDhCQUhGLEdBR3FDVCxLQUhyQyxDQUdFUyw4QkFIRjs7O0FBS04sU0FBU0Msc0JBQVQsQ0FBZ0NDLEtBQWhDLEVBQXVDO0FBQ3JDLE1BQU1DLFlBQVlMLE1BQU1JLEtBQU4sQ0FBbEI7QUFBQSxNQUNNRSxPQUFPRCxTQURi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QkFBdUIyQiw0QkFBN0IsQ0FEaUIsQ0FDMkM7O0FBRTVEekIsK0JBQW1CSCxLQUFuQixFQUF5QkMscUJBQXpCLEVBQStDQyxzQkFBL0MsRUFBdUVKLEtBQXZFO0FBQ0Q7QUFDRjtBQUNGLE9BYkQ7QUFjRDtBQUNGLEdBMUJEO0FBMkJEOztBQUVELFNBQVNNLDZCQUFULENBQXVDRixzQkFBdkMsRUFBK0RKLEtBQS9ELEVBQXNFO0FBQ3BFSSx5QkFBdUJ3QixPQUF2QixDQUErQixVQUFDTCxxQkFBRDtBQUFBLFdBQTJCQSxzQkFBc0JpQixPQUF0QixDQUE4QnhDLEtBQTlCLENBQTNCO0FBQUEsR0FBL0I7QUFDRDs7QUFFRCxTQUFTa0Msd0NBQVQsQ0FBa0R0QixtQkFBbEQsRUFBdUU7QUFDckUsTUFBTTZCLDhCQUE4QjdCLG9CQUFvQjhCLFdBQXBCLEVBQXBDO0FBQUEsTUFDTUwsb0JBQW9CSSwyQkFEMUIsQ0FEcUUsQ0FFYjs7QUFFeEQsU0FBT0osaUJBQVA7QUFFRCIsImZpbGUiOiJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyksXG4gICAgICBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgUmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi9yZWN1cnNpdmUnKSxcbiAgICAgIExlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL2xlZnRSZWN1cnNpdmUnKSxcbiAgICAgIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vbGVmdFJlY3Vyc2l2ZS9kaXJlY3RseScpLFxuICAgICAgSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL2xlZnRSZWN1cnNpdmUvaW5kaXJlY3RseScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgZmluZFJ1bGUgfSA9IHJ1bGVVdGlsaXRpZXMsXG4gICAgICB7IElORElSRUNUTFlfTEVGVF9SRUNVUlNJVkVfVFlQRSB9ID0gdHlwZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgZmlyc3RSdWxlID0gZmlyc3QocnVsZXMpLFxuICAgICAgICBydWxlID0gZmlyc3RSdWxlLCAvLy9cbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9ucyA9IFtdO1xuXG4gIHJlcGxhY2VEZWZpbml0aW9ucyhydWxlLCByZWN1cnNpdmVEZWZpbml0aW9ucywgcmVwbGFjZW1lbnREZWZpbml0aW9ucywgcnVsZXMpO1xuXG4gIHJld3JpdGVSZXBsYWNlbWVudERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbnMsIHJ1bGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uO1xuXG5mdW5jdGlvbiByZXBsYWNlRGVmaW5pdGlvbihydWxlTmFtZSwgZGVmaW5pdGlvbiwgcmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlcGxhY2VtZW50RGVmaW5pdGlvbnMsIHJ1bGVzKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lRGVmaW5pdGlvbkFuZFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGVOYW1lLCBkZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lQW5kRGVmaW5pdGlvbihydWxlTmFtZSwgZGVmaW5pdGlvbikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21SdWxlTmFtZUFuZERlZmluaXRpb24ocnVsZU5hbWUsIGRlZmluaXRpb24pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21SdWxlTmFtZUFuZERlZmluaXRpb24ocnVsZU5hbWUsIGRlZmluaXRpb24pO1xuXG4gIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgcmVjdXJzaXZlRGVmaW5pdGlvbi5yZXBsYWNlKHJ1bGVzKTtcblxuICAgIGNvbnN0IHR5cGUgPSByZWN1cnNpdmVEZWZpbml0aW9uLmdldFR5cGUoKSxcbiAgICAgICAgICB0eXBlSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVUeXBlID0gKHR5cGUgPT09IElORElSRUNUTFlfTEVGVF9SRUNVUlNJVkVfVFlQRSksXG4gICAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbkluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHR5cGVJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVR5cGU7ICAvLy9cblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICBjb25zdCBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0SW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKCk7XG5cbiAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5yZXBsYWNlKHJ1bGVzKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXBsYWNlbWVudERlZmluaXRpb24gPSByZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG5cbiAgICBpZiAocmVwbGFjZW1lbnREZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICByZXBsYWNlbWVudERlZmluaXRpb25zLnB1c2gocmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZURlZmluaXRpb25zKHJ1bGUsIHJlY3Vyc2l2ZURlZmluaXRpb25zLCByZXBsYWNlbWVudERlZmluaXRpb25zLCBydWxlcykge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgZGVmaW5pdGlvblJlY3Vyc2l2ZURlZmluaXRpb24gPSAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb24gPSBkZWZpbml0aW9uUmVjdXJzaXZlRGVmaW5pdGlvbiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbiA6ICAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEZWZpbml0aW9uKHJ1bGVOYW1lLCBkZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucywgcmVwbGFjZW1lbnREZWZpbml0aW9ucywgcnVsZXMpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzUmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbIC4uLnJlY3Vyc2l2ZURlZmluaXRpb25zLCByZWN1cnNpdmVEZWZpbml0aW9uIF0sXG4gICAgICAgICAgICBwcmV2aW91c1JlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHByZXZpb3VzUmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChwcmV2aW91c1JlY3Vyc2l2ZURlZmluaXRpb24pID0+IHJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJlY3Vyc2l2ZURlZmluaXRpb24ocHJldmlvdXNSZWN1cnNpdmVEZWZpbml0aW9uKSksXG4gICAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVEZWZpbml0aW9uLmdldFJlY3Vyc2l2ZVJ1bGVOYW1lcygpO1xuXG4gICAgICByZWN1cnNpdmVSdWxlTmFtZXMuZm9yRWFjaCgocmVjdXJzaXZlUnVsZU5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNSZWN1cnNpdmVSdWxlTmFtZXNJbmNsdWRlc1JlY3Vyc2l2ZVJ1bGVOYW1lID0gcHJldmlvdXNSZWN1cnNpdmVSdWxlTmFtZXMuaW5jbHVkZXMocmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgICAgIGlmICghcHJldmlvdXNSZWN1cnNpdmVSdWxlTmFtZXNJbmNsdWRlc1JlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSByZWN1cnNpdmVSdWxlTmFtZSwgIC8vL1xuICAgICAgICAgICAgICAgIHJ1bGUgPSBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpO1xuXG4gICAgICAgICAgaWYgKHJ1bGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25zID0gcHJldmlvdXNSZWN1cnNpdmVEZWZpbml0aW9uczsgIC8vL1xuXG4gICAgICAgICAgICByZXBsYWNlRGVmaW5pdGlvbnMocnVsZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlcGxhY2VtZW50RGVmaW5pdGlvbnMsIHJ1bGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVSZXBsYWNlbWVudERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbnMsIHJ1bGVzKSB7XG4gIHJlcGxhY2VtZW50RGVmaW5pdGlvbnMuZm9yRWFjaCgocmVwbGFjZW1lbnREZWZpbml0aW9uKSA9PiByZXBsYWNlbWVudERlZmluaXRpb24ucmV3cml0ZShydWxlcykpO1xufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZUZyb21SZWN1cnNpdmVEZWZpbml0aW9uKHJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZTsgIC8vL1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZTtcblxufVxuIl19