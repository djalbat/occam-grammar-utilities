'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var necessary = require('necessary');

var types = require('./types'),
    ruleUtilities = require('./utilities/rule'),
    RecursiveDefinition = require('./definition/recursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    DirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/directly'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    findRule = ruleUtilities.findRule,
    INDIRECTLY_LEFT_RECURSIVE_TYPE = types.INDIRECTLY_LEFT_RECURSIVE_TYPE;


function eliminateLeftRecursion(rules) {
  var rulesLength = rules.length;

  if (rulesLength > 0) {
    var firstRule = first(rules),
        rule = firstRule,
        ///
    recursiveDefinitions = [],
        leftRecursiveDefinitions = [];

    replaceRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, rules);

    rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, rules);
  }
}

module.exports = eliminateLeftRecursion;

function replaceRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions, rules) {
  var leftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || DirectlyLeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition) || LeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

  if (leftRecursiveDefinition !== null) {
    var type = leftRecursiveDefinition.getType(),
        typeIndirectlyLeftRecursiveType = type === INDIRECTLY_LEFT_RECURSIVE_TYPE,
        recursiveDefinitionIndirectlyLeftRecursiveDefinition = typeIndirectlyLeftRecursiveType; ///

    if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
      var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition,
          ///
      implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();

      implicitlyLeftRecursiveDefinition.replace(rules);
    }

    leftRecursiveDefinitions.push(leftRecursiveDefinition);
  }

  var recursiveDefinition = leftRecursiveDefinition !== null ? leftRecursiveDefinition : ///
  RecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

  if (recursiveDefinition !== null) {
    recursiveDefinition.replace(rules);
  }

  return recursiveDefinition;
}

function replaceRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  definitions.forEach(function (definition) {
    var definitionRecursiveDefinition = definition instanceof RecursiveDefinition,
        recursiveDefinition = definitionRecursiveDefinition ? definition : ///
    replaceRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions, rules);

    if (recursiveDefinition !== null) {
      var previousRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          previousRecursiveRuleNames = previousRecursiveDefinitions.map(function (previousRecursiveDefinition) {
        return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
      }),
          recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);

        if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = previousRecursiveDefinitions; ///

            replaceRecursiveDefinitions(_rule, _recursiveDefinitions, leftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, rules) {
  leftRecursiveDefinitions.forEach(function (leftRecursiveDefinition) {
    return leftRecursiveDefinition.rewrite(rules);
  });
}

function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
  var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
      recursiveRuleName = recursiveDefinitionRuleName; ///

  return recursiveRuleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,