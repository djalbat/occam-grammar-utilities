"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _retrieveLeftRecursiveDefinitions = /*#__PURE__*/ _interopRequireDefault(require("./retrieveLeftRecursiveDefinitions"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), rule = startRule, operations = [], leftRecursiveDefinitions = [], context = {
        ruleMap: ruleMap,
        operations: operations,
        leftRecursiveDefinitions: leftRecursiveDefinitions
    };
    (0, _retrieveLeftRecursiveDefinitions.default)(rule, context);
    (0, _eliminateIndirectLeftRecursion.default)(context);
    (0, _eliminateDirectLeftRecursion.default)(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5pbXBvcnQgcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgZnJvbSBcIi4vcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMsIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZSA9IHN0YXJ0UnVsZSwgLy8vXG4gICAgICAgIG9wZXJhdGlvbnMgPSBbXSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gW10sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgcnVsZU1hcCxcbiAgICAgICAgICBvcGVyYXRpb25zLFxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuICAgICAgICB9O1xuXG4gIHJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpO1xuXG4gIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInN0YXJ0UnVsZSIsInJ1bGVNYXAiLCJydWxlIiwib3BlcmF0aW9ucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImNvbnRleHQiLCJyZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiIsImVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OzsrQkFVYixTQXFCQzs7O2VBckJ1QkEsc0JBQXNCOzs7NEJBUmYsZUFBZTtpRkFFTCxnQ0FBZ0M7bUZBQzlCLGtDQUFrQztxRkFDaEMsb0NBQW9DOzs7Ozs7QUFFakYsSUFBUUMsZ0JBQWdCLEdBQXVEQyxhQUFjLGVBQUEsQ0FBckZELGdCQUFnQixFQUFFRSxrQkFBa0IsR0FBbUNELGFBQWMsZUFBQSxDQUFuRUMsa0JBQWtCLEVBQUVDLDRCQUE0QixHQUFLRixhQUFjLGVBQUEsQ0FBL0NFLDRCQUE0QixBQUFvQjtBQUUvRSxTQUFTSixzQkFBc0IsQ0FBQ0ssS0FBSyxFQUFFO0lBQ3BELElBQU1DLFNBQVMsR0FBR0gsa0JBQWtCLENBQUNFLEtBQUssQ0FBQyxFQUNyQ0UsT0FBTyxHQUFHTixnQkFBZ0IsQ0FBQ0ksS0FBSyxDQUFDLEVBQ2pDRyxJQUFJLEdBQUdGLFNBQVMsRUFDaEJHLFVBQVUsR0FBRyxFQUFFLEVBQ2ZDLHdCQUF3QixHQUFHLEVBQUUsRUFDN0JDLE9BQU8sR0FBRztRQUNSSixPQUFPLEVBQVBBLE9BQU87UUFDUEUsVUFBVSxFQUFWQSxVQUFVO1FBQ1ZDLHdCQUF3QixFQUF4QkEsd0JBQXdCO0tBQ3pCLEFBQUM7SUFFUkUsSUFBQUEsaUNBQWdDLFFBQUEsRUFBQ0osSUFBSSxFQUFFRyxPQUFPLENBQUMsQ0FBQztJQUVoREUsSUFBQUEsK0JBQThCLFFBQUEsRUFBQ0YsT0FBTyxDQUFDLENBQUM7SUFFeENHLElBQUFBLDZCQUE0QixRQUFBLEVBQUNILE9BQU8sQ0FBQyxDQUFDO0lBRXRDTixLQUFLLEdBQUdELDRCQUE0QixDQUFDRSxTQUFTLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRztJQUU3RCxPQUFPRixLQUFLLENBQUM7QUFDZixDQUFDIn0=