"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _retrieveLeftRecursiveDefinitions = /*#__PURE__*/ _interopRequireDefault(require("./retrieveLeftRecursiveDefinitions"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), operations = [], leftRecursiveDefinitions = [], rule = startRule, recursiveDefinitions = [], context = {
        ruleMap: ruleMap,
        operations: operations,
        leftRecursiveDefinitions: leftRecursiveDefinitions
    };
    (0, _retrieveLeftRecursiveDefinitions.default)(rule, recursiveDefinitions, context);
    (0, _eliminateIndirectLeftRecursion.default)(context);
    // eliminateDirectLeftRecursion(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5pbXBvcnQgcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgZnJvbSBcIi4vcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMsIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgb3BlcmF0aW9ucyA9IFtdLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgcnVsZSA9IHN0YXJ0UnVsZSwgLy8vXG4gICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25zID0gW10sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgcnVsZU1hcCxcbiAgICAgICAgICBvcGVyYXRpb25zLFxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1xuICAgICAgICB9O1xuXG4gIHJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIHJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcblxuICBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCk7XG5cbiAgLy8gZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICBydWxlcyA9IHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlTWFwRnJvbVJ1bGVzIiwicnVsZXNVdGlsaXRpZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwicnVsZXMiLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwib3BlcmF0aW9ucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJ1bGUiLCJyZWN1cnNpdmVEZWZpbml0aW9ucyIsImNvbnRleHQiLCJyZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7Ozs0QkFSTztpRkFFVTttRkFDRTtxRkFDRTs7Ozs7O0FBRTdDLElBQVFDLG1CQUF1RUMsNEJBQWMsQ0FBckZELGtCQUFrQkUscUJBQXFERCw0QkFBYyxDQUFuRUMsb0JBQW9CQywrQkFBaUNGLDRCQUFjLENBQS9DRTtBQUUvQixTQUFTSix1QkFBdUJLLEtBQUssRUFBRTtJQUNwRCxJQUFNQyxZQUFZSCxtQkFBbUJFLFFBQy9CRSxVQUFVTixpQkFBaUJJLFFBQzNCRyxhQUFhLEVBQUUsRUFDZkMsMkJBQTJCLEVBQUUsRUFDN0JDLE9BQU9KLFdBQ1BLLHVCQUF1QixFQUFFLEVBQ3pCQyxVQUFVO1FBQ1JMLFNBQUFBO1FBQ0FDLFlBQUFBO1FBQ0FDLDBCQUFBQTtJQUNGO0lBRU5JLElBQUFBLHlDQUFnQyxFQUFDSCxNQUFNQyxzQkFBc0JDO0lBRTdERSxJQUFBQSx1Q0FBOEIsRUFBQ0Y7SUFFL0IseUNBQXlDO0lBRXpDUCxRQUFRRCw2QkFBNkJFLFdBQVdDLFVBQVUsR0FBRztJQUU3RCxPQUFPRjtBQUNUIn0=