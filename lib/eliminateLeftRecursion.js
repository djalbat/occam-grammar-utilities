"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamparsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interop_require_default(require("./directedGraph"));
var _createReducedRules = /*#__PURE__*/ _interop_require_default(require("./createReducedRules"));
var _rewriteLeftRecursiveRules = /*#__PURE__*/ _interop_require_default(require("./rewriteLeftRecursiveRules"));
var _createDirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createDirectlyRepeatedRules"));
var _createIndirectlyRepeatedRules = /*#__PURE__*/ _interop_require_default(require("./createIndirectlyRepeatedRules"));
var _directedGraph1 = require("./utilities/directedGraph");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamparsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamparsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamparsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), directedGraph = directedGraphFromRuleMapAndStartRule(ruleMap, startRule);
    (0, _createReducedRules.default)(ruleMap, directedGraph);
    (0, _createDirectlyRepeatedRules.default)(ruleMap, directedGraph);
    (0, _createIndirectlyRepeatedRules.default)(ruleMap, directedGraph);
    (0, _rewriteLeftRecursiveRules.default)(ruleMap, directedGraph);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}
function directedGraphFromRuleMapAndStartRule(ruleMap, startRule) {
    var startRuleName = startRule.getName(), edges = (0, _directedGraph1.edgesFromStartRuleAndRuleMap)(startRule, ruleMap), startVertex = startRuleName, directedGraph = _directedGraph.default.fromEdgesAndStartVertex(edges, startVertex);
    return directedGraph;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBEaXJlY3RlZEdyYXBoIGZyb20gXCIuL2RpcmVjdGVkR3JhcGhcIjtcbmltcG9ydCBjcmVhdGVSZWR1Y2VkUnVsZXMgZnJvbSBcIi4vY3JlYXRlUmVkdWNlZFJ1bGVzXCI7XG5pbXBvcnQgcmV3cml0ZUxlZnRSZWN1cnNpdmVSdWxlcyBmcm9tIFwiLi9yZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzXCI7XG5pbXBvcnQgY3JlYXRlRGlyZWN0bHlSZXBlYXRlZFJ1bGVzIGZyb20gXCIuL2NyZWF0ZURpcmVjdGx5UmVwZWF0ZWRSdWxlc1wiO1xuaW1wb3J0IGNyZWF0ZUluZGlyZWN0bHlSZXBlYXRlZFJ1bGVzIGZyb20gXCIuL2NyZWF0ZUluZGlyZWN0bHlSZXBlYXRlZFJ1bGVzXCI7XG5cbmltcG9ydCB7IGVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSBmcm9tIFwiLi91dGlsaXRpZXMvZGlyZWN0ZWRHcmFwaFwiO1xuXG5jb25zdCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBkaXJlY3RlZEdyYXBoID0gZGlyZWN0ZWRHcmFwaEZyb21SdWxlTWFwQW5kU3RhcnRSdWxlKHJ1bGVNYXAsIHN0YXJ0UnVsZSk7XG5cbiAgY3JlYXRlUmVkdWNlZFJ1bGVzKHJ1bGVNYXAsIGRpcmVjdGVkR3JhcGgpO1xuXG4gIGNyZWF0ZURpcmVjdGx5UmVwZWF0ZWRSdWxlcyhydWxlTWFwLCBkaXJlY3RlZEdyYXBoKTtcblxuICBjcmVhdGVJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlcyhydWxlTWFwLCBkaXJlY3RlZEdyYXBoKTtcblxuICByZXdyaXRlTGVmdFJlY3Vyc2l2ZVJ1bGVzKHJ1bGVNYXAsIGRpcmVjdGVkR3JhcGgpO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdGVkR3JhcGhGcm9tUnVsZU1hcEFuZFN0YXJ0UnVsZShydWxlTWFwLCBzdGFydFJ1bGUpIHtcbiAgY29uc3Qgc3RhcnRSdWxlTmFtZSA9IHN0YXJ0UnVsZS5nZXROYW1lKCksXG4gICAgICAgIGVkZ2VzID0gZWRnZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApLFxuICAgICAgICBzdGFydFZlcnRleCA9IHN0YXJ0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgZGlyZWN0ZWRHcmFwaCA9IERpcmVjdGVkR3JhcGguZnJvbUVkZ2VzQW5kU3RhcnRWZXJ0ZXgoZWRnZXMsIHN0YXJ0VmVydGV4KTtcblxuICByZXR1cm4gZGlyZWN0ZWRHcmFwaDtcbn1cbiJdLCJuYW1lcyI6WyJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIiwicnVsZU1hcEZyb21SdWxlcyIsInJ1bGVzVXRpbGl0aWVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwicnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsInJ1bGVzIiwicnVsZU1hcCIsInN0YXJ0UnVsZSIsImRpcmVjdGVkR3JhcGgiLCJkaXJlY3RlZEdyYXBoRnJvbVJ1bGVNYXBBbmRTdGFydFJ1bGUiLCJjcmVhdGVSZWR1Y2VkUnVsZXMiLCJjcmVhdGVEaXJlY3RseVJlcGVhdGVkUnVsZXMiLCJjcmVhdGVJbmRpcmVjdGx5UmVwZWF0ZWRSdWxlcyIsInJld3JpdGVMZWZ0UmVjdXJzaXZlUnVsZXMiLCJzdGFydFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImVkZ2VzIiwiZWRnZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsInN0YXJ0VmVydGV4IiwiRGlyZWN0ZWRHcmFwaCIsImZyb21FZGdlc0FuZFN0YXJ0VmVydGV4Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFjQTs7O2VBQXdCQTs7OzRCQVpPO29FQUVMO3lFQUNLO2dGQUNPO2tGQUNFO29GQUNFOzhCQUVHOzs7Ozs7QUFFN0MsSUFBUUMsbUJBQXVFQyw0QkFBYyxDQUFyRkQsa0JBQWtCRSxxQkFBcURELDRCQUFjLENBQW5FQyxvQkFBb0JDLCtCQUFpQ0YsNEJBQWMsQ0FBL0NFO0FBRS9CLFNBQVNKLHVCQUF1QkssS0FBSyxFQUFFO0lBQ3BELElBQU1DLFVBQVVMLGlCQUFpQkksUUFDM0JFLFlBQVlKLG1CQUFtQkUsUUFDL0JHLGdCQUFnQkMscUNBQXFDSCxTQUFTQztJQUVwRUcsSUFBQUEsMkJBQWtCLEVBQUNKLFNBQVNFO0lBRTVCRyxJQUFBQSxvQ0FBMkIsRUFBQ0wsU0FBU0U7SUFFckNJLElBQUFBLHNDQUE2QixFQUFDTixTQUFTRTtJQUV2Q0ssSUFBQUEsa0NBQXlCLEVBQUNQLFNBQVNFO0lBRW5DSCxRQUFRRCw2QkFBNkJHLFdBQVdELFVBQVUsR0FBRztJQUU3RCxPQUFPRDtBQUNUO0FBRUEsU0FBU0kscUNBQXFDSCxPQUFPLEVBQUVDLFNBQVMsRUFBRTtJQUNoRSxJQUFNTyxnQkFBZ0JQLFVBQVVRLE9BQU8sSUFDakNDLFFBQVFDLElBQUFBLDRDQUE0QixFQUFDVixXQUFXRCxVQUNoRFksY0FBY0osZUFDZE4sZ0JBQWdCVyxzQkFBYSxDQUFDQyx1QkFBdUIsQ0FBQ0osT0FBT0U7SUFFbkUsT0FBT1Y7QUFDVCJ9