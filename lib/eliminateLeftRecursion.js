"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _retrieveLeftRecursiveDefinitions = /*#__PURE__*/ _interopRequireDefault(require("./retrieveLeftRecursiveDefinitions"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), rule = startRule, ruleOperations = [], definitionOperations = [], directlyLeftRecursiveDefinitions = [], indirectlyLeftRecursiveDefinitions = [], context = {
        ruleMap: ruleMap,
        ruleOperations: ruleOperations,
        definitionOperations: definitionOperations,
        directlyLeftRecursiveDefinitions: directlyLeftRecursiveDefinitions,
        indirectlyLeftRecursiveDefinitions: indirectlyLeftRecursiveDefinitions
    };
    (0, _retrieveLeftRecursiveDefinitions.default)(rule, context);
    (0, _eliminateIndirectLeftRecursion.default)(context);
    (0, _eliminateDirectLeftRecursion.default)(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5pbXBvcnQgcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgZnJvbSBcIi4vcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMsIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZSA9IHN0YXJ0UnVsZSwgLy8vXG4gICAgICAgIHJ1bGVPcGVyYXRpb25zID0gW10sXG4gICAgICAgIGRlZmluaXRpb25PcGVyYXRpb25zID0gW10sXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gW10sXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBydWxlTWFwLFxuICAgICAgICAgIHJ1bGVPcGVyYXRpb25zLFxuICAgICAgICAgIGRlZmluaXRpb25PcGVyYXRpb25zLFxuICAgICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLFxuICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcbiAgICAgICAgfTtcblxuICByZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBjb250ZXh0KTtcblxuICBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCk7XG5cbiAgZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICBydWxlcyA9IHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJydWxlTWFwRnJvbVJ1bGVzIiwicnVsZXNVdGlsaXRpZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwicnVsZXMiLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwicnVsZSIsInJ1bGVPcGVyYXRpb25zIiwiZGVmaW5pdGlvbk9wZXJhdGlvbnMiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJjb250ZXh0IiwicmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iLCJlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBVWIsU0F5QkM7OztlQXpCdUJBLHNCQUFzQjs7OzRCQVJmLGVBQWU7aUZBRUwsZ0NBQWdDO21GQUM5QixrQ0FBa0M7cUZBQ2hDLG9DQUFvQzs7Ozs7O0FBRWpGLElBQVFDLGdCQUFnQixHQUF1REMsYUFBYyxlQUFBLENBQXJGRCxnQkFBZ0IsRUFBRUUsa0JBQWtCLEdBQW1DRCxhQUFjLGVBQUEsQ0FBbkVDLGtCQUFrQixFQUFFQyw0QkFBNEIsR0FBS0YsYUFBYyxlQUFBLENBQS9DRSw0QkFBNEIsQUFBb0I7QUFFL0UsU0FBU0osc0JBQXNCLENBQUNLLEtBQUssRUFBRTtJQUNwRCxJQUFNQyxTQUFTLEdBQUdILGtCQUFrQixDQUFDRSxLQUFLLENBQUMsRUFDckNFLE9BQU8sR0FBR04sZ0JBQWdCLENBQUNJLEtBQUssQ0FBQyxFQUNqQ0csSUFBSSxHQUFHRixTQUFTLEVBQ2hCRyxjQUFjLEdBQUcsRUFBRSxFQUNuQkMsb0JBQW9CLEdBQUcsRUFBRSxFQUN6QkMsZ0NBQWdDLEdBQUcsRUFBRSxFQUNyQ0Msa0NBQWtDLEdBQUcsRUFBRSxFQUN2Q0MsT0FBTyxHQUFHO1FBQ1JOLE9BQU8sRUFBUEEsT0FBTztRQUNQRSxjQUFjLEVBQWRBLGNBQWM7UUFDZEMsb0JBQW9CLEVBQXBCQSxvQkFBb0I7UUFDcEJDLGdDQUFnQyxFQUFoQ0EsZ0NBQWdDO1FBQ2hDQyxrQ0FBa0MsRUFBbENBLGtDQUFrQztLQUNuQyxBQUFDO0lBRVJFLElBQUFBLGlDQUFnQyxRQUFBLEVBQUNOLElBQUksRUFBRUssT0FBTyxDQUFDLENBQUM7SUFFaERFLElBQUFBLCtCQUE4QixRQUFBLEVBQUNGLE9BQU8sQ0FBQyxDQUFDO0lBRXhDRyxJQUFBQSw2QkFBNEIsUUFBQSxFQUFDSCxPQUFPLENBQUMsQ0FBQztJQUV0Q1IsS0FBSyxHQUFHRCw0QkFBNEIsQ0FBQ0UsU0FBUyxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUc7SUFFN0QsT0FBT0YsS0FBSyxDQUFDO0FBQ2YsQ0FBQyJ9