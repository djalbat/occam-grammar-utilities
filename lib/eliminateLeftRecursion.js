'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findImplicitlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findImplicitlyLeftRecursiveDefinition,
    findRule = ruleUtilities.findRule,
    reducedRuleFromRule = ruleUtilities.reducedRuleFromRule,
    repeatedRuleFromLeftRecursiveRuleName = ruleUtilities.repeatedRuleFromLeftRecursiveRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      removedLeftRecursiveDefinitions = [];

  removeLeftRecursiveDefinitions(rule, recursiveDefinitions, removedLeftRecursiveDefinitions, rules);

  rewriteRemovedLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, rules);

  checkRemovedLeftRecursiveDefinitions(removedLeftRecursiveDefinitions);
}

module.exports = eliminateLeftRecursion;

function removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, removedLeftRecursiveDefinitions) {
  var directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

  var indirectlyLeftRecursive = false;

  if (!directlyLeftRecursive) {
    var implicitlyLeftRecursiveDefinition = findImplicitlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (implicitlyLeftRecursiveDefinition !== null) {
      leftRecursiveDefinition.setImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition);

      indirectlyLeftRecursive = true;
    }
  }

  var remove = directlyLeftRecursive || indirectlyLeftRecursive;

  if (remove) {
    var removedLeftRecursiveDefinition = leftRecursiveDefinition; ///

    removedLeftRecursiveDefinitions.push(removedLeftRecursiveDefinition);
  }

  return remove;
}

function removeLeftRecursiveDefinitions(rule, recursiveDefinitions, removedLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var remove = false;

    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var leftRecursive = recursiveDefinition.isLeftRecursive();

      if (leftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition; ///

        remove = removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, removedLeftRecursiveDefinitions);
      }

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          allRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          allRecursiveDefinitionRuleNames = allRecursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = allRecursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = allRecursiveDefinitions; ///

            removeLeftRecursiveDefinitions(_rule, _recursiveDefinitions, removedLeftRecursiveDefinitions, rules);
          }
        }
      });
    }

    return remove;
  });
}

function rewriteRemovedLeftRecursiveDefinition(removedLeftRecursiveDefinition, rules) {
  var leftRecursiveDefinition = removedLeftRecursiveDefinition,
      ///
  ruleName = leftRecursiveDefinition.getRuleName(),
      rule = findRule(ruleName, rules),
      reducedRule = reducedRuleFromRule(rule, rules),
      rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

  reducedRule === null ? rule.addDefinition(rewrittenDefinition) : rule.addDefinition(rewrittenDefinition, -1);

  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
      repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

  repeatedRule.addDefinition(repeatedDefinition);

  var implicitlyLeftRecursiveDefinition = leftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();

  if (implicitlyLeftRecursiveDefinition !== null) {
    var definition = implicitlyLeftRecursiveDefinition.getDefinition(),
        leftRecursiveRule = findRule(leftRecursiveRuleName, rules),
        reducedLeftRecursiveRule = reducedRuleFromRule(leftRecursiveRule, rules);

    leftRecursiveRule.addDefinition(definition, -1);

    reducedLeftRecursiveRule.removeDefinition(definition);
  }
}

function rewriteRemovedLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, rules) {
  forEachWithRemove(removedLeftRecursiveDefinitions, function (removedLeftRecursiveDefinition) {
    var rewritable = removedLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      rewriteRemovedLeftRecursiveDefinition(removedLeftRecursiveDefinition, rules);

      return true;
    }
  });
}

function checkRemovedLeftRecursiveDefinitions(removedLeftRecursiveDefinitions) {
  var removedLeftRecursiveDefinitionsLength = removedLeftRecursiveDefinitions.length;

  if (removedLeftRecursiveDefinitionsLength > 0) {
    var ruleNames = removedLeftRecursiveDefinitions.map(function (removedLeftRecursiveDefinition) {
      return removedLeftRecursiveDefinition.getRuleName();
    }),
        ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the following rule or rules: ' + ruleNamesString + '.');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,