'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ReducedRule = require('./rule/reduced'),
    RepeatedRule = require('./rule/repeated'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RuleNameDefinition = require('./definition/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteImmediatelyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionNonStrictlyLeftRecursive = recursiveDefinition.isNonStrictlyLeftRecursive();

  if (recursiveDefinitionNonStrictlyLeftRecursive) {
    var nonStrictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    leftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(),
          implicitDefinition = indirectlyLeftRecursiveDefinitionDefinition; ///

      nonStrictlyLeftRecursiveDefinition.setImplicitDefinition(implicitDefinition);

      var immediatelyLeftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          allRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          allRecursiveDefinitionRuleNames = allRecursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = allRecursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = allRecursiveDefinitions; ///

            removeImmediatelyLeftRecursiveDefinitions(_rule, _recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules),
        reducedRule = reducedRuleFromRule(rule, rules),
        rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    reducedRule === null ? rule.addDefinition(rewrittenDefinition) : rule.addDefinition(rewrittenDefinition, -1);

    var leftRecursiveRuleName = immediatelyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
        repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

    repeatedRule.addDefinition(repeatedDefinition);

    return true;
  }
}

function rewriteNonStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var nonStrictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isNonStrictlyLeftRecursive();

  if (nonStrictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules),
        reducedRule = reducedRuleFromRule(rule, rules),
        rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    reducedRule === null ? rule.addDefinition(rewrittenDefinition) : rule.addDefinition(rewrittenDefinition, -1);

    var leftRecursiveRuleName = immediatelyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
        repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

    repeatedRule.addDefinition(repeatedDefinition);

    var leftRecursiveRule = findRule(leftRecursiveRuleName, rules),
        reducedLeftRecursiveRuleName = reducedRuleNameFromRuleName(leftRecursiveRuleName);

    var reducedLeftRecursiveRule = findRule(reducedLeftRecursiveRuleName, rules);

    if (reducedLeftRecursiveRule === null) {
      reducedLeftRecursiveRule = ReducedRule.fromReducedRuleNameAndRule(reducedLeftRecursiveRuleName, leftRecursiveRule);

      rules.push(reducedLeftRecursiveRule);

      var reducedLeftRecursiveRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedLeftRecursiveRuleName),
          definitions = [reducedLeftRecursiveRuleNameDefinition];

      leftRecursiveRule.setDefinitions(definitions);
    }

    var implicitDefinition = immediatelyLeftRecursiveDefinition.getImplicitDefinition();

    reducedLeftRecursiveRule.removeDefinition(implicitDefinition);

    leftRecursiveRule.addDefinition(implicitDefinition, -1);

    return true;
  }
}

function rewriteImmediatelyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) || rewriteNonStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules) {
  var ruleName = leftRecursiveRuleName,
      ///
  repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function reducedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromReducedRuleNameAndRule(reducedRuleName, rule);

    if (reducedRule !== null) {
      rules.push(reducedRule);

      var reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName),
          definitions = [reducedRuleNameDefinition];

      rule.setDefinitions(definitions);
    }
  }

  return reducedRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,