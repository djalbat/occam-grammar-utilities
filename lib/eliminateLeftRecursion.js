'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonRecursiveDefinition = require('./definition/nonRecursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly'),
    ImmediatelyLeftRecursiveDefinition = require('./definition/leftRecursive/immediately');

var findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  leftRecursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  // createNonRecursiveRules(configuration);
  //
  // createRightRecursiveRules(configuration);
  //
  // rewriteIndirectlyLeftRecursiveRules(configuration);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = LeftRecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName),
          leftRecursiveDefinitionImmediatelyLeftRecursive = leftRecursiveDefinition.isImmediatelyLeftRecursive(leftRecursiveDefinitions);

      if (leftRecursiveDefinitionImmediatelyLeftRecursive) {
        var indirectlyLeftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromLeftRecursiveDefinitionAndLeftRecursiveDefinitions(leftRecursiveDefinition, leftRecursiveDefinitions),
            immediatelyLeftRecursiveDefinition = ImmediatelyLeftRecursiveDefinition.fromLeftRecursiveDefinitionAndIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, indirectlyLeftRecursiveDefinition);

        immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

        return true;
      }

      leftRecursiveDefinitions = [].concat(_toConsumableArray(leftRecursiveDefinitions), [leftRecursiveDefinition]);

      var _rule = ruleFromLeftRecursiveDefinition(leftRecursiveDefinition, rules);

      if (_rule !== null) {
        removeImmediatelyLeftRecursiveDefinitions(_rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
      }
    }
  });
}

function rewriteIndirectlyLeftRecursiveRules(configuration) {
  configuration.forEachIndirectlyLeftRecursiveRule(function (indirectlyRecursiveRule) {
    var rule = indirectlyRecursiveRule,
        ///
    ruleName = rule.getName(),
        nonRecursiveRule = NonRecursiveRule.fromRuleName(ruleName);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    var definitions = rule.getDefinitions();

    forEachWithRemove(definitions, function (definition) {
      var definitionIndirectlyRecursiveDefinition = configuration.isDefinitionIndirectlyLeftRecursiveDefinition(definition, ruleName),
          definitionNonRecursiveDefinition = !definitionIndirectlyRecursiveDefinition;

      if (definitionNonRecursiveDefinition) {
        var _nonRecursiveDefinition = definition; ///

        nonRecursiveRule.addNonRecursiveDefinition(_nonRecursiveDefinition);

        return true;
      }
    });

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createRightRecursiveRules(configuration) {
  configuration.forEachImmediatelyLeftRecursiveRuleName(function (immediatelyLeftRecursiveRuleName) {
    var ruleName = immediatelyLeftRecursiveRuleName,
        ///
    rule = configuration.findRule(ruleName),
        immediatelyLeftRecursiveDefinitions = configuration.getImmediatelyLeftRecursiveDefinitions(ruleName);

    var rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(ruleName),
        rightRecursiveRule = RightRecursiveRule.fromRightRecursiveRuleName(rightRecursiveRuleName);

    immediatelyLeftRecursiveDefinitions.forEach(function (immediatelyLeftRecursiveDefinition) {
      var definition = immediatelyLeftRecursiveDefinition,
          ///
      rightRecursiveDefinition = RightRecursiveDefinition.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName),
          recursiveRuleName = rightRecursiveDefinition.getRecursiveRuleName(),
          recursiveDefinition = RecursiveDefinition.fromRecursiveRuleNameAndRightRecursiveRuleName(recursiveRuleName, rightRecursiveRuleName);

      rightRecursiveRule.addRightRecursiveDefinition(rightRecursiveDefinition);

      rule.addDefinition(recursiveDefinition);
    });

    configuration.addRightRecursiveRule(rightRecursiveRule);

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(configuration) {
  configuration.forEachImmediatelyLeftRecursiveRule(function (immediatelyLeftRecursiveRule) {
    var rule = immediatelyLeftRecursiveRule,
        ///
    nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    rule.clearDefinitions();
  });
}

function ruleFromLeftRecursiveDefinition(leftRecursiveDefinition, rules) {
  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      name = leftRecursiveRuleName,
      ///
  rule = findRuleByName(name, rules);

  return rule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,