'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonRecursiveDefinition = require('./definition/nonRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var addToArrayMap = objectUtilities.addToArrayMap,
    findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitionsMap = {};

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);

  // createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  // rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  // createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

      if (recursiveDefinitionStrictlyLeftRecursive) {
        var strictlyLeftRecursiveDefinition = recursiveDefinition,
            ///
        immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

        addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

        return true;
      }

      var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

      if (recursiveDefinitionLeftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition,
            ///
        indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

        if (indirectlyLeftRecursiveDefinition !== null) {
          var _immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

          _immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

          addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, _immediatelyLeftRecursiveDefinition);

          return true;
        }
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var name = recursiveRuleName,
              ///
          _rule = findRuleByName(name, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);
          }
        }
      });
    }
  });
}

function createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var immediatelyLeftRecursiveDefinitionsMap = immediatelyLeftRecursiveDefinitionsMap[ruleName],
        rightRecursiveDefinitions = immediatelyLeftRecursiveDefinitionsMap.map(function (immediatelyLeftRecursiveDefinition) {
      var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

      return rightRecursiveDefinition;
    }),
        rightRecursiveRule = RightRecursiveRule.fromRuleNameAndRightRecursiveDefinitions(ruleName, rightRecursiveDefinitions);

    rules.push(rightRecursiveRule);
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName),
        nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(recursiveDefinition);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    rules.push(nonRecursiveRule);

    rule.clearDefinitions();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,