'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RuleNameDefinition = require('./definition/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition'),
    NonRecursiveRuleNameDefinition = require('./definition/nonRecursiveRuleName'),
    NonRecursiveAndRightRecursiveRuleNamesDefinition = require('./definition/nonRecursiveAndRightRecursiveRuleNames');

var findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    areElementsEqual = arrayUtilities.areElementsEqual,
    addToArrayMap = objectUtilities.addToArrayMap,
    forEachNameValueWithRemove = objectUtilities.forEachNameValueWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitionsMap = {};

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(ruleName, recursiveDefinition, immediatelyLeftRecursiveDefinitionsMap) {
  var remove = false;

  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

    remove = true;
  }

  return remove;
}

function removeImmediatelyLeftRecursiveDefinition(ruleName, recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap) {
  var remove = false;

  var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

  if (recursiveDefinitionLeftRecursive) {
    var leftRecursiveDefinition = recursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

      addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

      remove = true;
    }
  }

  return remove;
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var remove = false;

    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      remove = remove || removeStrictlyLeftRecursiveDefinition(ruleName, recursiveDefinition, immediatelyLeftRecursiveDefinitionsMap);

      remove = remove || removeImmediatelyLeftRecursiveDefinition(ruleName, recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap);

      if (!remove) {
        recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

        var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
            recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
          return recursiveDefinition.getRuleName();
        });

        recursiveRuleNames.forEach(function (recursiveRuleName) {
          var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

          if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
            var name = recursiveRuleName,
                ///
            _rule = findRuleByName(name, rules);

            if (_rule !== null) {
              removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);
            }
          }
        });
      }
    }

    return remove;
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  forEachNameValueWithRemove(immediatelyLeftRecursiveDefinitionsMap, function (ruleName, immediatelyLeftRecursiveDefinitions) {
    var remove = false;

    remove = remove || rewriteStrictlyLeftRecursiveRule(ruleName, immediatelyLeftRecursiveDefinitions, rules);

    remove = remove || rewriteImmediatelyAndIndirectlyLeftRecursiveRules(ruleName, immediatelyLeftRecursiveDefinitions, rules);

    return remove;
  });
}

function rewriteStrictlyLeftRecursiveRule(ruleName, immediatelyLeftRecursiveDefinitions, rules) {
  var remove = false;

  var ruleRewritable = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.isRewritable();
  });

  if (ruleRewritable) {
    var ruleStrictlyLeftRecursive = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
      return immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();
    });

    if (ruleStrictlyLeftRecursive) {
      var lookAheads = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.isLookAhead();
      }),
          lookAheadsEqual = areElementsEqual(lookAheads);

      if (lookAheadsEqual) {
        var name = ruleName,
            ///
        rule = findRuleByName(name, rules),
            immediatelyLeftRecursiveRule = rule,
            ///
        nonRecursiveRule = NonRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
            rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);

        rules.push(nonRecursiveRule);

        rules.push(rightRecursiveRule);

        var firstLookAhead = first(lookAheads),
            lookAhead = firstLookAhead,
            ///
        leftRecursiveRuleName = ruleName,
            ///
        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromRuleName(ruleName),
            nonRecursiveAndRightRecursiveRuleNamesDefinition = NonRecursiveAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead),
            definitions = [nonRecursiveAndRightRecursiveRuleNamesDefinition, nonRecursiveRuleNameDefinition];

        immediatelyLeftRecursiveRule.setDefinitions(definitions);

        remove = true;
      }
    }
  }

  return remove;
}

function rewriteImmediatelyAndIndirectlyLeftRecursiveRules(ruleName, immediatelyLeftRecursiveDefinitions, rules) {
  var remove = false;

  var ruleRewritable = immediatelyLeftRecursiveDefinitions.every(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.isRewritable();
  });

  if (ruleRewritable) {
    var ruleNonStrictlyLeftRecursive = !immediatelyLeftRecursiveDefinitions.some(function (immediatelyLeftRecursiveDefinition) {
      return immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();
    });

    if (ruleNonStrictlyLeftRecursive) {
      var lookAheads = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.isLookAhead();
      }),
          lookAheadsEqual = areElementsEqual(lookAheads),
          leftRecursiveRuleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
        return immediatelyLeftRecursiveDefinition.getLeftRecursiveRuleName();
      }),
          leftRecursiveRuleNamesEqual = areElementsEqual(leftRecursiveRuleNames);

      if (lookAheadsEqual && leftRecursiveRuleNamesEqual) {
        var rule = void 0,
            name = void 0,
            definitions = void 0,
            nonRecursiveRule = void 0,
            nonRecursiveRuleNameDefinition = void 0;

        name = ruleName; ///

        rule = findRuleByName(name, rules);

        var immediatelyLeftRecursiveRule = rule; ///

        nonRecursiveRule = NonRecursiveRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);

        var rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);

        rules.push(nonRecursiveRule);

        rules.push(rightRecursiveRule);

        var firstLookAhead = first(lookAheads),
            firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
            lookAhead = firstLookAhead,
            ///
        leftRecursiveRuleName = firstLeftRecursiveRuleName; ///

        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromRuleName(ruleName);

        var nonRecursiveAndRightRecursiveRuleNamesDefinition = NonRecursiveAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);

        definitions = [nonRecursiveAndRightRecursiveRuleNamesDefinition, nonRecursiveRuleNameDefinition];

        immediatelyLeftRecursiveRule.setDefinitions(definitions);

        name = leftRecursiveRuleName; ///

        rule = findRuleByName(name, rules);

        var indirectlyLeftRecursiveRule = rule,
            ///
        firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
            immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition,
            ///
        indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition();

        nonRecursiveRule = NonRecursiveRule.fromIndirectlyLeftRecursiveRuleAndIndirectlyLeftRecursiveDefintion(indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition);

        var ruleNameDefinition = RuleNameDefinition.fromRuleName(ruleName);

        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromLeftRecursiveRuleName(leftRecursiveRuleName);

        definitions = [ruleNameDefinition, nonRecursiveRuleNameDefinition];

        indirectlyLeftRecursiveRule.setDefinitions(definitions);

        rules.push(nonRecursiveRule);

        remove = true;
      }
    }
  }

  return remove;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,