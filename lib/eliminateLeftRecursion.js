"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _rewritten = _interopRequireDefault(require("./rule/rewritten"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _class = require("./utilities/class");
var _rule = require("./utilities/rule");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, reducedRules = [], rewrittenRules = [], leftRecursiveRules = [], recursiveDefinitions = [], leftRecursiveDefinitions = [];
    retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap);
    // retrieveLeftRecursiveRules(leftRecursiveRules, leftRecursiveDefinitions, ruleMap);
    //
    // reduceLeftRecursiveRules(leftRecursiveRules, reducedRules, ruleMap);
    //
    // rewriteLeftRecursiveRules(leftRecursiveRules, rewrittenRules, ruleMap);
    ///
    eliminateDirectLeftRecursion(rewrittenRules, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function reduceLeftRecursiveRules(leftRecursiveRules, reducedRules, ruleMap) {
    leftRecursiveRules.forEach(function(leftRecursiveRule) {
        var rule = leftRecursiveRule, reducedRule = _reduced.default.fromRule(rule);
        if (reducedRule !== null) {
            var reducedRuleName = reducedRule.getName();
            ruleMap[reducedRuleName] = reducedRule;
            reducedRules.push(reducedRule);
        }
    });
}
function rewriteLeftRecursiveRules(leftRecursiveRules, rewrittenRules, ruleMap) {
    leftRecursiveRules.forEach(function(leftRecursiveRule) {
        var rule = leftRecursiveRule, ruleName = rule.getName(), rewrittenRule = _rewritten.default.fromRule(rule);
        delete ruleMap[ruleName];
        var rewrittenRuleName = ruleName; ///
        ruleMap[rewrittenRuleName] = rewrittenRule;
        rewrittenRules.push(rewrittenRule);
    });
}
function retrieveLeftRecursiveRules(leftRecursiveRules, leftRecursiveDefinitions, ruleMap) {
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        var ruleName = leftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], leftRecursiveRulesIncludesRule = leftRecursiveRules.includes(rule);
        if (!leftRecursiveRulesIncludesRule) {
            var leftRecursiveRule = rule; ///
            leftRecursiveRules.push(leftRecursiveRule);
        }
    // const leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = isInstanceOf(leftRecursiveDefinition, IndirectlyLeftRecursiveDefinition);
    //
    // if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
    //   const indirectlyLeftRecursiveDefinition = leftRecursiveDefinition,  ///
    //         implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
    //         ruleName = implicitlyLeftRecursiveDefinition.getRuleName(),
    //         rule = ruleMap[ruleName],
    //         leftRecursiveRulesIncludesRule = leftRecursiveRules.includes(rule);
    //
    //     if (!leftRecursiveRulesIncludesRule) {
    //       const leftRecursiveRule = rule; ///
    //
    //       leftRecursiveRules.push(leftRecursiveRule);
    //     }
    // }
    });
}
function eliminateDirectLeftRecursion(rewrittenRules, ruleMap) {
    rewrittenRules.forEach(function(rewrittenRule) {
        return rewrittenRule.rewrite(ruleMap);
    });
}
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), indirectlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap), implicitlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, ruleMap), indirectlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(indirectlyLeftRecursiveRule), implicitlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(implicitlyLeftRecursiveRule);
        if (indirectlyLeftRecursiveRuleDirectlyLeftRecursive && implicitlyLeftRecursiveRuleDirectlyLeftRecursive) {
            var indirectlyLeftRecursiveDefinitionString = indirectlyLeftRecursiveDefinition.asString(), implicitlyLeftRecursiveDefinitionString = implicitlyLeftRecursiveDefinition.asString();
            throw new Error("The rules containing the '".concat(indirectlyLeftRecursiveDefinitionString, "' indirectly left recursive and ").concat(implicitlyLeftRecursiveDefinitionString, " implicitly left recursive definitions are both additionally directly recursive and therefore cannot be rewritten."));
        }
        var rule;
        var leftRecursiveDefinition = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? implicitlyLeftRecursiveDefinition : indirectlyLeftRecursiveDefinition, directlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? indirectlyLeftRecursiveRule : implicitlyLeftRecursiveRule, nonDirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? implicitlyLeftRecursiveRule : indirectlyLeftRecursiveRule, leftRecursiveDefinitionRuleName = leftRecursiveDefinition.getRuleName(), leftRecursiveRuleName = leftRecursiveDefinitionRuleName, definition = leftRecursiveDefinition;
        rule = nonDirectlyLeftRecursiveRule; ///
        var reducedRule = _reduced.default.fromRule(rule);
        if (reducedRule === null) {
            debugger;
        }
        var reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        (0, _rule).substituteDefinition(rule, definition, leftRecursiveRuleName);
    });
}
function retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var recursiveDefinition;
    var ruleName = rule.getName(), definitionRecursiveDefinition = (0, _class).isInstanceOf(definition, _recursive.default);
    if (definitionRecursiveDefinition) {
        recursiveDefinition = definition; ///
    } else {
        var leftRecursiveDefinition = _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _left.default.fromRuleNameAndDefinition(ruleName, definition);
        if (leftRecursiveDefinition !== null) {
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
            recursiveDefinition = leftRecursiveDefinition; ///
        } else {
            recursiveDefinition = _recursive.default.fromRuleNameAndDefinition(ruleName, definition);
        }
        if (recursiveDefinition !== null) {
            var replacedDefinition = definition, replacementDefinition = recursiveDefinition; ///
            rule.replaceDefinition(replacedDefinition, replacementDefinition);
            var recursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(recursiveDefinition, _indirectly.default);
            if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                var indirectlyLeftRecursiveDefinition = recursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), leftRecursiveDefinition1 = implicitlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), ruleName1 = implicitlyLeftRecursiveDefinition.getRuleName(), replacedDefinition1 = leftRecursiveDefinition1, replacementDefinition1 = implicitlyLeftRecursiveDefinition; ///
                rule = ruleMap[ruleName1];
                rule.replaceDefinition(replacedDefinition1, replacementDefinition1);
            }
        }
    }
    return recursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        var recursiveDefinition = retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                var previousRecursiveDefinitionRuleName = previousRecursiveDefinition.getRuleName(), previousRecursiveRuleName = previousRecursiveDefinitionRuleName; ///
                return previousRecursiveRuleName;
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var _$recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, _$recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,