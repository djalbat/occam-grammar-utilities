"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamParsers = require("occam-parsers");
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("./eliminateIndirectLeftRecursion"));
var _retrieveLeftRecursiveDefinitions = /*#__PURE__*/ _interopRequireDefault(require("./retrieveLeftRecursiveDefinitions"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamParsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), rule = startRule, indirectlyLeftRecursiveDefinitions = [], directlyLeftRecursiveDefinitions = [], previousOperations = [], context = {
        indirectlyLeftRecursiveDefinitions: indirectlyLeftRecursiveDefinitions,
        directlyLeftRecursiveDefinitions: directlyLeftRecursiveDefinitions,
        previousOperations: previousOperations,
        ruleMap: ruleMap
    };
    (0, _retrieveLeftRecursiveDefinitions.default)(rule, context);
    (0, _eliminateIndirectLeftRecursion.default)(context);
    (0, _eliminateDirectLeftRecursion.default)(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5pbXBvcnQgcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgZnJvbSBcIi4vcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMsIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZSA9IHN0YXJ0UnVsZSwgLy8vXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgcHJldmlvdXNPcGVyYXRpb25zID0gW10sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgICBwcmV2aW91c09wZXJhdGlvbnMsXG4gICAgICAgICAgcnVsZU1hcFxuICAgICAgICB9O1xuXG4gIHJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpO1xuXG4gIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInN0YXJ0UnVsZSIsInJ1bGVNYXAiLCJydWxlIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicHJldmlvdXNPcGVyYXRpb25zIiwiY29udGV4dCIsInJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uIiwiZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7OytCQVViLFNBdUJDOzs7ZUF2QnVCQSxzQkFBc0I7Ozs0QkFSZixlQUFlO2lGQUVMLGdDQUFnQzttRkFDOUIsa0NBQWtDO3FGQUNoQyxvQ0FBb0M7Ozs7OztBQUVqRixJQUFRQyxnQkFBZ0IsR0FBdURDLGFBQWMsZUFBQSxDQUFyRkQsZ0JBQWdCLEVBQUVFLGtCQUFrQixHQUFtQ0QsYUFBYyxlQUFBLENBQW5FQyxrQkFBa0IsRUFBRUMsNEJBQTRCLEdBQUtGLGFBQWMsZUFBQSxDQUEvQ0UsNEJBQTRCLEFBQW9CO0FBRS9FLFNBQVNKLHNCQUFzQixDQUFDSyxLQUFLLEVBQUU7SUFDcEQsSUFBTUMsU0FBUyxHQUFHSCxrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDLEVBQ3JDRSxPQUFPLEdBQUdOLGdCQUFnQixDQUFDSSxLQUFLLENBQUMsRUFDakNHLElBQUksR0FBR0YsU0FBUyxFQUNoQkcsa0NBQWtDLEdBQUcsRUFBRSxFQUN2Q0MsZ0NBQWdDLEdBQUcsRUFBRSxFQUNyQ0Msa0JBQWtCLEdBQUcsRUFBRSxFQUN2QkMsT0FBTyxHQUFHO1FBQ1JILGtDQUFrQyxFQUFsQ0Esa0NBQWtDO1FBQ2xDQyxnQ0FBZ0MsRUFBaENBLGdDQUFnQztRQUNoQ0Msa0JBQWtCLEVBQWxCQSxrQkFBa0I7UUFDbEJKLE9BQU8sRUFBUEEsT0FBTztLQUNSLEFBQUM7SUFFUk0sSUFBQUEsaUNBQWdDLFFBQUEsRUFBQ0wsSUFBSSxFQUFFSSxPQUFPLENBQUMsQ0FBQztJQUVoREUsSUFBQUEsK0JBQThCLFFBQUEsRUFBQ0YsT0FBTyxDQUFDLENBQUM7SUFFeENHLElBQUFBLDZCQUE0QixRQUFBLEVBQUNILE9BQU8sQ0FBQyxDQUFDO0lBRXRDUCxLQUFLLEdBQUdELDRCQUE0QixDQUFDRSxTQUFTLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRztJQUU3RCxPQUFPRixLQUFLLENBQUM7QUFDZixDQUFDIn0=