'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    RuleNameDefinition = require('./definition/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findImplicitlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findImplicitlyLeftRecursiveDefinition,
    findRule = ruleUtilities.findRule,
    removeRule = ruleUtilities.removeRule,
    reducedRuleFromRule = ruleUtilities.reducedRuleFromRule,
    repeatedRuleFromLeftRecursiveRuleName = ruleUtilities.repeatedRuleFromLeftRecursiveRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      leftRecursiveDefinitions = [];

  removeLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, leftRecursiveDefinitions) {
  var remove = false;

  var directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

  var indirectlyLeftRecursive = false;

  if (!directlyLeftRecursive) {
    var implicitlyLeftRecursiveDefinition = findImplicitlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    indirectlyLeftRecursive = implicitlyLeftRecursiveDefinition !== null;

    if (indirectlyLeftRecursive) {
      leftRecursiveDefinition.setImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition);
    }
  }

  if (directlyLeftRecursive || indirectlyLeftRecursive) {
    var unary = leftRecursiveDefinition.isUnary(),
        complex = leftRecursiveDefinition.isComplex(),
        ruleName = leftRecursiveDefinition.getRuleName(),
        leftRecursiveDefinitionString = leftRecursiveDefinition.asString();

    if (unary) {
      throw new Error('The \'' + leftRecursiveDefinitionString + '\' directly or indirectly left recursive definition of the \'' + ruleName + '\' rule is unary and therefore cannot be rewritten.');
    }

    if (complex) {
      throw new Error('The \'' + leftRecursiveDefinitionString + '\' directly or indirectly left recursive definition of the \'' + ruleName + '\' rule is complex and therefore cannot be rewritten.');
    }

    leftRecursiveDefinitions.push(leftRecursiveDefinition);

    remove = true;
  }

  return remove;
}

function removeLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var remove = false;

    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var leftRecursive = recursiveDefinition.isLeftRecursive();

      if (leftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition; ///

        remove = removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, leftRecursiveDefinitions);
      }

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          allRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          allRecursiveDefinitionRuleNames = allRecursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = allRecursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = allRecursiveDefinitions; ///

            removeLeftRecursiveDefinitions(_rule, _recursiveDefinitions, leftRecursiveDefinitions, rules);
          }
        }
      });
    }

    return remove;
  });
}

function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, rules) {
  leftRecursiveDefinitions.forEach(function (leftRecursiveDefinition) {
    var directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

    if (directlyLeftRecursive) {
      var directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, rules);
    } else {
      var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, rules);
    }
  });
}

function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, rules) {
  var ruleName = directlyLeftRecursiveDefinition.getRuleName(),
      rule = findRule(ruleName, rules),
      reducedRule = reducedRuleFromRule(rule, rules),
      reducedRuleEmpty = reducedRule.isEmpty();

  if (reducedRuleEmpty) {
    throw new Error('The \'' + ruleName + '\' rule has no non-recursive definitions and therefore cannot be rewritten.');
  }

  var reducedRuleName = reducedRule.getName(),
      reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

  rule.addDefinition(reducedRuleNameDefinition);

  var leftRecursiveDefinition = directlyLeftRecursiveDefinition,
      ///
  rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

  rule.addDefinition(rewrittenDefinition, -1);

  var leftRecursiveRuleName = directlyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
      repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
      repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

  repeatedRule.addDefinition(repeatedDefinition);
}

function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, rules) {
  var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(),
      rule = findRule(ruleName, rules),
      reducedRule = reducedRuleFromRule(rule, rules),
      reducedRuleEmpty = reducedRule.isEmpty(),
      leftRecursiveDefinition = indirectlyLeftRecursiveDefinition,
      ///
  rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

  if (reducedRuleEmpty) {
    removeRule(reducedRule, rules);

    rule.addDefinition(rewrittenDefinition);
  } else {
    var reducedRuleName = reducedRule.getName(),
        reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

    rule.addDefinition(reducedRuleNameDefinition);

    rule.addDefinition(rewrittenDefinition, -1);
  }

  var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
      repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
      repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

  repeatedRule.addDefinition(repeatedDefinition);

  var implicitlyLeftRecursiveDefinition = leftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
      definition = implicitlyLeftRecursiveDefinition.getDefinition(),
      implicitlyLeftRecursiveRuleName = leftRecursiveRuleName,
      ///
  implicitlyLeftRecursiveRule = findRule(implicitlyLeftRecursiveRuleName, rules),
      reducedLeftRecursiveRule = reducedRuleFromRule(implicitlyLeftRecursiveRule, rules);

  implicitlyLeftRecursiveRule.addDefinition(definition, -1);

  reducedLeftRecursiveRule.removeDefinition(definition);

  var reducedLeftRecursiveRuleName = reducedLeftRecursiveRule.getName(),
      reducedLeftRecursiveRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedLeftRecursiveRuleName);

  implicitlyLeftRecursiveRule.addDefinition(reducedLeftRecursiveRuleNameDefinition);

  var reducedLeftRecursiveRuleEmpty = reducedLeftRecursiveRule.isEmpty();

  if (reducedLeftRecursiveRuleEmpty) {
    var _implicitlyLeftRecursiveRule = _implicitlyLeftRecursiveRule.getName();

    throw new Error('The \'' + _implicitlyLeftRecursiveRule + '\' rule has no non-recursive definitions and therefore cannot be rewritten.');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,