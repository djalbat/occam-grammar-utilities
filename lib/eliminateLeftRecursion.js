'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    RuleNameDefinition = require('./definition/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    PlaceHolderDefinition = require('./definition/placeHolder'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var first = arrayUtilities.first,
    forEachWithReplace = arrayUtilities.forEachWithReplace,
    findImplicitlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findImplicitlyLeftRecursiveDefinition,
    findRule = ruleUtilities.findRule,
    reducedRuleFromRule = ruleUtilities.reducedRuleFromRule,
    repeatedRuleFromRule = ruleUtilities.repeatedRuleFromRule,
    rewrittenRuleFromRule = ruleUtilities.rewrittenRuleFromRule;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      placeHolderDefinitions = [];

  removeLeftRecursiveDefinitions(rule, recursiveDefinitions, placeHolderDefinitions, rules);

  rewriteLeftRecursiveDefinitions(placeHolderDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, placeHolderDefinitions) {
  var placeHolderDefinition = null;

  var directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

  var indirectlyLeftRecursive = false;

  if (!directlyLeftRecursive) {
    var implicitlyLeftRecursiveDefinition = findImplicitlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    indirectlyLeftRecursive = implicitlyLeftRecursiveDefinition !== null;

    if (indirectlyLeftRecursive) {
      leftRecursiveDefinition.setImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition);
    }
  }

  if (directlyLeftRecursive || indirectlyLeftRecursive) {
    var unary = leftRecursiveDefinition.isUnary(),
        complex = leftRecursiveDefinition.isComplex(),
        ruleName = leftRecursiveDefinition.getRuleName(),
        leftRecursiveDefinitionString = leftRecursiveDefinition.asString();

    if (unary) {
      throw new Error('The \'' + leftRecursiveDefinitionString + '\' directly or indirectly left recursive definition of the \'' + ruleName + '\' rule is unary and therefore cannot be rewritten.');
    }

    if (complex) {
      throw new Error('The \'' + leftRecursiveDefinitionString + '\' directly or indirectly left recursive definition of the \'' + ruleName + '\' rule is complex and therefore cannot be rewritten.');
    }

    placeHolderDefinition = PlaceHolderDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

    placeHolderDefinitions.push(placeHolderDefinition);
  }

  return placeHolderDefinition;
}

function removeLeftRecursiveDefinitions(rule, recursiveDefinitions, placeHolderDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithReplace(definitions, function (definition) {
    var placeHolderDefinition = null;

    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var leftRecursive = recursiveDefinition.isLeftRecursive();

      if (leftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition; ///

        placeHolderDefinition = removeLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, placeHolderDefinitions);
      }

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          allRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          allRecursiveDefinitionRuleNames = allRecursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = allRecursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = allRecursiveDefinitions; ///

            removeLeftRecursiveDefinitions(_rule, _recursiveDefinitions, placeHolderDefinitions, rules);
          }
        }
      });
    }

    return placeHolderDefinition;
  });
}

function rewriteLeftRecursiveDefinitions(placeHolderDefinitions, rules) {
  placeHolderDefinitions.forEach(function (placeHolderDefinition) {
    var leftRecursiveDefinition = placeHolderDefinition.getLeftRecursiveDefinition(),
        directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

    if (directlyLeftRecursive) {
      var directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, placeHolderDefinition, rules);
    } else {
      var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, placeHolderDefinition, rules);
    }
  });
}

function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, placeHolderDefinition, rules) {
  var ruleName = directlyLeftRecursiveDefinition.getRuleName(),
      rule = findRule(ruleName, rules),
      rewrittenRule = rewrittenRuleFromRule(rule, rules),
      reducedRule = reducedRuleFromRule(rule, rules),
      repeatedRule = repeatedRuleFromRule(rule, rules),
      reducedRuleEmpty = reducedRule.isEmpty();

  if (reducedRuleEmpty) {
    throw new Error('The \'' + ruleName + '\' rule has no non-recursive definitions and therefore cannot be rewritten.');
  }

  var leftRecursiveDefinition = directlyLeftRecursiveDefinition,
      ///
  rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
      repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

  rewrittenRule.replaceDefinition(placeHolderDefinition, rewrittenDefinition);

  repeatedRule.addDefinition(repeatedDefinition);
}

function rewriteIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, placeHolderDefinition, rules) {
  var ruleName = indirectlyLeftRecursiveDefinition.getRuleName(),
      rule = findRule(ruleName, rules),
      leftRecursiveDefinition = indirectlyLeftRecursiveDefinition,
      ///
  rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

  rule.replaceDefinition(placeHolderDefinition, rewrittenDefinition);

  var leftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
      repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
      repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

  repeatedRule.addDefinition(repeatedDefinition);

  var implicitlyLeftRecursiveDefinition = leftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(),
      definition = implicitlyLeftRecursiveDefinition.getDefinition(),
      implicitlyLeftRecursiveRuleName = leftRecursiveRuleName,
      ///
  implicitlyLeftRecursiveRule = findRule(implicitlyLeftRecursiveRuleName, rules),
      reducedLeftRecursiveRule = reducedRuleFromRule(implicitlyLeftRecursiveRule, rules);

  implicitlyLeftRecursiveRule.addDefinition(definition, -1);

  reducedLeftRecursiveRule.removeDefinition(definition);

  var reducedLeftRecursiveRuleName = reducedLeftRecursiveRule.getName(),
      reducedLeftRecursiveRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedLeftRecursiveRuleName);

  implicitlyLeftRecursiveRule.addDefinition(reducedLeftRecursiveRuleNameDefinition);

  var reducedLeftRecursiveRuleEmpty = reducedLeftRecursiveRule.isEmpty();

  // if (reducedLeftRecursiveRuleEmpty) {
  //   const implicitlyLeftRecursiveRuleName = implicitlyLeftRecursiveRule.getName();
  //
  //   throw new Error(`The '${implicitlyLeftRecursiveRuleName}' rule has no non-recursive definitions and therefore cannot be rewritten.`);
  // }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,