"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _rewritten = _interopRequireDefault(require("./rule/rewritten"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _class = require("./utilities/class");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, reducedRules = [], rewrittenRules = [], leftRecursiveRules = [], recursiveDefinitions = [], leftRecursiveDefinitions = [];
    retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    retrieveLeftRecursiveRules(leftRecursiveRules, leftRecursiveDefinitions, ruleMap);
    reduceLeftRecursiveRules(leftRecursiveRules, reducedRules, ruleMap);
    rewriteLeftRecursiveRules(leftRecursiveRules, rewrittenRules, leftRecursiveDefinitions, ruleMap);
    ///
    eliminateDirectLeftRecursion(rewrittenRules, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function reduceLeftRecursiveRules(leftRecursiveRules, reducedRules, ruleMap) {
    leftRecursiveRules.forEach(function(leftRecursiveRule) {
        var rule = leftRecursiveRule, reducedRule = _reduced.default.fromRule(rule);
        if (reducedRule !== null) {
            var reducedRuleName = reducedRule.getName();
            ruleMap[reducedRuleName] = reducedRule;
            reducedRules.push(reducedRule);
        }
    });
}
function rewriteLeftRecursiveRules(leftRecursiveRules, rewrittenRules, leftRecursiveDefinitions, ruleMap) {
    leftRecursiveRules.forEach(function(leftRecursiveRule) {
        var rule = leftRecursiveRule, ruleName = rule.getName(), rewrittenRule = _rewritten.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions);
        delete ruleMap[ruleName];
        var rewrittenRuleName = ruleName; ///
        ruleMap[rewrittenRuleName] = rewrittenRule;
        rewrittenRules.push(rewrittenRule);
    });
}
function retrieveLeftRecursiveRules(leftRecursiveRules, leftRecursiveDefinitions, ruleMap) {
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        var ruleName = leftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], leftRecursiveRulesIncludesRule = leftRecursiveRules.includes(rule);
        if (!leftRecursiveRulesIncludesRule) {
            var leftRecursiveRule = rule; ///
            leftRecursiveRules.push(leftRecursiveRule);
        }
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), ruleName1 = implicitlyLeftRecursiveDefinition.getRuleName(), rule1 = ruleMap[ruleName1], leftRecursiveRulesIncludesRule1 = leftRecursiveRules.includes(rule1);
            if (!leftRecursiveRulesIncludesRule1) {
                var leftRecursiveRule1 = rule1; ///
                leftRecursiveRules.push(leftRecursiveRule1);
            }
        }
    });
}
function eliminateDirectLeftRecursion(rewrittenRules, ruleMap) {
    rewrittenRules.forEach(function(rewrittenRule) {
        return rewrittenRule.rewrite(ruleMap);
    });
}
function retrieveLeftRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions) {
    var leftRecursiveDefinitionMatchesDefinition1 = leftRecursiveDefinitions.some(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionMatchesDefinition = leftRecursiveDefinition.match(definition);
        if (leftRecursiveDefinitionMatchesDefinition) {
            return true;
        }
    });
    if (leftRecursiveDefinitionMatchesDefinition1) {
        return;
    }
    var leftRecursiveDefinition1 = _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions);
    if (leftRecursiveDefinition1 !== null) {
        leftRecursiveDefinitions.push(leftRecursiveDefinition1);
    }
}
function retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var ruleName2 = rule.getName(), definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        retrieveLeftRecursiveDefinition(ruleName2, definition, recursiveDefinitions, leftRecursiveDefinitions);
        var recursiveDefinition = _left.default.fromRuleNameAndDefinition(ruleName2, definition) || _recursive.default.fromRuleNameAndDefinition(ruleName2, definition);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                var previousRecursiveDefinitionRuleName = previousRecursiveDefinition.getRuleName(), previousRecursiveRuleName = previousRecursiveDefinitionRuleName; ///
                return previousRecursiveRuleName;
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var _$recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, _$recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,