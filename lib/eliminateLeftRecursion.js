"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateLeftRecursion;
    }
});
var _occamparsers = require("occam-parsers");
var _directedGraph = /*#__PURE__*/ _interop_require_default(require("./directedGraph"));
var _eliminateDirectLeftRecursion = /*#__PURE__*/ _interop_require_default(require("./eliminateDirectLeftRecursion"));
var _eliminateIndirectLeftRecursion = /*#__PURE__*/ _interop_require_default(require("./eliminateIndirectLeftRecursion"));
var _directedGraph1 = require("./utilities/directedGraph");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamparsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamparsers.rulesUtilities.startRuleFromRules, rulesFromStartRuleAndRuleMap = _occamparsers.rulesUtilities.rulesFromStartRuleAndRuleMap;
function eliminateLeftRecursion(rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules), startRuleName = startRule.getName(), edges = (0, _directedGraph1.edgesFromStartRuleAndRuleMap)(startRule, ruleMap), startVertex = startRuleName, directedGraph = _directedGraph.default.fromEdgesAndStartVertex(edges, startVertex), context = {
        ruleMap: ruleMap,
        directedGraph: directedGraph
    };
    (0, _eliminateIndirectLeftRecursion.default)(context);
    // eliminateDirectLeftRecursion(context);
    rules = rulesFromStartRuleAndRuleMap(startRule, ruleMap); ///
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCBEaXJlY3RlZEdyYXBoIGZyb20gXCIuL2RpcmVjdGVkR3JhcGhcIjtcbmltcG9ydCBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIGZyb20gXCIuL2VsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb25cIjtcbmltcG9ydCBlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24gZnJvbSBcIi4vZWxpbWluYXRlSW5kaXJlY3RMZWZ0UmVjdXJzaW9uXCI7XG5cbmltcG9ydCB7IGVkZ2VzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAgfSBmcm9tIFwiLi91dGlsaXRpZXMvZGlyZWN0ZWRHcmFwaFwiO1xuXG5jb25zdCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGVOYW1lID0gc3RhcnRSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgZWRnZXMgPSBlZGdlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCksXG4gICAgICAgIHN0YXJ0VmVydGV4ID0gc3RhcnRSdWxlTmFtZSwgIC8vL1xuICAgICAgICBkaXJlY3RlZEdyYXBoID0gRGlyZWN0ZWRHcmFwaC5mcm9tRWRnZXNBbmRTdGFydFZlcnRleChlZGdlcywgc3RhcnRWZXJ0ZXgpLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIHJ1bGVNYXAsXG4gICAgICAgICAgZGlyZWN0ZWRHcmFwaFxuICAgICAgICB9O1xuXG4gIGVsaW1pbmF0ZUluZGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KTtcblxuICAvLyBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpO1xuXG4gIHJ1bGVzID0gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsInJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAiLCJydWxlcyIsInJ1bGVNYXAiLCJzdGFydFJ1bGUiLCJzdGFydFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImVkZ2VzIiwiZWRnZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsInN0YXJ0VmVydGV4IiwiZGlyZWN0ZWRHcmFwaCIsIkRpcmVjdGVkR3JhcGgiLCJmcm9tRWRnZXNBbmRTdGFydFZlcnRleCIsImNvbnRleHQiLCJlbGltaW5hdGVJbmRpcmVjdExlZnRSZWN1cnNpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVlBOzs7ZUFBd0JBOzs7NEJBVk87b0VBRUw7bUZBQ2U7cUZBQ0U7OEJBRUU7Ozs7OztBQUU3QyxJQUFRQyxtQkFBdUVDLDRCQUFjLENBQXJGRCxrQkFBa0JFLHFCQUFxREQsNEJBQWMsQ0FBbkVDLG9CQUFvQkMsK0JBQWlDRiw0QkFBYyxDQUEvQ0U7QUFFL0IsU0FBU0osdUJBQXVCSyxLQUFLLEVBQUU7SUFDcEQsSUFBTUMsVUFBVUwsaUJBQWlCSSxRQUMzQkUsWUFBWUosbUJBQW1CRSxRQUMvQkcsZ0JBQWdCRCxVQUFVRSxPQUFPLElBQ2pDQyxRQUFRQyxJQUFBQSw0Q0FBNEIsRUFBQ0osV0FBV0QsVUFDaERNLGNBQWNKLGVBQ2RLLGdCQUFnQkMsc0JBQWEsQ0FBQ0MsdUJBQXVCLENBQUNMLE9BQU9FLGNBQzdESSxVQUFVO1FBQ1JWLFNBQUFBO1FBQ0FPLGVBQUFBO0lBQ0Y7SUFFTkksSUFBQUEsdUNBQThCLEVBQUNEO0lBRS9CLHlDQUF5QztJQUV6Q1gsUUFBUUQsNkJBQTZCRyxXQUFXRCxVQUFVLEdBQUc7SUFFN0QsT0FBT0Q7QUFDVCJ9