'use strict';

var necessary = require('necessary');

var partUtilities = require('./utilities/part'),
    ruleUtilities = require('./utilities/rule'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    last = arrayUtilities.last,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var ruleNames = [];

  eliminateLeftRecursionFromRules(rules, ruleNames);
}

module.exports = eliminateLeftRecursion;

function eliminateLeftRecursionFromRules(rules, ruleNames) {
  rules.forEach(function (rule) {
    return eliminateLeftRecursionFromRule(rule, ruleNames, rules);
  });
}

function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rules);

    if (recursiveDefinition !== null) {
      recursiveDefinitions.push(recursiveDefinition);
    } else {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
        nonRecursiveRuleName = nonRecursiveRule.getName(),
        nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleName(nonRecursiveRuleName),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImplicitLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      firstRuleName = first(ruleNames),
      ruleNameTopmostRuleName = ruleName === firstRuleName;

  if (ruleNameTopmostRuleName) {
    var lastRuleName = last(ruleNames),
        _ruleName = lastRuleName,
        ///
    rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName);

    recursiveDefinition = RecursiveDefinition.fromRuleNamePartAndRightRecursiveRuleName(ruleNamePart, rightRecursiveRuleName);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}

function eliminateImplicitLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      name = ruleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJwYXJ0VXRpbGl0aWVzIiwicnVsZVV0aWxpdGllcyIsIk5vblJlY3Vyc2l2ZVJ1bGUiLCJydWxlTmFtZVV0aWxpdGllcyIsIlJpZ2h0UmVjdXJzaXZlUnVsZSIsIlJlY3Vyc2l2ZURlZmluaXRpb24iLCJOb25SZWN1cnNpdmVEZWZpbml0aW9uIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsImxhc3QiLCJmaW5kUnVsZUJ5TmFtZSIsImlzUGFydFJ1bGVOYW1lUGFydCIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIiwicnVsZXMiLCJydWxlTmFtZXMiLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZvckVhY2giLCJydWxlIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwibm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJjb25jYXQiLCJkZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbiIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbiIsInB1c2giLCJub25SZWN1cnNpdmVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJydWxlUmVjdXJzaXZlIiwibm9uUmVjdXJzaXZlUnVsZSIsImZyb21Ob25SZWN1cnNpdmVEZWZpbml0aW9uc0FuZFJ1bGVOYW1lcyIsIm5vblJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZnJvbU5vblJlY3Vyc2l2ZVJ1bGVOYW1lIiwic2V0RGVmaW5pdGlvbnMiLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwicnVsZU5hbWVQYXJ0IiwiZWxpbWluYXRlSW1tZWRpYXRlTGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uIiwiZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24iLCJnZXRSdWxlTmFtZSIsImZpcnN0UnVsZU5hbWUiLCJydWxlTmFtZVRvcG1vc3RSdWxlTmFtZSIsImxhc3RSdWxlTmFtZSIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tRGVmaW5pdGlvbkFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJmcm9tUnVsZU5hbWVQYXJ0QW5kUmlnaHRSZWN1cnNpdmVSdWxlTmFtZSIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxnQkFBZ0JELFFBQVEsa0JBQVIsQ0FBdEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsa0JBQVIsQ0FEdEI7QUFBQSxJQUVNRyxtQkFBbUJILFFBQVEscUJBQVIsQ0FGekI7QUFBQSxJQUdNSSxvQkFBb0JKLFFBQVEsc0JBQVIsQ0FIMUI7QUFBQSxJQUlNSyxxQkFBcUJMLFFBQVEsdUJBQVIsQ0FKM0I7QUFBQSxJQUtNTSxzQkFBc0JOLFFBQVEsd0JBQVIsQ0FMNUI7QUFBQSxJQU1NTyx5QkFBeUJQLFFBQVEsMkJBQVIsQ0FOL0I7O0FBUU0sSUFBRVEsY0FBRixHQUFxQlQsU0FBckIsQ0FBRVMsY0FBRjtBQUFBLElBQ0VDLEtBREYsR0FDa0JELGNBRGxCLENBQ0VDLEtBREY7QUFBQSxJQUNTQyxJQURULEdBQ2tCRixjQURsQixDQUNTRSxJQURUO0FBQUEsSUFFRUMsY0FGRixHQUVxQlQsYUFGckIsQ0FFRVMsY0FGRjtBQUFBLElBR0VDLGtCQUhGLEdBR3lCWCxhQUh6QixDQUdFVyxrQkFIRjtBQUFBLElBSUVDLGtDQUpGLEdBSXlDVCxpQkFKekMsQ0FJRVMsa0NBSkY7OztBQU1OLFNBQVNDLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1QztBQUNyQyxNQUFNQyxZQUFZLEVBQWxCOztBQUVBQyxrQ0FBZ0NGLEtBQWhDLEVBQXVDQyxTQUF2QztBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCTCxzQkFBakI7O0FBRUEsU0FBU0csK0JBQVQsQ0FBeUNGLEtBQXpDLEVBQWdEQyxTQUFoRCxFQUEyRDtBQUN6REQsUUFBTUssT0FBTixDQUFjLFVBQUNDLElBQUQ7QUFBQSxXQUFVQywrQkFBK0JELElBQS9CLEVBQXFDTCxTQUFyQyxFQUFnREQsS0FBaEQsQ0FBVjtBQUFBLEdBQWQ7QUFDRDs7QUFFRCxTQUFTTyw4QkFBVCxDQUF3Q0QsSUFBeEMsRUFBOENMLFNBQTlDLEVBQXlERCxLQUF6RCxFQUFnRTtBQUM5RCxNQUFNUSxXQUFXRixLQUFLRyxPQUFMLEVBQWpCO0FBQUEsTUFDTUMsY0FBY0osS0FBS0ssY0FBTCxFQURwQjtBQUFBLE1BRU1DLHVCQUF1QixFQUY3QjtBQUFBLE1BR01DLDBCQUEwQixFQUhoQzs7QUFLQVosY0FBWUEsVUFBVWEsTUFBVixDQUFpQk4sUUFBakIsQ0FBWjs7QUFFQUUsY0FBWUwsT0FBWixDQUFvQixVQUFDVSxVQUFELEVBQWdCO0FBQ2xDLFFBQU1DLHNCQUFzQkMscUNBQXFDRixVQUFyQyxFQUFpRGQsU0FBakQsRUFBNERELEtBQTVELENBQTVCOztBQUVBLFFBQUlnQix3QkFBd0IsSUFBNUIsRUFBa0M7QUFDaENKLDJCQUFxQk0sSUFBckIsQ0FBMEJGLG1CQUExQjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU1HLHlCQUF5QkosVUFBL0IsQ0FESyxDQUN1Qzs7QUFFNUNGLDhCQUF3QkssSUFBeEIsQ0FBNkJDLHNCQUE3QjtBQUNEO0FBQ0YsR0FWRDs7QUFZQSxNQUFNQyw2QkFBNkJSLHFCQUFxQlMsTUFBeEQ7QUFBQSxNQUNNQyxnQkFBaUJGLDZCQUE2QixDQURwRDs7QUFHQSxNQUFJRSxhQUFKLEVBQW1CO0FBQ2pCLFFBQU1DLG1CQUFtQm5DLGlCQUFpQm9DLHVDQUFqQixDQUF5RFgsdUJBQXpELEVBQWtGWixTQUFsRixDQUF6QjtBQUFBLFFBQ013Qix1QkFBdUJGLGlCQUFpQmQsT0FBakIsRUFEN0I7QUFBQSxRQUVNVSx5QkFBeUIzQix1QkFBdUJrQyx3QkFBdkIsQ0FBZ0RELG9CQUFoRCxDQUYvQjtBQUFBLFFBR01mLHlCQUNLRSxvQkFETCxHQUVFTyxzQkFGRixFQUhOOztBQVFBYixTQUFLcUIsY0FBTCxDQUFvQmpCLFlBQXBCOztBQUVBVixVQUFNa0IsSUFBTixDQUFXSyxnQkFBWDtBQUNEOztBQUVELFNBQU9ELGFBQVA7QUFDRDs7QUFFRCxTQUFTTCxvQ0FBVCxDQUE4Q0YsVUFBOUMsRUFBMERkLFNBQTFELEVBQXFFRCxLQUFyRSxFQUE0RTtBQUMxRSxNQUFJZ0Isc0JBQXNCLElBQTFCOztBQUVBLE1BQU1ZLFFBQVFiLFdBQVdjLFFBQVgsRUFBZDtBQUFBLE1BQ01DLFlBQVlwQyxNQUFNa0MsS0FBTixDQURsQjtBQUFBLE1BRU1HLHdCQUF3QmxDLG1CQUFtQmlDLFNBQW5CLENBRjlCOztBQUlBLE1BQUlDLHFCQUFKLEVBQTJCO0FBQ3pCLFFBQU1DLGVBQWVGLFNBQXJCLENBRHlCLENBQ087O0FBRWhDLFFBQUlkLHdCQUF3QixJQUE1QixFQUFrQztBQUNoQ0EsNEJBQXNCaUIsOENBQThDbEIsVUFBOUMsRUFBMERpQixZQUExRCxFQUF3RS9CLFNBQXhFLEVBQW1GRCxLQUFuRixDQUF0QjtBQUNEOztBQUVELFFBQUlnQix3QkFBd0IsSUFBNUIsRUFBa0M7QUFDaENBLDRCQUFzQmtCLDZDQUE2Q25CLFVBQTdDLEVBQXlEaUIsWUFBekQsRUFBdUUvQixTQUF2RSxFQUFrRkQsS0FBbEYsQ0FBdEI7QUFDRDtBQUNGOztBQUVELFNBQU9nQixtQkFBUDtBQUNEOztBQUVELFNBQVNpQiw2Q0FBVCxDQUF1RGxCLFVBQXZELEVBQW1FaUIsWUFBbkUsRUFBaUYvQixTQUFqRixFQUE0RkQsS0FBNUYsRUFBbUc7QUFDakcsTUFBSWdCLHNCQUFzQixJQUExQjs7QUFFQSxNQUFNUixXQUFXd0IsYUFBYUcsV0FBYixFQUFqQjtBQUFBLE1BQ01DLGdCQUFnQjFDLE1BQU1PLFNBQU4sQ0FEdEI7QUFBQSxNQUVNb0MsMEJBQTJCN0IsYUFBYTRCLGFBRjlDOztBQUlBLE1BQUlDLHVCQUFKLEVBQTZCO0FBQzNCLFFBQU1DLGVBQWUzQyxLQUFLTSxTQUFMLENBQXJCO0FBQUEsUUFDTU8sWUFBVzhCLFlBRGpCO0FBQUEsUUFDZ0M7QUFDMUJDLDZCQUF5QnpDLG1DQUFtQ1UsU0FBbkMsQ0FGL0I7QUFBQSxRQUdNZ0MscUJBQXFCbEQsbUJBQW1CbUQsdUNBQW5CLENBQTJEMUIsVUFBM0QsRUFBdUV3QixzQkFBdkUsQ0FIM0I7O0FBS0F2QiwwQkFBc0J6QixvQkFBb0JtRCx5Q0FBcEIsQ0FBOERWLFlBQTlELEVBQTRFTyxzQkFBNUUsQ0FBdEI7O0FBRUF2QyxVQUFNa0IsSUFBTixDQUFXc0Isa0JBQVg7QUFDRDs7QUFFRCxTQUFPeEIsbUJBQVA7QUFDRDs7QUFFRCxTQUFTa0IsNENBQVQsQ0FBc0RuQixVQUF0RCxFQUFrRWlCLFlBQWxFLEVBQWdGL0IsU0FBaEYsRUFBMkZELEtBQTNGLEVBQWtHO0FBQ2hHLE1BQUlnQixzQkFBc0IsSUFBMUI7O0FBRUEsTUFBTVIsV0FBV3dCLGFBQWFHLFdBQWIsRUFBakI7QUFBQSxNQUNNUSxPQUFPbkMsUUFEYjtBQUFBLE1BQ3dCO0FBQ2xCRixTQUFPVixlQUFlK0MsSUFBZixFQUFxQjNDLEtBQXJCLENBRmI7O0FBSUEsTUFBSU0sU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLFFBQU1nQixnQkFBZ0JmLCtCQUErQkQsSUFBL0IsRUFBcUNMLFNBQXJDLEVBQWdERCxLQUFoRCxDQUF0Qjs7QUFFQSxRQUFJc0IsYUFBSixFQUFtQjtBQUNqQk4sNEJBQXNCRCxVQUF0QixDQURpQixDQUNpQjtBQUNuQztBQUNGOztBQUVELFNBQU9DLG1CQUFQO0FBQ0QiLCJmaWxlIjoiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHBhcnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9wYXJ0JyksXG4gICAgICBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgTm9uUmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9ub25SZWN1cnNpdmUnKSxcbiAgICAgIHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZU5hbWUnKSxcbiAgICAgIFJpZ2h0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9yaWdodFJlY3Vyc2l2ZScpLFxuICAgICAgUmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi9yZWN1cnNpdmUnKSxcbiAgICAgIE5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vbm9uUmVjdXJzaXZlJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZmlyc3QsIGxhc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcnVsZVV0aWxpdGllcyxcbiAgICAgIHsgaXNQYXJ0UnVsZU5hbWVQYXJ0IH0gPSBwYXJ0VXRpbGl0aWVzLFxuICAgICAgeyByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihydWxlcykge1xuICBjb25zdCBydWxlTmFtZXMgPSBbXTtcblxuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVzKHJ1bGVzLCBydWxlTmFtZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb247XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZXMocnVsZXMsIHJ1bGVOYW1lcykge1xuICBydWxlcy5mb3JFYWNoKChydWxlKSA9PiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcykpO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcykge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICBydWxlTmFtZXMgPSBydWxlTmFtZXMuY29uY2F0KHJ1bGVOYW1lKTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKHJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBub25SZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbjsgIC8vL1xuXG4gICAgICBub25SZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKG5vblJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPSByZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGgsXG4gICAgICAgIHJ1bGVSZWN1cnNpdmUgPSAocmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPiAwKTtcblxuICBpZiAocnVsZVJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IG5vblJlY3Vyc2l2ZVJ1bGUgPSBOb25SZWN1cnNpdmVSdWxlLmZyb21Ob25SZWN1cnNpdmVEZWZpbml0aW9uc0FuZFJ1bGVOYW1lcyhub25SZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU5hbWVzKSxcbiAgICAgICAgICBub25SZWN1cnNpdmVSdWxlTmFtZSA9IG5vblJlY3Vyc2l2ZVJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25SZWN1cnNpdmVEZWZpbml0aW9uLmZyb21Ob25SZWN1cnNpdmVSdWxlTmFtZShub25SZWN1cnNpdmVSdWxlTmFtZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgICAuLi5yZWN1cnNpdmVEZWZpbml0aW9ucyxcbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb25cbiAgICAgICAgICBdO1xuXG4gICAgcnVsZS5zZXREZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgICBydWxlcy5wdXNoKG5vblJlY3Vyc2l2ZVJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQoZmlyc3RQYXJ0KTtcblxuICBpZiAoZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0KSB7XG4gICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uID0gZWxpbWluYXRlSW1tZWRpYXRlTGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIHJ1bGVOYW1lUGFydCwgcnVsZU5hbWVzLCBydWxlcyk7XG4gICAgfVxuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb24gPT09IG51bGwpIHtcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb24gPSBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZVBhcnQsIHJ1bGVOYW1lcywgcnVsZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgcnVsZU5hbWVQYXJ0LCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBmaXJzdFJ1bGVOYW1lID0gZmlyc3QocnVsZU5hbWVzKSxcbiAgICAgICAgcnVsZU5hbWVUb3Btb3N0UnVsZU5hbWUgPSAocnVsZU5hbWUgPT09IGZpcnN0UnVsZU5hbWUpO1xuXG4gIGlmIChydWxlTmFtZVRvcG1vc3RSdWxlTmFtZSkge1xuICAgIGNvbnN0IGxhc3RSdWxlTmFtZSA9IGxhc3QocnVsZU5hbWVzKSxcbiAgICAgICAgICBydWxlTmFtZSA9IGxhc3RSdWxlTmFtZSwgIC8vL1xuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUgPSByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbURlZmluaXRpb25BbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKGRlZmluaXRpb24sIHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lUGFydEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUocnVsZU5hbWVQYXJ0LCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgIHJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZVBhcnQsIHJ1bGVOYW1lcywgcnVsZXMpIHtcbiAgbGV0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZU5hbWVQYXJ0LmdldFJ1bGVOYW1lKCksXG4gICAgICAgIG5hbWUgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBydWxlID0gZmluZFJ1bGVCeU5hbWUobmFtZSwgcnVsZXMpO1xuXG4gIGlmIChydWxlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcnVsZVJlY3Vyc2l2ZSA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlTmFtZXMsIHJ1bGVzKTtcblxuICAgIGlmIChydWxlUmVjdXJzaXZlKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uID0gZGVmaW5pdGlvbjsgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb247XG59XG4iXX0=