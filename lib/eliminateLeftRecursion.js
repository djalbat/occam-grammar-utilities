"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _necessary = require("necessary");
var _occamParsers = require("occam-parsers");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _repeated = _interopRequireDefault(require("./rule/repeated"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _class = require("./utilities/class");
var _parts = require("./utilities/parts");
var _part = require("./utilities/part");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, recursiveDefinitions = [], leftRecursiveDefinitions = [];
    retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap);
    // eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart, find = _necessary.arrayUtilities.find, tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
// function eliminateDirectLeftRecursion(directlyLeftRecursiveRules, ruleMap) {
//   directlyLeftRecursiveRules.forEach((directlyLeftRecursiveRule) => {
//     const rule = directlyLeftRecursiveRule, ///
//           definitions = rule.getDefinitions(),
//           directlyLeftRecursiveDefinitions = find(definitions, (definition) => {
//             const definitionDirectlyLeftRecursiveDefinition = isInstanceOf(definition, DirectlyLeftRecursiveDefinition);
//
//             if (definitionDirectlyLeftRecursiveDefinition) {
//               return true;
//             }
//           }),
//           directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions);
//
//     directlyLeftRecursiveDefinition.rewrite();
//
//     rule.removeAllDefinitions();
//
//     rule.addDefinition(directlyLeftRecursiveDefinition);
//   });
// }
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveDefinitions = retrieveIndirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions);
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionRuleName = indirectlyLeftRecursiveDefinition.getRuleName(), indirectlyLeftRecursiveRuleName = indirectlyLeftRecursiveDefinitionRuleName, indirectlyLeftRecursiveRule = ruleMap[indirectlyLeftRecursiveRuleName];
        rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap);
        var rule = indirectlyLeftRecursiveRule, directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), definition = definitionFromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacedDefinition = directlyLeftRecursiveDefinition, replacementDefinition = definition; ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), implicitlyLeftRecursiveDefinitionRuleName = implicitlyLeftRecursiveDefinition.getRuleName(), implicitlyLeftRecursiveRuleName = implicitlyLeftRecursiveDefinitionRuleName, implicitlyLeftRecursiveRule = ruleMap[implicitlyLeftRecursiveRuleName];
    // const implicitlyLeftRecursiveDefinitions = retrieveImplicitlyLeftRecursiveDefinitions(implicitlyLeftRecursiveRule, indirectlyLeftRecursiveRuleName);
    //
    // rewriteImplicitlyLeftRecursiveDefinitions(implicitlyLeftRecursiveDefinitions, indirectlyLeftRecursiveRule, ruleMap);
    //
    // reduceImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule, ruleMap);
    });
}
function retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var recursiveDefinition;
    var ruleName = rule.getName(), definitionRecursiveDefinition = (0, _class).isInstanceOf(definition, _recursive.default);
    if (definitionRecursiveDefinition) {
        recursiveDefinition = definition; ///
    } else {
        var leftRecursiveDefinition = _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _left.default.fromRuleNameAndDefinition(ruleName, definition);
        if (leftRecursiveDefinition !== null) {
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
            recursiveDefinition = leftRecursiveDefinition; ///
        } else {
            recursiveDefinition = _recursive.default.fromRuleNameAndDefinition(ruleName, definition);
        }
        if (recursiveDefinition !== null) {
            var replacedDefinition = definition, replacementDefinition = recursiveDefinition; ///
            rule.replaceDefinition(replacedDefinition, replacementDefinition);
            var recursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(recursiveDefinition, _indirectly.default);
            if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                var indirectlyLeftRecursiveDefinition = recursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), leftRecursiveDefinition1 = implicitlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), ruleName1 = implicitlyLeftRecursiveDefinition.getRuleName(), replacedDefinition1 = leftRecursiveDefinition1, replacementDefinition1 = implicitlyLeftRecursiveDefinition; ///
                rule = ruleMap[ruleName1];
                rule.replaceDefinition(replacedDefinition1, replacementDefinition1);
            }
        }
    }
    return recursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        var recursiveDefinition = retrieveLeftRecursiveDefinition(rule, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                var previousRecursiveDefinitionRuleName = previousRecursiveDefinition.getRuleName(), previousRecursiveRuleName = previousRecursiveDefinitionRuleName; ///
                return previousRecursiveRuleName;
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var _$recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, _$recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}
function reduceImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule, ruleMap) {
    var reducedRule = _reduced.default.fromImplicitlyLeftRecursiveRule(implicitlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
}
function rewriteIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule, ruleMap) {
    var reducedRule = _reduced.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), repeatedRule = _repeated.default.fromIndirectlyLeftRecursiveRule(indirectlyLeftRecursiveRule), reducedRuleName = reducedRule.getName(), repeatedRuleName = repeatedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
    ruleMap[repeatedRuleName] = repeatedRule;
}
function mergeDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition;
    var definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }), firstDirectlyLeftRecursiveDefinition = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
    if (directlyLeftRecursiveDefinitionsLength === 1) {
        directlyLeftRecursiveDefinition = firstDirectlyLeftRecursiveDefinition;
    } else {
        var parts;
        parts = firstDirectlyLeftRecursiveDefinition.getParts(); ///
        var firstPart = first(parts), part = firstPart; ///
        var singleParts = directlyLeftRecursiveDefinitions.map(function(directlyLeftRecursiveDefinition) {
            var parts = directlyLeftRecursiveDefinition.getParts();
            parts.shift(); ///
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        parts = singleParts; ///
        var choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            part,
            choiceOfPartsPart
        ];
        var ruleName = firstDirectlyLeftRecursiveDefinition.getRuleName();
        directlyLeftRecursiveDefinition = _directly.default.fromRuleNameAndParts(ruleName, parts);
        filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
            var directlyLeftRecursiveDDefinitionsIncludesLeftRecursiveDefinition = directlyLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
            if (!directlyLeftRecursiveDDefinitionsIncludesLeftRecursiveDefinition) {
                return true;
            }
        });
        var definitions1 = tail(directlyLeftRecursiveDefinitions), replacedDefinition = firstDirectlyLeftRecursiveDefinition, replacementDefinition = directlyLeftRecursiveDefinition; ///
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        rule.removeDefinitions(definitions1);
    }
    return directlyLeftRecursiveDefinition;
}
function rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, indirectlyLeftRecursiveRule, ruleMap) {
    var _rule;
    var definitions = indirectlyLeftRecursiveRule.getDefinitions(), rewrittenDefinitions = definitions.map(function(definition, index) {
        var Definition = index === 0 ? _directly.default : _left.default;
        var definitionParts = definition.getParts(), implicitlyLeftRecursiveDefinitionParts = implicitlyLeftRecursiveDefinition.getParts();
        definitionParts = (0, _parts).cloneParts(definitionParts); ///
        implicitlyLeftRecursiveDefinitionParts = tail((0, _parts).cloneParts(implicitlyLeftRecursiveDefinitionParts)); ///
        var parts = _toConsumableArray(definitionParts).concat(_toConsumableArray(implicitlyLeftRecursiveDefinitionParts));
        var ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), recursiveRuleNames = null, leftRecursiveRuleNames = null; ///
        definition = new Definition(parts, ruleName, recursiveRuleNames, leftRecursiveRuleNames); ///
        var rewrittenDefinition = definition; ///
        return rewrittenDefinition;
    }), ruleName = implicitlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], replacedDefinition = implicitlyLeftRecursiveDefinition, replacementDefinitions = rewrittenDefinitions; ///
    (_rule = rule).replaceDefinition.apply(_rule, [
        replacedDefinition
    ].concat(_toConsumableArray(replacementDefinitions)));
}
function rewriteImplicitlyLeftRecursiveDefinitions(implicitlyLeftRecursiveDefinitions, indirectlyLeftRecursiveRule, ruleMap) {
    implicitlyLeftRecursiveDefinitions.forEach(function(implicitlyLeftRecursiveDefinition) {
        rewriteImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, indirectlyLeftRecursiveRule, ruleMap);
    });
}
function retrieveImplicitlyLeftRecursiveDefinitions(directlyLeftRecursiveRule, indirectlyLeftRecursiveRuleName) {
    var rule = directlyLeftRecursiveRule, ruleName = indirectlyLeftRecursiveRuleName, definitions = rule.getDefinitions(), implicitlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _left.default);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
            if (leftRecursiveRuleName === ruleName) {
                return true;
            }
        }
    });
    return implicitlyLeftRecursiveDefinitions;
}
function retrieveIndirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions) {
    var indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function definitionFromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var parts = directlyLeftRecursiveDefinition.getParts();
    parts.shift();
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), reducedPart = (0, _part).reducedPartFromRuleName(ruleName), repeatedPart = (0, _parts).repeatedPartFromParts(parts);
    parts = [
        reducedPart,
        repeatedPart
    ];
    var definition = new _occamParsers.Definition(parts);
    return definition;
}

//# sourceMappingURL=data:application/json;base64,