'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ReducedRule = require('./rule/reduced'),
    RepeatedRule = require('./rule/repeated'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RuleNameDefinition = require('./definition/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    addInFrontOfLast = arrayUtilities.addInFrontOfLast,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionNonStrictlyLeftRecursive = recursiveDefinition.isNonStrictlyLeftRecursive();

  if (recursiveDefinitionNonStrictlyLeftRecursive) {
    var nonStrictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    leftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      nonStrictlyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

      var immediatelyLeftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) || rewriteNonStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules);

    var reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var _definitions = void 0;

      _definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, _definitions);

      rules.push(reducedRule);

      var reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

      _definitions = [reducedRuleNameDefinition];

      rule.setDefinitions(_definitions);
    }

    var rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        definitions = rule.getDefinitions(),
        definition = rewrittenDefinition; ///

    addInFrontOfLast(definitions, definition);

    var repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

    var repeatedRule = findRule(repeatedRuleName, rules);

    if (repeatedRule === null) {
      repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

      rules.push(repeatedRule);
    }

    var repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    repeatedRule.addRepeatedDefinition(repeatedDefinition);

    return true;
  }
}

function rewriteNonStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var nonStrictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isNonStrictlyLeftRecursive();

  if (nonStrictlyLeftRecursive) {
    var definitions = void 0;

    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules);

    var reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var _definitions2 = void 0;

      _definitions2 = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, _definitions2);

      rules.push(reducedRule);

      var reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

      _definitions2 = [reducedRuleNameDefinition];

      rule.setDefinitions(_definitions2);
    }

    definitions = rule.getDefinitions();

    var rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    addInFrontOfLast(definitions, rewrittenDefinition);

    var repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

    var repeatedRule = findRule(repeatedRuleName, rules);

    if (repeatedRule === null) {
      repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

      rules.push(repeatedRule);
    }

    var repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    repeatedRule.addRepeatedDefinition(repeatedDefinition);

    var leftRecursiveRuleName = immediatelyLeftRecursiveDefinition.getLeftRecursiveRuleName(),
        leftRecursiveRule = findRule(leftRecursiveRuleName, rules);

    var reducedLeftRecursiveRuleName = reducedRuleNameFromRuleName(leftRecursiveRuleName);

    var reducedLeftRecursiveRule = findRule(reducedLeftRecursiveRuleName, rules);

    if (reducedLeftRecursiveRule === null) {
      var _definitions3 = void 0;

      _definitions3 = leftRecursiveRule.getDefinitions();

      reducedLeftRecursiveRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedLeftRecursiveRuleName, _definitions3);

      rules.push(reducedLeftRecursiveRule);

      var reducedLeftRecursiveRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedLeftRecursiveRuleName);

      _definitions3 = [reducedLeftRecursiveRuleNameDefinition];

      leftRecursiveRule.setDefinitions(_definitions3);
    }

    var indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition(),
        definition = indirectlyLeftRecursiveDefinition.getDefinition();

    definitions = leftRecursiveRule.getDefinitions();

    reducedLeftRecursiveRule.removeDefinition(definition);

    addInFrontOfLast(definitions, definition);

    return true;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,