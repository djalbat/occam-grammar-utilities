'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ReducedRule = require('./rule/reduced'),
    RepeatedRule = require('./rule/repeated'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RuleNameDefinition = require('./definition/ruleName'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    addInFrontOfLast = arrayUtilities.addInFrontOfLast,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionNonStrictlyLeftRecursive = recursiveDefinition.isNonStrictlyLeftRecursive();

  if (recursiveDefinitionNonStrictlyLeftRecursive) {
    var nonStrictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    leftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var immediatelyLeftRecursiveDefinition = nonStrictlyLeftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) || rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules);

    var reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var _definitions = void 0;

      _definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, _definitions);

      rules.push(reducedRule);

      var reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

      _definitions = [reducedRuleNameDefinition];

      rule.setDefinitions(_definitions);
    }

    var rewrittenDefinition = RewrittenDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition),
        definitions = rule.getDefinitions(),
        definition = rewrittenDefinition; ///

    addInFrontOfLast(definitions, definition);

    var repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

    var repeatedRule = findRule(repeatedRuleName, rules);

    if (repeatedRule === null) {
      repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

      rules.push(repeatedRule);
    }

    var repeatedDefinition = RepeatedDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    repeatedRule.addRepeatedDefinition(repeatedDefinition);

    return true;
  }
}

function rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules) {
  var nonStrictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isNonStrictlyLeftRecursive();

  if (nonStrictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var definitions = void 0;

      var rule = findRule(ruleName, rules);

      definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

      rules.push(reducedRule);

      var lookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          leftRecursiveRuleName = ruleName,
          ///
      reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);

      definitions = [reducedRuleNameDefinition];

      rule.setDefinitions(definitions);

      return true;
    }
  }

  /*
  let rule,
      definitions,
      reducedRule,
      reducedRuleNameDefinition;
   rule = findRule(ruleName, rules);
   const immediatelyLeftRecursiveRule = rule;  ///
   reducedRule = ReducedRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);
   const repeatedRule = RepeatedRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);
   rules.push(reducedRule);
   rules.push(repeatedRule);
   const firstLookAhead = first(lookAheads),
        firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
        lookAhead = firstLookAhead, ///
        leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
   reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName);
   const reducedAndRepeatedRuleNamesDefinition = ReducedAndRepeatedRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);
   definitions = [
    reducedAndRepeatedRuleNamesDefinition,
    reducedRuleNameDefinition
  ];
   immediatelyLeftRecursiveRule.setDefinitions(definitions);
   const indirectlyLeftRecursiveRuleName = leftRecursiveRuleName, ///
        indirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleName(indirectlyLeftRecursiveRuleName, rules),
        firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
        immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition, ///
        indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition();
   reducedRule = ReducedRule.fromIndirectlyLeftRecursiveRuleAndIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition);
   const ruleNameDefinition = RuleNameDefinition.fromRuleName(ruleName);
   reducedRuleNameDefinition = RuleNameDefinition.fromLeftRecurreducedRiveRuleName(leftRecursiveRuleName);
   definitions = [
    ruleNameDefinition,
    reducedRuleNameDefinition
  ];
   indirectlyLeftRecursiveRule.setDefinitions(definitions);
   rules.push(reducedRule);
  */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,