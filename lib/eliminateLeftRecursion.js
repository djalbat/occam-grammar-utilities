'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    definitionUtilities = require('./utilities/definition'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    DirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/directly'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    forEachWithReplace = arrayUtilities.forEachWithReplace,
    recursiveRuleNamesFromDefinition = definitionUtilities.recursiveRuleNamesFromDefinition;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveRuleNames = [],
      replacementDefinitions = [];

  replaceDefinitions(rule, recursiveRuleNames, replacementDefinitions, rules);

  replacementDefinitions.forEach(function (replacementDefinition) {
    return replacementDefinition.rewrite(rules);
  });
}

module.exports = eliminateLeftRecursion;

function replaceDefinitions(rule, recursiveRuleNames, replacementDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithReplace(definitions, function (definition) {
    var replacementDefinition = null;

    var definitionLeftRecursiveDefinition = definition instanceof LeftRecursiveDefinition;

    if (!definitionLeftRecursiveDefinition) {
      if (replacementDefinition === null) {
        var directlyLeftRecursiveDefinition = DirectlyLeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

        if (directlyLeftRecursiveDefinition !== null) {
          replacementDefinition = directlyLeftRecursiveDefinition; ///
        }
      }

      if (replacementDefinition === null) {
        var indirectlyLeftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromRuleNameDefinitionAndRecursiveRuleNames(ruleName, definition, recursiveRuleNames);

        if (indirectlyLeftRecursiveDefinition !== null) {
          replacementDefinition = indirectlyLeftRecursiveDefinition; ///
        }
      }
    }

    if (replacementDefinition !== null) {
      replacementDefinitions.push(replacementDefinition);
    }

    var previousRecursiveRuleNames = recursiveRuleNames; ///

    recursiveRuleNames = recursiveRuleNamesFromDefinition(definition);

    var recursiveRuleNamesLength = recursiveRuleNames.length,
        definitionRecursive = recursiveRuleNamesLength > 0;

    if (definitionRecursive) {
      var recursiveRuleName = ruleName; ///

      recursiveRuleNames = [].concat(_toConsumableArray(previousRecursiveRuleNames), [recursiveRuleName]);

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveRuleNamesIncludesRecursiveRuleName = recursiveRuleNames.includes(recursiveRuleName);

        if (!recursiveRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            replaceDefinitions(_rule, recursiveRuleNames, replacementDefinitions, rules);
          }
        }
      });
    }

    return replacementDefinition;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,