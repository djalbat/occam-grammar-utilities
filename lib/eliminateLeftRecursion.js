"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _leftRecursive = _interopRequireDefault(require("./definition/leftRecursive"));
var _directly = _interopRequireDefault(require("./definition/leftRecursive/directly"));
var _indirectly = _interopRequireDefault(require("./definition/leftRecursive/indirectly"));
var _class = require("./utilities/class");
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){
            arr2[i] = arr[i];
        }
        return arr2;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, recursiveDefinitions = [], leftRecursiveDefinitions = [];
    replaceRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
    rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
exports.default = eliminateLeftRecursion;
function replaceRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveDefinition = _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _leftRecursive.default.fromRuleNameAndDefinition(ruleName, definition);
    if (leftRecursiveDefinition !== null) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _class.isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();
            implicitlyLeftRecursiveDefinition.replace(ruleMap);
        }
        leftRecursiveDefinitions.push(leftRecursiveDefinition);
    }
    var recursiveDefinition = leftRecursiveDefinition !== null ? leftRecursiveDefinition : _recursive.default.fromRuleNameAndDefinition(ruleName, definition);
    if (recursiveDefinition !== null) {
        recursiveDefinition.replace(ruleMap);
    }
    return recursiveDefinition;
}
function replaceRecursiveDefinitions(rule, recursiveDefinitions, leftRecursiveDefinitions, ruleMap) {
    var ruleName = rule.getName(), definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        var definitionRecursiveDefinition = _class.isInstanceOf(definition, _recursive.default), recursiveDefinition = definitionRecursiveDefinition ? definition : replaceRecursiveDefinition(ruleName, definition, recursiveDefinitions, leftRecursiveDefinitions, ruleMap);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName1 = recursiveRuleName, rule1 = ruleMap[ruleName1] || null; ///
                    if (rule1 !== null) {
                        var recursiveDefinitions1 = previousRecursiveDefinitions; ///
                        replaceRecursiveDefinitions(rule1, recursiveDefinitions1, leftRecursiveDefinitions, ruleMap);
                    }
                }
            });
        }
    });
}
function rewriteLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleMap) {
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        return leftRecursiveDefinition.rewrite(ruleMap);
    });
}
function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(), recursiveRuleName = recursiveDefinitionRuleName; ///
    return recursiveRuleName;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,