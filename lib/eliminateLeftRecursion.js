'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    NonRecursiveDefinition = require('./definition/nonRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive');

var addToArrayMap = objectUtilities.addToArrayMap,
    findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  var immediatelyLeftRecursiveDefinitionsMap = {};

  immediatelyLeftRecursiveDefinitions.forEach(function (immediatelyLeftRecursiveDefinition) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName();

    addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);
  });

  createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition === null) {
      return true;
    }

    var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

    if (recursiveDefinitionStrictlyLeftRecursive) {
      var strictlyLeftRecursiveDefinition = recursiveDefinition,
          ///
      immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }

    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      var leftRecursiveDefinition = recursiveDefinition,
          ///
      indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

      if (indirectlyLeftRecursiveDefinition !== null) {
        var _immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

        _immediatelyLeftRecursiveDefinition.setIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition);

        immediatelyLeftRecursiveDefinitions.push(_immediatelyLeftRecursiveDefinition);

        return true;
      }
    }

    recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

    var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
        recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
      return recursiveDefinition.getRuleName();
    });

    recursiveRuleNames.forEach(function (recursiveRuleName) {
      var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

      if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
        var name = recursiveRuleName,
            ///
        _rule = findRuleByName(name, rules);

        if (_rule !== null) {
          removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
        }
      }
    });
  });
}

function createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var immediatelyLeftRecursiveDefinitionsMap = immediatelyLeftRecursiveDefinitionsMap[ruleName],
        rightRecursiveDefinitions = immediatelyLeftRecursiveDefinitionsMap.map(function (immediatelyLeftRecursiveDefinition) {
      var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

      return rightRecursiveDefinition;
    }),
        rightRecursiveRule = RightRecursiveRule.fromRuleNameAndRightRecursiveDefinitions(ruleName, rightRecursiveDefinitions);

    rules.push(rightRecursiveRule);
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName),
        nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(recursiveDefinition);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    rules.push(nonRecursiveRule);

    rule.clearDefinitions();
  });
}

function findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsCycle = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions) {
  var leftRecursiveDefinitionsCycle = null;

  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions) {
  var indirectlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle);

    indirectlyLeftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return indirectlyLeftRecursiveDefinition;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,