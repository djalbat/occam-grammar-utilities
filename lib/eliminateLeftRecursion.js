'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ReducedRule = require('./rule/reduced'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    ReducedRuleNameDefinition = require('./definition/reducedRuleName'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition'),
    ReducedAndRightRecursiveRuleNamesDefinition = require('./definition/reducedAndRightRecursiveRuleNames');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findIndirectlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findIndirectlyLeftRecursiveDefinition,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitions = [];

  removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);

  rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules);

  var ruleNames = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    return immediatelyLeftRecursiveDefinition.getRuleName();
  }),
      ruleNamesLength = ruleNames.length;

  if (ruleNamesLength > 0) {
    var ruleNamesString = ruleNames.reduce(function (ruleNamesString, ruleName) {
      ruleNamesString = ruleNamesString !== '' ? ruleNamesString + ', \'' + ruleName + '\'' : '\'' + ruleName + '\'';

      return ruleNamesString;
    }, '');

    throw new Error('Left recursion cannot be eliminated from the folliowing rule or rules: ' + ruleNamesString + '.');
  }
}

module.exports = eliminateLeftRecursion;

function removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionStrictlyLeftRecursive = recursiveDefinition.isStrictlyLeftRecursive();

  if (recursiveDefinitionStrictlyLeftRecursive) {
    var strictlyLeftRecursiveDefinition = recursiveDefinition,
        ///
    immediatelyLeftRecursiveDefinition = strictlyLeftRecursiveDefinition; ///

    immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

    return true;
  }
}

function removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions) {
  var recursiveDefinitionNonStrictlyLeftRecursive = recursiveDefinition.isNonStrictlyLeftRecursive();

  if (recursiveDefinitionNonStrictlyLeftRecursive) {
    var leftRecursiveDefinition = recursiveDefinition,
        ///
    indirectlyLeftRecursiveDefinition = findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    if (indirectlyLeftRecursiveDefinition !== null) {
      var immediatelyLeftRecursiveDefinition = leftRecursiveDefinition; ///

      immediatelyLeftRecursiveDefinitions.push(immediatelyLeftRecursiveDefinition);

      return true;
    }
  }
}

function removeImmediatelyLeftRecursiveDefinitions(rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var remove = removeStrictlyLeftRecursiveDefinition(recursiveDefinition, immediatelyLeftRecursiveDefinitions) || removeNonStrictlyLeftRecursiveDefinition(recursiveDefinition, recursiveDefinitions, immediatelyLeftRecursiveDefinitions);

      if (remove) {
        return true;
      }

      recursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]);

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          recursiveDefinitionRuleNames = recursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = recursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            removeImmediatelyLeftRecursiveDefinitions(_rule, recursiveDefinitions, immediatelyLeftRecursiveDefinitions, rules);
          }
        }
      });
    }
  });
}

function rewriteLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinitions, rules) {
  forEachWithRemove(immediatelyLeftRecursiveDefinitions, function (immediatelyLeftRecursiveDefinition) {
    var rewritable = immediatelyLeftRecursiveDefinition.isRewritable();

    if (rewritable) {
      var remove = rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) || rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules);

      if (remove) {
        return true;
      }
    }
  });
}

function rewriteStrictlyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition, rules) {
  var strictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isStrictlyLeftRecursive();

  if (strictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(ruleName),
        reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var definitions = void 0;

      var rule = findRule(ruleName, rules);

      definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

      rules.push(reducedRule);

      var lookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          leftRecursiveRuleName = ruleName,
          ///
      reducedRuleNameDefinition = ReducedRuleNameDefinition.fromRuleName(ruleName),
          reducedAndRightRecursiveRuleNamesDefinition = ReducedAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);

      definitions = [reducedAndRightRecursiveRuleNamesDefinition, reducedRuleNameDefinition];

      rule.setDefinitions(definitions);
    } else {
      var _rule2 = findRule(ruleName, rules),
          _definitions = _rule2.getDefinitions(),
          firstDefinition = first(_definitions),
          immediatelyLeftRecursiveDefinitionLookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          _reducedAndRightRecursiveRuleNamesDefinition = firstDefinition,
          ///
      reducedAndRightRecursiveRuleNamesDefinitionLookAhead = _reducedAndRightRecursiveRuleNamesDefinition.isLookAhead();

      if (immediatelyLeftRecursiveDefinitionLookAhead !== reducedAndRightRecursiveRuleNamesDefinitionLookAhead) {
        return false;
      }
    }

    var rightRecursiveRule = findRule(rightRecursiveRuleName, rules);

    if (rightRecursiveRule === null) {
      rightRecursiveRule = RightRecursiveRule.fromRightRecursiveRuleName(rightRecursiveRuleName);

      rules.push(rightRecursiveRule);
    }

    var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

    rightRecursiveRule.addRightRecursiveDefinition(rightRecursiveDefinition);

    return true;
  }
}

function rewriteImmediatelyAndIndirectlyLeftRecursiveDefinitions(immediatelyLeftRecursiveDefinition, rules) {
  var nonStrictlyLeftRecursive = immediatelyLeftRecursiveDefinition.isNonStrictlyLeftRecursive();

  if (nonStrictlyLeftRecursive) {
    var ruleName = immediatelyLeftRecursiveDefinition.getRuleName(),
        reducedRuleName = reducedRuleNameFromRuleName(ruleName);

    var reducedRule = findRule(reducedRuleName, rules);

    if (reducedRule === null) {
      var definitions = void 0;

      var rule = findRule(ruleName, rules);

      definitions = rule.getDefinitions();

      reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

      rules.push(reducedRule);

      var lookAhead = immediatelyLeftRecursiveDefinition.isLookAhead(),
          leftRecursiveRuleName = ruleName,
          ///
      reducedRuleNameDefinition = ReducedRuleNameDefinition.fromRuleName(ruleName),
          reducedAndRightRecursiveRuleNamesDefinition = ReducedAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);

      definitions = [reducedAndRightRecursiveRuleNamesDefinition, reducedRuleNameDefinition];

      rule.setDefinitions(definitions);

      return true;
    }
  }

  /*
  let rule,
      definitions,
      reducedRule,
      reducedRuleNameDefinition;
   rule = findRule(ruleName, rules);
   const immediatelyLeftRecursiveRule = rule;  ///
   reducedRule = ReducedRule.fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule);
   const rightRecursiveRule = RightRecursiveRule.fromRuleNameAndImmediatelyLeftRecursiveRecursiveDefinitions(ruleName, immediatelyLeftRecursiveDefinitions);
   rules.push(reducedRule);
   rules.push(rightRecursiveRule);
   const firstLookAhead = first(lookAheads),
        firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
        lookAhead = firstLookAhead, ///
        leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
   reducedRuleNameDefinition = ReducedRuleNameDefinition.fromRuleName(ruleName);
   const reducedAndRightRecursiveRuleNamesDefinition = ReducedAndRightRecursiveRuleNamesDefinition.fromRuleNameLeftRecursiveRuleNameAndLookAhead(ruleName, leftRecursiveRuleName, lookAhead);
   definitions = [
    reducedAndRightRecursiveRuleNamesDefinition,
    reducedRuleNameDefinition
  ];
   immediatelyLeftRecursiveRule.setDefinitions(definitions);
   const indirectlyLeftRecursiveRuleName = leftRecursiveRuleName, ///
        indirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleName(indirectlyLeftRecursiveRuleName, rules),
        firstImmediatelyLeftRecursiveDefinition = first(immediatelyLeftRecursiveDefinitions),
        immediatelyLeftRecursiveDefinition = firstImmediatelyLeftRecursiveDefinition, ///
        indirectlyLeftRecursiveDefinition = immediatelyLeftRecursiveDefinition.getIndirectlyLeftRecursiveDefinition();
   reducedRule = ReducedRule.fromIndirectlyLeftRecursiveRuleAndIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveRule, indirectlyLeftRecursiveDefinition);
   const ruleNameDefinition = RuleNameDefinition.fromRuleName(ruleName);
   reducedRuleNameDefinition = ReducedRuleNameDefinition.fromLeftRecursiveRuleName(leftRecursiveRuleName);
   definitions = [
    ruleNameDefinition,
    reducedRuleNameDefinition
  ];
   indirectlyLeftRecursiveRule.setDefinitions(definitions);
   rules.push(reducedRule);
  */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIlJlZHVjZWRSdWxlIiwicmVxdWlyZSIsInJ1bGVVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwiUmVjdXJzaXZlRGVmaW5pdGlvbiIsIlJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIlJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24iLCJyZWN1cnNpdmVEZWZpbml0aW9uVXRpbGl0aWVzIiwiUmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbiIsImZpbmRSdWxlIiwiZmlyc3QiLCJmb3JFYWNoV2l0aFJlbW92ZSIsImZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVzIiwiZmlyc3RSdWxlIiwicnVsZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJld3JpdGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTmFtZXMiLCJtYXAiLCJpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZ2V0UnVsZU5hbWUiLCJydWxlTmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJydWxlTmFtZXNTdHJpbmciLCJyZWR1Y2UiLCJydWxlTmFtZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlbW92ZVN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSIsImlzU3RyaWN0bHlMZWZ0UmVjdXJzaXZlIiwic3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInB1c2giLCJyZW1vdmVOb25TdHJpY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbk5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSIsImlzTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJnZXROYW1lIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJmcm9tRGVmaW5pdGlvbkFuZFJ1bGVOYW1lIiwicmVtb3ZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZ2V0UmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lcyIsImZvckVhY2giLCJyZWN1cnNpdmVSdWxlTmFtZSIsInJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZXNJbmNsdWRlc1JlY3Vyc2l2ZVJ1bGVOYW1lIiwiaW5jbHVkZXMiLCJyZXdyaXRhYmxlIiwiaXNSZXdyaXRhYmxlIiwicmV3cml0ZVN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlSW1tZWRpYXRlbHlBbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwic3RyaWN0bHlMZWZ0UmVjdXJzaXZlIiwicmlnaHRSZWN1cnNpdmVSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJlZHVjZWRSdWxlTmFtZUFuZERlZmluaXRpb25zIiwibG9va0FoZWFkIiwiaXNMb29rQWhlYWQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uIiwiZnJvbVJ1bGVOYW1lIiwicmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZUFuZExvb2tBaGVhZCIsInNldERlZmluaXRpb25zIiwiZmlyc3REZWZpbml0aW9uIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxvb2tBaGVhZCIsInJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb25Mb29rQWhlYWQiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUmlnaHRSZWN1cnNpdmVSdWxlTmFtZSIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiYWRkUmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uIiwibm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLGNBQWNDLFFBQVEsZ0JBQVIsQ0FBcEI7QUFBQSxJQUNNQyxnQkFBZ0JELFFBQVEsa0JBQVIsQ0FEdEI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsbUJBQVIsQ0FGdkI7QUFBQSxJQUdNRyxvQkFBb0JILFFBQVEsc0JBQVIsQ0FIMUI7QUFBQSxJQUlNSSxxQkFBcUJKLFFBQVEsdUJBQVIsQ0FKM0I7QUFBQSxJQUtNSyxzQkFBc0JMLFFBQVEsd0JBQVIsQ0FMNUI7QUFBQSxJQU1NTSwyQkFBMkJOLFFBQVEsNkJBQVIsQ0FOakM7QUFBQSxJQU9NTyw0QkFBNEJQLFFBQVEsOEJBQVIsQ0FQbEM7QUFBQSxJQVFNUSwrQkFBK0JSLFFBQVEsaUNBQVIsQ0FSckM7QUFBQSxJQVNNUyw4Q0FBOENULFFBQVEsZ0RBQVIsQ0FUcEQ7O0FBV00sSUFBRVUsUUFBRixHQUFlVCxhQUFmLENBQUVTLFFBQUY7QUFBQSxJQUNFQyxLQURGLEdBQytCVCxjQUQvQixDQUNFUyxLQURGO0FBQUEsSUFDU0MsaUJBRFQsR0FDK0JWLGNBRC9CLENBQ1NVLGlCQURUO0FBQUEsSUFFRUMscUNBRkYsR0FFNENM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RUFBZDs7QUFFQWtCLG9CQUFjcEUsWUFBWXFFLGlDQUFaLENBQThDRixlQUE5QyxFQUErRGxCLFdBQS9ELENBQWQ7O0FBRUEvQixZQUFNd0IsSUFBTixDQUFXMEIsV0FBWDs7QUFFQSxVQUFNRSxZQUFZM0MsbUNBQW1DNEMsV0FBbkMsRUFBbEI7QUFBQSxVQUNNQyx3QkFBd0J2QyxRQUQ5QjtBQUFBLFVBQ3dDO0FBQ2xDd0Msa0NBQTRCakUsMEJBQTBCa0UsWUFBMUIsQ0FBdUN6QyxRQUF2QyxDQUZsQztBQUFBLFVBR00wQyw4Q0FBOENqRSw0Q0FBNENrRSw2Q0FBNUMsQ0FBMEYzQyxRQUExRixFQUFvR3VDLHFCQUFwRyxFQUEySEYsU0FBM0gsQ0FIcEQ7O0FBS0FyQixvQkFBYyxDQUNaMEIsMkNBRFksRUFFWkYseUJBRlksQ0FBZDs7QUFLQXJELFdBQUt5RCxjQUFMLENBQW9CNUIsV0FBcEI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVERCIsImZpbGUiOiJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWR1Y2VkUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS9yZWR1Y2VkJyksXG4gICAgICBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgcnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ydWxlTmFtZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi9ydWxlL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uL3JlZHVjZWRSdWxlTmFtZScpLFxuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3JlY3Vyc2l2ZURlZmluaXRpb24nKSxcbiAgICAgIFJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24vcmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzJyk7XG5cbmNvbnN0IHsgZmluZFJ1bGUgfSA9IHJ1bGVVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0LCBmb3JFYWNoV2l0aFJlbW92ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gfSA9IHJlY3Vyc2l2ZURlZmluaXRpb25VdGlsaXRpZXMsXG4gICAgICB7IHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUnVsZU5hbWUsIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpIHtcbiAgY29uc3QgZmlyc3RSdWxlID0gZmlyc3QocnVsZXMpLFxuICAgICAgICBydWxlID0gZmlyc3RSdWxlLCAvLy9cbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICByZW1vdmVJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVzKTtcblxuICByZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcyk7XG5cbiAgY29uc3QgcnVsZU5hbWVzID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCkpLFxuICAgICAgICBydWxlTmFtZXNMZW5ndGggPSBydWxlTmFtZXMubGVuZ3RoO1xuXG4gIGlmIChydWxlTmFtZXNMZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcnVsZU5hbWVzU3RyaW5nID0gcnVsZU5hbWVzLnJlZHVjZSgocnVsZU5hbWVzU3RyaW5nLCBydWxlTmFtZSkgPT4ge1xuICAgICAgcnVsZU5hbWVzU3RyaW5nID0gKHJ1bGVOYW1lc1N0cmluZyAhPT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBgJHtydWxlTmFtZXNTdHJpbmd9LCAnJHtydWxlTmFtZX0nYCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGAnJHtydWxlTmFtZX0nYDtcblxuICAgICAgcmV0dXJuIHJ1bGVOYW1lc1N0cmluZztcbiAgICB9LCAnJyk7XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYExlZnQgcmVjdXJzaW9uIGNhbm5vdCBiZSBlbGltaW5hdGVkIGZyb20gdGhlIGZvbGxpb3dpbmcgcnVsZSBvciBydWxlczogJHtydWxlTmFtZXNTdHJpbmd9LmApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbjtcblxuZnVuY3Rpb24gcmVtb3ZlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5pc1N0cmljdGx5TGVmdFJlY3Vyc2l2ZSgpO1xuXG4gIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlKSB7XG4gICAgY29uc3Qgc3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlY3Vyc2l2ZURlZmluaXRpb24sICAvLy9cbiAgICAgICAgICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gc3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG5cbiAgICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbk5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSA9IHJlY3Vyc2l2ZURlZmluaXRpb24uaXNOb25TdHJpY3RseUxlZnRSZWN1cnNpdmUoKTtcblxuICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbk5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVjdXJzaXZlRGVmaW5pdGlvbiwgIC8vL1xuICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICAgIGlmIChpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG5cbiAgICAgIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLnB1c2goaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGZvckVhY2hXaXRoUmVtb3ZlKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EZWZpbml0aW9uQW5kUnVsZU5hbWUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHJlbW92ZSA9IHJlbW92ZVN0cmljdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocmVjdXJzaXZlRGVmaW5pdGlvbiwgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgfHwgcmVtb3ZlTm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihyZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucywgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9ucyA9IFsgLi4ucmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlY3Vyc2l2ZURlZmluaXRpb24gXTtcblxuICAgICAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSZWN1cnNpdmVSdWxlTmFtZXMoKSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZXMgPSByZWN1cnNpdmVEZWZpbml0aW9ucy5tYXAoKHJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSk7XG5cbiAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcy5mb3JFYWNoKChyZWN1cnNpdmVSdWxlTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVzSW5jbHVkZXNSZWN1cnNpdmVSdWxlTmFtZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZXMuaW5jbHVkZXMocmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgICAgIGlmICghcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lc0luY2x1ZGVzUmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJlY3Vyc2l2ZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICAgICAgcnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICAgICAgICBpZiAocnVsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVtb3ZlSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMsIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlcykge1xuICBmb3JFYWNoV2l0aFJlbW92ZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCByZXdyaXRhYmxlID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5pc1Jld3JpdGFibGUoKTtcblxuICAgIGlmIChyZXdyaXRhYmxlKSB7XG4gICAgICBjb25zdCByZW1vdmUgPSByZXdyaXRlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlcylcbiAgICAgICAgICAgICAgICAgICB8fCByZXdyaXRlSW1tZWRpYXRlbHlBbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJ1bGVzKTtcblxuICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlU3RyaWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlcykge1xuICBjb25zdCBzdHJpY3RseUxlZnRSZWN1cnNpdmUgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmlzU3RyaWN0bHlMZWZ0UmVjdXJzaXZlKCk7XG5cbiAgaWYgKHN0cmljdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUgPSByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbiAgICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgbGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICBpZiAocmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICAgIGxldCBkZWZpbml0aW9ucztcblxuICAgICAgY29uc3QgcnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SZWR1Y2VkUnVsZU5hbWVBbmREZWZpbml0aW9ucyhyZWR1Y2VkUnVsZU5hbWUsIGRlZmluaXRpb25zKTtcblxuICAgICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cbiAgICAgIGNvbnN0IGxvb2tBaGVhZCA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNMb29rQWhlYWQoKSxcbiAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IHJ1bGVOYW1lLCAvLy9cbiAgICAgICAgICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24gPSBSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uLmZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgICAgICByZWR1Y2VkQW5kUmlnaHRSZWN1cnNpdmVSdWxlTmFtZXNEZWZpbml0aW9uID0gUmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbi5mcm9tUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRMb29rQWhlYWQocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgbG9va0FoZWFkKTtcblxuICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgIHJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24sXG4gICAgICAgIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb25cbiAgICAgIF07XG5cbiAgICAgIHJ1bGUuc2V0RGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBydWxlID0gZmluZFJ1bGUocnVsZU5hbWUsIHJ1bGVzKSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICAgICAgZmlyc3REZWZpbml0aW9uID0gZmlyc3QoZGVmaW5pdGlvbnMpLFxuICAgICAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkxvb2tBaGVhZCA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNMb29rQWhlYWQoKSxcbiAgICAgICAgICAgIHJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24gPSBmaXJzdERlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgcmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbkxvb2tBaGVhZCA9IHJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24uaXNMb29rQWhlYWQoKTtcblxuICAgICAgaWYgKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25Mb29rQWhlYWQgIT09IHJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb25Mb29rQWhlYWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBmaW5kUnVsZShyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgICBpZiAocmlnaHRSZWN1cnNpdmVSdWxlID09PSBudWxsKSB7XG4gICAgICByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbVJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUocmlnaHRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgICAgIHJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcbiAgICB9XG5cbiAgICBjb25zdCByaWdodFJlY3Vyc2l2ZURlZmluaXRpb24gPSBSaWdodFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICByaWdodFJlY3Vyc2l2ZVJ1bGUuYWRkUmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uKHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXdyaXRlSW1tZWRpYXRlbHlBbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJ1bGVzKSB7XG4gIGNvbnN0IG5vblN0cmljdGx5TGVmdFJlY3Vyc2l2ZSA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNOb25TdHJpY3RseUxlZnRSZWN1cnNpdmUoKTtcblxuICBpZiAobm9uU3RyaWN0bHlMZWZ0UmVjdXJzaXZlKSB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICAgIGxldCByZWR1Y2VkUnVsZSA9IGZpbmRSdWxlKHJlZHVjZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG4gICAgaWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgICBsZXQgZGVmaW5pdGlvbnM7XG5cbiAgICAgIGNvbnN0IHJ1bGUgPSBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpO1xuXG4gICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICAgICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUmVkdWNlZFJ1bGVOYW1lQW5kRGVmaW5pdGlvbnMocmVkdWNlZFJ1bGVOYW1lLCBkZWZpbml0aW9ucyk7XG5cbiAgICAgIHJ1bGVzLnB1c2gocmVkdWNlZFJ1bGUpO1xuXG4gICAgICBjb25zdCBsb29rQWhlYWQgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmlzTG9va0FoZWFkKCksXG4gICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBydWxlTmFtZSwgLy8vXG4gICAgICAgICAgICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uID0gUmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbi5mcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICAgICAgcmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbiA9IFJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24uZnJvbVJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTG9va0FoZWFkKHJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGxvb2tBaGVhZCk7XG5cbiAgICAgIGRlZmluaXRpb25zID0gW1xuICAgICAgICByZWR1Y2VkQW5kUmlnaHRSZWN1cnNpdmVSdWxlTmFtZXNEZWZpbml0aW9uLFxuICAgICAgICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uXG4gICAgICBdO1xuXG4gICAgICBydWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgbGV0IHJ1bGUsXG4gICAgICBkZWZpbml0aW9ucyxcbiAgICAgIHJlZHVjZWRSdWxlLFxuICAgICAgcmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbjtcblxuICBydWxlID0gZmluZFJ1bGUocnVsZU5hbWUsIHJ1bGVzKTtcblxuICBjb25zdCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlID0gcnVsZTsgIC8vL1xuXG4gIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSk7XG5cbiAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlID0gUmlnaHRSZWN1cnNpdmVSdWxlLmZyb21SdWxlTmFtZUFuZEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGVOYW1lLCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cbiAgcnVsZXMucHVzaChyaWdodFJlY3Vyc2l2ZVJ1bGUpO1xuXG4gIGNvbnN0IGZpcnN0TG9va0FoZWFkID0gZmlyc3QobG9va0FoZWFkcyksXG4gICAgICAgIGZpcnN0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gZmlyc3QobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyksXG4gICAgICAgIGxvb2tBaGVhZCA9IGZpcnN0TG9va0FoZWFkLCAvLy9cbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWU7IC8vL1xuXG4gIHJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24gPSBSZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uLmZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgY29uc3QgcmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbiA9IFJlZHVjZWRBbmRSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lc0RlZmluaXRpb24uZnJvbVJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kTG9va0FoZWFkKHJ1bGVOYW1lLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGxvb2tBaGVhZCk7XG5cbiAgZGVmaW5pdGlvbnMgPSBbXG4gICAgcmVkdWNlZEFuZFJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVzRGVmaW5pdGlvbixcbiAgICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uXG4gIF07XG5cbiAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZS5zZXREZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgLy8vXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUoaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcnVsZXMpLFxuICAgICAgICBmaXJzdEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpO1xuXG4gIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbUluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZUFuZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgY29uc3QgcnVsZU5hbWVEZWZpbml0aW9uID0gUnVsZU5hbWVEZWZpbml0aW9uLmZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgcmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IFJlZHVjZWRSdWxlTmFtZURlZmluaXRpb24uZnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZShsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gIGRlZmluaXRpb25zID0gW1xuICAgIHJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICByZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uXG4gIF07XG5cbiAgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICBydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcbiAgKi9cbn1cbiJdfQ==