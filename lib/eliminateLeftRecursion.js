"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateLeftRecursion;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _left = _interopRequireDefault(require("./definition/recursive/left"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _indirectly = _interopRequireDefault(require("./definition/recursive/left/indirectly"));
var _implicitly = _interopRequireDefault(require("./definition/recursive/left/implicitly"));
var _class = require("./utilities/class");
var _parts = require("./utilities/parts");
var _rule = require("./utilities/rule");
function eliminateLeftRecursion(startRule, ruleMap) {
    var rule = startRule, leftRecursiveDefinitions = retrieveLeftRecursiveDefinitions(rule, ruleMap);
    eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap);
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    eliminateDirectLeftRecursion(directlyLeftRecursiveRules, ruleMap);
    var startRuleName = startRule.getName();
    startRule = ruleMap[startRuleName]; ///
    return startRule;
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart, find = _necessary.arrayUtilities.find, tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first;
function eliminateDirectLeftRecursion(directlyLeftRecursiveRules, ruleMap) {
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var rule = directlyLeftRecursiveRule, definitions = rule.getDefinitions(), directlyLeftRecursiveDefinitions = find(definitions, function(definition) {
            var definitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _directly.default);
            if (definitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions);
        directlyLeftRecursiveDefinition.rewrite(ruleMap);
        definitions.splice(0); // rule.removeDefinitions();
        rule.addDefinition(directlyLeftRecursiveDefinition);
    });
}
function eliminateIndirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    indirectlyLeftRecursiveDefinitions.forEach(function(indirectlyLeftRecursiveDefinition) {
        var implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), indirectlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, ruleMap), implicitlyLeftRecursiveRule = (0, _rule).ruleFromLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition, ruleMap), indirectlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(indirectlyLeftRecursiveRule), implicitlyLeftRecursiveRuleDirectlyLeftRecursive = (0, _rule).isRuleDirectlyLeftRecursive(implicitlyLeftRecursiveRule);
        if (indirectlyLeftRecursiveRuleDirectlyLeftRecursive && implicitlyLeftRecursiveRuleDirectlyLeftRecursive) {
            var indirectlyLeftRecursiveDefinitionString = indirectlyLeftRecursiveDefinition.asString(), implicitlyLeftRecursiveDefinitionString = implicitlyLeftRecursiveDefinition.asString();
            throw new Error("The rules containing the '".concat(indirectlyLeftRecursiveDefinitionString, "' indirectly left recursive and ").concat(implicitlyLeftRecursiveDefinitionString, " implicitly left recursive definitions are both additionally directly recursive and therefore cannot be rewritten."));
        }
        var directlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? indirectlyLeftRecursiveRule : implicitlyLeftRecursiveRule, nonDirectlyLeftRecursiveRule = indirectlyLeftRecursiveRuleDirectlyLeftRecursive ? implicitlyLeftRecursiveRule : indirectlyLeftRecursiveRule; ///
        reduceNonDirectlyLeftRecursiveRule(nonDirectlyLeftRecursiveRule, ruleMap);
        var nonDirectlyLeftRecursiveDefinitions = retrieveNonDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule, nonDirectlyLeftRecursiveRule);
        rewriteNonDirectlyLeftRecursiveDefinitions(nonDirectlyLeftRecursiveDefinitions, nonDirectlyLeftRecursiveRule, ruleMap);
        reduceDirectlyLeftRecursiveRule(directlyLeftRecursiveRule, ruleMap);
    });
}
function reduceDirectlyLeftRecursiveRule(directlyLeftRecursiveRule, ruleMap) {
    var reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
}
function retrieveLeftRecursiveDefinition(rule, definition, ruleMap, recursiveDefinitions, leftRecursiveDefinitions) {
    var recursiveDefinition;
    var ruleName = rule.getName(), definitionRecursiveDefinition = (0, _class).isInstanceOf(definition, _recursive.default);
    if (definitionRecursiveDefinition) {
        recursiveDefinition = definition; ///
    } else {
        var leftRecursiveDefinition = _indirectly.default.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) || _directly.default.fromRuleNameAndDefinition(ruleName, definition) || _left.default.fromRuleNameAndDefinition(ruleName, definition);
        if (leftRecursiveDefinition !== null) {
            leftRecursiveDefinitions.push(leftRecursiveDefinition);
            recursiveDefinition = leftRecursiveDefinition; ///
        } else {
            recursiveDefinition = _recursive.default.fromRuleNameAndDefinition(ruleName, definition);
        }
        if (recursiveDefinition !== null) {
            var replacedDefinition = definition, replacementDefinition = recursiveDefinition; ///
            rule.replaceDefinition(replacedDefinition, replacementDefinition);
            var recursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(recursiveDefinition, _indirectly.default);
            if (recursiveDefinitionIndirectlyLeftRecursiveDefinition) {
                var indirectlyLeftRecursiveDefinition = recursiveDefinition, implicitlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition(), leftRecursiveDefinition1 = implicitlyLeftRecursiveDefinition.getLeftRecursiveDefinition(), ruleName1 = implicitlyLeftRecursiveDefinition.getRuleName(), replacedDefinition1 = leftRecursiveDefinition1, replacementDefinition1 = implicitlyLeftRecursiveDefinition; ///
                rule = ruleMap[ruleName1];
                rule.replaceDefinition(replacedDefinition1, replacementDefinition1);
            }
        }
    }
    return recursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(rule, ruleMap) {
    var recursiveDefinitions1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], leftRecursiveDefinitions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
    var definitions = rule.getDefinitions();
    definitions.forEach(function(definition) {
        var recursiveDefinition = retrieveLeftRecursiveDefinition(rule, definition, ruleMap, recursiveDefinitions1, leftRecursiveDefinitions);
        if (recursiveDefinition !== null) {
            var previousRecursiveDefinitions = _toConsumableArray(recursiveDefinitions1).concat([
                recursiveDefinition
            ]), previousRecursiveRuleNames = previousRecursiveDefinitions.map(function(previousRecursiveDefinition) {
                var previousRecursiveDefinitionRuleName = previousRecursiveDefinition.getRuleName(), previousRecursiveRuleName = previousRecursiveDefinitionRuleName; ///
                return previousRecursiveRuleName;
            }), recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();
            recursiveRuleNames.forEach(function(recursiveRuleName) {
                var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);
                if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
                    var ruleName = recursiveRuleName, _$rule = ruleMap[ruleName] || null; ///
                    if (_$rule !== null) {
                        var recursiveDefinitions = previousRecursiveDefinitions; ///
                        retrieveLeftRecursiveDefinitions(_$rule, ruleMap, recursiveDefinitions, leftRecursiveDefinitions);
                    }
                }
            });
        }
    });
    return leftRecursiveDefinitions;
}
function reduceNonDirectlyLeftRecursiveRule(nonDirectlyLeftRecursiveRule, ruleMap) {
    var reducedRule = _reduced.default.fromNonDirectlyLeftRecursiveRule(nonDirectlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
}
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules1 = leftRecursiveDefinitions.reduce(function(directlyLeftRecursiveRules, leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _directly.default), leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _indirectly.default), leftRecursiveDefinitionImplicitlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _implicitly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition || leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition || leftRecursiveDefinitionImplicitlyLeftRecursiveDefinition) {
            var ruleName = leftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], definitions = rule.getDefinitions(), ruleDirectlyLeftRecursiveRule = definitions.some(function(definition) {
                var definitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _directly.default);
                if (definitionDirectlyLeftRecursiveDefinition) {
                    return true;
                }
            });
            if (ruleDirectlyLeftRecursiveRule) {
                var directlyLeftRecursiveRule = rule, directlyLeftRecursiveRulesIncludesDirectlyLeftRecursiveRule = directlyLeftRecursiveRules.includes(directlyLeftRecursiveRule);
                if (!directlyLeftRecursiveRulesIncludesDirectlyLeftRecursiveRule) {
                    directlyLeftRecursiveRules.push(directlyLeftRecursiveRule);
                }
            }
        }
        return directlyLeftRecursiveRules;
    }, []);
    return directlyLeftRecursiveRules1;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition1;
    var firstDirectlyLeftRecursiveDefinition = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
    if (directlyLeftRecursiveDefinitionsLength === 1) {
        directlyLeftRecursiveDefinition1 = firstDirectlyLeftRecursiveDefinition; ///
    } else {
        var parts1;
        parts1 = firstDirectlyLeftRecursiveDefinition.getParts(); ///
        var firstPart = first(parts1), part = firstPart; ///
        var singleParts = directlyLeftRecursiveDefinitions.map(function(directlyLeftRecursiveDefinition) {
            directlyLeftRecursiveDefinition.removeFirstPart();
            var parts = directlyLeftRecursiveDefinition.getParts(), singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        parts1 = singleParts; ///
        var choiceOfPartsPart = new ChoiceOfPartsPart(parts1);
        parts1 = [
            part,
            choiceOfPartsPart
        ];
        var ruleName = firstDirectlyLeftRecursiveDefinition.getRuleName();
        directlyLeftRecursiveDefinition1 = _directly.default.fromRuleNameAndParts(ruleName, parts1);
    }
    return directlyLeftRecursiveDefinition1;
}
function rewriteNonDirectlyLeftRecursiveDefinition(nonDirectlyLeftRecursiveDefinition, nonDirectlyLeftRecursiveRule, ruleMap) {
    var _rule1;
    var definitions = nonDirectlyLeftRecursiveRule.getDefinitions(), rewrittenDefinitions = definitions.map(function(definition, index) {
        var Definition = index === 0 ? _directly.default : _left.default;
        var definitionParts = definition.getParts(), nonDirectlyLeftRecursiveDefinitionParts = nonDirectlyLeftRecursiveDefinition.getParts();
        definitionParts = (0, _parts).cloneParts(definitionParts); ///
        nonDirectlyLeftRecursiveDefinitionParts = tail((0, _parts).cloneParts(nonDirectlyLeftRecursiveDefinitionParts)); ///
        var parts = _toConsumableArray(definitionParts).concat(_toConsumableArray(nonDirectlyLeftRecursiveDefinitionParts));
        var ruleName = nonDirectlyLeftRecursiveDefinition.getRuleName(), recursiveRuleNames = null, leftRecursiveRuleNames = null; ///
        definition = new Definition(parts, ruleName, recursiveRuleNames, leftRecursiveRuleNames); ///
        var rewrittenDefinition = definition; ///
        return rewrittenDefinition;
    }), ruleName2 = nonDirectlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName2], replacedDefinition = nonDirectlyLeftRecursiveDefinition, replacementDefinitions = rewrittenDefinitions; ///
    (_rule1 = rule).replaceDefinition.apply(_rule1, [
        replacedDefinition
    ].concat(_toConsumableArray(replacementDefinitions)));
}
function rewriteNonDirectlyLeftRecursiveDefinitions(nonDirectlyLeftRecursiveDefinitions, nonDirectlyLeftRecursiveRule, ruleMap) {
    nonDirectlyLeftRecursiveDefinitions.forEach(function(nonDirectlyLeftRecursiveDefinition) {
        rewriteNonDirectlyLeftRecursiveDefinition(nonDirectlyLeftRecursiveDefinition, nonDirectlyLeftRecursiveRule, ruleMap);
    });
}
function retrieveNonDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule, nonDirectlyLeftRecursiveRule) {
    var nonDirectlyLeftRecursiveRuleName = nonDirectlyLeftRecursiveRule.getName(), rule = directlyLeftRecursiveRule, ruleName = nonDirectlyLeftRecursiveRuleName, definitions = rule.getDefinitions(), nonDirectlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _left.default);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames(), firstLeftRecursiveRuleName = first(leftRecursiveRuleNames), leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
            if (leftRecursiveRuleName === ruleName) {
                return true;
            }
        }
    });
    return nonDirectlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,