'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    RecursiveDefinition = require('./definition/recursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    DirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/directly'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly');

var findRule = ruleUtilities.findRule,
    first = arrayUtilities.first,
    forEachWithReplace = arrayUtilities.forEachWithReplace;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      replacementDefinitions = [];

  replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules);

  replacementDefinitions.forEach(function (replacementDefinition) {
    return replacementDefinition.rewrite(rules);
  });
}

module.exports = eliminateLeftRecursion;

function replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions) {
  var replacementDefinition = null;

  var definitionRecursiveDefinition = definition instanceof RecursiveDefinition;

  if (!definitionRecursiveDefinition) {
    if (replacementDefinition === null) {
      var directlyLeftRecursiveDefinition = DirectlyLeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

      if (directlyLeftRecursiveDefinition !== null) {
        replacementDefinition = directlyLeftRecursiveDefinition; ///
      }
    }

    if (replacementDefinition === null) {
      var indirectlyLeftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions);

      if (indirectlyLeftRecursiveDefinition !== null) {
        replacementDefinition = indirectlyLeftRecursiveDefinition; ///
      }
    }

    if (replacementDefinition === null) {
      var leftRecursiveDefinition = LeftRecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

      if (leftRecursiveDefinition !== null) {
        replacementDefinition = leftRecursiveDefinition; ///
      }
    }

    if (replacementDefinition === null) {
      var recursiveDefinition = RecursiveDefinition.fromRuleNameAndDefinition(ruleName, definition);

      if (recursiveDefinition !== null) {
        replacementDefinition = recursiveDefinition; ///
      }
    }
  }

  if (replacementDefinition !== null) {
    replacementDefinitions.push(replacementDefinition);
  }

  return replacementDefinition;
}

function replaceDefinitions(rule, recursiveDefinitions, replacementDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithReplace(definitions, function (definition) {
    var replacementDefinition = replaceDefinition(ruleName, definition, recursiveDefinitions, replacementDefinitions);

    var recursiveDefinition = void 0;

    if (replacementDefinition !== null) {
      recursiveDefinition = replacementDefinition; ///
    } else {
      var definitionRecursiveDefinition = definition instanceof RecursiveDefinition;

      if (definitionRecursiveDefinition) {
        recursiveDefinition = definition; ///
      }
    }

    if (recursiveDefinition !== null) {
      var previousRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions)),
          previousRecursiveRuleNames = previousRecursiveDefinitions.map(function (previousRecursiveDefinition) {
        return recursiveRuleNameFromRecursiveDefinition(previousRecursiveDefinition);
      }),
          recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames();

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var previousRecursiveRuleNamesIncludesRecursiveRuleName = previousRecursiveRuleNames.includes(recursiveRuleName);

        if (!previousRecursiveRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules),
              _recursiveDefinitions = [].concat(_toConsumableArray(previousRecursiveDefinitions), [recursiveDefinition]);

          if (_rule !== null) {
            replaceDefinitions(_rule, _recursiveDefinitions, replacementDefinitions, rules);
          }
        }
      });
    }

    return replacementDefinition;
  });
}

function recursiveRuleNameFromRecursiveDefinition(recursiveDefinition) {
  var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
      recursiveRuleName = recursiveDefinitionRuleName; ///

  return recursiveRuleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,