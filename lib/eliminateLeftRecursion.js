'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    RepeatedDefinition = require('./definition/repeated'),
    RewrittenDefinition = require('./definition/rewritten'),
    RecursiveDefinition = require('./definition/recursive'),
    recursiveDefinitionUtilities = require('./utilities/recursiveDefinition');

var first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    findImplicitlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findImplicitlyLeftRecursiveDefinition,
    findRule = ruleUtilities.findRule,
    reducedRuleFromRule = ruleUtilities.reducedRuleFromRule,
    repeatedRuleFromLeftRecursiveRuleName = ruleUtilities.repeatedRuleFromLeftRecursiveRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  recursiveDefinitions = [],
      rewritableLeftRecursiveDefinitions = [];

  removeRewritableLeftRecursiveDefinitions(rule, recursiveDefinitions, rewritableLeftRecursiveDefinitions, rules);

  rewriteRewritableLeftRecursiveDefinitions(rewritableLeftRecursiveDefinitions, rules);
}

module.exports = eliminateLeftRecursion;

function removeRewritableLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, rewritableLeftRecursiveDefinitions) {
  var remove = false;

  var directlyLeftRecursive = leftRecursiveDefinition.isDirectlyLeftRecursive();

  var indirectlyLeftRecursive = false;

  if (!directlyLeftRecursive) {
    var implicitlyLeftRecursiveDefinition = findImplicitlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions);

    indirectlyLeftRecursive = implicitlyLeftRecursiveDefinition !== null;

    if (indirectlyLeftRecursive) {
      leftRecursiveDefinition.setImplicitlyLeftRecursiveDefinition(implicitlyLeftRecursiveDefinition);
    }
  }

  if (directlyLeftRecursive || indirectlyLeftRecursive) {
    var nonRewritable = leftRecursiveDefinition.isNonRewritable();

    if (nonRewritable) {
      var ruleName = leftRecursiveDefinition.getRuleName(),
          leftRecursiveDefinitionString = leftRecursiveDefinition.asString();

      throw new Error('The \'' + leftRecursiveDefinitionString + '\' directly left recursive definition of the \'' + ruleName + '\' rule cannot be rewritten.');
    }

    var rewritableLeftRecursiveDefinition = leftRecursiveDefinition; ///

    rewritableLeftRecursiveDefinitions.push(rewritableLeftRecursiveDefinition);

    remove = true;
  }

  return remove;
}

function removeRewritableLeftRecursiveDefinitions(rule, recursiveDefinitions, rewritableLeftRecursiveDefinitions, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var remove = false;

    var recursiveDefinition = RecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

    if (recursiveDefinition !== null) {
      var leftRecursive = recursiveDefinition.isLeftRecursive();

      if (leftRecursive) {
        var leftRecursiveDefinition = recursiveDefinition; ///

        remove = removeRewritableLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions, rewritableLeftRecursiveDefinitions);
      }

      var recursiveRuleNames = recursiveDefinition.getRecursiveRuleNames(),
          allRecursiveDefinitions = [].concat(_toConsumableArray(recursiveDefinitions), [recursiveDefinition]),
          allRecursiveDefinitionRuleNames = allRecursiveDefinitions.map(function (recursiveDefinition) {
        return recursiveDefinition.getRuleName();
      });

      recursiveRuleNames.forEach(function (recursiveRuleName) {
        var recursiveDefinitionRuleNamesIncludesRecursiveRuleName = allRecursiveDefinitionRuleNames.includes(recursiveRuleName);

        if (!recursiveDefinitionRuleNamesIncludesRecursiveRuleName) {
          var _ruleName = recursiveRuleName,
              ///
          _rule = findRule(_ruleName, rules);

          if (_rule !== null) {
            var _recursiveDefinitions = allRecursiveDefinitions; ///

            removeRewritableLeftRecursiveDefinitions(_rule, _recursiveDefinitions, rewritableLeftRecursiveDefinitions, rules);
          }
        }
      });
    }

    return remove;
  });
}

function rewriteRewritableLeftRecursiveDefinitions(rewritableLeftRecursiveDefinitions, rules) {
  rewritableLeftRecursiveDefinitions.forEach(function (rewritableLeftRecursiveDefinition) {
    var leftRecursiveDefinition = rewritableLeftRecursiveDefinition,
        ///
    ruleName = leftRecursiveDefinition.getRuleName(),
        rule = findRule(ruleName, rules),
        reducedRule = reducedRuleFromRule(rule, rules),
        rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

    reducedRule === null ? rule.addDefinition(rewrittenDefinition) : rule.addDefinition(rewrittenDefinition, -1);

    var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
        repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
        repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

    repeatedRule.addDefinition(repeatedDefinition);

    var implicitlyLeftRecursiveDefinition = leftRecursiveDefinition.getImplicitlyLeftRecursiveDefinition();

    if (implicitlyLeftRecursiveDefinition !== null) {
      var definition = implicitlyLeftRecursiveDefinition.getDefinition(),
          leftRecursiveRule = findRule(leftRecursiveRuleName, rules),
          reducedLeftRecursiveRule = reducedRuleFromRule(leftRecursiveRule, rules);

      leftRecursiveRule.addDefinition(definition, -1);

      reducedLeftRecursiveRule.removeDefinition(definition);

      var reducedLeftRecursiveRuleDefinitions = reducedLeftRecursiveRule.getDefinitions(),
          reducedLeftRecursiveRuleDefinitionsLength = reducedLeftRecursiveRuleDefinitions.length;

      if (reducedLeftRecursiveRuleDefinitionsLength === 0) {
        var reducedLeftRecursiveRuleName = reducedLeftRecursiveRule.getName();

        throw new Error('The reduced \'' + reducedLeftRecursiveRuleName + '\' rule has no definitions.');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,