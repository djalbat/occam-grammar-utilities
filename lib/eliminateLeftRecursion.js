'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    objectUtilities = require('./utilities/object'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonRecursiveDefinition = require('./definition/nonRecursive'),
    LeftRecursiveDefinition = require('./definition/leftRecursive'),
    RightRecursiveDefinition = require('./definition/rightRecursive'),
    IndirectlyLeftRecursiveDefinition = require('./definition/leftRecursive/indirectly'),
    ImmediatelyLeftRecursiveDefinition = require('./definition/leftRecursive/immediately');

var addToArrayMap = objectUtilities.addToArrayMap,
    findRuleByName = ruleUtilities.findRuleByName,
    first = arrayUtilities.first,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var firstRule = first(rules),
      rule = firstRule,
      ///
  leftRecursiveDefinitions = [],
      immediatelyLeftRecursiveDefinitionsMap = {};

  removeImmediatelyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);

  createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules);

  // createNonRecursiveRules(configuration);
  //
  // createRightRecursiveRules(configuration);
  //
  // rewriteIndirectlyLeftRecursiveRules(configuration);
}

module.exports = eliminateLeftRecursion;

function removeImmediatelyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = LeftRecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName),
          leftRecursiveDefinitionImmediatelyLeftRecursive = leftRecursiveDefinition.isImmediatelyLeftRecursive(leftRecursiveDefinitions);

      if (leftRecursiveDefinitionImmediatelyLeftRecursive) {
        var indirectlyLeftRecursiveDefinition = IndirectlyLeftRecursiveDefinition.fromLeftRecursiveDefinitionAndLeftRecursiveDefinitions(leftRecursiveDefinition, leftRecursiveDefinitions),
            immediatelyLeftRecursiveDefinition = ImmediatelyLeftRecursiveDefinition.fromLeftRecursiveDefinitionAndIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, indirectlyLeftRecursiveDefinition);

        addToArrayMap(immediatelyLeftRecursiveDefinitionsMap, ruleName, immediatelyLeftRecursiveDefinition);

        return true;
      }

      leftRecursiveDefinitions = [].concat(_toConsumableArray(leftRecursiveDefinitions), [leftRecursiveDefinition]);

      var _rule = leftRecursiveDefinition.findRule(rules);

      if (_rule !== null) {
        removeImmediatelyLeftRecursiveDefinitions(_rule, leftRecursiveDefinitions, immediatelyLeftRecursiveDefinitionsMap, rules);
      }
    }
  });
}

function rewriteIndirectlyLeftRecursiveRules(configuration) {
  configuration.forEachIndirectlyLeftRecursiveRule(function (indirectlyRecursiveRule) {
    var rule = indirectlyRecursiveRule,
        ///
    ruleName = rule.getName(),
        nonRecursiveRule = NonRecursiveRule.fromRuleName(ruleName);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    var definitions = rule.getDefinitions();

    forEachWithRemove(definitions, function (definition) {
      var definitionIndirectlyRecursiveDefinition = configuration.isDefinitionIndirectlyLeftRecursiveDefinition(definition, ruleName),
          definitionNonRecursiveDefinition = !definitionIndirectlyRecursiveDefinition;

      if (definitionNonRecursiveDefinition) {
        var _nonRecursiveDefinition = definition; ///

        nonRecursiveRule.addNonRecursiveDefinition(_nonRecursiveDefinition);

        return true;
      }
    });

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createRightRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var immediatelyLeftRecursiveDefinitions = immediatelyLeftRecursiveDefinitionsMap[ruleName],
        rightRecursiveDefinitions = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
      var rightRecursiveDefinition = RightRecursiveDefinition.fromImmediatelyLeftRecursiveDefinition(immediatelyLeftRecursiveDefinition);

      return rightRecursiveDefinition;
    }),
        rightRecursiveRule = RightRecursiveRule.fromRuleNameAndRightRecursiveDefinitions(ruleName, rightRecursiveDefinitions);

    rules.push(rightRecursiveRule);
  });
}

function rewriteLeftRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName),
        nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(recursiveDefinition);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(immediatelyLeftRecursiveDefinitionsMap, rules) {
  var ruleNames = Object.keys(immediatelyLeftRecursiveDefinitionsMap);

  ruleNames.forEach(function (ruleName) {
    var name = ruleName,
        ///
    rule = findRuleByName(name, rules),
        nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    rules.push(nonRecursiveRule);

    rule.clearDefinitions();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,