'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Configuration = require('./configuration'),
    partUtilities = require('./utilities/part'),
    ruleUtilities = require('./utilities/rule'),
    arrayUtilities = require('./utilities/array'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    first = arrayUtilities.first,
    last = arrayUtilities.last,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    ruleFromDefinition = definitionUtilities.ruleFromDefinition,
    isDDefinitionImmediateLeftRecursiveDefinition = definitionUtilities.isDDefinitionImmediateLeftRecursiveDefinition,
    resetRightRecursiveRuleNameCount = ruleNameUtilities.resetRightRecursiveRuleNameCount,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName;


function eliminateLeftRecursion(rules) {
  var configuration = Configuration.fromRules(rules);

  removeImmediateLeftRecursionFromRules(configuration);

  createNonRecursiveRules(configuration);

  createRightRecursiveRules(configuration);
}

module.exports = eliminateLeftRecursion;

function removeImmediateLeftRecursionFromRules(configuration) {
  configuration.forEachRule(function (rule) {
    var ruleNames = [];

    removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration);
  });
}

function removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration) {
  var ruleName = rule.getName(),
      ruleNamesIncludesRuleName = ruleNames.includes(ruleName);

  if (ruleNamesIncludesRuleName) {
    return;
  }

  ruleNames = [].concat(_toConsumableArray(ruleNames), [ruleName]);

  var definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var firstRuleName = first(ruleNames),
        ruleName = firstRuleName,
        ///
    definitionImmediatelyLeftRecursiveDefinition = isDDefinitionImmediateLeftRecursiveDefinition(definition, ruleName);

    if (definitionImmediatelyLeftRecursiveDefinition) {
      var lastRuleName = last(ruleNames),
          _ruleName = lastRuleName,
          ///
      immediatelyLeftRecursiveDefinition = definition; ///

      configuration.mapImmediatelyLeftRecursiveDefinition(_ruleName, immediatelyLeftRecursiveDefinition);

      return true;
    }

    var rules = configuration.getRules(),
        rule = ruleFromDefinition(definition, rules);

    if (rule !== null) {
      removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration);
    }
  });
}

function createRightRecursiveRules(configuration) {
  configuration.forEachMappedRuleName(function (mappedRuleName) {
    var ruleName = mappedRuleName,
        ///
    rule = configuration.findRule(ruleName),
        immediatelyLeftRecursiveDefinitions = configuration.getImmediatelyLeftRecursiveDefinitions(ruleName);

    immediatelyLeftRecursiveDefinitions.forEach(function (immediatelyLeftRecursiveDefinition) {
      var definition = immediatelyLeftRecursiveDefinition,
          ///
      rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(ruleName),
          rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName),
          recursiveRuleName = rightRecursiveRule.getRecursiveRuleName(),
          recursiveDefinition = RecursiveDefinition.fromRecursiveRuleNameAndRightRecursiveRuleName(recursiveRuleName, rightRecursiveRuleName);

      rule.addDefinition(recursiveDefinition);

      configuration.addRightRecursiveRule(rightRecursiveRule);
    });

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(configuration) {
  configuration.forEachMappedRule(function (mappedRule) {
    var rule = mappedRule,
        ///
    nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    rule.clearDefinitions();
  });
}

function eliminateLeftRecursionFromRules(rules) {
  rules.forEach(function (rule) {
    var ruleNames = [];

    resetRightRecursiveRuleNameCount();

    eliminateLeftRecursionFromRule(rule, ruleNames, rules);
  });
}

function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleRecursive = false;

  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rules);

    if (recursiveDefinition !== null) {
      ruleRecursive = true;

      recursiveDefinitions.push(recursiveDefinition);
    } else {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  if (ruleRecursive) {
    var _definitions = recursiveDefinitions,
        ///
    nonRecursiveDefinitionsLength = nonRecursiveDefinitions.length;

    if (nonRecursiveDefinitionsLength > 0) {
      var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
          nonRecursiveRuleName = nonRecursiveRule.getName(),
          nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleName(nonRecursiveRuleName),
          definition = nonRecursiveDefinition; ///

      _definitions.push(definition);

      rules.push(nonRecursiveRule);
    }

    rule.setDefinitions(_definitions);
  }

  return ruleRecursive;
}

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateIndirectLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      name = ruleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(definition, ruleNamePart, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleName = ruleNamePart.getRuleName(),
      firstRuleName = first(ruleNames),
      ruleNameTopmostRuleName = ruleName === firstRuleName;

  if (ruleNameTopmostRuleName) {
    var lastRuleName = last(ruleNames),
        _ruleName2 = lastRuleName,
        ///
    rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(_ruleName2),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName);

    recursiveDefinition = RecursiveDefinition.fromRuleNamePartAndRightRecursiveRuleName(ruleNamePart, rightRecursiveRuleName);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,