'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Configuration = require('./configuration'),
    arrayUtilities = require('./utilities/array'),
    NonRecursiveRule = require('./rule/nonRecursive'),
    ruleNameUtilities = require('./utilities/ruleName'),
    RightRecursiveRule = require('./rule/rightRecursive'),
    RecursiveDefinition = require('./definition/recursive'),
    definitionUtilities = require('./utilities/definition'),
    NonRecursiveDefinition = require('./definition/nonRecursive');

var first = arrayUtilities.first,
    last = arrayUtilities.last,
    forEachWithRemove = arrayUtilities.forEachWithRemove,
    rightRecursiveRuleNameFromRuleName = ruleNameUtilities.rightRecursiveRuleNameFromRuleName,
    ruleFromDefinition = definitionUtilities.ruleFromDefinition,
    isDDefinitionImmediateLeftRecursiveDefinition = definitionUtilities.isDDefinitionImmediateLeftRecursiveDefinition;


function eliminateLeftRecursion(rules) {
  var configuration = Configuration.fromRules(rules);

  removeImmediateLeftRecursionFromRules(configuration);

  createNonRecursiveRules(configuration);

  createRightRecursiveRules(configuration);

  rewriteIndirectlyLeftRecursiveRules(configuration);
}

module.exports = eliminateLeftRecursion;

function removeImmediateLeftRecursionFromRules(configuration) {
  configuration.forEachRule(function (rule) {
    var ruleNames = [];

    removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration);
  });
}

function removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration) {
  var definitionIndirectlyLeftRecursiveDefinition = false;

  var ruleName = rule.getName(),
      ruleNamesIncludesRuleName = ruleNames.includes(ruleName);

  if (ruleNamesIncludesRuleName) {
    return;
  }

  ruleNames = [].concat(_toConsumableArray(ruleNames), [ruleName]);

  var definitions = rule.getDefinitions();

  forEachWithRemove(definitions, function (definition) {
    var firstRuleName = first(ruleNames),
        ruleName = firstRuleName,
        ///
    definitionImmediatelyLeftRecursiveDefinition = isDDefinitionImmediateLeftRecursiveDefinition(definition, ruleName);

    if (definitionImmediatelyLeftRecursiveDefinition) {
      var lastRuleName = last(ruleNames),
          _ruleName = lastRuleName,
          ///
      immediatelyLeftRecursiveDefinition = definition; ///

      configuration.mapImmediatelyLeftRecursiveDefinition(_ruleName, immediatelyLeftRecursiveDefinition);

      definitionIndirectlyLeftRecursiveDefinition = true;

      return true;
    }

    var rules = configuration.getRules(),
        rule = ruleFromDefinition(definition, rules);

    if (rule !== null) {
      var _definitionIndirectlyLeftRecursiveDefinition = removeImmediateLeftRecursionFromRule(rule, ruleNames, configuration);

      if (_definitionIndirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinition = definition; ///

        configuration.mapIndirectlyLeftRecursiveDefinition(ruleName, indirectlyLeftRecursiveDefinition);
      }
    }
  });

  return definitionIndirectlyLeftRecursiveDefinition;
}

function rewriteIndirectlyLeftRecursiveRules(configuration) {
  configuration.forEachIndirectlyLeftRecursiveRule(function (indirectlyRecursiveRule) {
    var rule = indirectlyRecursiveRule,
        ///
    ruleName = rule.getName(),
        nonRecursiveRule = NonRecursiveRule.fromRuleName(ruleName);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    var definitions = rule.getDefinitions();

    forEachWithRemove(definitions, function (definition) {
      var definitionIndirectlyRecursiveDefinition = configuration.isDefinitionIndirectlyLeftRecursiveDefinition(definition, ruleName),
          definitionNonRecursiveDefinition = !definitionIndirectlyRecursiveDefinition;

      if (definitionNonRecursiveDefinition) {
        var _nonRecursiveDefinition = definition; ///

        nonRecursiveRule.addNonRecursiveDefinition(_nonRecursiveDefinition);

        return true;
      }
    });

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createRightRecursiveRules(configuration) {
  configuration.forEachImmediatelyLeftRecursiveRuleName(function (immediatelyLeftRecursiveRuleName) {
    var ruleName = immediatelyLeftRecursiveRuleName,
        ///
    rule = configuration.findRule(ruleName),
        immediatelyLeftRecursiveDefinitions = configuration.getImmediatelyLeftRecursiveDefinitions(ruleName);

    immediatelyLeftRecursiveDefinitions.forEach(function (immediatelyLeftRecursiveDefinition) {
      var definition = immediatelyLeftRecursiveDefinition,
          ///
      rightRecursiveRuleName = rightRecursiveRuleNameFromRuleName(ruleName),
          rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRightRecursiveRuleName(definition, rightRecursiveRuleName),
          recursiveRuleName = rightRecursiveRule.getRecursiveRuleName(),
          recursiveDefinition = RecursiveDefinition.fromRecursiveRuleNameAndRightRecursiveRuleName(recursiveRuleName, rightRecursiveRuleName);

      rule.addDefinition(recursiveDefinition);

      configuration.addRightRecursiveRule(rightRecursiveRule);
    });

    var nonRecursiveDefinition = NonRecursiveDefinition.fromRuleName(ruleName);

    rule.addDefinition(nonRecursiveDefinition);
  });
}

function createNonRecursiveRules(configuration) {
  configuration.forEachImmediatelyLeftRecursiveRule(function (immediatelyLeftRecursiveRule) {
    var rule = immediatelyLeftRecursiveRule,
        ///
    nonRecursiveRule = NonRecursiveRule.fromRule(rule);

    configuration.addNonRecursiveRule(nonRecursiveRule);

    rule.clearDefinitions();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,