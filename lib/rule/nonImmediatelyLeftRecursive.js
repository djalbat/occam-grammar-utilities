'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parsers = require('occam-parsers');

var RightRecursiveRule = require('../rule/rightRecursive');

var Rule = parsers.Rule,
    Definition = parsers.Definition;

var NonImmediatelyLeftRecursiveRule = function (_Rule) {
  _inherits(NonImmediatelyLeftRecursiveRule, _Rule);

  function NonImmediatelyLeftRecursiveRule() {
    _classCallCheck(this, NonImmediatelyLeftRecursiveRule);

    return _possibleConstructorReturn(this, (NonImmediatelyLeftRecursiveRule.__proto__ || Object.getPrototypeOf(NonImmediatelyLeftRecursiveRule)).apply(this, arguments));
  }

  _createClass(NonImmediatelyLeftRecursiveRule, null, [{
    key: 'fromImmediatelyLeftRecursiveRule',
    value: function fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
      var ruleName = immediatelyLeftRecursiveRule.getName(),
          ruleNonTerminalNode = immediatelyLeftRecursiveRule.getNonTerminalNode(),
          name = ruleName,
          ///
      definitions = definitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          NonTerminalNode = ruleNonTerminalNode,
          ///
      nonImmediatelyLeftRecursiveRule = new NonImmediatelyLeftRecursiveRule(name, definitions, NonTerminalNode);

      return nonImmediatelyLeftRecursiveRule;
    }
  }]);

  return NonImmediatelyLeftRecursiveRule;
}(Rule);

module.exports = NonImmediatelyLeftRecursiveRule;

function definitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
  var definitions = void 0;

  var rightRecursiveRuleNamePart = RightRecursiveRule.ruleNamePartFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
      nonImmediatelyLeftRecursiveDefinitions = immediatelyLeftRecursiveRule.getNonImmediatelyLeftRecursiveDefinitions(),
      nonImmediatelyLeftRecursiveDefinitionsLength = nonImmediatelyLeftRecursiveDefinitions.length;

  if (nonImmediatelyLeftRecursiveDefinitionsLength === 0) {
    var parts = [rightRecursiveRuleNamePart],
        definition = new Definition(parts);

    definitions = [definition];
  } else {
    definitions = nonImmediatelyLeftRecursiveDefinitions.map(function (nonImmediatelyLeftRecursiveDefinition) {
      var nonImmediatelyLeftRecursiveDefinitionParts = nonImmediatelyLeftRecursiveDefinition.getParts(),
          parts = [].concat(nonImmediatelyLeftRecursiveDefinitionParts).concat(rightRecursiveRuleNamePart),
          definition = new Definition(parts);

      return definition;
    });
  }

  return definitions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ydWxlL25vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZS5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIlJpZ2h0UmVjdXJzaXZlUnVsZSIsIlJ1bGUiLCJEZWZpbml0aW9uIiwiTm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTm9uVGVybWluYWxOb2RlIiwiZ2V0Tm9uVGVybWluYWxOb2RlIiwibmFtZSIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbnNGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsIk5vblRlcm1pbmFsTm9kZSIsIm5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmlnaHRSZWN1cnNpdmVSdWxlTmFtZVBhcnQiLCJydWxlTmFtZVBhcnRGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsIm5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZ2V0Tm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCIsImxlbmd0aCIsInBhcnRzIiwiZGVmaW5pdGlvbiIsIm1hcCIsIm5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUGFydHMiLCJnZXRQYXJ0cyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRUEsSUFBTUMscUJBQXFCRCxRQUFRLHdCQUFSLENBQTNCOztJQUVRRSxJLEdBQXFCSCxPLENBQXJCRyxJO0lBQU1DLFUsR0FBZUosTyxDQUFmSSxVOztJQUVSQywrQjs7Ozs7Ozs7Ozs7cURBQ29DQyw0QixFQUE4QjtBQUNwRSxVQUFNQyxXQUFXRCw2QkFBNkJFLE9BQTdCLEVBQWpCO0FBQUEsVUFDTUMsc0JBQXNCSCw2QkFBNkJJLGtCQUE3QixFQUQ1QjtBQUFBLFVBRU1DLE9BQU9KLFFBRmI7QUFBQSxVQUV3QjtBQUNsQkssb0JBQWNDLDRDQUE0Q1AsNEJBQTVDLENBSHBCO0FBQUEsVUFJTVEsa0JBQWtCTCxtQkFKeEI7QUFBQSxVQUk4QztBQUN4Q00sd0NBQWtDLElBQUlWLCtCQUFKLENBQW9DTSxJQUFwQyxFQUEwQ0MsV0FBMUMsRUFBdURFLGVBQXZELENBTHhDOztBQU9BLGFBQU9DLCtCQUFQO0FBQ0Q7Ozs7RUFWMkNaLEk7O0FBYTlDYSxPQUFPQyxPQUFQLEdBQWlCWiwrQkFBakI7O0FBRUEsU0FBU1EsMkNBQVQsQ0FBcURQLDRCQUFyRCxFQUFtRjtBQUNqRixNQUFJTSxvQkFBSjs7QUFFQSxNQUFNTSw2QkFBNkJoQixtQkFBbUJpQiw0Q0FBbkIsQ0FBZ0ViLDRCQUFoRSxDQUFuQztBQUFBLE1BQ01jLHlDQUF5Q2QsNkJBQTZCZSx5Q0FBN0IsRUFEL0M7QUFBQSxNQUVNQywrQ0FBK0NGLHVDQUF1Q0csTUFGNUY7O0FBSUEsTUFBSUQsaURBQWlELENBQXJELEVBQXdEO0FBQ3RELFFBQU1FLFFBQVEsQ0FBQ04sMEJBQUQsQ0FBZDtBQUFBLFFBQ01PLGFBQWEsSUFBSXJCLFVBQUosQ0FBZW9CLEtBQWYsQ0FEbkI7O0FBR0FaLGtCQUFjLENBQUNhLFVBQUQsQ0FBZDtBQUNELEdBTEQsTUFLTztBQUNMYixrQkFBY1EsdUNBQXVDTSxHQUF2QyxDQUEyQyxVQUFTQyxxQ0FBVCxFQUFnRDtBQUN2RyxVQUFNQyw2Q0FBNkNELHNDQUFzQ0UsUUFBdEMsRUFBbkQ7QUFBQSxVQUNNTCxRQUFRLEdBQUdNLE1BQUgsQ0FBVUYsMENBQVYsRUFBc0RFLE1BQXRELENBQTZEWiwwQkFBN0QsQ0FEZDtBQUFBLFVBRU1PLGFBQWEsSUFBSXJCLFVBQUosQ0FBZW9CLEtBQWYsQ0FGbkI7O0FBSUEsYUFBT0MsVUFBUDtBQUNELEtBTmEsQ0FBZDtBQU9EOztBQUVELFNBQU9iLFdBQVA7QUFDRCIsImZpbGUiOiJub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IFJpZ2h0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmlnaHRSZWN1cnNpdmUnKTtcblxuY29uc3QgeyBSdWxlLCBEZWZpbml0aW9uIH0gPSBwYXJzZXJzO1xuXG5jbGFzcyBOb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIGV4dGVuZHMgUnVsZSB7XG4gIHN0YXRpYyBmcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgICBydWxlTm9uVGVybWluYWxOb2RlID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgICBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgICBkZWZpbml0aW9ucyA9IGRlZmluaXRpb25zRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgTm9uVGVybWluYWxOb2RlID0gcnVsZU5vblRlcm1pbmFsTm9kZSwgIC8vL1xuICAgICAgICAgIG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSBuZXcgTm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShuYW1lLCBkZWZpbml0aW9ucywgTm9uVGVybWluYWxOb2RlKTtcblxuICAgIHJldHVybiBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZTtcblxuZnVuY3Rpb24gZGVmaW5pdGlvbnNGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGxldCBkZWZpbml0aW9ucztcblxuICBjb25zdCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lUGFydCA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5ydWxlTmFtZVBhcnRGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSxcbiAgICAgICAgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlLmdldE5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKCksXG4gICAgICAgIG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoID0gbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubGVuZ3RoO1xuXG4gIGlmIChub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9PT0gMCkge1xuICAgIGNvbnN0IHBhcnRzID0gW3JpZ2h0UmVjdXJzaXZlUnVsZU5hbWVQYXJ0XSxcbiAgICAgICAgICBkZWZpbml0aW9uID0gbmV3IERlZmluaXRpb24ocGFydHMpO1xuXG4gICAgZGVmaW5pdGlvbnMgPSBbZGVmaW5pdGlvbl07XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5pdGlvbnMgPSBub25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24obm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgY29uc3Qgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzID0gbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICAgICAgcGFydHMgPSBbXS5jb25jYXQobm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzKS5jb25jYXQocmlnaHRSZWN1cnNpdmVSdWxlTmFtZVBhcnQpLFxuICAgICAgICAgICAgZGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKHBhcnRzKTtcblxuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG4iXX0=