'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parsers = require('occam-parsers');

var ImplicitlyLeftRecursiveDefinition = require('../definition/implicitlyLeftRecursive');

var Rule = parsers.Rule,
    Definition = parsers.Definition;

var IntermediateRule = function (_Rule) {
  _inherits(IntermediateRule, _Rule);

  function IntermediateRule() {
    _classCallCheck(this, IntermediateRule);

    return _possibleConstructorReturn(this, (IntermediateRule.__proto__ || Object.getPrototypeOf(IntermediateRule)).apply(this, arguments));
  }

  _createClass(IntermediateRule, null, [{
    key: 'fromImplicitlyLeftRecursiveRuleAndPreviousRules',
    value: function fromImplicitlyLeftRecursiveRuleAndPreviousRules(implicitlyLeftRecursiveRule, previousRules) {
      var definitions = implicitlyLeftRecursiveRule.getDefinitions();

      previousRules.forEach(function (previousRule) {
        definitions = definitionsFromDefinitionsAndPreviousRule(definitions, previousRule); ///
      });

      var name = implicitlyLeftRecursiveRule.getName(),
          NonTerminalNode = implicitlyLeftRecursiveRule.getNonTerminalNode(),
          intermediateRule = new IntermediateRule(name, definitions, NonTerminalNode);

      return intermediateRule;
    }
  }]);

  return IntermediateRule;
}(Rule);

module.exports = IntermediateRule;

function definitionsFromDefinitionsAndPreviousRule(definitions, previousRule) {
  var newDefinitions = [];

  definitions.forEach(function (definition) {
    var implicitlyLeftRecursiveDefinition = ImplicitlyLeftRecursiveDefinition.fromDefinitionAndPreviousRule(definition, previousRule);

    if (implicitlyLeftRecursiveDefinition !== null) {
      var _definitions = definitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousRule(implicitlyLeftRecursiveDefinition, previousRule);

      newDefinitions = newDefinitions.concat(_definitions);
    } else {
      var newDefinition = definition; ///

      newDefinitions.push(newDefinition);
    }
  });

  definitions = newDefinitions; ///

  return definitions;
}

function definitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousRule(implicitlyLeftRecursiveDefinition, previousRule) {
  var previousRuleDefinitions = previousRule.getDefinitions(),
      implicitlyLeftRecursiveDefinitionAllButFirstParts = implicitlyLeftRecursiveDefinition.getAllButFirstParts(),
      definitions = previousRuleDefinitions.map(function (previousRuleDefinition) {
    var previousRuleDefinitionParts = previousRuleDefinition.getParts(),
        parts = [].concat(previousRuleDefinitionParts).concat(implicitlyLeftRecursiveDefinitionAllButFirstParts),
        definition = new Definition(parts);

    return definition;
  });

  return definitions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ydWxlL2ludGVybWVkaWF0ZS5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIlJ1bGUiLCJEZWZpbml0aW9uIiwiSW50ZXJtZWRpYXRlUnVsZSIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsInByZXZpb3VzUnVsZXMiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZm9yRWFjaCIsInByZXZpb3VzUnVsZSIsImRlZmluaXRpb25zRnJvbURlZmluaXRpb25zQW5kUHJldmlvdXNSdWxlIiwibmFtZSIsImdldE5hbWUiLCJOb25UZXJtaW5hbE5vZGUiLCJnZXROb25UZXJtaW5hbE5vZGUiLCJpbnRlcm1lZGlhdGVSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5ld0RlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21EZWZpbml0aW9uQW5kUHJldmlvdXNSdWxlIiwiZGVmaW5pdGlvbnNGcm9tSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kUHJldmlvdXNSdWxlIiwiY29uY2F0IiwibmV3RGVmaW5pdGlvbiIsInB1c2giLCJwcmV2aW91c1J1bGVEZWZpbml0aW9ucyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMiLCJnZXRBbGxCdXRGaXJzdFBhcnRzIiwibWFwIiwicHJldmlvdXNSdWxlRGVmaW5pdGlvbiIsInByZXZpb3VzUnVsZURlZmluaXRpb25QYXJ0cyIsImdldFBhcnRzIiwicGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsVUFBVUMsUUFBUSxlQUFSLENBQWhCOztBQUVBLElBQU1DLG9DQUFvQ0QsUUFBUSx1Q0FBUixDQUExQzs7SUFFUUUsSSxHQUFxQkgsTyxDQUFyQkcsSTtJQUFNQyxVLEdBQWVKLE8sQ0FBZkksVTs7SUFFUkMsZ0I7Ozs7Ozs7Ozs7O29FQUNtREMsMkIsRUFBNkJDLGEsRUFBZTtBQUNqRyxVQUFJQyxjQUFjRiw0QkFBNEJHLGNBQTVCLEVBQWxCOztBQUVBRixvQkFBY0csT0FBZCxDQUFzQixVQUFTQyxZQUFULEVBQXVCO0FBQzNDSCxzQkFBY0ksMENBQTBDSixXQUExQyxFQUF1REcsWUFBdkQsQ0FBZCxDQUQyQyxDQUN5QztBQUNyRixPQUZEOztBQUlBLFVBQU1FLE9BQU9QLDRCQUE0QlEsT0FBNUIsRUFBYjtBQUFBLFVBQ01DLGtCQUFrQlQsNEJBQTRCVSxrQkFBNUIsRUFEeEI7QUFBQSxVQUVNQyxtQkFBbUIsSUFBSVosZ0JBQUosQ0FBcUJRLElBQXJCLEVBQTJCTCxXQUEzQixFQUF3Q08sZUFBeEMsQ0FGekI7O0FBSUEsYUFBT0UsZ0JBQVA7QUFDRDs7OztFQWI0QmQsSTs7QUFnQi9CZSxPQUFPQyxPQUFQLEdBQWlCZCxnQkFBakI7O0FBRUEsU0FBU08seUNBQVQsQ0FBbURKLFdBQW5ELEVBQWdFRyxZQUFoRSxFQUE4RTtBQUM1RSxNQUFJUyxpQkFBaUIsRUFBckI7O0FBRUFaLGNBQVlFLE9BQVosQ0FBb0IsVUFBU1csVUFBVCxFQUFxQjtBQUN2QyxRQUFNQyxvQ0FBb0NwQixrQ0FBa0NxQiw2QkFBbEMsQ0FBZ0VGLFVBQWhFLEVBQTRFVixZQUE1RSxDQUExQzs7QUFFQSxRQUFJVyxzQ0FBc0MsSUFBMUMsRUFBZ0Q7QUFDOUMsVUFBTWQsZUFBZWdCLGdFQUFnRUYsaUNBQWhFLEVBQW1HWCxZQUFuRyxDQUFyQjs7QUFFQVMsdUJBQWlCQSxlQUFlSyxNQUFmLENBQXNCakIsWUFBdEIsQ0FBakI7QUFDRCxLQUpELE1BSU87QUFDTCxVQUFNa0IsZ0JBQWdCTCxVQUF0QixDQURLLENBQzZCOztBQUVsQ0QscUJBQWVPLElBQWYsQ0FBb0JELGFBQXBCO0FBQ0Q7QUFDRixHQVpEOztBQWNBbEIsZ0JBQWNZLGNBQWQsQ0FqQjRFLENBaUI5Qzs7QUFFOUIsU0FBT1osV0FBUDtBQUNEOztBQUVELFNBQVNnQiwrREFBVCxDQUF5RUYsaUNBQXpFLEVBQTRHWCxZQUE1RyxFQUEwSDtBQUN4SCxNQUFNaUIsMEJBQTBCakIsYUFBYUYsY0FBYixFQUFoQztBQUFBLE1BQ01vQixvREFBb0RQLGtDQUFrQ1EsbUJBQWxDLEVBRDFEO0FBQUEsTUFFTXRCLGNBQWNvQix3QkFBd0JHLEdBQXhCLENBQTRCLFVBQVNDLHNCQUFULEVBQWlDO0FBQ3pFLFFBQU1DLDhCQUE4QkQsdUJBQXVCRSxRQUF2QixFQUFwQztBQUFBLFFBQ01DLFFBQVEsR0FBR1YsTUFBSCxDQUFVUSwyQkFBVixFQUF1Q1IsTUFBdkMsQ0FBOENJLGlEQUE5QyxDQURkO0FBQUEsUUFFTVIsYUFBYSxJQUFJakIsVUFBSixDQUFlK0IsS0FBZixDQUZuQjs7QUFJQSxXQUFPZCxVQUFQO0FBQ0QsR0FOYSxDQUZwQjs7QUFVQSxTQUFPYixXQUFQO0FBQ0QiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpO1xuXG5jb25zdCBJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL2ltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlJyk7XG5cbmNvbnN0IHsgUnVsZSwgRGVmaW5pdGlvbiB9ID0gcGFyc2VycztcblxuY2xhc3MgSW50ZXJtZWRpYXRlUnVsZSBleHRlbmRzIFJ1bGUge1xuICBzdGF0aWMgZnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZUFuZFByZXZpb3VzUnVsZXMoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLCBwcmV2aW91c1J1bGVzKSB7XG4gICAgbGV0IGRlZmluaXRpb25zID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLmdldERlZmluaXRpb25zKCk7XG5cbiAgICBwcmV2aW91c1J1bGVzLmZvckVhY2goZnVuY3Rpb24ocHJldmlvdXNSdWxlKSB7XG4gICAgICBkZWZpbml0aW9ucyA9IGRlZmluaXRpb25zRnJvbURlZmluaXRpb25zQW5kUHJldmlvdXNSdWxlKGRlZmluaXRpb25zLCBwcmV2aW91c1J1bGUpOyAvLy9cbiAgICB9KTtcblxuICAgIGNvbnN0IG5hbWUgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgIE5vblRlcm1pbmFsTm9kZSA9IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgICBpbnRlcm1lZGlhdGVSdWxlID0gbmV3IEludGVybWVkaWF0ZVJ1bGUobmFtZSwgZGVmaW5pdGlvbnMsIE5vblRlcm1pbmFsTm9kZSk7XG5cbiAgICByZXR1cm4gaW50ZXJtZWRpYXRlUnVsZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVybWVkaWF0ZVJ1bGU7XG5cbmZ1bmN0aW9uIGRlZmluaXRpb25zRnJvbURlZmluaXRpb25zQW5kUHJldmlvdXNSdWxlKGRlZmluaXRpb25zLCBwcmV2aW91c1J1bGUpIHtcbiAgbGV0IG5ld0RlZmluaXRpb25zID0gW107XG5cbiAgZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgY29uc3QgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EZWZpbml0aW9uQW5kUHJldmlvdXNSdWxlKGRlZmluaXRpb24sIHByZXZpb3VzUnVsZSk7XG5cbiAgICBpZiAoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBkZWZpbml0aW9ucyA9ICBkZWZpbml0aW9uc0Zyb21JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmRQcmV2aW91c1J1bGUoaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBwcmV2aW91c1J1bGUpO1xuXG4gICAgICBuZXdEZWZpbml0aW9ucyA9IG5ld0RlZmluaXRpb25zLmNvbmNhdChkZWZpbml0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0RlZmluaXRpb24gPSBkZWZpbml0aW9uOyAvLy9cblxuICAgICAgbmV3RGVmaW5pdGlvbnMucHVzaChuZXdEZWZpbml0aW9uKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluaXRpb25zID0gbmV3RGVmaW5pdGlvbnM7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9ucztcbn1cblxuZnVuY3Rpb24gZGVmaW5pdGlvbnNGcm9tSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kUHJldmlvdXNSdWxlKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcHJldmlvdXNSdWxlKSB7XG4gIGNvbnN0IHByZXZpb3VzUnVsZURlZmluaXRpb25zID0gcHJldmlvdXNSdWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0QWxsQnV0Rmlyc3RQYXJ0cygpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHByZXZpb3VzUnVsZURlZmluaXRpb25zLm1hcChmdW5jdGlvbihwcmV2aW91c1J1bGVEZWZpbml0aW9uKSB7XG4gICAgICAgICAgY29uc3QgcHJldmlvdXNSdWxlRGVmaW5pdGlvblBhcnRzID0gcHJldmlvdXNSdWxlRGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gW10uY29uY2F0KHByZXZpb3VzUnVsZURlZmluaXRpb25QYXJ0cykuY29uY2F0KGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMpLFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihwYXJ0cyk7XG4gIFxuICAgICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG4iXX0=