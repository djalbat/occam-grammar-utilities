'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parsers = require('occam-parsers');

var Rule = parsers.Rule,
    Definition = parsers.Definition,
    NonTerminalNode = parsers.NonTerminalNode,
    Parts = parsers.Parts,
    EpsilonPart = Parts.EpsilonPart,
    RuleNamePart = Parts.RuleNamePart;

var RightRecursiveRule = function (_Rule) {
  _inherits(RightRecursiveRule, _Rule);

  function RightRecursiveRule() {
    _classCallCheck(this, RightRecursiveRule);

    return _possibleConstructorReturn(this, (RightRecursiveRule.__proto__ || Object.getPrototypeOf(RightRecursiveRule)).apply(this, arguments));
  }

  _createClass(RightRecursiveRule, null, [{
    key: 'ruleNamePartFromImmediatelyLeftRecursiveRule',
    value: function ruleNamePartFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
      var name = nameFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          noWhitespace = false,
          ///
      ruleNamePart = new RuleNamePart(name, noWhitespace);

      return ruleNamePart;
    }
  }, {
    key: 'fromImmediatelyLeftRecursiveRule',
    value: function fromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
      var name = nameFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          definitions = definitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
          Node = NonTerminalNode,
          ///
      rightRecursiveRule = new RightRecursiveRule(name, definitions, Node);

      return rightRecursiveRule;
    }
  }]);

  return RightRecursiveRule;
}(Rule);

module.exports = RightRecursiveRule;

function definitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
  var rightRecursiveDefinitions = rightRecursiveDefinitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
      epsilonPart = new EpsilonPart(),
      epsilonParts = [epsilonPart],
      epsilonPartDefinition = new Definition(epsilonParts),
      definitions = [].concat(rightRecursiveDefinitions).concat(epsilonPartDefinition);

  return definitions;
}

function rightRecursiveDefinitionsFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
  var immediatelyLeftRecursiveDefinitions = immediatelyLeftRecursiveRule.getImmediatelyLeftRecursiveDefinitions(),
      ruleNamePart = RightRecursiveRule.ruleNamePartFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule),
      rightRecursiveDefinitions = immediatelyLeftRecursiveDefinitions.map(function (immediatelyLeftRecursiveDefinition) {
    var immediatelyLeftRecursiveDefinitionAllButFirstParts = immediatelyLeftRecursiveDefinition.getAllButFirstParts(),
        rightRecursiveDefinitionParts = [].concat(immediatelyLeftRecursiveDefinitionAllButFirstParts).concat(ruleNamePart),
        rightRecursiveDefinition = new Definition(rightRecursiveDefinitionParts);

    return rightRecursiveDefinition;
  });

  return rightRecursiveDefinitions;
}

function nameFromImmediatelyLeftRecursiveRule(immediatelyLeftRecursiveRule) {
  var leftRecursiveRuleName = immediatelyLeftRecursiveRule.getName(),
      name = leftRecursiveRuleName + '~';

  return name;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ydWxlL3JpZ2h0UmVjdXJzaXZlLmpzIl0sIm5hbWVzIjpbInBhcnNlcnMiLCJyZXF1aXJlIiwiUnVsZSIsIkRlZmluaXRpb24iLCJOb25UZXJtaW5hbE5vZGUiLCJQYXJ0cyIsIkVwc2lsb25QYXJ0IiwiUnVsZU5hbWVQYXJ0IiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsIm5hbWUiLCJuYW1lRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJub1doaXRlc3BhY2UiLCJydWxlTmFtZVBhcnQiLCJkZWZpbml0aW9ucyIsImRlZmluaXRpb25zRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJlcHNpbG9uUGFydCIsImVwc2lsb25QYXJ0cyIsImVwc2lsb25QYXJ0RGVmaW5pdGlvbiIsImNvbmNhdCIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZ2V0SW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTmFtZVBhcnRGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsIm1hcCIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQWxsQnV0Rmlyc3RQYXJ0cyIsImdldEFsbEJ1dEZpcnN0UGFydHMiLCJyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25QYXJ0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldE5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsVUFBVUMsUUFBUSxlQUFSLENBQWhCOztJQUVRQyxJLEdBQTZDRixPLENBQTdDRSxJO0lBQU1DLFUsR0FBdUNILE8sQ0FBdkNHLFU7SUFBWUMsZSxHQUEyQkosTyxDQUEzQkksZTtJQUFpQkMsSyxHQUFVTCxPLENBQVZLLEs7SUFDbkNDLFcsR0FBOEJELEssQ0FBOUJDLFc7SUFBYUMsWSxHQUFpQkYsSyxDQUFqQkUsWTs7SUFFZkMsa0I7Ozs7Ozs7Ozs7O2lFQUNnREMsNEIsRUFBOEI7QUFDaEYsVUFBTUMsT0FBT0MscUNBQXFDRiw0QkFBckMsQ0FBYjtBQUFBLFVBQ01HLGVBQWUsS0FEckI7QUFBQSxVQUM0QjtBQUN0QkMscUJBQWUsSUFBSU4sWUFBSixDQUFpQkcsSUFBakIsRUFBdUJFLFlBQXZCLENBRnJCOztBQUlBLGFBQU9DLFlBQVA7QUFDRDs7O3FEQUV1Q0osNEIsRUFBOEI7QUFDcEUsVUFBTUMsT0FBT0MscUNBQXFDRiw0QkFBckMsQ0FBYjtBQUFBLFVBQ01LLGNBQWNDLDRDQUE0Q04sNEJBQTVDLENBRHBCO0FBQUEsVUFFTU8sT0FBT1osZUFGYjtBQUFBLFVBRThCO0FBQ3hCYSwyQkFBcUIsSUFBSVQsa0JBQUosQ0FBdUJFLElBQXZCLEVBQTZCSSxXQUE3QixFQUEwQ0UsSUFBMUMsQ0FIM0I7O0FBS0EsYUFBT0Msa0JBQVA7QUFDRDs7OztFQWhCOEJmLEk7O0FBbUJqQ2dCLE9BQU9DLE9BQVAsR0FBaUJYLGtCQUFqQjs7QUFFQSxTQUFTTywyQ0FBVCxDQUFxRE4sNEJBQXJELEVBQW1GO0FBQ2pGLE1BQU1XLDRCQUE0QkMsMERBQTBEWiw0QkFBMUQsQ0FBbEM7QUFBQSxNQUNNYSxjQUFjLElBQUloQixXQUFKLEVBRHBCO0FBQUEsTUFFTWlCLGVBQWUsQ0FDYkQsV0FEYSxDQUZyQjtBQUFBLE1BS01FLHdCQUF3QixJQUFJckIsVUFBSixDQUFlb0IsWUFBZixDQUw5QjtBQUFBLE1BTU1ULGNBQWMsR0FBR1csTUFBSCxDQUFVTCx5QkFBVixFQUFxQ0ssTUFBckMsQ0FBNENELHFCQUE1QyxDQU5wQjs7QUFRQSxTQUFPVixXQUFQO0FBQ0Q7O0FBRUQsU0FBU08seURBQVQsQ0FBbUVaLDRCQUFuRSxFQUFpRztBQUMvRixNQUFNaUIsc0NBQXNDakIsNkJBQTZCa0Isc0NBQTdCLEVBQTVDO0FBQUEsTUFDTWQsZUFBZUwsbUJBQW1Cb0IsNENBQW5CLENBQWdFbkIsNEJBQWhFLENBRHJCO0FBQUEsTUFFTVcsNEJBQTRCTSxvQ0FBb0NHLEdBQXBDLENBQXdDLFVBQVNDLGtDQUFULEVBQTZDO0FBQy9HLFFBQU1DLHFEQUFxREQsbUNBQW1DRSxtQkFBbkMsRUFBM0Q7QUFBQSxRQUNNQyxnQ0FBZ0MsR0FBR1IsTUFBSCxDQUFVTSxrREFBVixFQUE4RE4sTUFBOUQsQ0FBcUVaLFlBQXJFLENBRHRDO0FBQUEsUUFFTXFCLDJCQUEyQixJQUFJL0IsVUFBSixDQUFlOEIsNkJBQWYsQ0FGakM7O0FBSUEsV0FBT0Msd0JBQVA7QUFDRCxHQU4yQixDQUZsQzs7QUFVQSxTQUFPZCx5QkFBUDtBQUNEOztBQUVELFNBQVNULG9DQUFULENBQThDRiw0QkFBOUMsRUFBNEU7QUFDMUUsTUFBTTBCLHdCQUF3QjFCLDZCQUE2QjJCLE9BQTdCLEVBQTlCO0FBQUEsTUFDTTFCLE9BQVV5QixxQkFBVixNQUROOztBQUdBLFNBQU96QixJQUFQO0FBQ0QiLCJmaWxlIjoicmlnaHRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IHsgUnVsZSwgRGVmaW5pdGlvbiwgTm9uVGVybWluYWxOb2RlLCBQYXJ0cyB9ID0gcGFyc2VycyxcbiAgICAgIHsgRXBzaWxvblBhcnQsIFJ1bGVOYW1lUGFydCB9ID0gUGFydHM7XG5cbmNsYXNzIFJpZ2h0UmVjdXJzaXZlUnVsZSBleHRlbmRzIFJ1bGUge1xuICBzdGF0aWMgcnVsZU5hbWVQYXJ0RnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSkge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlID0gZmFsc2UsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lUGFydCA9IG5ldyBSdWxlTmFtZVBhcnQobmFtZSwgbm9XaGl0ZXNwYWNlKTtcblxuICAgIHJldHVybiBydWxlTmFtZVBhcnQ7XG4gIH1cblxuICBzdGF0aWMgZnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSkge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9uc0Zyb21JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICAgIE5vZGUgPSBOb25UZXJtaW5hbE5vZGUsIC8vL1xuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZSA9IG5ldyBSaWdodFJlY3Vyc2l2ZVJ1bGUobmFtZSwgZGVmaW5pdGlvbnMsIE5vZGUpO1xuXG4gICAgcmV0dXJuIHJpZ2h0UmVjdXJzaXZlUnVsZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJpZ2h0UmVjdXJzaXZlUnVsZTtcblxuZnVuY3Rpb24gZGVmaW5pdGlvbnNGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGNvbnN0IHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zRnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgIGVwc2lsb25QYXJ0ID0gbmV3IEVwc2lsb25QYXJ0KCksXG4gICAgICAgIGVwc2lsb25QYXJ0cyA9IFtcbiAgICAgICAgICBlcHNpbG9uUGFydFxuICAgICAgICBdLFxuICAgICAgICBlcHNpbG9uUGFydERlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihlcHNpbG9uUGFydHMpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IFtdLmNvbmNhdChyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zKS5jb25jYXQoZXBzaWxvblBhcnREZWZpbml0aW9uKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGNvbnN0IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZS5nZXRJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucygpLFxuICAgICAgICBydWxlTmFtZVBhcnQgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUucnVsZU5hbWVQYXJ0RnJvbUltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24oaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgIGNvbnN0IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzID0gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRBbGxCdXRGaXJzdFBhcnRzKCksXG4gICAgICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uUGFydHMgPSBbXS5jb25jYXQoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMpLmNvbmNhdChydWxlTmFtZVBhcnQpLFxuICAgICAgICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzKTtcbiAgXG4gICAgICAgICAgcmV0dXJuIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIG5hbWVGcm9tSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZShpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBuYW1lID0gYCR7bGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lfX5gO1xuXG4gIHJldHVybiBuYW1lO1xufVxuIl19