'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parsers = require('occam-parsers');

var Rule = parsers.Rule,
    Definition = parsers.Definition,
    NonTerminalNode = parsers.NonTerminalNode,
    parts = parsers.parts,
    EpsilonPart = parts.EpsilonPart,
    RuleNamePart = parts.RuleNamePart;

var RightRecursiveRule = function (_Rule) {
  _inherits(RightRecursiveRule, _Rule);

  function RightRecursiveRule() {
    _classCallCheck(this, RightRecursiveRule);

    return _possibleConstructorReturn(this, (RightRecursiveRule.__proto__ || Object.getPrototypeOf(RightRecursiveRule)).apply(this, arguments));
  }

  _createClass(RightRecursiveRule, null, [{
    key: 'ruleNamePartFromLeftRecursiveRule',
    value: function ruleNamePartFromLeftRecursiveRule(leftRecursiveRule) {
      var name = nameFromLeftRecursiveRule(leftRecursiveRule),
          noWhitespace = false,
          ///
      ruleNamePart = new RuleNamePart(name, noWhitespace);

      return ruleNamePart;
    }
  }, {
    key: 'fromLeftRecursiveRule',
    value: function fromLeftRecursiveRule(leftRecursiveRule) {
      var name = nameFromLeftRecursiveRule(leftRecursiveRule),
          definitions = definitionsFromLeftRecursiveRule(leftRecursiveRule),
          Node = NonTerminalNode,
          ///
      rightRecursiveRule = new RightRecursiveRule(name, definitions, Node);

      return rightRecursiveRule;
    }
  }]);

  return RightRecursiveRule;
}(Rule);

module.exports = RightRecursiveRule;

function definitionsFromLeftRecursiveRule(leftRecursiveRule) {
  var rightRecursiveDefinitions = rightRecursiveDefinitionsFromLeftRecursiveRule(leftRecursiveRule),
      epsilonPart = new EpsilonPart(),
      epsilonParts = [epsilonPart],
      epsilonPartDefinition = new Definition(epsilonParts),
      definitions = [].concat(rightRecursiveDefinitions).concat(epsilonPartDefinition);

  return definitions;
}

function rightRecursiveDefinitionsFromLeftRecursiveRule(leftRecursiveRule) {
  var ruleLeftRecursiveDefinitions = leftRecursiveRule.getLeftRecursiveDefinitions(),
      ruleNamePart = RightRecursiveRule.ruleNamePartFromLeftRecursiveRule(leftRecursiveRule),
      rightRecursiveDefinitions = ruleLeftRecursiveDefinitions.map(function (ruleLeftRecursiveDefinition) {
    var ruleLeftRecursiveDefinitionAllButFirstParts = ruleLeftRecursiveDefinition.getAllButFirstParts(),
        rightRecursiveDefinitionParts = [].concat(ruleLeftRecursiveDefinitionAllButFirstParts).concat(ruleNamePart),
        rightRecursiveDefinition = new Definition(rightRecursiveDefinitionParts);

    return rightRecursiveDefinition;
  });

  return rightRecursiveDefinitions;
}

function nameFromLeftRecursiveRule(leftRecursiveRule) {
  var leftRecursiveRuleName = leftRecursiveRule.getName(),
      name = leftRecursiveRuleName + '~';

  return name;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ydWxlL3JpZ2h0UmVjdXJzaXZlLmpzIl0sIm5hbWVzIjpbInBhcnNlcnMiLCJyZXF1aXJlIiwiUnVsZSIsIkRlZmluaXRpb24iLCJOb25UZXJtaW5hbE5vZGUiLCJwYXJ0cyIsIkVwc2lsb25QYXJ0IiwiUnVsZU5hbWVQYXJ0IiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwibGVmdFJlY3Vyc2l2ZVJ1bGUiLCJuYW1lIiwibmFtZUZyb21MZWZ0UmVjdXJzaXZlUnVsZSIsIm5vV2hpdGVzcGFjZSIsInJ1bGVOYW1lUGFydCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUiLCJOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zRnJvbUxlZnRSZWN1cnNpdmVSdWxlIiwiZXBzaWxvblBhcnQiLCJlcHNpbG9uUGFydHMiLCJlcHNpbG9uUGFydERlZmluaXRpb24iLCJjb25jYXQiLCJydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZ2V0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZU5hbWVQYXJ0RnJvbUxlZnRSZWN1cnNpdmVSdWxlIiwibWFwIiwicnVsZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicnVsZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQWxsQnV0Rmlyc3RQYXJ0cyIsImdldEFsbEJ1dEZpcnN0UGFydHMiLCJyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25QYXJ0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldE5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsVUFBVUMsUUFBUSxlQUFSLENBQWhCOztJQUVRQyxJLEdBQTZDRixPLENBQTdDRSxJO0lBQU1DLFUsR0FBdUNILE8sQ0FBdkNHLFU7SUFBWUMsZSxHQUEyQkosTyxDQUEzQkksZTtJQUFpQkMsSyxHQUFVTCxPLENBQVZLLEs7SUFDckNDLFcsR0FBOEJELEssQ0FBOUJDLFc7SUFBYUMsWSxHQUFpQkYsSyxDQUFqQkUsWTs7SUFFYkMsa0I7Ozs7Ozs7Ozs7O3NEQUNxQ0MsaUIsRUFBbUI7QUFDMUQsVUFBTUMsT0FBT0MsMEJBQTBCRixpQkFBMUIsQ0FBYjtBQUFBLFVBQ01HLGVBQWUsS0FEckI7QUFBQSxVQUM0QjtBQUN0QkMscUJBQWUsSUFBSU4sWUFBSixDQUFpQkcsSUFBakIsRUFBdUJFLFlBQXZCLENBRnJCOztBQUlBLGFBQU9DLFlBQVA7QUFDRDs7OzBDQUU0QkosaUIsRUFBbUI7QUFDOUMsVUFBTUMsT0FBT0MsMEJBQTBCRixpQkFBMUIsQ0FBYjtBQUFBLFVBQ01LLGNBQWNDLGlDQUFpQ04saUJBQWpDLENBRHBCO0FBQUEsVUFFTU8sT0FBT1osZUFGYjtBQUFBLFVBRThCO0FBQ3hCYSwyQkFBcUIsSUFBSVQsa0JBQUosQ0FBdUJFLElBQXZCLEVBQTZCSSxXQUE3QixFQUEwQ0UsSUFBMUMsQ0FIM0I7O0FBS0EsYUFBT0Msa0JBQVA7QUFDRDs7OztFQWhCOEJmLEk7O0FBbUJqQ2dCLE9BQU9DLE9BQVAsR0FBaUJYLGtCQUFqQjs7QUFFQSxTQUFTTyxnQ0FBVCxDQUEwQ04saUJBQTFDLEVBQTZEO0FBQzNELE1BQU1XLDRCQUE0QkMsK0NBQStDWixpQkFBL0MsQ0FBbEM7QUFBQSxNQUNNYSxjQUFjLElBQUloQixXQUFKLEVBRHBCO0FBQUEsTUFFTWlCLGVBQWUsQ0FDYkQsV0FEYSxDQUZyQjtBQUFBLE1BS01FLHdCQUF3QixJQUFJckIsVUFBSixDQUFlb0IsWUFBZixDQUw5QjtBQUFBLE1BTU1ULGNBQWMsR0FBR1csTUFBSCxDQUFVTCx5QkFBVixFQUFxQ0ssTUFBckMsQ0FBNENELHFCQUE1QyxDQU5wQjs7QUFRQSxTQUFPVixXQUFQO0FBQ0Q7O0FBRUQsU0FBU08sOENBQVQsQ0FBd0RaLGlCQUF4RCxFQUEyRTtBQUN6RSxNQUFNaUIsK0JBQStCakIsa0JBQWtCa0IsMkJBQWxCLEVBQXJDO0FBQUEsTUFDTWQsZUFBZUwsbUJBQW1Cb0IsaUNBQW5CLENBQXFEbkIsaUJBQXJELENBRHJCO0FBQUEsTUFFTVcsNEJBQTRCTSw2QkFBNkJHLEdBQTdCLENBQWlDLFVBQVNDLDJCQUFULEVBQXNDO0FBQ2pHLFFBQU1DLDhDQUE4Q0QsNEJBQTRCRSxtQkFBNUIsRUFBcEQ7QUFBQSxRQUNJQyxnQ0FBZ0MsR0FBR1IsTUFBSCxDQUFVTSwyQ0FBVixFQUF1RE4sTUFBdkQsQ0FBOERaLFlBQTlELENBRHBDO0FBQUEsUUFFSXFCLDJCQUEyQixJQUFJL0IsVUFBSixDQUFlOEIsNkJBQWYsQ0FGL0I7O0FBSUEsV0FBT0Msd0JBQVA7QUFDRCxHQU4yQixDQUZsQzs7QUFVQSxTQUFPZCx5QkFBUDtBQUNEOztBQUVELFNBQVNULHlCQUFULENBQW1DRixpQkFBbkMsRUFBc0Q7QUFDcEQsTUFBTTBCLHdCQUF3QjFCLGtCQUFrQjJCLE9BQWxCLEVBQTlCO0FBQUEsTUFDTTFCLE9BQVV5QixxQkFBVixNQUROOztBQUdBLFNBQU96QixJQUFQO0FBQ0QiLCJmaWxlIjoicmlnaHRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IHsgUnVsZSwgRGVmaW5pdGlvbiwgTm9uVGVybWluYWxOb2RlLCBwYXJ0cyB9ID0gcGFyc2VycyxcbiAgICB7IEVwc2lsb25QYXJ0LCBSdWxlTmFtZVBhcnQgfSA9IHBhcnRzO1xuXG5jbGFzcyBSaWdodFJlY3Vyc2l2ZVJ1bGUgZXh0ZW5kcyBSdWxlIHtcbiAgc3RhdGljIHJ1bGVOYW1lUGFydEZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSkge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUxlZnRSZWN1cnNpdmVSdWxlKGxlZnRSZWN1cnNpdmVSdWxlKSxcbiAgICAgICAgICBub1doaXRlc3BhY2UgPSBmYWxzZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWVQYXJ0ID0gbmV3IFJ1bGVOYW1lUGFydChuYW1lLCBub1doaXRlc3BhY2UpO1xuXG4gICAgcmV0dXJuIHJ1bGVOYW1lUGFydDtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUobGVmdFJlY3Vyc2l2ZVJ1bGUpIHtcbiAgICBjb25zdCBuYW1lID0gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgTm9kZSA9IE5vblRlcm1pbmFsTm9kZSwgLy8vXG4gICAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlID0gbmV3IFJpZ2h0UmVjdXJzaXZlUnVsZShuYW1lLCBkZWZpbml0aW9ucywgTm9kZSk7XG5cbiAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmlnaHRSZWN1cnNpdmVSdWxlO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSkge1xuICBjb25zdCByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zID0gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgIGVwc2lsb25QYXJ0ID0gbmV3IEVwc2lsb25QYXJ0KCksXG4gICAgICAgIGVwc2lsb25QYXJ0cyA9IFtcbiAgICAgICAgICBlcHNpbG9uUGFydFxuICAgICAgICBdLFxuICAgICAgICBlcHNpbG9uUGFydERlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihlcHNpbG9uUGFydHMpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IFtdLmNvbmNhdChyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zKS5jb25jYXQoZXBzaWxvblBhcnREZWZpbml0aW9uKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUobGVmdFJlY3Vyc2l2ZVJ1bGUpIHtcbiAgY29uc3QgcnVsZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVSdWxlLmdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucygpLFxuICAgICAgICBydWxlTmFtZVBhcnQgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUucnVsZU5hbWVQYXJ0RnJvbUxlZnRSZWN1cnNpdmVSdWxlKGxlZnRSZWN1cnNpdmVSdWxlKSxcbiAgICAgICAgcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHJ1bGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uKHJ1bGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgIGNvbnN0IHJ1bGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMgPSBydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0QWxsQnV0Rmlyc3RQYXJ0cygpLFxuICAgICAgICAgICAgICByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25QYXJ0cyA9IFtdLmNvbmNhdChydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzKS5jb25jYXQocnVsZU5hbWVQYXJ0KSxcbiAgICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uID0gbmV3IERlZmluaXRpb24ocmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uUGFydHMpO1xuICBcbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucztcbn1cblxuZnVuY3Rpb24gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSkge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZS5nZXROYW1lKCksXG4gICAgICAgIG5hbWUgPSBgJHtsZWZ0UmVjdXJzaXZlUnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIG5hbWU7XG59XG4iXX0=