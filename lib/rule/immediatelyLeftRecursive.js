'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parsers = require('occam-parsers');

var ImplicitlyLeftRecursiveDefinition = require('../definition/implicitlyLeftRecursive'),
    ImmediatelyLeftRecursiveDefinition = require('../definition/immediatelyLeftRecursive');

var Rule = parsers.Rule,
    Definition = parsers.Definition;

var ImmediatelyLeftRecursiveRule = function (_Rule) {
  _inherits(ImmediatelyLeftRecursiveRule, _Rule);

  function ImmediatelyLeftRecursiveRule() {
    _classCallCheck(this, ImmediatelyLeftRecursiveRule);

    return _possibleConstructorReturn(this, (ImmediatelyLeftRecursiveRule.__proto__ || Object.getPrototypeOf(ImmediatelyLeftRecursiveRule)).apply(this, arguments));
  }

  _createClass(ImmediatelyLeftRecursiveRule, [{
    key: 'getImmediatelyLeftRecursiveDefinitions',
    value: function getImmediatelyLeftRecursiveDefinitions() {
      var name = this.getName(),
          definitions = this.getDefinitions(),
          ruleName = name,
          ///
      immediatelyLeftRecursiveDefinitions = definitions.filter(function (definition) {
        var immediatelyLeftRecursiveDefinition = ImmediatelyLeftRecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

        if (immediatelyLeftRecursiveDefinition !== null) {
          return true;
        }
      });

      return immediatelyLeftRecursiveDefinitions;
    }
  }, {
    key: 'getNonImmediatelyLeftRecursiveDefinitions',
    value: function getNonImmediatelyLeftRecursiveDefinitions() {
      var name = this.getName(),
          definitions = this.getDefinitions(),
          ruleName = name,
          ///
      nonImmediatelyLeftRecursiveDefinitions = definitions.filter(function (definition) {
        var immediatelyLeftRecursiveDefinition = ImmediatelyLeftRecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

        if (immediatelyLeftRecursiveDefinition === null) {
          return true;
        }
      });

      return nonImmediatelyLeftRecursiveDefinitions;
    }
  }], [{
    key: 'fromRule',
    value: function fromRule(rule) {
      var immediatelyLeftRecursiveRule = null;

      var ruleName = rule.getName(),
          ruleDefinitions = rule.getDefinitions(),
          someRuleDefinitionImmediatelyLeftRecursive = ruleDefinitions.some(function (ruleDefinition) {
        var definition = ruleDefinition,
            ///
        immediatelyLeftRecursiveDefinition = ImmediatelyLeftRecursiveDefinition.fromDefinitionAndRuleName(definition, ruleName);

        if (immediatelyLeftRecursiveDefinition !== null) {
          return true;
        }
      });

      if (someRuleDefinitionImmediatelyLeftRecursive) {
        var name = rule.getName(),
            definitions = rule.getDefinitions(),
            NonTerminalNode = rule.getNonTerminalNode();

        immediatelyLeftRecursiveRule = new ImmediatelyLeftRecursiveRule(name, definitions, NonTerminalNode);
      }

      return immediatelyLeftRecursiveRule;
    }
  }, {
    key: 'fromImplicitlyLeftRecursiveRuleAndPreviousRules',
    value: function fromImplicitlyLeftRecursiveRuleAndPreviousRules(implicitlyLeftRecursiveRule, previousRules) {
      var definitions = implicitlyLeftRecursiveRule.getDefinitions();

      previousRules.forEach(function (previousRule) {
        definitions = definitionsFromDefinitionsAndPreviousRule(definitions, previousRule); ///
      });

      var name = implicitlyLeftRecursiveRule.getName(),
          NonTerminalNode = implicitlyLeftRecursiveRule.getNonTerminalNode(),
          immediatelyLeftRecursiveRule = new ImmediatelyLeftRecursiveRule(name, definitions, NonTerminalNode);

      return immediatelyLeftRecursiveRule;
    }
  }]);

  return ImmediatelyLeftRecursiveRule;
}(Rule);

module.exports = ImmediatelyLeftRecursiveRule;

function definitionsFromDefinitionsAndPreviousRule(definitions, previousRule) {
  var newDefinitions = [];

  definitions.forEach(function (definition) {
    var implicitlyLeftRecursiveDefinition = ImplicitlyLeftRecursiveDefinition.fromDefinitionAndPreviousRule(definition, previousRule);

    if (implicitlyLeftRecursiveDefinition !== null) {
      var _definitions = definitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousRule(implicitlyLeftRecursiveDefinition, previousRule);

      newDefinitions = newDefinitions.concat(_definitions);
    } else {
      var newDefinition = definition; ///

      newDefinitions.push(newDefinition);
    }
  });

  definitions = newDefinitions; ///

  return definitions;
}

function definitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousRule(implicitlyLeftRecursiveDefinition, previousRule) {
  var previousRuleDefinitions = previousRule.getDefinitions(),
      implicitlyLeftRecursiveDefinitionAllButFirstParts = implicitlyLeftRecursiveDefinition.getAllButFirstParts(),
      definitions = previousRuleDefinitions.map(function (previousRuleDefinition) {
    var previousRuleDefinitionParts = previousRuleDefinition.getParts(),
        parts = [].concat(previousRuleDefinitionParts).concat(implicitlyLeftRecursiveDefinitionAllButFirstParts),
        definition = new Definition(parts);

    return definition;
  });

  return definitions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ydWxlL2ltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZS5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJSdWxlIiwiRGVmaW5pdGlvbiIsIkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJuYW1lIiwiZ2V0TmFtZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJydWxlTmFtZSIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmlsdGVyIiwiZGVmaW5pdGlvbiIsImltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tRGVmaW5pdGlvbkFuZFJ1bGVOYW1lIiwibm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlIiwiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSIsInJ1bGVEZWZpbml0aW9ucyIsInNvbWVSdWxlRGVmaW5pdGlvbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZSIsInNvbWUiLCJydWxlRGVmaW5pdGlvbiIsIk5vblRlcm1pbmFsTm9kZSIsImdldE5vblRlcm1pbmFsTm9kZSIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSIsInByZXZpb3VzUnVsZXMiLCJmb3JFYWNoIiwicHJldmlvdXNSdWxlIiwiZGVmaW5pdGlvbnNGcm9tRGVmaW5pdGlvbnNBbmRQcmV2aW91c1J1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV3RGVmaW5pdGlvbnMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tRGVmaW5pdGlvbkFuZFByZXZpb3VzUnVsZSIsImRlZmluaXRpb25zRnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZFByZXZpb3VzUnVsZSIsImNvbmNhdCIsIm5ld0RlZmluaXRpb24iLCJwdXNoIiwicHJldmlvdXNSdWxlRGVmaW5pdGlvbnMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzIiwiZ2V0QWxsQnV0Rmlyc3RQYXJ0cyIsIm1hcCIsInByZXZpb3VzUnVsZURlZmluaXRpb24iLCJwcmV2aW91c1J1bGVEZWZpbml0aW9uUGFydHMiLCJnZXRQYXJ0cyIsInBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFVBQVVDLFFBQVEsZUFBUixDQUFoQjs7QUFFQSxJQUFNQyxvQ0FBb0NELFFBQVEsdUNBQVIsQ0FBMUM7QUFBQSxJQUNNRSxxQ0FBcUNGLFFBQVEsd0NBQVIsQ0FEM0M7O0lBR1FHLEksR0FBcUJKLE8sQ0FBckJJLEk7SUFBTUMsVSxHQUFlTCxPLENBQWZLLFU7O0lBRVJDLDRCOzs7Ozs7Ozs7Ozs2REFDcUM7QUFDdkMsVUFBTUMsT0FBTyxLQUFLQyxPQUFMLEVBQWI7QUFBQSxVQUNNQyxjQUFjLEtBQUtDLGNBQUwsRUFEcEI7QUFBQSxVQUVNQyxXQUFXSixJQUZqQjtBQUFBLFVBRXdCO0FBQ2xCSyw0Q0FBc0NILFlBQVlJLE1BQVosQ0FBbUIsVUFBU0MsVUFBVCxFQUFxQjtBQUM1RSxZQUFNQyxxQ0FBcUNaLG1DQUFtQ2EseUJBQW5DLENBQTZERixVQUE3RCxFQUF5RUgsUUFBekUsQ0FBM0M7O0FBRUEsWUFBSUksdUNBQXVDLElBQTNDLEVBQWlEO0FBQy9DLGlCQUFPLElBQVA7QUFDRDtBQUNGLE9BTnFDLENBSDVDOztBQVdBLGFBQU9ILG1DQUFQO0FBQ0Q7OztnRUFFMkM7QUFDMUMsVUFBTUwsT0FBTyxLQUFLQyxPQUFMLEVBQWI7QUFBQSxVQUNNQyxjQUFjLEtBQUtDLGNBQUwsRUFEcEI7QUFBQSxVQUVNQyxXQUFXSixJQUZqQjtBQUFBLFVBRXdCO0FBQ2xCVSwrQ0FBeUNSLFlBQVlJLE1BQVosQ0FBbUIsVUFBU0MsVUFBVCxFQUFxQjtBQUMvRSxZQUFNQyxx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UUFBTUMsOEJBQThCRCx1QkFBdUJFLFFBQXZCLEVBQXBDO0FBQUEsUUFDTUMsUUFBUSxHQUFHVixNQUFILENBQVVRLDJCQUFWLEVBQXVDUixNQUF2QyxDQUE4Q0ksaURBQTlDLENBRGQ7QUFBQSxRQUVNM0IsYUFBYSxJQUFJVCxVQUFKLENBQWUwQyxLQUFmLENBRm5COztBQUlBLFdBQU9qQyxVQUFQO0FBQ0QsR0FOYSxDQUZwQjs7QUFVQSxTQUFPTCxXQUFQO0FBQ0QiLCJmaWxlIjoiaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpO1xuXG5jb25zdCBJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL2ltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlJyksXG4gICAgICBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9pbW1lZGlhdGVseUxlZnRSZWN1cnNpdmUnKTtcblxuY29uc3QgeyBSdWxlLCBEZWZpbml0aW9uIH0gPSBwYXJzZXJzO1xuXG5jbGFzcyBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlIGV4dGVuZHMgUnVsZSB7XG4gIGdldEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKCkge1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLmdldE5hbWUoKSxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IHRoaXMuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgICBydWxlTmFtZSA9IG5hbWUsICAvLy9cbiAgICAgICAgICBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGRlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tRGVmaW5pdGlvbkFuZFJ1bGVOYW1lKGRlZmluaXRpb24sIHJ1bGVOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG4gIH1cblxuICBnZXROb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucygpIHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5nZXROYW1lKCksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSB0aGlzLmdldERlZmluaXRpb25zKCksXG4gICAgICAgICAgcnVsZU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgICAgbm9uSW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBkZWZpbml0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgY29uc3QgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IEltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbURlZmluaXRpb25BbmRSdWxlTmFtZShkZWZpbml0aW9uLCBydWxlTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vbkltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xuICB9XG5cbiAgc3RhdGljIGZyb21SdWxlKHJ1bGUpIHtcbiAgICBsZXQgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IG51bGw7XG5cbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgIHJ1bGVEZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgICBzb21lUnVsZURlZmluaXRpb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmUgPSBydWxlRGVmaW5pdGlvbnMuc29tZShmdW5jdGlvbihydWxlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHJ1bGVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EZWZpbml0aW9uQW5kUnVsZU5hbWUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgIGlmIChzb21lUnVsZURlZmluaXRpb25JbW1lZGlhdGVseUxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICAgICAgTm9uVGVybWluYWxOb2RlID0gcnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKTtcblxuICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IG5ldyBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKG5hbWUsIGRlZmluaXRpb25zLCBOb25UZXJtaW5hbE5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBpbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlO1xuICB9XG5cbiAgc3RhdGljIGZyb21JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVBbmRQcmV2aW91c1J1bGVzKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgcHJldmlvdXNSdWxlcykge1xuICAgIGxldCBkZWZpbml0aW9ucyA9IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgcHJldmlvdXNSdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHByZXZpb3VzUnVsZSkge1xuICAgICAgZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9uc0Zyb21EZWZpbml0aW9uc0FuZFByZXZpb3VzUnVsZShkZWZpbml0aW9ucywgcHJldmlvdXNSdWxlKTsgLy8vXG4gICAgfSk7XG5cbiAgICBjb25zdCBuYW1lID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgICBOb25UZXJtaW5hbE5vZGUgPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUuZ2V0Tm9uVGVybWluYWxOb2RlKCksXG4gICAgICAgICAgaW1tZWRpYXRlbHlMZWZ0UmVjdXJzaXZlUnVsZSA9IG5ldyBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlKG5hbWUsIGRlZmluaXRpb25zLCBOb25UZXJtaW5hbE5vZGUpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZWx5TGVmdFJlY3Vyc2l2ZVJ1bGU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbW1lZGlhdGVseUxlZnRSZWN1cnNpdmVSdWxlO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uc0Zyb21EZWZpbml0aW9uc0FuZFByZXZpb3VzUnVsZShkZWZpbml0aW9ucywgcHJldmlvdXNSdWxlKSB7XG4gIGxldCBuZXdEZWZpbml0aW9ucyA9IFtdO1xuXG4gIGRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgIGNvbnN0IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tRGVmaW5pdGlvbkFuZFByZXZpb3VzUnVsZShkZWZpbml0aW9uLCBwcmV2aW91c1J1bGUpO1xuXG4gICAgaWYgKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgZGVmaW5pdGlvbnMgPSAgZGVmaW5pdGlvbnNGcm9tSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uQW5kUHJldmlvdXNSdWxlKGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcHJldmlvdXNSdWxlKTtcblxuICAgICAgbmV3RGVmaW5pdGlvbnMgPSBuZXdEZWZpbml0aW9ucy5jb25jYXQoZGVmaW5pdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdEZWZpbml0aW9uID0gZGVmaW5pdGlvbjsgLy8vXG5cbiAgICAgIG5ld0RlZmluaXRpb25zLnB1c2gobmV3RGVmaW5pdGlvbik7XG4gICAgfVxuICB9KTtcblxuICBkZWZpbml0aW9ucyA9IG5ld0RlZmluaXRpb25zOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGRlZmluaXRpb25zRnJvbUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFuZFByZXZpb3VzUnVsZShpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHByZXZpb3VzUnVsZSkge1xuICBjb25zdCBwcmV2aW91c1J1bGVEZWZpbml0aW9ucyA9IHByZXZpb3VzUnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldEFsbEJ1dEZpcnN0UGFydHMoKSxcbiAgICAgICAgZGVmaW5pdGlvbnMgPSBwcmV2aW91c1J1bGVEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24ocHJldmlvdXNSdWxlRGVmaW5pdGlvbikge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzUnVsZURlZmluaXRpb25QYXJ0cyA9IHByZXZpb3VzUnVsZURlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IFtdLmNvbmNhdChwcmV2aW91c1J1bGVEZWZpbml0aW9uUGFydHMpLmNvbmNhdChpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzKSxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uID0gbmV3IERlZmluaXRpb24ocGFydHMpO1xuICBcbiAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25zO1xufVxuIl19