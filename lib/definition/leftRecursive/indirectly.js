'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DeltaPart = require('../../part/delta'),
    ruleUtilities = require('../../utilities/rule'),
    arrayUtilities = require('../../utilities/array'),
    definitionUtilities = require('../../utilities/definition'),
    recursiveDefinitionUtilities = require('../../utilities/recursiveDefinition');

var LeftRecursiveDefinition = require('../../definition/leftRecursive');

var first = arrayUtilities.first,
    findImplicitlyLeftRecursiveDefinition = recursiveDefinitionUtilities.findImplicitlyLeftRecursiveDefinition,
    findRule = ruleUtilities.findRule,
    reducedRuleFromRule = ruleUtilities.reducedRuleFromRule,
    repeatedRuleFromRule = ruleUtilities.repeatedRuleFromRule,
    rewrittenRuleFromRule = ruleUtilities.rewrittenRuleFromRule,
    isDefinitionUnary = definitionUtilities.isDefinitionUnary,
    isDefinitionComplex = definitionUtilities.isDefinitionComplex,
    recursiveRuleNamesFromDefinition = definitionUtilities.recursiveRuleNamesFromDefinition,
    leftRecursiveRuleNamesFromDefinition = definitionUtilities.leftRecursiveRuleNamesFromDefinition;

var IndirectlyLeftRecursiveDefinition = function (_LeftRecursiveDefinit) {
  _inherits(IndirectlyLeftRecursiveDefinition, _LeftRecursiveDefinit);

  function IndirectlyLeftRecursiveDefinition(parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, implicitlyLeftRecursiveDefinition) {
    _classCallCheck(this, IndirectlyLeftRecursiveDefinition);

    var _this = _possibleConstructorReturn(this, (IndirectlyLeftRecursiveDefinition.__proto__ || Object.getPrototypeOf(IndirectlyLeftRecursiveDefinition)).call(this, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames));

    _this.implicitlyLeftRecursiveDefinition = implicitlyLeftRecursiveDefinition;
    return _this;
  }

  _createClass(IndirectlyLeftRecursiveDefinition, [{
    key: 'getImplicitlyLeftRecursiveDefinition',
    value: function getImplicitlyLeftRecursiveDefinition() {
      return this.implicitlyLeftRecursiveDefinition;
    }
  }, {
    key: 'rewrite',
    value: function rewrite(rules) {
      var ruleName = this.getRuleName(),
          rule = findRule(ruleName, rules),
          leftRecursiveDefinition = this,
          ///
      replacementDefinition = this,
          ///
      rewrittenDefinition = RewrittenDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);

      rule.replaceDefinition(replacementDefinition, rewrittenDefinition);

      var leftRecursiveRuleName = this.getLeftRecursiveRuleName(),
          repeatedDefinition = RepeatedDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition),
          repeatedRule = repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules);

      repeatedRule.addDefinition(repeatedDefinition);

      var implicitlyLeftRecursiveDefinition = this.getImplicitlyLeftRecursiveDefinition(),
          definition = implicitlyLeftRecursiveDefinition.getDefinition(),
          implicitlyLeftRecursiveRuleName = leftRecursiveRuleName,
          ///
      implicitlyLeftRecursiveRule = findRule(implicitlyLeftRecursiveRuleName, rules),
          reducedLeftRecursiveRule = reducedRuleFromRule(implicitlyLeftRecursiveRule, rules);

      implicitlyLeftRecursiveRule.addDefinition(definition, -1);

      reducedLeftRecursiveRule.removeDefinition(definition);

      var reducedLeftRecursiveRuleName = reducedLeftRecursiveRule.getName(),
          reducedLeftRecursiveRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedLeftRecursiveRuleName);

      implicitlyLeftRecursiveRule.addDefinition(reducedLeftRecursiveRuleNameDefinition);

      var reducedLeftRecursiveRuleEmpty = reducedLeftRecursiveRule.isEmpty();

      // if (reducedLeftRecursiveRuleEmpty) {
      //   const implicitlyLeftRecursiveRuleName = implicitlyLeftRecursiveRule.getName();
      //
      //   throw new Error(`The '${implicitlyLeftRecursiveRuleName}' rule has no non-recursive definitions and therefore cannot be rewritten.`);
      // }
    }
  }], [{
    key: 'fromRuleNameDefinitionAndRecursiveDefinitions',
    value: function fromRuleNameDefinitionAndRecursiveDefinitions(ruleName, definition, recursiveDefinitions) {
      var indirectlyLeftRecursiveDefinition = null;

      var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition),
          leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length,
          definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;

      if (definitionLeftRecursive) {
        var firstLeftRecursiveRuleName = first(leftRecursiveRuleNames),
            leftRecursiveRuleName = firstLeftRecursiveRuleName,
            ///
        ruleNameLeftRecursiveRuleName = ruleName === leftRecursiveRuleName;

        if (!ruleNameLeftRecursiveRuleName) {
          var implicitlyLeftRecursiveDefinition = findImplicitlyLeftRecursiveDefinition(leftRecursiveRuleName, recursiveDefinitions);

          if (implicitlyLeftRecursiveDefinition !== null) {
            var definitionUnary = isDefinitionUnary(definition);

            if (definitionUnary) {
              var definitionString = definition.asString();

              throw new Error('The \'' + definitionString + '\' indirectly left recursive definition of the \'' + ruleName + '\' rule is unary and therefore cannot be rewritten.');
            }

            var definitionComplex = isDefinitionComplex(definition);

            if (definitionComplex) {
              var _definitionString = definition.asString();

              throw new Error('The \'' + _definitionString + '\' indirectly left recursive definition of the \'' + ruleName + '\' rule is complex and therefore cannot be rewritten.');
            }

            var deltaPart = new DeltaPart(),
                parts = [deltaPart],
                recursiveRuleNames = recursiveRuleNamesFromDefinition(definition);

            indirectlyLeftRecursiveDefinition = new IndirectlyLeftRecursiveDefinition(parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, implicitlyLeftRecursiveDefinition);
          }
        }
      }

      return indirectlyLeftRecursiveDefinition;
    }
  }]);

  return IndirectlyLeftRecursiveDefinition;
}(LeftRecursiveDefinition);

module.exports = IndirectlyLeftRecursiveDefinition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9kZWZpbml0aW9uL2xlZnRSZWN1cnNpdmUvaW5kaXJlY3RseS5qcyJdLCJuYW1lcyI6WyJEZWx0YVBhcnQiLCJyZXF1aXJlIiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiZGVmaW5pdGlvblV0aWxpdGllcyIsInJlY3Vyc2l2ZURlZmluaXRpb25VdGlsaXRpZXMiLCJMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpcnN0IiwiZmluZEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmRSdWxlIiwicmVkdWNlZFJ1bGVGcm9tUnVsZSIsInJlcGVhdGVkUnVsZUZyb21SdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiaXNEZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwYXJ0cyIsInJ1bGVOYW1lIiwiZGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJydWxlcyIsImdldFJ1bGVOYW1lIiwicnVsZSIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwicmV3cml0dGVuRGVmaW5pdGlvbiIsIlJld3JpdHRlbkRlZmluaXRpb24iLCJmcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXBsYWNlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInJlcGVhdGVkRGVmaW5pdGlvbiIsIlJlcGVhdGVkRGVmaW5pdGlvbiIsInJlcGVhdGVkUnVsZSIsInJlcGVhdGVkUnVsZUZyb21MZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJhZGREZWZpbml0aW9uIiwiZ2V0SW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZ2V0RGVmaW5pdGlvbiIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJyZWR1Y2VkTGVmdFJlY3Vyc2l2ZVJ1bGUiLCJyZW1vdmVEZWZpbml0aW9uIiwicmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldE5hbWUiLCJyZWR1Y2VkTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiIsIlJ1bGVOYW1lRGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZSIsInJlZHVjZWRMZWZ0UmVjdXJzaXZlUnVsZUVtcHR5IiwiaXNFbXB0eSIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJydWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImRlZmluaXRpb25VbmFyeSIsImRlZmluaXRpb25TdHJpbmciLCJhc1N0cmluZyIsIkVycm9yIiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJkZWx0YVBhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsa0JBQVIsQ0FBbEI7QUFBQSxJQUNNQyxnQkFBZ0JELFFBQVEsc0JBQVIsQ0FEdEI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsdUJBQVIsQ0FGdkI7QUFBQSxJQUdNRyxzQkFBc0JILFFBQVEsNEJBQVIsQ0FINUI7QUFBQSxJQUlNSSwrQkFBK0JKLFFBQVEscUNBQVIsQ0FKckM7O0FBTUEsSUFBTUssMEJBQTBCTCxRQUFR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NkNoRCx1Qjs7QUFpR2hENEQsT0FBT0MsT0FBUCxHQUFpQmxELGlDQUFqQiIsImZpbGUiOiJpbmRpcmVjdGx5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZWx0YVBhcnQgPSByZXF1aXJlKCcuLi8uLi9wYXJ0L2RlbHRhJyksXG4gICAgICBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3J1bGUnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBkZWZpbml0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2RlZmluaXRpb24nKSxcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvcmVjdXJzaXZlRGVmaW5pdGlvbicpO1xuXG5jb25zdCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2RlZmluaXRpb24vbGVmdFJlY3Vyc2l2ZScpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgZmluZEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiB9ID0gcmVjdXJzaXZlRGVmaW5pdGlvblV0aWxpdGllcyxcbiAgICAgIHsgZmluZFJ1bGUsIHJlZHVjZWRSdWxlRnJvbVJ1bGUsIHJlcGVhdGVkUnVsZUZyb21SdWxlLCByZXdyaXR0ZW5SdWxlRnJvbVJ1bGUgfSA9IHJ1bGVVdGlsaXRpZXMsXG4gICAgICB7IGlzRGVmaW5pdGlvblVuYXJ5LCBpc0RlZmluaXRpb25Db21wbGV4LCByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIH0gPSBkZWZpbml0aW9uVXRpbGl0aWVzO1xuXG5jbGFzcyBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gZXh0ZW5kcyBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHBhcnRzLCBydWxlTmFtZSwgZGVmaW5pdGlvbiwgcmVjdXJzaXZlUnVsZU5hbWVzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICBzdXBlcihwYXJ0cywgcnVsZU5hbWUsIGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgICB0aGlzLmltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbiAgfVxuXG4gIGdldEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG4gIH1cblxuICByZXdyaXRlKHJ1bGVzKSB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSB0aGlzLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSB0aGlzLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gdGhpcywgLy8vXG4gICAgICAgICAgcmV3cml0dGVuRGVmaW5pdGlvbiA9IFJld3JpdHRlbkRlZmluaXRpb24uZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIHJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZW1lbnREZWZpbml0aW9uLCByZXdyaXR0ZW5EZWZpbml0aW9uKTtcblxuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IHRoaXMuZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgICAgcmVwZWF0ZWREZWZpbml0aW9uID0gUmVwZWF0ZWREZWZpbml0aW9uLmZyb21MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiksXG4gICAgICAgICAgcmVwZWF0ZWRSdWxlID0gcmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZShsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIHJ1bGVzKTtcblxuICAgIHJlcGVhdGVkUnVsZS5hZGREZWZpbml0aW9uKHJlcGVhdGVkRGVmaW5pdGlvbik7XG5cbiAgICBjb25zdCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSB0aGlzLmdldEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpLFxuICAgICAgICAgIGRlZmluaXRpb24gPSBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0RGVmaW5pdGlvbigpLFxuICAgICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsICAvLy9cbiAgICAgICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUgPSBmaW5kUnVsZShpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgcmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlID0gcmVkdWNlZFJ1bGVGcm9tUnVsZShpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUsIHJ1bGVzKTtcblxuICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUnVsZS5hZGREZWZpbml0aW9uKGRlZmluaXRpb24sIC0xKTtcblxuICAgIHJlZHVjZWRMZWZ0UmVjdXJzaXZlUnVsZS5yZW1vdmVEZWZpbml0aW9uKGRlZmluaXRpb24pO1xuXG4gICAgY29uc3QgcmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IHJlZHVjZWRMZWZ0UmVjdXJzaXZlUnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgcmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSBSdWxlTmFtZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lKHJlZHVjZWRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLmFkZERlZmluaXRpb24ocmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24pO1xuXG4gICAgY29uc3QgcmVkdWNlZExlZnRSZWN1cnNpdmVSdWxlRW1wdHkgPSByZWR1Y2VkTGVmdFJlY3Vyc2l2ZVJ1bGUuaXNFbXB0eSgpO1xuXG4gICAgLy8gaWYgKHJlZHVjZWRMZWZ0UmVjdXJzaXZlUnVsZUVtcHR5KSB7XG4gICAgLy8gICBjb25zdCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gaW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlLmdldE5hbWUoKTtcbiAgICAvL1xuICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJyR7aW1wbGljaXRseUxlZnRSZWN1cnNpdmVSdWxlTmFtZX0nIHJ1bGUgaGFzIG5vIG5vbi1yZWN1cnNpdmUgZGVmaW5pdGlvbnMgYW5kIHRoZXJlZm9yZSBjYW5ub3QgYmUgcmV3cml0dGVuLmApO1xuICAgIC8vIH1cbiAgfVxuXG4gIHN0YXRpYyBmcm9tUnVsZU5hbWVEZWZpbml0aW9uQW5kUmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZU5hbWUsIGRlZmluaXRpb24sIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gICAgbGV0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgICBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgICBpZiAoZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGNvbnN0IGZpcnN0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gZmlyc3QobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyksXG4gICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSwgLy8vXG4gICAgICAgICAgICBydWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgICAgaWYgKCFydWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSkge1xuICAgICAgICBjb25zdCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgICAgIGlmIChpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uVW5hcnkgPSBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uVW5hcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25TdHJpbmcgPSBkZWZpbml0aW9uLmFzU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlICcke2RlZmluaXRpb25TdHJpbmd9JyBpbmRpcmVjdGx5IGxlZnQgcmVjdXJzaXZlIGRlZmluaXRpb24gb2YgdGhlICcke3J1bGVOYW1lfScgcnVsZSBpcyB1bmFyeSBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSByZXdyaXR0ZW4uYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZGVmaW5pdGlvbkNvbXBsZXggPSBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pO1xuXG4gICAgICAgICAgaWYgKGRlZmluaXRpb25Db21wbGV4KSB7XG4gICAgICAgICAgICBjb25zdCBkZWZpbml0aW9uU3RyaW5nID0gZGVmaW5pdGlvbi5hc1N0cmluZygpO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAnJHtkZWZpbml0aW9uU3RyaW5nfScgaW5kaXJlY3RseSBsZWZ0IHJlY3Vyc2l2ZSBkZWZpbml0aW9uIG9mIHRoZSAnJHtydWxlTmFtZX0nIHJ1bGUgaXMgY29tcGxleCBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSByZXdyaXR0ZW4uYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZGVsdGFQYXJ0ID0gbmV3IERlbHRhUGFydCgpLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gW1xuICAgICAgICAgICAgICAgICAgZGVsdGFQYXJ0XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKTtcblxuICAgICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG5ldyBJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocGFydHMsIHJ1bGVOYW1lLCBkZWZpbml0aW9uLCByZWN1cnNpdmVSdWxlTmFtZXMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMsIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xuIl19