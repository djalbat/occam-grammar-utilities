"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _necessary = require("necessary");

var _leftRecursive = _interopRequireDefault(require("../../definition/leftRecursive"));

var _types = require("../../types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var first = _necessary.arrayUtilities.first;

var ImplicitlyLeftRecursiveDefinition = /*#__PURE__*/function (_LeftRecursiveDefinit) {
  _inherits(ImplicitlyLeftRecursiveDefinition, _LeftRecursiveDefinit);

  var _super = _createSuper(ImplicitlyLeftRecursiveDefinition);

  function ImplicitlyLeftRecursiveDefinition(type, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, leftRecursiveDefinition) {
    var _this;

    _classCallCheck(this, ImplicitlyLeftRecursiveDefinition);

    _this = _super.call(this, type, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames);
    _this.leftRecursiveDefinition = leftRecursiveDefinition;
    return _this;
  }

  _createClass(ImplicitlyLeftRecursiveDefinition, [{
    key: "getLeftRecursiveDefinition",
    value: function getLeftRecursiveDefinition() {
      this.leftRecursiveDefinition = leftRecursiveDefinition;
    }
  }, {
    key: "replace",
    value: function replace(ruleMap) {
      var rule = ruleMap[this.ruleName] || null,
          replacedDefinition = this.leftRecursiveDefinition,
          ///
      replacementDefinition = this; ///

      rule.replaceDefinition(replacedDefinition, replacementDefinition);
    }
  }], [{
    key: "fromRuleNameLeftRecursiveRuleNameAndRecursiveDefinitions",
    value: function fromRuleNameLeftRecursiveRuleNameAndRecursiveDefinitions(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
      var implicitlyLeftRecursiveDefinition = null;
      var leftRecursiveDefinition = findLeftRecursiveDefinition(ruleName, leftRecursiveRuleName, recursiveDefinitions);

      if (leftRecursiveDefinition !== null) {
        var type = _types.IMPLICITLY_LEFT_RECURSIVE_TYPE,
            parts = leftRecursiveDefinition.getParts(),
            _ruleName = leftRecursiveDefinition.getRuleName(),
            definition = null,
            ///
        recursiveRuleNames = leftRecursiveDefinition.getRecursiveRuleNames(),
            leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames();

        implicitlyLeftRecursiveDefinition = new ImplicitlyLeftRecursiveDefinition(type, parts, _ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, leftRecursiveDefinition);
      }

      return implicitlyLeftRecursiveDefinition;
    }
  }]);

  return ImplicitlyLeftRecursiveDefinition;
}(_leftRecursive["default"]);

exports["default"] = ImplicitlyLeftRecursiveDefinition;

function findLeftRecursiveDefinition(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinition = null;
  var leftRecursiveDefinitionsPath = findLeftRecursiveDefinitionsPath(ruleName, leftRecursiveRuleName, recursiveDefinitions);

  if (leftRecursiveDefinitionsPath !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsPath);
    leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return leftRecursiveDefinition;
}

function findRecursiveDefinitionsPath(ruleName, recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsPath = null;
  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameRecursiveRuleName) {
      recursiveDefinitionsPath = recursiveDefinitions.slice(index);
      return true;
    }
  });
  return recursiveDefinitionsPath;
}

function findLeftRecursiveDefinitionsPath(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinitionsPath = null;
  var recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsPath = findRecursiveDefinitionsPath(ruleName, recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsPath !== null) {
    var recursiveDefinitionsPathLeftRecursive = isRecursiveDefinitionsPathLeftRecursive(ruleName, recursiveDefinitionsPath);

    if (recursiveDefinitionsPathLeftRecursive) {
      leftRecursiveDefinitionsPath = recursiveDefinitionsPath; ///
    }
  }

  return leftRecursiveDefinitionsPath;
}

function isRecursiveDefinitionsPathLeftRecursive(ruleName, recursiveDefinitionsPath) {
  var ruleNames = ruleNamesFromRuleNameAndRecursiveDefinitionsPath(ruleName, recursiveDefinitionsPath),
      recursiveDefinitionsPathLeftRecursive = recursiveDefinitionsPath.every(function (recursiveDefinition, index) {
    var type = recursiveDefinition.getType();

    if (type === _types.LEFT_RECURSIVE_TYPE) {
      var _ruleName2 = ruleNames[index],
          leftRecursiveRuleNames = recursiveDefinition.getLeftRecursiveRuleNames(),
          leftRecursiveRuleNamesIncludesRuleName = leftRecursiveRuleNames.includes(_ruleName2);

      if (leftRecursiveRuleNamesIncludesRuleName) {
        return true;
      }
    }
  });
  return recursiveDefinitionsPathLeftRecursive;
}

function ruleNamesFromRuleNameAndRecursiveDefinitionsPath(ruleName, recursiveDefinitionsPath) {
  var ruleNames = recursiveDefinitionsPath.map(function (recursiveDefinition) {
    return recursiveDefinition.getRuleName();
  });
  ruleNames.push(ruleName);
  var firstRuleName = ruleNames.shift(),
      lastRuleName = firstRuleName; ///

  ruleNames.push(lastRuleName);
  return ruleNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,