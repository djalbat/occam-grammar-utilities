"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _necessary = require("necessary");

var _leftRecursive = _interopRequireDefault(require("../../definition/leftRecursive"));

var _types = require("../../types");

var _rule = require("../../utilities/rule");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var first = _necessary.arrayUtilities.first;

var ImplicitlyLeftRecursiveDefinition = /*#__PURE__*/function (_LeftRecursiveDefinit) {
  _inherits(ImplicitlyLeftRecursiveDefinition, _LeftRecursiveDefinit);

  var _super = _createSuper(ImplicitlyLeftRecursiveDefinition);

  function ImplicitlyLeftRecursiveDefinition(type, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, leftRecursiveDefinition) {
    var _this;

    _classCallCheck(this, ImplicitlyLeftRecursiveDefinition);

    _this = _super.call(this, type, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames);
    _this.leftRecursiveDefinition = leftRecursiveDefinition;
    return _this;
  }

  _createClass(ImplicitlyLeftRecursiveDefinition, [{
    key: "getLeftRecursiveDefinition",
    value: function getLeftRecursiveDefinition() {
      this.leftRecursiveDefinition = leftRecursiveDefinition;
    }
  }, {
    key: "replace",
    value: function replace(rules) {
      var rule = (0, _rule.findRule)(this.ruleName, rules),
          replacedDefinition = this.leftRecursiveDefinition,
          ///
      replacementDefinition = this; ///

      rule.replaceDefinition(replacedDefinition, replacementDefinition);
    }
  }], [{
    key: "fromRuleNameLeftRecursiveRuleNameAndRecursiveDefinitions",
    value: function fromRuleNameLeftRecursiveRuleNameAndRecursiveDefinitions(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
      var implicitlyLeftRecursiveDefinition = null;
      var leftRecursiveDefinition = findLeftRecursiveDefinition(ruleName, leftRecursiveRuleName, recursiveDefinitions);

      if (leftRecursiveDefinition !== null) {
        var type = _types.IMPLICITLY_LEFT_RECURSIVE_TYPE,
            parts = leftRecursiveDefinition.getParts(),
            _ruleName = leftRecursiveDefinition.getRuleName(),
            definition = null,
            ///
        recursiveRuleNames = leftRecursiveDefinition.getRecursiveRuleNames(),
            leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames();

        implicitlyLeftRecursiveDefinition = new ImplicitlyLeftRecursiveDefinition(type, parts, _ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames, leftRecursiveDefinition);
      }

      return implicitlyLeftRecursiveDefinition;
    }
  }]);

  return ImplicitlyLeftRecursiveDefinition;
}(_leftRecursive["default"]);

exports["default"] = ImplicitlyLeftRecursiveDefinition;

function findLeftRecursiveDefinition(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinition = null;
  var leftRecursiveDefinitionsPath = findLeftRecursiveDefinitionsPath(ruleName, leftRecursiveRuleName, recursiveDefinitions);

  if (leftRecursiveDefinitionsPath !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsPath);
    leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return leftRecursiveDefinition;
}

function findRecursiveDefinitionsPath(ruleName, recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsPath = null;
  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameRecursiveRuleName) {
      recursiveDefinitionsPath = recursiveDefinitions.slice(index);
      return true;
    }
  });
  return recursiveDefinitionsPath;
}

function findLeftRecursiveDefinitionsPath(ruleName, leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinitionsPath = null;
  var recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsPath = findRecursiveDefinitionsPath(ruleName, recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsPath !== null) {
    var recursiveDefinitionsPathLeftRecursive = isRecursiveDefinitionsPathLeftRecursive(ruleName, recursiveDefinitionsPath);

    if (recursiveDefinitionsPathLeftRecursive) {
      leftRecursiveDefinitionsPath = recursiveDefinitionsPath; ///
    }
  }

  return leftRecursiveDefinitionsPath;
}

function isRecursiveDefinitionsPathLeftRecursive(ruleName, recursiveDefinitionsPath) {
  var ruleNames = ruleNamesFromRuleNameAndRecursiveDefinitionsPath(ruleName, recursiveDefinitionsPath),
      recursiveDefinitionsPathLeftRecursive = recursiveDefinitionsPath.every(function (recursiveDefinition, index) {
    var type = recursiveDefinition.getType();

    if (type === _types.LEFT_RECURSIVE_TYPE) {
      var _ruleName2 = ruleNames[index],
          leftRecursiveRuleNames = recursiveDefinition.getLeftRecursiveRuleNames(),
          leftRecursiveRuleNamesIncludesRuleName = leftRecursiveRuleNames.includes(_ruleName2);

      if (leftRecursiveRuleNamesIncludesRuleName) {
        return true;
      }
    }
  });
  return recursiveDefinitionsPathLeftRecursive;
}

function ruleNamesFromRuleNameAndRecursiveDefinitionsPath(ruleName, recursiveDefinitionsPath) {
  var ruleNames = recursiveDefinitionsPath.map(function (recursiveDefinition) {
    return recursiveDefinition.getRuleName();
  });
  ruleNames.push(ruleName);
  var firstRuleName = ruleNames.shift(),
      lastRuleName = firstRuleName; ///

  ruleNames.push(lastRuleName);
  return ruleNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxpY2l0bHkuanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsIkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInR5cGUiLCJwYXJ0cyIsInJ1bGVOYW1lIiwiZGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJ1bGVzIiwicnVsZSIsInJlcGxhY2VkRGVmaW5pdGlvbiIsInJlcGxhY2VtZW50RGVmaW5pdGlvbiIsInJlcGxhY2VEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJJTVBMSUNJVExZX0xFRlRfUkVDVVJTSVZFX1RZUEUiLCJnZXRQYXJ0cyIsImdldFJ1bGVOYW1lIiwiZ2V0UmVjdXJzaXZlUnVsZU5hbWVzIiwiZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsIkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aCIsImZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoIiwiZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgiLCJyZWN1cnNpdmVSdWxlTmFtZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aCIsInNvbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kZXgiLCJyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVSZWN1cnNpdmVSdWxlTmFtZSIsInNsaWNlIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoTGVmdFJlY3Vyc2l2ZSIsImlzUmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoTGVmdFJlY3Vyc2l2ZSIsInJ1bGVOYW1lcyIsInJ1bGVOYW1lc0Zyb21SdWxlTmFtZUFuZFJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aCIsImV2ZXJ5IiwiZ2V0VHlwZSIsIkxFRlRfUkVDVVJTSVZFX1RZUEUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzSW5jbHVkZXNSdWxlTmFtZSIsImluY2x1ZGVzIiwibWFwIiwicHVzaCIsImZpcnN0UnVsZU5hbWUiLCJzaGlmdCIsImxhc3RSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFUUEsSyxHQUFVQyx5QixDQUFWRCxLOztJQUVhRSxpQzs7Ozs7QUFDbkIsNkNBQVlDLElBQVosRUFBa0JDLEtBQWxCLEVBQXlCQyxRQUF6QixFQUFtQ0MsVUFBbkMsRUFBK0NDLGtCQUEvQyxFQUFtRUMsc0JBQW5FLEVBQTJGQyx1QkFBM0YsRUFBb0g7QUFBQTs7QUFBQTs7QUFDbEgsOEJBQU1OLElBQU4sRUFBWUMsS0FBWixFQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDQyxrQkFBekMsRUFBNkRDLHNCQUE3RDtBQUVBLFVBQUtDLHVCQUFMLEdBQStCQSx1QkFBL0I7QUFIa0g7QUFJbkg7Ozs7aURBRTRCO0FBQzNCLFdBQUtBLHVCQUFMLEdBQStCQSx1QkFBL0I7QUFDRDs7OzRCQUVPQyxLLEVBQU87QUFDYixVQUFNQyxJQUFJLEdBQUcsb0JBQVMsS0FBS04sUUFBZCxFQUF3QkssS0FBeEIsQ0FBYjtBQUFBLFVBQ01FLGtCQUFrQixHQUFHLEtBQUtILHVCQURoQztBQUFBLFVBQzBEO0FBQ3BESSxNQUFBQSxxQkFBcUIsR0FBRyxJQUY5QixDQURhLENBR3VCOztBQUVwQ0YsTUFBQUEsSUFBSSxDQUFDRyxpQkFBTCxDQUF1QkYsa0JBQXZCLEVBQTJDQyxxQkFBM0M7QUFDRDs7OzZFQUUrRFIsUSxFQUFVVSxxQixFQUF1QkMsb0IsRUFBc0I7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bmVjZXNzYXJ5XCI7XG5cbmltcG9ydCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi4vLi4vZGVmaW5pdGlvbi9sZWZ0UmVjdXJzaXZlXCI7XG5cbmltcG9ydCB7IExFRlRfUkVDVVJTSVZFX1RZUEUsIElNUExJQ0lUTFlfTEVGVF9SRUNVUlNJVkVfVFlQRSB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5pbXBvcnQgeyBmaW5kUnVsZSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvcnVsZVwiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGV4dGVuZHMgTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBwYXJ0cywgcnVsZU5hbWUsIGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcywgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICBzdXBlcih0eXBlLCBwYXJ0cywgcnVsZU5hbWUsIGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgICB0aGlzLmxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG4gIH1cblxuICBnZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbigpIHtcbiAgICB0aGlzLmxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG4gIH1cblxuICByZXBsYWNlKHJ1bGVzKSB7XG4gICAgY29uc3QgcnVsZSA9IGZpbmRSdWxlKHRoaXMucnVsZU5hbWUsIHJ1bGVzKSxcbiAgICAgICAgICByZXBsYWNlZERlZmluaXRpb24gPSB0aGlzLmxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gdGhpczsgLy8vXG5cbiAgICBydWxlLnJlcGxhY2VEZWZpbml0aW9uKHJlcGxhY2VkRGVmaW5pdGlvbiwgcmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWVBbmRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICAgIGxldCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCB0eXBlID0gSU1QTElDSVRMWV9MRUZUX1JFQ1VSU0lWRV9UWVBFLFxuICAgICAgICAgICAgcGFydHMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICAgICAgcnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgICAgZGVmaW5pdGlvbiA9IG51bGwsIC8vL1xuICAgICAgICAgICAgcmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UmVjdXJzaXZlUnVsZU5hbWVzKCksXG4gICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcygpO1xuXG4gICAgICBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBuZXcgSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKHR5cGUsIHBhcnRzLCBydWxlTmFtZSwgZGVmaW5pdGlvbiwgcmVjdXJzaXZlUnVsZU5hbWVzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoID0gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoICE9PSBudWxsKSB7XG4gICAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgpO1xuXG4gICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgfVxuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gZmluZFJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aChydWxlTmFtZSwgcmVjdXJzaXZlUnVsZU5hbWUsIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggPSBudWxsO1xuXG4gIHJlY3Vyc2l2ZURlZmluaXRpb25zLnNvbWUoKHJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZVJlY3Vyc2l2ZVJ1bGVOYW1lID0gKHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9PT0gcmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZVJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggPSByZWN1cnNpdmVEZWZpbml0aW9ucy5zbGljZShpbmRleCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aDtcbn1cblxuZnVuY3Rpb24gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggPSBudWxsO1xuXG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAgLy8vXG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggPSBmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoKHJ1bGVOYW1lLCByZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggIT09IG51bGwpIHtcbiAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGhMZWZ0UmVjdXJzaXZlID0gaXNSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGhMZWZ0UmVjdXJzaXZlKHJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aExlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGggPSByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGg7ICAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUGF0aDtcbn1cblxuZnVuY3Rpb24gaXNSZWN1cnNpdmVEZWZpbml0aW9uc1BhdGhMZWZ0UmVjdXJzaXZlKHJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgpIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbVJ1bGVOYW1lQW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoKHJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgpLFxuICAgICAgICByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGhMZWZ0UmVjdXJzaXZlID0gcmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoLmV2ZXJ5KChyZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSByZWN1cnNpdmVEZWZpbml0aW9uLmdldFR5cGUoKTtcblxuICAgICAgICAgIGlmICh0eXBlID09PSBMRUZUX1JFQ1VSU0lWRV9UWVBFKSB7XG4gICAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lc1tpbmRleF0sXG4gICAgICAgICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKCksXG4gICAgICAgICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzSW5jbHVkZXNSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMuaW5jbHVkZXMocnVsZU5hbWUpO1xuXG4gICAgICAgICAgICBpZiAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZnVuY3Rpb24gcnVsZU5hbWVzRnJvbVJ1bGVOYW1lQW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoKHJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9uc1BhdGgpIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gcmVjdXJzaXZlRGVmaW5pdGlvbnNQYXRoLm1hcCgocmVjdXJzaXZlRGVmaW5pdGlvbikgPT4gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpKTtcblxuICBydWxlTmFtZXMucHVzaChydWxlTmFtZSk7XG5cbiAgY29uc3QgZmlyc3RSdWxlTmFtZSA9IHJ1bGVOYW1lcy5zaGlmdCgpLFxuICAgICAgICBsYXN0UnVsZU5hbWUgPSBmaXJzdFJ1bGVOYW1lOyAvLy9cblxuICBydWxlTmFtZXMucHVzaChsYXN0UnVsZU5hbWUpO1xuXG4gIHJldHVybiBydWxlTmFtZXM7XG59XG4iXX0=