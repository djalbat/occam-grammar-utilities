'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var necessary = require('necessary');

var types = require('../../types'),
    LeftRecursiveDefinition = require('../../definition/leftRecursive');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    LEFT_RECURSIVE_TYPE = types.LEFT_RECURSIVE_TYPE,
    IMPLICITLY_LEFT_RECURSIVE_TYPE = types.IMPLICITLY_LEFT_RECURSIVE_TYPE;

var ImplicitlyLeftRecursiveDefinition = function (_LeftRecursiveDefinit) {
  _inherits(ImplicitlyLeftRecursiveDefinition, _LeftRecursiveDefinit);

  function ImplicitlyLeftRecursiveDefinition() {
    _classCallCheck(this, ImplicitlyLeftRecursiveDefinition);

    return _possibleConstructorReturn(this, (ImplicitlyLeftRecursiveDefinition.__proto__ || Object.getPrototypeOf(ImplicitlyLeftRecursiveDefinition)).apply(this, arguments));
  }

  _createClass(ImplicitlyLeftRecursiveDefinition, null, [{
    key: 'fromLeftRecursiveRuleNameAndRecursiveDefinitions',
    value: function fromLeftRecursiveRuleNameAndRecursiveDefinitions(leftRecursiveRuleName, recursiveDefinitions) {
      var implicitlyLeftRecursiveDefinition = null;

      var leftRecursiveDefinition = findLeftRecursiveDefinition(leftRecursiveRuleName, recursiveDefinitions);

      if (leftRecursiveDefinition !== null) {
        var type = IMPLICITLY_LEFT_RECURSIVE_TYPE,
            parts = leftRecursiveDefinition.getParts(),
            ruleName = leftRecursiveDefinition.getRuleName(),
            definition = leftRecursiveDefinition,
            ///
        recursiveRuleNames = leftRecursiveDefinition.getRecursiveRuleNames(),
            leftRecursiveRuleNames = leftRecursiveDefinition.getLeftRecursiveRuleNames();

        implicitlyLeftRecursiveDefinition = new ImplicitlyLeftRecursiveDefinition(type, parts, ruleName, definition, recursiveRuleNames, leftRecursiveRuleNames);
      }

      return implicitlyLeftRecursiveDefinition;
    }
  }]);

  return ImplicitlyLeftRecursiveDefinition;
}(LeftRecursiveDefinition);

module.exports = ImplicitlyLeftRecursiveDefinition;

function findLeftRecursiveDefinition(leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinition = null;

  var leftRecursiveDefinitionsPath = findLeftRecursiveDefinitionsPath(leftRecursiveRuleName, recursiveDefinitions);

  if (leftRecursiveDefinitionsPath !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsPath);

    leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return leftRecursiveDefinition;
}

function findRecursiveDefinitionsPath(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsPath = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameRecursiveRuleName) {
      recursiveDefinitionsPath = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsPath;
}

function findLeftRecursiveDefinitionsPath(leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinitionsPath = null;

  var recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsPath = findRecursiveDefinitionsPath(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsPath !== null) {
    var recursiveDefinitionsPathLeftRecursive = isRecursiveDefinitionsPathLeftRecursive(recursiveDefinitionsPath);

    if (recursiveDefinitionsPathLeftRecursive) {
      leftRecursiveDefinitionsPath = recursiveDefinitionsPath; ///
    }
  }

  return leftRecursiveDefinitionsPath;
}

function isRecursiveDefinitionsPathLeftRecursive(recursiveDefinitionsPath) {
  var recursiveDefinitionsPathLeftRecursive = recursiveDefinitionsPath.every(function (recursiveDefinition) {
    var type = recursiveDefinition.getType();

    if (type === LEFT_RECURSIVE_TYPE) {
      return true;
    }
  });

  return recursiveDefinitionsPathLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,