"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneParts = cloneParts;
exports.singlePartFromParts = singlePartFromParts;
exports.repeatedPartFromParts = repeatedPartFromParts;
exports.recursiveRuleNamesFromParts = recursiveRuleNamesFromParts;
exports.leftRecursiveRuleNamesFromParts = leftRecursiveRuleNamesFromParts;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("./part");
var first = _necessary.arrayUtilities.first, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart;
function cloneParts(parts) {
    parts = parts.map(function(part) {
        return part.clone();
    }); ///
    return parts;
}
function singlePartFromParts(parts) {
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = first(parts), part = firstPart; ///
    (0, _part).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuL3BhcnRcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFplcm9Pck1vcmVQYXJ0c1BhcnQsIFNlcXVlbmNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQYXJ0cyhwYXJ0cykge1xuICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jbG9uZSgpKTsgIC8vL1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgbGV0IHNpbmdsZVBhcnQ7XG5cbiAgY29uc3QgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKHBhcnRzTGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpO1xuXG4gICAgc2luZ2xlUGFydCA9IGZpcnN0UGFydDsgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2VxdWVuY2VPZlBhcnRzUGFydCA9IG5ldyBTZXF1ZW5jZU9mUGFydHNQYXJ0KHBhcnRzKTtcblxuICAgIHNpbmdsZVBhcnQgPSBzZXF1ZW5jZU9mUGFydHNQYXJ0OyAvLy9cbiAgfVxuXG4gIHJldHVybiBzaW5nbGVQYXJ0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRQYXJ0RnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IHNpbmdsZVBhcnQgPSBzaW5nbGVQYXJ0RnJvbVBhcnRzKHBhcnRzKSxcbiAgICAgICAgcGFydCA9IHNpbmdsZVBhcnQsXG4gICAgICAgIHplcm9Pck1vcmVQYXJ0c1BhcnQgPSBuZXcgWmVyb09yTW9yZVBhcnRzUGFydChwYXJ0KSxcbiAgICAgICAgcmVwZWF0ZWRQYXJ0ID0gemVyb09yTW9yZVBhcnRzUGFydDsgIC8vL1xuXG4gIHJldHVybiByZXBlYXRlZFBhcnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gW107XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJjbG9uZVBhcnRzIiwic2luZ2xlUGFydEZyb21QYXJ0cyIsInJlcGVhdGVkUGFydEZyb21QYXJ0cyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiWmVyb09yTW9yZVBhcnRzUGFydCIsIlBhcnRzIiwiU2VxdWVuY2VPZlBhcnRzUGFydCIsInBhcnRzIiwibWFwIiwicGFydCIsImNsb25lIiwic2luZ2xlUGFydCIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RQYXJ0Iiwic2VxdWVuY2VPZlBhcnRzUGFydCIsInplcm9Pck1vcmVQYXJ0c1BhcnQiLCJyZXBlYXRlZFBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJmb3JFYWNoIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFTR0EsVUFBVSxHQUFWQSxVQUFVO1FBTVZDLG1CQUFtQixHQUFuQkEsbUJBQW1CO1FBa0JuQkMscUJBQXFCLEdBQXJCQSxxQkFBcUI7UUFTckJDLDJCQUEyQixHQUEzQkEsMkJBQTJCO1FBUTNCQywrQkFBK0IsR0FBL0JBLCtCQUErQjtBQWhEekIsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBQ04sSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBQ2lDLElBQUEsS0FBUSxXQUFSLFFBQVEsQ0FBQTtBQUVuRixJQUFNLEFBQUVDLEtBQUssR0FBS0MsVUFBYyxlQUFBLENBQXhCRCxLQUFLLEFBQW1CLEVBQ3hCRSxtQkFBbUIsR0FBMEJDLGFBQUssTUFBQSxDQUFsREQsbUJBQW1CLEVBQUVFLG1CQUFtQixHQUFLRCxhQUFLLE1BQUEsQ0FBN0JDLG1CQUFtQixBQUFXO0FBRXBELFNBQVNULFVBQVUsQ0FBQ1UsS0FBSyxFQUFFO0lBQ2hDQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLFNBQUNDLElBQUk7ZUFBS0EsSUFBSSxDQUFDQyxLQUFLLEVBQUU7S0FBQSxDQUFDLENBQUMsQ0FBRSxHQUFHO0lBRS9DLE9BQU9ILEtBQUssQ0FBQztDQUNkO0FBRU0sU0FBU1QsbUJBQW1CLENBQUNTLEtBQUssRUFBRTtJQUN6QyxJQUFJSSxVQUFVLEFBQUM7SUFFZixJQUFNQyxXQUFXLEdBQUdMLEtBQUssQ0FBQ00sTUFBTSxBQUFDO0lBRWpDLElBQUlELFdBQVcsS0FBSyxDQUFDLEVBQUU7UUFDckIsSUFBTUUsU0FBUyxHQUFHWixLQUFLLENBQUNLLEtBQUssQ0FBQyxBQUFDO1FBRS9CSSxVQUFVLEdBQUdHLFNBQVMsQ0FBQyxDQUFDLEdBQUc7S0FDNUIsTUFBTTtRQUNMLElBQU1DLG1CQUFtQixHQUFHLElBQUlULG1CQUFtQixDQUFDQyxLQUFLLENBQUMsQUFBQztRQUUzREksVUFBVSxHQUFHSSxtQkFBbUIsQ0FBQyxDQUFDLEdBQUc7S0FDdEM7SUFFRCxPQUFPSixVQUFVLENBQUM7Q0FDbkI7QUFFTSxTQUFTWixxQkFBcUIsQ0FBQ1EsS0FBSyxFQUFFO0lBQzNDLElBQU1JLFVBQVUsR0FBR2IsbUJBQW1CLENBQUNTLEtBQUssQ0FBQyxFQUN2Q0UsSUFBSSxHQUFHRSxVQUFVLEVBQ2pCSyxtQkFBbUIsR0FBRyxJQUFJWixtQkFBbUIsQ0FBQ0ssSUFBSSxDQUFDLEVBQ25EUSxZQUFZLEdBQUdELG1CQUFtQixBQUFDLEVBQUUsR0FBRztJQUU5QyxPQUFPQyxZQUFZLENBQUM7Q0FDckI7QUFFTSxTQUFTakIsMkJBQTJCLENBQUNPLEtBQUssRUFBRTtJQUNqRCxJQUFNVyxrQkFBa0IsR0FBRyxFQUFFLEFBQUM7SUFFOUJYLEtBQUssQ0FBQ1ksT0FBTyxDQUFDLFNBQUNWLElBQUk7ZUFBS1csQ0FBQUEsR0FBQUEsS0FBMEIsQUFBMEIsQ0FBQSwyQkFBMUIsQ0FBQ1gsSUFBSSxFQUFFUyxrQkFBa0IsQ0FBQztLQUFBLENBQUMsQ0FBQztJQUU5RSxPQUFPQSxrQkFBa0IsQ0FBQztDQUMzQjtBQUVNLFNBQVNqQiwrQkFBK0IsQ0FBQ00sS0FBSyxFQUFFO0lBQ3JELElBQU1jLHNCQUFzQixHQUFHLEVBQUUsRUFDM0JQLFNBQVMsR0FBR1osS0FBSyxDQUFDSyxLQUFLLENBQUMsRUFDeEJFLElBQUksR0FBR0ssU0FBUyxBQUFDLEVBQUMsR0FBRztJQUUzQlEsQ0FBQUEsR0FBQUEsS0FBOEIsQUFBOEIsQ0FBQSwrQkFBOUIsQ0FBQ2IsSUFBSSxFQUFFWSxzQkFBc0IsQ0FBQyxDQUFDO0lBRTdELE9BQU9BLHNCQUFzQixDQUFDO0NBQy9CIn0=