"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cloneParts: function() {
        return cloneParts;
    },
    arePartsRecursive: function() {
        return arePartsRecursive;
    },
    singlePartFromParts: function() {
        return singlePartFromParts;
    },
    arePartsLeftRecursive: function() {
        return arePartsLeftRecursive;
    },
    repeatedPartFromParts: function() {
        return repeatedPartFromParts;
    },
    recursiveRuleNamesFromParts: function() {
        return recursiveRuleNamesFromParts;
    },
    leftRecursiveRuleNamesFromParts: function() {
        return leftRecursiveRuleNamesFromParts;
    }
});
var _occamParsers = require("occam-parsers");
var _array = require("../utilities/array");
var _part = require("./part");
var SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart;
function cloneParts(parts) {
    parts = parts.map(function(part) {
        return part.clone();
    }); ///
    return parts;
}
function arePartsRecursive(parts) {
    var recursiveRuleNames = recursiveRuleNamesFromParts(parts), recursiveRuleNamesLength = recursiveRuleNames.length, partsRecursive = recursiveRuleNamesLength > 0;
    return partsRecursive;
}
function singlePartFromParts(parts) {
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function arePartsLeftRecursive(parts) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromParts(parts), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, partsLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return partsLeftRecursive;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part.recursiveRuleNamesFromPart)(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = (0, _array.first)(parts), part = firstPart; ///
    (0, _part.leftRecursiveRuleNamesFromPart)(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gZnJvbSBcIi4vcGFydFwiO1xuXG5jb25zdCB7IFNlcXVlbmNlT2ZQYXJ0c1BhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQYXJ0cyhwYXJ0cykge1xuICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jbG9uZSgpKTsgIC8vL1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IHJlY3Vyc2l2ZVJ1bGVOYW1lcy5sZW5ndGgsXG4gICAgICAgIHBhcnRzUmVjdXJzaXZlID0gKHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBwYXJ0c1JlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgbGV0IHNpbmdsZVBhcnQ7XG5cbiAgY29uc3QgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKHBhcnRzTGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpO1xuXG4gICAgc2luZ2xlUGFydCA9IGZpcnN0UGFydDsgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2VxdWVuY2VPZlBhcnRzUGFydCA9IG5ldyBTZXF1ZW5jZU9mUGFydHNQYXJ0KHBhcnRzKTtcblxuICAgIHNpbmdsZVBhcnQgPSBzZXF1ZW5jZU9mUGFydHNQYXJ0OyAvLy9cbiAgfVxuXG4gIHJldHVybiBzaW5nbGVQYXJ0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBwYXJ0c0xlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBwYXJ0c0xlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZFBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3Qgc2luZ2xlUGFydCA9IHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpLFxuICAgICAgICBwYXJ0ID0gc2luZ2xlUGFydCxcbiAgICAgICAgemVyb09yTW9yZVBhcnRzUGFydCA9IG5ldyBaZXJvT3JNb3JlUGFydHNQYXJ0KHBhcnQpLFxuICAgICAgICByZXBlYXRlZFBhcnQgPSB6ZXJvT3JNb3JlUGFydHNQYXJ0OyAgLy8vXG5cbiAgcmV0dXJuIHJlcGVhdGVkUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCByZWN1cnNpdmVSdWxlTmFtZXMpKTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImNsb25lUGFydHMiLCJhcmVQYXJ0c1JlY3Vyc2l2ZSIsInNpbmdsZVBhcnRGcm9tUGFydHMiLCJhcmVQYXJ0c0xlZnRSZWN1cnNpdmUiLCJyZXBlYXRlZFBhcnRGcm9tUGFydHMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwiU2VxdWVuY2VPZlBhcnRzUGFydCIsIlBhcnRzIiwiWmVyb09yTW9yZVBhcnRzUGFydCIsInBhcnRzIiwibWFwIiwicGFydCIsImNsb25lIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwicGFydHNSZWN1cnNpdmUiLCJzaW5nbGVQYXJ0IiwicGFydHNMZW5ndGgiLCJmaXJzdFBhcnQiLCJmaXJzdCIsInNlcXVlbmNlT2ZQYXJ0c1BhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsInplcm9Pck1vcmVQYXJ0c1BhcnQiLCJyZXBlYXRlZFBhcnQiLCJmb3JFYWNoIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNnQkEsVUFBVTtlQUFWQTs7SUFNQUMsaUJBQWlCO2VBQWpCQTs7SUFRQUMsbUJBQW1CO2VBQW5CQTs7SUFrQkFDLHFCQUFxQjtlQUFyQkE7O0lBUUFDLHFCQUFxQjtlQUFyQkE7O0lBU0FDLDJCQUEyQjtlQUEzQkE7O0lBUUFDLCtCQUErQjtlQUEvQkE7Ozs0QkFoRU07cUJBRUE7b0JBQ3FEO0FBRTNFLElBQVFDLHNCQUE2Q0MsbUJBQUssQ0FBbERELHFCQUFxQkUsc0JBQXdCRCxtQkFBSyxDQUE3QkM7QUFFdEIsU0FBU1QsV0FBV1UsS0FBSyxFQUFFO0lBQ2hDQSxRQUFRQSxNQUFNQyxHQUFHLENBQUMsU0FBQ0M7ZUFBU0EsS0FBS0MsS0FBSztRQUFNLEdBQUc7SUFFL0MsT0FBT0g7QUFDVDtBQUVPLFNBQVNULGtCQUFrQlMsS0FBSyxFQUFFO0lBQ3ZDLElBQU1JLHFCQUFxQlQsNEJBQTRCSyxRQUNqREssMkJBQTJCRCxtQkFBbUJFLE1BQU0sRUFDcERDLGlCQUFrQkYsMkJBQTJCO0lBRW5ELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZixvQkFBb0JRLEtBQUssRUFBRTtJQUN6QyxJQUFJUTtJQUVKLElBQU1DLGNBQWNULE1BQU1NLE1BQU07SUFFaEMsSUFBSUcsZ0JBQWdCLEdBQUc7UUFDckIsSUFBTUMsWUFBWUMsSUFBQUEsWUFBSyxFQUFDWDtRQUV4QlEsYUFBYUUsV0FBVyxHQUFHO0lBQzdCLE9BQU87UUFDTCxJQUFNRSxzQkFBc0IsSUFBSWYsb0JBQW9CRztRQUVwRFEsYUFBYUkscUJBQXFCLEdBQUc7SUFDdkMsQ0FBQztJQUVELE9BQU9KO0FBQ1Q7QUFFTyxTQUFTZixzQkFBc0JPLEtBQUssRUFBRTtJQUMzQyxJQUFNYSx5QkFBeUJqQixnQ0FBZ0NJLFFBQ3pEYywrQkFBK0JELHVCQUF1QlAsTUFBTSxFQUM1RFMscUJBQXNCRCwrQkFBK0I7SUFFM0QsT0FBT0M7QUFDVDtBQUVPLFNBQVNyQixzQkFBc0JNLEtBQUssRUFBRTtJQUMzQyxJQUFNUSxhQUFhaEIsb0JBQW9CUSxRQUNqQ0UsT0FBT00sWUFDUFEsc0JBQXNCLElBQUlqQixvQkFBb0JHLE9BQzlDZSxlQUFlRCxxQkFBc0IsR0FBRztJQUU5QyxPQUFPQztBQUNUO0FBRU8sU0FBU3RCLDRCQUE0QkssS0FBSyxFQUFFO0lBQ2pELElBQU1JLHFCQUFxQixFQUFFO0lBRTdCSixNQUFNa0IsT0FBTyxDQUFDLFNBQUNoQjtlQUFTaUIsSUFBQUEsZ0NBQTBCLEVBQUNqQixNQUFNRTs7SUFFekQsT0FBT0E7QUFDVDtBQUVPLFNBQVNSLGdDQUFnQ0ksS0FBSyxFQUFFO0lBQ3JELElBQU1hLHlCQUF5QixFQUFFLEVBQzNCSCxZQUFZQyxJQUFBQSxZQUFLLEVBQUNYLFFBQ2xCRSxPQUFPUSxXQUFXLEdBQUc7SUFFM0JVLElBQUFBLG9DQUE4QixFQUFDbEIsTUFBTVc7SUFFckMsT0FBT0E7QUFDVCJ9