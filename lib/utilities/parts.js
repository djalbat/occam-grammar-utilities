"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneParts = cloneParts;
exports.firstPartFromParts = firstPartFromParts;
exports.singlePartFromParts = singlePartFromParts;
exports.repeatedPartFromParts = repeatedPartFromParts;
exports.recursiveRuleNamesFromParts = recursiveRuleNamesFromParts;
exports.leftRecursiveRuleNamesFromParts = leftRecursiveRuleNamesFromParts;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("./part");
var tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart;
function cloneParts(parts) {
    parts = parts.map(function(part) {
        return part.clone();
    }); ///
    return parts;
}
function firstPartFromParts(parts) {
    var firstPart = first(parts);
    return firstPart;
}
function singlePartFromParts(parts) {
    parts = tail(parts); ///
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = first(parts), part = firstPart; ///
    (0, _part).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuL3BhcnRcIjtcblxuY29uc3QgeyB0YWlsLCBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFNlcXVlbmNlT2ZQYXJ0c1BhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQYXJ0cyhwYXJ0cykge1xuICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jbG9uZSgpKTsgIC8vL1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0UGFydEZyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyk7XG5cbiAgcmV0dXJuIGZpcnN0UGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgcGFydHMgPSB0YWlsKHBhcnRzKTsgIC8vL1xuXG4gIGxldCBzaW5nbGVQYXJ0O1xuXG4gIGNvbnN0IHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKTtcblxuICAgIHNpbmdsZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNlcXVlbmNlT2ZQYXJ0c1BhcnQgPSBuZXcgU2VxdWVuY2VPZlBhcnRzUGFydChwYXJ0cyk7XG5cbiAgICBzaW5nbGVQYXJ0ID0gc2VxdWVuY2VPZlBhcnRzUGFydDsgLy8vXG4gIH1cblxuICByZXR1cm4gc2luZ2xlUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUGFydEZyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBzaW5nbGVQYXJ0ID0gc2luZ2xlUGFydEZyb21QYXJ0cyhwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBzaW5nbGVQYXJ0LFxuICAgICAgICB6ZXJvT3JNb3JlUGFydHNQYXJ0ID0gbmV3IFplcm9Pck1vcmVQYXJ0c1BhcnQocGFydCksXG4gICAgICAgIHJlcGVhdGVkUGFydCA9IHplcm9Pck1vcmVQYXJ0c1BhcnQ7ICAvLy9cblxuICByZXR1cm4gcmVwZWF0ZWRQYXJ0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdO1xuXG4gIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcykpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiY2xvbmVQYXJ0cyIsImZpcnN0UGFydEZyb21QYXJ0cyIsInNpbmdsZVBhcnRGcm9tUGFydHMiLCJyZXBlYXRlZFBhcnRGcm9tUGFydHMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwidGFpbCIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJTZXF1ZW5jZU9mUGFydHNQYXJ0IiwiUGFydHMiLCJaZXJvT3JNb3JlUGFydHNQYXJ0IiwicGFydHMiLCJtYXAiLCJwYXJ0IiwiY2xvbmUiLCJmaXJzdFBhcnQiLCJzaW5nbGVQYXJ0IiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJzZXF1ZW5jZU9mUGFydHNQYXJ0IiwiemVyb09yTW9yZVBhcnRzUGFydCIsInJlcGVhdGVkUGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVNHQSxVQUFVLEdBQVZBLFVBQVU7UUFNVkMsa0JBQWtCLEdBQWxCQSxrQkFBa0I7UUFNbEJDLG1CQUFtQixHQUFuQkEsbUJBQW1CO1FBb0JuQkMscUJBQXFCLEdBQXJCQSxxQkFBcUI7UUFTckJDLDJCQUEyQixHQUEzQkEsMkJBQTJCO1FBUTNCQywrQkFBK0IsR0FBL0JBLCtCQUErQjtBQXhEekIsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBQ04sSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBQ2lDLElBQUEsS0FBUSxXQUFSLFFBQVEsQ0FBQTtBQUVuRixJQUFRQyxJQUFJLEdBQVlDLFVBQWMsZUFBQSxDQUE5QkQsSUFBSSxFQUFFRSxLQUFLLEdBQUtELFVBQWMsZUFBQSxDQUF4QkMsS0FBSyxFQUNYQyxtQkFBbUIsR0FBMEJDLGFBQUssTUFBQSxDQUFsREQsbUJBQW1CLEVBQUVFLG1CQUFtQixHQUFLRCxhQUFLLE1BQUEsQ0FBN0JDLG1CQUFtQixBQUFXO0FBRXBELFNBQVNYLFVBQVUsQ0FBQ1ksS0FBSyxFQUFFO0lBQ2hDQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLFNBQUNDLElBQUk7ZUFBS0EsSUFBSSxDQUFDQyxLQUFLLEVBQUU7S0FBQSxDQUFDLENBQUMsQ0FBRSxHQUFHO0lBRS9DLE9BQU9ILEtBQUssQ0FBQztDQUNkO0FBRU0sU0FBU1gsa0JBQWtCLENBQUNXLEtBQUssRUFBRTtJQUN4QyxJQUFNSSxTQUFTLEdBQUdSLEtBQUssQ0FBQ0ksS0FBSyxDQUFDLEFBQUM7SUFFL0IsT0FBT0ksU0FBUyxDQUFDO0NBQ2xCO0FBRU0sU0FBU2QsbUJBQW1CLENBQUNVLEtBQUssRUFBRTtJQUN6Q0EsS0FBSyxHQUFHTixJQUFJLENBQUNNLEtBQUssQ0FBQyxDQUFDLENBQUUsR0FBRztJQUV6QixJQUFJSyxVQUFVLEFBQUM7SUFFZixJQUFNQyxXQUFXLEdBQUdOLEtBQUssQ0FBQ08sTUFBTSxBQUFDO0lBRWpDLElBQUlELFdBQVcsS0FBSyxDQUFDLEVBQUU7UUFDckIsSUFBTUYsU0FBUyxHQUFHUixLQUFLLENBQUNJLEtBQUssQ0FBQyxBQUFDO1FBRS9CSyxVQUFVLEdBQUdELFNBQVMsQ0FBQyxDQUFDLEdBQUc7S0FDNUIsTUFBTTtRQUNMLElBQU1JLG1CQUFtQixHQUFHLElBQUlYLG1CQUFtQixDQUFDRyxLQUFLLENBQUMsQUFBQztRQUUzREssVUFBVSxHQUFHRyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUc7S0FDdEM7SUFFRCxPQUFPSCxVQUFVLENBQUM7Q0FDbkI7QUFFTSxTQUFTZCxxQkFBcUIsQ0FBQ1MsS0FBSyxFQUFFO0lBQzNDLElBQU1LLFVBQVUsR0FBR2YsbUJBQW1CLENBQUNVLEtBQUssQ0FBQyxFQUN2Q0UsSUFBSSxHQUFHRyxVQUFVLEVBQ2pCSSxtQkFBbUIsR0FBRyxJQUFJVixtQkFBbUIsQ0FBQ0csSUFBSSxDQUFDLEVBQ25EUSxZQUFZLEdBQUdELG1CQUFtQixBQUFDLEVBQUUsR0FBRztJQUU5QyxPQUFPQyxZQUFZLENBQUM7Q0FDckI7QUFFTSxTQUFTbEIsMkJBQTJCLENBQUNRLEtBQUssRUFBRTtJQUNqRCxJQUFNVyxrQkFBa0IsR0FBRyxFQUFFLEFBQUM7SUFFOUJYLEtBQUssQ0FBQ1ksT0FBTyxDQUFDLFNBQUNWLElBQUk7ZUFBS1csQ0FBQUEsR0FBQUEsS0FBMEIsQUFBMEIsQ0FBQSwyQkFBMUIsQ0FBQ1gsSUFBSSxFQUFFUyxrQkFBa0IsQ0FBQztLQUFBLENBQUMsQ0FBQztJQUU5RSxPQUFPQSxrQkFBa0IsQ0FBQztDQUMzQjtBQUVNLFNBQVNsQiwrQkFBK0IsQ0FBQ08sS0FBSyxFQUFFO0lBQ3JELElBQU1jLHNCQUFzQixHQUFHLEVBQUUsRUFDM0JWLFNBQVMsR0FBR1IsS0FBSyxDQUFDSSxLQUFLLENBQUMsRUFDeEJFLElBQUksR0FBR0UsU0FBUyxBQUFDLEVBQUMsR0FBRztJQUUzQlcsQ0FBQUEsR0FBQUEsS0FBOEIsQUFBOEIsQ0FBQSwrQkFBOUIsQ0FBQ2IsSUFBSSxFQUFFWSxzQkFBc0IsQ0FBQyxDQUFDO0lBRTdELE9BQU9BLHNCQUFzQixDQUFDO0NBQy9CIn0=