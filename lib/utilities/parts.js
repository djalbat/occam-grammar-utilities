"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        get: all[name],
        enumerable: true
    });
}
_export(exports, {
    cloneParts: function() {
        return cloneParts;
    },
    firstPartFromParts: function() {
        return firstPartFromParts;
    },
    leftRecursiveRuleNamesFromParts: function() {
        return leftRecursiveRuleNamesFromParts;
    },
    recursiveRuleNamesFromParts: function() {
        return recursiveRuleNamesFromParts;
    },
    repeatedPartFromParts: function() {
        return repeatedPartFromParts;
    },
    singlePartFromParts: function() {
        return singlePartFromParts;
    }
});
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("./part");
var tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart;
function cloneParts(parts) {
    parts = parts.map(function(part) {
        return part.clone();
    }); ///
    return parts;
}
function firstPartFromParts(parts) {
    var firstPart = first(parts);
    return firstPart;
}
function singlePartFromParts(parts) {
    parts = tail(parts); ///
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part.recursiveRuleNamesFromPart)(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = first(parts), part = firstPart; ///
    (0, _part.leftRecursiveRuleNamesFromPart)(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuL3BhcnRcIjtcblxuY29uc3QgeyB0YWlsLCBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFNlcXVlbmNlT2ZQYXJ0c1BhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQYXJ0cyhwYXJ0cykge1xuICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jbG9uZSgpKTsgIC8vL1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0UGFydEZyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyk7XG5cbiAgcmV0dXJuIGZpcnN0UGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgcGFydHMgPSB0YWlsKHBhcnRzKTsgIC8vL1xuXG4gIGxldCBzaW5nbGVQYXJ0O1xuXG4gIGNvbnN0IHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKTtcblxuICAgIHNpbmdsZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNlcXVlbmNlT2ZQYXJ0c1BhcnQgPSBuZXcgU2VxdWVuY2VPZlBhcnRzUGFydChwYXJ0cyk7XG5cbiAgICBzaW5nbGVQYXJ0ID0gc2VxdWVuY2VPZlBhcnRzUGFydDsgLy8vXG4gIH1cblxuICByZXR1cm4gc2luZ2xlUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUGFydEZyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBzaW5nbGVQYXJ0ID0gc2luZ2xlUGFydEZyb21QYXJ0cyhwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBzaW5nbGVQYXJ0LFxuICAgICAgICB6ZXJvT3JNb3JlUGFydHNQYXJ0ID0gbmV3IFplcm9Pck1vcmVQYXJ0c1BhcnQocGFydCksXG4gICAgICAgIHJlcGVhdGVkUGFydCA9IHplcm9Pck1vcmVQYXJ0c1BhcnQ7ICAvLy9cblxuICByZXR1cm4gcmVwZWF0ZWRQYXJ0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdO1xuXG4gIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcykpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiY2xvbmVQYXJ0cyIsImZpcnN0UGFydEZyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJyZXBlYXRlZFBhcnRGcm9tUGFydHMiLCJzaW5nbGVQYXJ0RnJvbVBhcnRzIiwidGFpbCIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJTZXF1ZW5jZU9mUGFydHNQYXJ0IiwiUGFydHMiLCJaZXJvT3JNb3JlUGFydHNQYXJ0IiwicGFydHMiLCJtYXAiLCJwYXJ0IiwiY2xvbmUiLCJmaXJzdFBhcnQiLCJzaW5nbGVQYXJ0IiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJzZXF1ZW5jZU9mUGFydHNQYXJ0IiwiemVyb09yTW9yZVBhcnRzUGFydCIsInJlcGVhdGVkUGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7SUFTR0EsVUFBVTtlQUFWQSxVQUFVOztJQU1WQyxrQkFBa0I7ZUFBbEJBLGtCQUFrQjs7SUEyQ2xCQywrQkFBK0I7ZUFBL0JBLCtCQUErQjs7SUFSL0JDLDJCQUEyQjtlQUEzQkEsMkJBQTJCOztJQVQzQkMscUJBQXFCO2VBQXJCQSxxQkFBcUI7O0lBcEJyQkMsbUJBQW1CO2VBQW5CQSxtQkFBbUI7Ozs0QkFuQmIsZUFBZTt5QkFDTixXQUFXO29CQUNpQyxRQUFRO0FBRW5GLElBQVFDLElBQUksR0FBWUMsVUFBYyxlQUFBLENBQTlCRCxJQUFJLEVBQUVFLEtBQUssR0FBS0QsVUFBYyxlQUFBLENBQXhCQyxLQUFLLEVBQ1hDLG1CQUFtQixHQUEwQkMsYUFBSyxNQUFBLENBQWxERCxtQkFBbUIsRUFBRUUsbUJBQW1CLEdBQUtELGFBQUssTUFBQSxDQUE3QkMsbUJBQW1CLEFBQVc7QUFFcEQsU0FBU1gsVUFBVSxDQUFDWSxLQUFLLEVBQUU7SUFDaENBLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxHQUFHLENBQUMsU0FBQ0MsSUFBSTtlQUFLQSxJQUFJLENBQUNDLEtBQUssRUFBRTtLQUFBLENBQUMsQ0FBQyxDQUFFLEdBQUc7SUFFL0MsT0FBT0gsS0FBSyxDQUFDO0NBQ2Q7QUFFTSxTQUFTWCxrQkFBa0IsQ0FBQ1csS0FBSyxFQUFFO0lBQ3hDLElBQU1JLFNBQVMsR0FBR1IsS0FBSyxDQUFDSSxLQUFLLENBQUMsQUFBQztJQUUvQixPQUFPSSxTQUFTLENBQUM7Q0FDbEI7QUFFTSxTQUFTWCxtQkFBbUIsQ0FBQ08sS0FBSyxFQUFFO0lBQ3pDQSxLQUFLLEdBQUdOLElBQUksQ0FBQ00sS0FBSyxDQUFDLENBQUMsQ0FBRSxHQUFHO0lBRXpCLElBQUlLLFVBQVUsQUFBQztJQUVmLElBQU1DLFdBQVcsR0FBR04sS0FBSyxDQUFDTyxNQUFNLEFBQUM7SUFFakMsSUFBSUQsV0FBVyxLQUFLLENBQUMsRUFBRTtRQUNyQixJQUFNRixTQUFTLEdBQUdSLEtBQUssQ0FBQ0ksS0FBSyxDQUFDLEFBQUM7UUFFL0JLLFVBQVUsR0FBR0QsU0FBUyxDQUFDLENBQUMsR0FBRztLQUM1QixNQUFNO1FBQ0wsSUFBTUksbUJBQW1CLEdBQUcsSUFBSVgsbUJBQW1CLENBQUNHLEtBQUssQ0FBQyxBQUFDO1FBRTNESyxVQUFVLEdBQUdHLG1CQUFtQixDQUFDLENBQUMsR0FBRztLQUN0QztJQUVELE9BQU9ILFVBQVUsQ0FBQztDQUNuQjtBQUVNLFNBQVNiLHFCQUFxQixDQUFDUSxLQUFLLEVBQUU7SUFDM0MsSUFBTUssVUFBVSxHQUFHWixtQkFBbUIsQ0FBQ08sS0FBSyxDQUFDLEVBQ3ZDRSxJQUFJLEdBQUdHLFVBQVUsRUFDakJJLG1CQUFtQixHQUFHLElBQUlWLG1CQUFtQixDQUFDRyxJQUFJLENBQUMsRUFDbkRRLFlBQVksR0FBR0QsbUJBQW1CLEFBQUMsRUFBRSxHQUFHO0lBRTlDLE9BQU9DLFlBQVksQ0FBQztDQUNyQjtBQUVNLFNBQVNuQiwyQkFBMkIsQ0FBQ1MsS0FBSyxFQUFFO0lBQ2pELElBQU1XLGtCQUFrQixHQUFHLEVBQUUsQUFBQztJQUU5QlgsS0FBSyxDQUFDWSxPQUFPLENBQUMsU0FBQ1YsSUFBSTtlQUFLVyxJQUFBQSxLQUEwQiwyQkFBQSxFQUFDWCxJQUFJLEVBQUVTLGtCQUFrQixDQUFDO0tBQUEsQ0FBQyxDQUFDO0lBRTlFLE9BQU9BLGtCQUFrQixDQUFDO0NBQzNCO0FBRU0sU0FBU3JCLCtCQUErQixDQUFDVSxLQUFLLEVBQUU7SUFDckQsSUFBTWMsc0JBQXNCLEdBQUcsRUFBRSxFQUMzQlYsU0FBUyxHQUFHUixLQUFLLENBQUNJLEtBQUssQ0FBQyxFQUN4QkUsSUFBSSxHQUFHRSxTQUFTLEFBQUMsRUFBQyxHQUFHO0lBRTNCVyxJQUFBQSxLQUE4QiwrQkFBQSxFQUFDYixJQUFJLEVBQUVZLHNCQUFzQixDQUFDLENBQUM7SUFFN0QsT0FBT0Esc0JBQXNCLENBQUM7Q0FDL0IifQ==