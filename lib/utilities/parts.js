"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.singlePartFromParts = singlePartFromParts;
exports.repeatedPartFromParts = repeatedPartFromParts;
exports.recursiveRuleNamesFromParts = recursiveRuleNamesFromParts;
exports.leftRecursiveRuleNamesFromParts = leftRecursiveRuleNamesFromParts;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("./part");
var first = _necessary.arrayUtilities.first, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart;
function singlePartFromParts(parts) {
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = first(parts), part = firstPart; ///
    (0, _part).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuL3BhcnRcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFplcm9Pck1vcmVQYXJ0c1BhcnQsIFNlcXVlbmNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlUGFydEZyb21QYXJ0cyhwYXJ0cykge1xuICBsZXQgc2luZ2xlUGFydDtcblxuICBjb25zdCBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcblxuICBpZiAocGFydHNMZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyk7XG5cbiAgICBzaW5nbGVQYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzZXF1ZW5jZU9mUGFydHNQYXJ0ID0gbmV3IFNlcXVlbmNlT2ZQYXJ0c1BhcnQocGFydHMpO1xuXG4gICAgc2luZ2xlUGFydCA9IHNlcXVlbmNlT2ZQYXJ0c1BhcnQ7IC8vL1xuICB9XG5cbiAgcmV0dXJuIHNpbmdsZVBhcnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZFBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3Qgc2luZ2xlUGFydCA9IHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpLFxuICAgICAgICBwYXJ0ID0gc2luZ2xlUGFydCxcbiAgICAgICAgemVyb09yTW9yZVBhcnRzUGFydCA9IG5ldyBaZXJvT3JNb3JlUGFydHNQYXJ0KHBhcnQpLFxuICAgICAgICByZXBlYXRlZFBhcnQgPSB6ZXJvT3JNb3JlUGFydHNQYXJ0OyAgLy8vXG5cbiAgcmV0dXJuIHJlcGVhdGVkUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCByZWN1cnNpdmVSdWxlTmFtZXMpKTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbInNpbmdsZVBhcnRGcm9tUGFydHMiLCJyZXBlYXRlZFBhcnRGcm9tUGFydHMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsIlplcm9Pck1vcmVQYXJ0c1BhcnQiLCJQYXJ0cyIsIlNlcXVlbmNlT2ZQYXJ0c1BhcnQiLCJwYXJ0cyIsInNpbmdsZVBhcnQiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImZpcnN0UGFydCIsInNlcXVlbmNlT2ZQYXJ0c1BhcnQiLCJwYXJ0IiwiemVyb09yTW9yZVBhcnRzUGFydCIsInJlcGVhdGVkUGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVNHQSxtQkFBbUIsR0FBbkJBLG1CQUFtQjtRQWtCbkJDLHFCQUFxQixHQUFyQkEscUJBQXFCO1FBU3JCQywyQkFBMkIsR0FBM0JBLDJCQUEyQjtRQVEzQkMsK0JBQStCLEdBQS9CQSwrQkFBK0I7QUExQ3pCLElBQUEsYUFBZSxXQUFmLGVBQWUsQ0FBQTtBQUNOLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUNpQyxJQUFBLEtBQVEsV0FBUixRQUFRLENBQUE7QUFFbkYsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixFQUN4QkUsbUJBQW1CLEdBQTBCQyxhQUFLLE1BQUEsQ0FBbERELG1CQUFtQixFQUFFRSxtQkFBbUIsR0FBS0QsYUFBSyxNQUFBLENBQTdCQyxtQkFBbUIsQUFBVztBQUVwRCxTQUFTUixtQkFBbUIsQ0FBQ1MsS0FBSyxFQUFFO0lBQ3pDLElBQUlDLFVBQVUsQUFBQztJQUVmLElBQU1DLFdBQVcsR0FBR0YsS0FBSyxDQUFDRyxNQUFNLEFBQUM7SUFFakMsSUFBSUQsV0FBVyxLQUFLLENBQUMsRUFBRTtRQUNyQixJQUFNRSxTQUFTLEdBQUdULEtBQUssQ0FBQ0ssS0FBSyxDQUFDLEFBQUM7UUFFL0JDLFVBQVUsR0FBR0csU0FBUyxDQUFDLENBQUMsR0FBRztLQUM1QixNQUFNO1FBQ0wsSUFBTUMsbUJBQW1CLEdBQUcsSUFBSU4sbUJBQW1CLENBQUNDLEtBQUssQ0FBQyxBQUFDO1FBRTNEQyxVQUFVLEdBQUdJLG1CQUFtQixDQUFDLENBQUMsR0FBRztLQUN0QztJQUVELE9BQU9KLFVBQVUsQ0FBQztDQUNuQjtBQUVNLFNBQVNULHFCQUFxQixDQUFDUSxLQUFLLEVBQUU7SUFDM0MsSUFBTUMsVUFBVSxHQUFHVixtQkFBbUIsQ0FBQ1MsS0FBSyxDQUFDLEVBQ3ZDTSxJQUFJLEdBQUdMLFVBQVUsRUFDakJNLG1CQUFtQixHQUFHLElBQUlWLG1CQUFtQixDQUFDUyxJQUFJLENBQUMsRUFDbkRFLFlBQVksR0FBR0QsbUJBQW1CLEFBQUMsRUFBRSxHQUFHO0lBRTlDLE9BQU9DLFlBQVksQ0FBQztDQUNyQjtBQUVNLFNBQVNmLDJCQUEyQixDQUFDTyxLQUFLLEVBQUU7SUFDakQsSUFBTVMsa0JBQWtCLEdBQUcsRUFBRSxBQUFDO0lBRTlCVCxLQUFLLENBQUNVLE9BQU8sQ0FBQyxTQUFDSixJQUFJO2VBQUtLLENBQUFBLEdBQUFBLEtBQTBCLEFBQTBCLENBQUEsMkJBQTFCLENBQUNMLElBQUksRUFBRUcsa0JBQWtCLENBQUM7S0FBQSxDQUFDLENBQUM7SUFFOUUsT0FBT0Esa0JBQWtCLENBQUM7Q0FDM0I7QUFFTSxTQUFTZiwrQkFBK0IsQ0FBQ00sS0FBSyxFQUFFO0lBQ3JELElBQU1ZLHNCQUFzQixHQUFHLEVBQUUsRUFDM0JSLFNBQVMsR0FBR1QsS0FBSyxDQUFDSyxLQUFLLENBQUMsRUFDeEJNLElBQUksR0FBR0YsU0FBUyxBQUFDLEVBQUMsR0FBRztJQUUzQlMsQ0FBQUEsR0FBQUEsS0FBOEIsQUFBOEIsQ0FBQSwrQkFBOUIsQ0FBQ1AsSUFBSSxFQUFFTSxzQkFBc0IsQ0FBQyxDQUFDO0lBRTdELE9BQU9BLHNCQUFzQixDQUFDO0NBQy9CIn0=