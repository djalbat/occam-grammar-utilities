"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cloneParts: function() {
        return cloneParts;
    },
    singlePartFromParts: function() {
        return singlePartFromParts;
    },
    repeatedPartFromParts: function() {
        return repeatedPartFromParts;
    },
    recursiveRuleNamesFromParts: function() {
        return recursiveRuleNamesFromParts;
    },
    leftRecursiveRuleNamesFromParts: function() {
        return leftRecursiveRuleNamesFromParts;
    }
});
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("./part");
var first = _necessary.arrayUtilities.first, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart, ZeroOrMorePartsPart = _occamParsers.Parts.ZeroOrMorePartsPart;
function cloneParts(parts) {
    parts = parts.map(function(part) {
        return part.clone();
    }); ///
    return parts;
}
function singlePartFromParts(parts) {
    var singlePart;
    var partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts);
        singlePart = firstPart; ///
    } else {
        var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
        singlePart = sequenceOfPartsPart; ///
    }
    return singlePart;
}
function repeatedPartFromParts(parts) {
    var singlePart = singlePartFromParts(parts), part = singlePart, zeroOrMorePartsPart = new ZeroOrMorePartsPart(part), repeatedPart = zeroOrMorePartsPart; ///
    return repeatedPart;
}
function recursiveRuleNamesFromParts(parts) {
    var recursiveRuleNames = [];
    parts.forEach(function(part) {
        return (0, _part.recursiveRuleNamesFromPart)(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromParts(parts) {
    var leftRecursiveRuleNames = [], firstPart = first(parts), part = firstPart; ///
    (0, _part.leftRecursiveRuleNamesFromPart)(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuL3BhcnRcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFNlcXVlbmNlT2ZQYXJ0c1BhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQYXJ0cyhwYXJ0cykge1xuICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jbG9uZSgpKTsgIC8vL1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgbGV0IHNpbmdsZVBhcnQ7XG5cbiAgY29uc3QgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKHBhcnRzTGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpO1xuXG4gICAgc2luZ2xlUGFydCA9IGZpcnN0UGFydDsgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2VxdWVuY2VPZlBhcnRzUGFydCA9IG5ldyBTZXF1ZW5jZU9mUGFydHNQYXJ0KHBhcnRzKTtcblxuICAgIHNpbmdsZVBhcnQgPSBzZXF1ZW5jZU9mUGFydHNQYXJ0OyAvLy9cbiAgfVxuXG4gIHJldHVybiBzaW5nbGVQYXJ0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRQYXJ0RnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IHNpbmdsZVBhcnQgPSBzaW5nbGVQYXJ0RnJvbVBhcnRzKHBhcnRzKSxcbiAgICAgICAgcGFydCA9IHNpbmdsZVBhcnQsXG4gICAgICAgIHplcm9Pck1vcmVQYXJ0c1BhcnQgPSBuZXcgWmVyb09yTW9yZVBhcnRzUGFydChwYXJ0KSxcbiAgICAgICAgcmVwZWF0ZWRQYXJ0ID0gemVyb09yTW9yZVBhcnRzUGFydDsgIC8vL1xuXG4gIHJldHVybiByZXBlYXRlZFBhcnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gW107XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJjbG9uZVBhcnRzIiwic2luZ2xlUGFydEZyb21QYXJ0cyIsInJlcGVhdGVkUGFydEZyb21QYXJ0cyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiU2VxdWVuY2VPZlBhcnRzUGFydCIsIlBhcnRzIiwiWmVyb09yTW9yZVBhcnRzUGFydCIsInBhcnRzIiwibWFwIiwicGFydCIsImNsb25lIiwic2luZ2xlUGFydCIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RQYXJ0Iiwic2VxdWVuY2VPZlBhcnRzUGFydCIsInplcm9Pck1vcmVQYXJ0c1BhcnQiLCJyZXBlYXRlZFBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJmb3JFYWNoIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBU0dBLFVBQVU7ZUFBVkEsVUFBVTs7SUFNVkMsbUJBQW1CO2VBQW5CQSxtQkFBbUI7O0lBa0JuQkMscUJBQXFCO2VBQXJCQSxxQkFBcUI7O0lBU3JCQywyQkFBMkI7ZUFBM0JBLDJCQUEyQjs7SUFRM0JDLCtCQUErQjtlQUEvQkEsK0JBQStCOzs7NEJBaER6QixlQUFlO3lCQUNOLFdBQVc7b0JBQ2lDLFFBQVE7QUFFbkYsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixFQUN4QkUsbUJBQW1CLEdBQTBCQyxhQUFLLE1BQUEsQ0FBbERELG1CQUFtQixFQUFFRSxtQkFBbUIsR0FBS0QsYUFBSyxNQUFBLENBQTdCQyxtQkFBbUIsQUFBVztBQUVwRCxTQUFTVCxVQUFVLENBQUNVLEtBQUssRUFBRTtJQUNoQ0EsS0FBSyxHQUFHQSxLQUFLLENBQUNDLEdBQUcsQ0FBQyxTQUFDQyxJQUFJO2VBQUtBLElBQUksQ0FBQ0MsS0FBSyxFQUFFO0tBQUEsQ0FBQyxDQUFDLENBQUUsR0FBRztJQUUvQyxPQUFPSCxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNULG1CQUFtQixDQUFDUyxLQUFLLEVBQUU7SUFDekMsSUFBSUksVUFBVSxBQUFDO0lBRWYsSUFBTUMsV0FBVyxHQUFHTCxLQUFLLENBQUNNLE1BQU0sQUFBQztJQUVqQyxJQUFJRCxXQUFXLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLElBQU1FLFNBQVMsR0FBR1osS0FBSyxDQUFDSyxLQUFLLENBQUMsQUFBQztRQUUvQkksVUFBVSxHQUFHRyxTQUFTLENBQUMsQ0FBQyxHQUFHO0tBQzVCLE1BQU07UUFDTCxJQUFNQyxtQkFBbUIsR0FBRyxJQUFJWCxtQkFBbUIsQ0FBQ0csS0FBSyxDQUFDLEFBQUM7UUFFM0RJLFVBQVUsR0FBR0ksbUJBQW1CLENBQUMsQ0FBQyxHQUFHO0tBQ3RDO0lBRUQsT0FBT0osVUFBVSxDQUFDO0NBQ25CO0FBRU0sU0FBU1oscUJBQXFCLENBQUNRLEtBQUssRUFBRTtJQUMzQyxJQUFNSSxVQUFVLEdBQUdiLG1CQUFtQixDQUFDUyxLQUFLLENBQUMsRUFDdkNFLElBQUksR0FBR0UsVUFBVSxFQUNqQkssbUJBQW1CLEdBQUcsSUFBSVYsbUJBQW1CLENBQUNHLElBQUksQ0FBQyxFQUNuRFEsWUFBWSxHQUFHRCxtQkFBbUIsQUFBQyxFQUFFLEdBQUc7SUFFOUMsT0FBT0MsWUFBWSxDQUFDO0NBQ3JCO0FBRU0sU0FBU2pCLDJCQUEyQixDQUFDTyxLQUFLLEVBQUU7SUFDakQsSUFBTVcsa0JBQWtCLEdBQUcsRUFBRSxBQUFDO0lBRTlCWCxLQUFLLENBQUNZLE9BQU8sQ0FBQyxTQUFDVixJQUFJO2VBQUtXLElBQUFBLEtBQTBCLDJCQUFBLEVBQUNYLElBQUksRUFBRVMsa0JBQWtCLENBQUM7S0FBQSxDQUFDLENBQUM7SUFFOUUsT0FBT0Esa0JBQWtCLENBQUM7Q0FDM0I7QUFFTSxTQUFTakIsK0JBQStCLENBQUNNLEtBQUssRUFBRTtJQUNyRCxJQUFNYyxzQkFBc0IsR0FBRyxFQUFFLEVBQzNCUCxTQUFTLEdBQUdaLEtBQUssQ0FBQ0ssS0FBSyxDQUFDLEVBQ3hCRSxJQUFJLEdBQUdLLFNBQVMsQUFBQyxFQUFDLEdBQUc7SUFFM0JRLElBQUFBLEtBQThCLCtCQUFBLEVBQUNiLElBQUksRUFBRVksc0JBQXNCLENBQUMsQ0FBQztJQUU3RCxPQUFPQSxzQkFBc0IsQ0FBQztDQUMvQiJ9