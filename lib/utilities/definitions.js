"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeLeftRecursiveDefinitions = mergeLeftRecursiveDefinitions;
exports.retrieveLeftRecursiveDefinitions = retrieveLeftRecursiveDefinitions;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _definition = require("../utilities/definition");
var _parts = require("../utilities/parts");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
var first = _necessary.arrayUtilities.first, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeLeftRecursiveDefinitions(leftRecursiveDefinitions, LeftRecursiveDefinition) {
    var leftRecursiveDefinition;
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions), leftRecursiveDefinitionsLength = leftRecursiveDefinitions.length;
    if (leftRecursiveDefinitionsLength === 1) {
        leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
    } else {
        var firstPart;
        var singleParts = leftRecursiveDefinitions.map(function(leftRecursiveDefinition, index) {
            var definitionParts = (0, _definition).definitionPartsFromDefinition(leftRecursiveDefinition), parts = definitionParts; ///
            firstPart = (0, _parts).firstPartFromParts(parts);
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        var parts = singleParts; ///
        var ruleName = firstLeftRecursiveDefinition.getRuleName(), choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            firstPart,
            choiceOfPartsPart
        ];
        leftRecursiveDefinition = LeftRecursiveDefinition.fromPartsAndRuleName(parts, ruleName);
    }
    return leftRecursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(leftRecursiveRule, LeftRecursiveDefinition) {
    var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
        return true;
    };
    var definitions = leftRecursiveRule.getDefinitions(), leftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = _instanceof(definition, LeftRecursiveDefinition);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, passed = callback(leftRecursiveDefinition);
            if (passed) {
                return true;
            }
        }
    });
    return leftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgZmlyc3RQYXJ0RnJvbVBhcnRzLCBzaW5nbGVQYXJ0RnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQ2hvaWNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG5cbiAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9PT0gMSkge1xuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gIH0gZWxzZSB7XG4gICAgbGV0IGZpcnN0UGFydDtcblxuICAgIGNvbnN0IHNpbmdsZVBhcnRzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBkZWZpbml0aW9uUGFydHMgPSBkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiksXG4gICAgICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb25QYXJ0czsgIC8vL1xuXG4gICAgICBmaXJzdFBhcnQgPSBmaXJzdFBhcnRGcm9tUGFydHMocGFydHMpXG5cbiAgICAgIGNvbnN0IHNpbmdsZVBhcnQgPSBzaW5nbGVQYXJ0RnJvbVBhcnRzKHBhcnRzKTtcblxuICAgICAgcmV0dXJuIHNpbmdsZVBhcnQ7XG4gICAgfSk7XG5cbiAgICBsZXQgcGFydHMgPSBzaW5nbGVQYXJ0czsgIC8vL1xuXG4gICAgY29uc3QgcnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1BhcnQgPSBuZXcgQ2hvaWNlT2ZQYXJ0c1BhcnQocGFydHMpO1xuXG4gICAgcGFydHMgPSBbXG4gICAgICBmaXJzdFBhcnQsXG4gICAgICBjaG9pY2VPZlBhcnRzUGFydFxuICAgIF07XG5cbiAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21QYXJ0c0FuZFJ1bGVOYW1lKHBhcnRzLCBydWxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlUnVsZSwgTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNhbGxiYWNrID0gKCkgPT4gdHJ1ZSkge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVSdWxlLmdldERlZmluaXRpb25zKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGRlZmluaXRpb25zLmZpbHRlcigoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChkZWZpbml0aW9uIGluc3RhbmNlb2YgTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICAgICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBkZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGNhbGxiYWNrKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgICAgICAgaWYgKHBhc3NlZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG4iXSwibmFtZXMiOlsibWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJDaG9pY2VPZlBhcnRzUGFydCIsIlBhcnRzIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdFBhcnQiLCJzaW5nbGVQYXJ0cyIsIm1hcCIsImluZGV4IiwiZGVmaW5pdGlvblBhcnRzIiwiZGVmaW5pdGlvblBhcnRzRnJvbURlZmluaXRpb24iLCJwYXJ0cyIsImZpcnN0UGFydEZyb21QYXJ0cyIsInNpbmdsZVBhcnQiLCJzaW5nbGVQYXJ0RnJvbVBhcnRzIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImNob2ljZU9mUGFydHNQYXJ0IiwiZnJvbVBhcnRzQW5kUnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZSIsImNhbGxiYWNrIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImZpbHRlciIsImRlZmluaXRpb24iLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwYXNzZWQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVdHQSw2QkFBNkIsR0FBN0JBLDZCQUE2QjtRQXNDN0JDLGdDQUFnQyxHQUFoQ0EsZ0NBQWdDO0FBL0MxQixJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFDTixJQUFBLFVBQVcsV0FBWCxXQUFXLENBQUE7QUFFSSxJQUFBLFdBQXlCLFdBQXpCLHlCQUF5QixDQUFBO0FBQ2YsSUFBQSxNQUFvQixXQUFwQixvQkFBb0IsQ0FBQTs7Ozs7Ozs7QUFFNUUsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixFQUMxQixBQUFFRSxpQkFBaUIsR0FBS0MsYUFBSyxNQUFBLENBQTNCRCxpQkFBaUIsQUFBVSxBQUFDO0FBRTdCLFNBQVNKLDZCQUE2QixDQUFDTSx3QkFBd0IsRUFBRUMsdUJBQXVCLEVBQUU7SUFDL0YsSUFBSUMsdUJBQXVCLEFBQUM7SUFFNUIsSUFBTUMsNEJBQTRCLEdBQUdQLEtBQUssQ0FBQ0ksd0JBQXdCLENBQUMsRUFDOURJLDhCQUE4QixHQUFHSix3QkFBd0IsQ0FBQ0ssTUFBTSxBQUFDO0lBRXZFLElBQUlELDhCQUE4QixLQUFLLENBQUMsRUFBRTtRQUN4Q0YsdUJBQXVCLEdBQUdDLDRCQUE0QixDQUFDLENBQUMsR0FBRztLQUM1RCxNQUFNO1FBQ0wsSUFBSUcsU0FBUyxBQUFDO1FBRWQsSUFBTUMsV0FBVyxHQUFHUCx3QkFBd0IsQ0FBQ1EsR0FBRyxDQUFDLFNBQUNOLHVCQUF1QixFQUFFTyxLQUFLLEVBQUs7WUFDbkYsSUFBTUMsZUFBZSxHQUFHQyxDQUFBQSxHQUFBQSxXQUE2QixBQUF5QixDQUFBLDhCQUF6QixDQUFDVCx1QkFBdUIsQ0FBQyxFQUN4RVUsS0FBSyxHQUFHRixlQUFlLEFBQUMsRUFBRSxHQUFHO1lBRW5DSixTQUFTLEdBQUdPLENBQUFBLEdBQUFBLE1BQWtCLEFBQU8sQ0FBQSxtQkFBUCxDQUFDRCxLQUFLLENBQUM7WUFFckMsSUFBTUUsVUFBVSxHQUFHQyxDQUFBQSxHQUFBQSxNQUFtQixBQUFPLENBQUEsb0JBQVAsQ0FBQ0gsS0FBSyxDQUFDLEFBQUM7WUFFOUMsT0FBT0UsVUFBVSxDQUFDO1NBQ25CLENBQUMsQUFBQztRQUVILElBQUlGLEtBQUssR0FBR0wsV0FBVyxBQUFDLEVBQUUsR0FBRztRQUU3QixJQUFNUyxRQUFRLEdBQUdiLDRCQUE0QixDQUFDYyxXQUFXLEVBQUUsRUFDckRDLGlCQUFpQixHQUFHLElBQUlwQixpQkFBaUIsQ0FBQ2MsS0FBSyxDQUFDLEFBQUM7UUFFdkRBLEtBQUssR0FBRztZQUNOTixTQUFTO1lBQ1RZLGlCQUFpQjtTQUNsQixDQUFDO1FBRUZoQix1QkFBdUIsR0FBR0QsdUJBQXVCLENBQUNrQixvQkFBb0IsQ0FBQ1AsS0FBSyxFQUFFSSxRQUFRLENBQUMsQ0FBQztLQUN6RjtJQUVELE9BQU9kLHVCQUF1QixDQUFDO0NBQ2hDO0FBRU0sU0FBU1AsZ0NBQWdDLENBQUN5QixpQkFBaUIsRUFBRW5CLHVCQUF1QixFQUF5QjtRQUF2Qm9CLFFBQVEsR0FBUkEsK0NBQXFCLGtCQUFWO2VBQU0sSUFBSTtLQUFBO0lBQ2hILElBQU1DLFdBQVcsR0FBR0YsaUJBQWlCLENBQUNHLGNBQWMsRUFBRSxFQUNoRHZCLHdCQUF3QixHQUFHc0IsV0FBVyxDQUFDRSxNQUFNLENBQUMsU0FBQ0MsVUFBVSxFQUFLO1FBQzVELElBQU1DLGlDQUFpQyxHQUFJRCxBQUFVLFdBQVl4QixDQUF0QndCLFVBQVUsRUFBWXhCLHVCQUF1QixDQUFBLEFBQUMsQUFBQztRQUUxRixJQUFJeUIsaUNBQWlDLEVBQUU7WUFDckMsSUFBTXhCLHVCQUF1QixHQUFHdUIsVUFBVSxFQUNwQ0UsTUFBTSxHQUFHTixRQUFRLENBQUNuQix1QkFBdUIsQ0FBQyxBQUFDO1lBRWpELElBQUl5QixNQUFNLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO0tBQ0YsQ0FBQyxBQUFDO0lBRVQsT0FBTzNCLHdCQUF3QixDQUFDO0NBQ2pDIn0=