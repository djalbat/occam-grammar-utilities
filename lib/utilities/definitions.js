"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeLeftRecursiveDefinitions = mergeLeftRecursiveDefinitions;
exports.retrieveLeftRecursiveDefinitions = retrieveLeftRecursiveDefinitions;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _definition = require("../utilities/definition");
var _parts = require("../utilities/parts");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
var first = _necessary.arrayUtilities.first, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeLeftRecursiveDefinitions(leftRecursiveDefinitions, fromPartsAndRuleName) {
    var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {};
    var leftRecursiveDefinition;
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions), leftRecursiveDefinitionsLength = leftRecursiveDefinitions.length;
    if (leftRecursiveDefinitionsLength === 1) {
        leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
        callback(leftRecursiveDefinition);
    } else {
        var ruleName = firstLeftRecursiveDefinition.getRuleName();
        var firstPart, previousFirstPart = null;
        var singleParts = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
            callback(leftRecursiveDefinition);
            var definition = leftRecursiveDefinition, clonedParts = (0, _definition).cloneDefinitionParts(definition), parts = clonedParts; ///
            firstPart = (0, _parts).firstPartFromParts(parts);
            if (previousFirstPart !== null) {
                var matches = (0, _part).matchParts(firstPart, previousFirstPart);
                if (!matches) {
                    var definition1 = leftRecursiveDefinition, definitionString = definition1.asString();
                    throw new Error("The '".concat(definitionString, "' left recursive definition of the '").concat(ruleName, "' rule does not match one of its sibling left recursive definitions and  therefore cannot be rewritten."));
                }
            }
            previousFirstPart = firstPart; ///
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        var parts = singleParts; ///
        var choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            firstPart,
            choiceOfPartsPart
        ];
        leftRecursiveDefinition = fromPartsAndRuleName(parts, ruleName);
    }
    return leftRecursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(leftRecursiveRule, LeftRecursiveDefinition) {
    var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
        return true;
    };
    var definitions = leftRecursiveRule.getDefinitions(), leftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = _instanceof(definition, LeftRecursiveDefinition);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, passed = callback(leftRecursiveDefinition);
            if (passed) {
                return true;
            }
        }
    });
    return leftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,