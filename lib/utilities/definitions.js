"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeLeftRecursiveDefinitions = mergeLeftRecursiveDefinitions;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _definition = require("../utilities/definition");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeLeftRecursiveDefinitions(leftRecursiveDefinitions, LeftRecursiveDefinition) {
    var leftRecursiveDefinition;
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions), leftRecursiveDefinitionsLength = leftRecursiveDefinitions.length;
    if (leftRecursiveDefinitionsLength === 1) {
        leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
    } else {
        var firstPart;
        var singleParts = leftRecursiveDefinitions.map(function(leftRecursiveDefinition, index) {
            var definitionParts = (0, _definition).definitionPartsFromDefinition(leftRecursiveDefinition), parts = definitionParts; ///
            firstPart = (0, _parts).firstPartFromParts(parts);
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        var parts = singleParts; ///
        var ruleName = firstLeftRecursiveDefinition.getRuleName(), choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            firstPart,
            choiceOfPartsPart
        ];
        leftRecursiveDefinition = LeftRecursiveDefinition.fromRuleNameAndParts(ruleName, parts);
    }
    return leftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgZmlyc3RQYXJ0RnJvbVBhcnRzLCBzaW5nbGVQYXJ0RnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQ2hvaWNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG5cbiAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9PT0gMSkge1xuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gIH0gZWxzZSB7XG4gICAgbGV0IGZpcnN0UGFydDtcblxuICAgIGNvbnN0IHNpbmdsZVBhcnRzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBkZWZpbml0aW9uUGFydHMgPSBkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiksXG4gICAgICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb25QYXJ0czsgIC8vL1xuXG4gICAgICBmaXJzdFBhcnQgPSBmaXJzdFBhcnRGcm9tUGFydHMocGFydHMpXG5cbiAgICAgIGNvbnN0IHNpbmdsZVBhcnQgPSBzaW5nbGVQYXJ0RnJvbVBhcnRzKHBhcnRzKTtcblxuICAgICAgcmV0dXJuIHNpbmdsZVBhcnQ7XG4gICAgfSk7XG5cbiAgICBsZXQgcGFydHMgPSBzaW5nbGVQYXJ0czsgIC8vL1xuXG4gICAgY29uc3QgcnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1BhcnQgPSBuZXcgQ2hvaWNlT2ZQYXJ0c1BhcnQocGFydHMpO1xuXG4gICAgcGFydHMgPSBbXG4gICAgICBmaXJzdFBhcnQsXG4gICAgICBjaG9pY2VPZlBhcnRzUGFydFxuICAgIF07XG5cbiAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21SdWxlTmFtZUFuZFBhcnRzKHJ1bGVOYW1lLCBwYXJ0cyk7XG4gIH1cblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG4iXSwibmFtZXMiOlsibWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiQ2hvaWNlT2ZQYXJ0c1BhcnQiLCJQYXJ0cyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsIkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RQYXJ0Iiwic2luZ2xlUGFydHMiLCJtYXAiLCJpbmRleCIsImRlZmluaXRpb25QYXJ0cyIsImRlZmluaXRpb25QYXJ0c0Zyb21EZWZpbml0aW9uIiwicGFydHMiLCJmaXJzdFBhcnRGcm9tUGFydHMiLCJzaW5nbGVQYXJ0Iiwic2luZ2xlUGFydEZyb21QYXJ0cyIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJjaG9pY2VPZlBhcnRzUGFydCIsImZyb21SdWxlTmFtZUFuZFBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFXR0EsNkJBQTZCLEdBQTdCQSw2QkFBNkI7QUFUdkIsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBQ04sSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBRUksSUFBQSxXQUF5QixXQUF6Qix5QkFBeUIsQ0FBQTtBQUNmLElBQUEsTUFBb0IsV0FBcEIsb0JBQW9CLENBQUE7QUFFNUUsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixFQUMxQixBQUFFRSxpQkFBaUIsR0FBS0MsYUFBSyxNQUFBLENBQTNCRCxpQkFBaUIsQUFBVSxBQUFDO0FBRTdCLFNBQVNILDZCQUE2QixDQUFDSyx3QkFBd0IsRUFBRUMsdUJBQXVCLEVBQUU7SUFDL0YsSUFBSUMsdUJBQXVCLEFBQUM7SUFFNUIsSUFBTUMsNEJBQTRCLEdBQUdQLEtBQUssQ0FBQ0ksd0JBQXdCLENBQUMsRUFDOURJLDhCQUE4QixHQUFHSix3QkFBd0IsQ0FBQ0ssTUFBTSxBQUFDO0lBRXZFLElBQUlELDhCQUE4QixLQUFLLENBQUMsRUFBRTtRQUN4Q0YsdUJBQXVCLEdBQUdDLDRCQUE0QixDQUFDLENBQUMsR0FBRztLQUM1RCxNQUFNO1FBQ0wsSUFBSUcsU0FBUyxBQUFDO1FBRWQsSUFBTUMsV0FBVyxHQUFHUCx3QkFBd0IsQ0FBQ1EsR0FBRyxDQUFDLFNBQUNOLHVCQUF1QixFQUFFTyxLQUFLLEVBQUs7WUFDbkYsSUFBTUMsZUFBZSxHQUFHQyxDQUFBQSxHQUFBQSxXQUE2QixBQUF5QixDQUFBLDhCQUF6QixDQUFDVCx1QkFBdUIsQ0FBQyxFQUN4RVUsS0FBSyxHQUFHRixlQUFlLEFBQUMsRUFBRSxHQUFHO1lBRW5DSixTQUFTLEdBQUdPLENBQUFBLEdBQUFBLE1BQWtCLEFBQU8sQ0FBQSxtQkFBUCxDQUFDRCxLQUFLLENBQUM7WUFFckMsSUFBTUUsVUFBVSxHQUFHQyxDQUFBQSxHQUFBQSxNQUFtQixBQUFPLENBQUEsb0JBQVAsQ0FBQ0gsS0FBSyxDQUFDLEFBQUM7WUFFOUMsT0FBT0UsVUFBVSxDQUFDO1NBQ25CLENBQUMsQUFBQztRQUVILElBQUlGLEtBQUssR0FBR0wsV0FBVyxBQUFDLEVBQUUsR0FBRztRQUU3QixJQUFNUyxRQUFRLEdBQUdiLDRCQUE0QixDQUFDYyxXQUFXLEVBQUUsRUFDckRDLGlCQUFpQixHQUFHLElBQUlwQixpQkFBaUIsQ0FBQ2MsS0FBSyxDQUFDLEFBQUM7UUFFdkRBLEtBQUssR0FBRztZQUNOTixTQUFTO1lBQ1RZLGlCQUFpQjtTQUNsQixDQUFDO1FBRUZoQix1QkFBdUIsR0FBR0QsdUJBQXVCLENBQUNrQixvQkFBb0IsQ0FBQ0gsUUFBUSxFQUFFSixLQUFLLENBQUMsQ0FBQztLQUN6RjtJQUVELE9BQU9WLHVCQUF1QixDQUFDO0NBQ2hDIn0=