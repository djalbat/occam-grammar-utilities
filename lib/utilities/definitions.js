"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeLeftRecursiveDefinitions = mergeLeftRecursiveDefinitions;
exports.retrieveLeftRecursiveDefinitions = retrieveLeftRecursiveDefinitions;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _definition = require("../utilities/definition");
var _parts = require("../utilities/parts");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
var first = _necessary.arrayUtilities.first, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeLeftRecursiveDefinitions(leftRecursiveDefinitions, fromPartsAndRuleName) {
    var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {};
    var leftRecursiveDefinition;
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions), leftRecursiveDefinitionsLength = leftRecursiveDefinitions.length;
    if (leftRecursiveDefinitionsLength === 1) {
        leftRecursiveDefinition = firstLeftRecursiveDefinition; ///
        callback(leftRecursiveDefinition);
    } else {
        var firstPart;
        var singleParts = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
            callback(leftRecursiveDefinition);
            var definition = leftRecursiveDefinition, definitionParts = (0, _definition).definitionPartsFromDefinition(definition), parts = definitionParts;
            firstPart = (0, _parts).firstPartFromParts(parts);
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        var parts = singleParts; ///
        var ruleName = firstLeftRecursiveDefinition.getRuleName(), choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            firstPart,
            choiceOfPartsPart
        ];
        leftRecursiveDefinition = fromPartsAndRuleName(parts, ruleName);
    }
    return leftRecursiveDefinition;
}
function retrieveLeftRecursiveDefinitions(leftRecursiveRule, LeftRecursiveDefinition) {
    var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
        return true;
    };
    var definitions = leftRecursiveRule.getDefinitions(), leftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionLeftRecursiveDefinition = _instanceof(definition, LeftRecursiveDefinition);
        if (definitionLeftRecursiveDefinition) {
            var leftRecursiveDefinition = definition, passed = callback(leftRecursiveDefinition);
            if (passed) {
                return true;
            }
        }
    });
    return leftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgZmlyc3RQYXJ0RnJvbVBhcnRzLCBzaW5nbGVQYXJ0RnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQ2hvaWNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBmcm9tUGFydHNBbmRSdWxlTmFtZSwgY2FsbGJhY2sgPSAoKSA9PiB7fSkge1xuICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG5cbiAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9PT0gMSkge1xuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG5cbiAgICBjYWxsYmFjayhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGZpcnN0UGFydDtcblxuICAgIGNvbnN0IHNpbmdsZVBhcnRzID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcCgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgIGNhbGxiYWNrKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAvLy9cbiAgICAgICAgICAgIGRlZmluaXRpb25QYXJ0cyA9IGRlZmluaXRpb25QYXJ0c0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uUGFydHM7XG5cbiAgICAgIGZpcnN0UGFydCA9IGZpcnN0UGFydEZyb21QYXJ0cyhwYXJ0cylcblxuICAgICAgY29uc3Qgc2luZ2xlUGFydCA9IHNpbmdsZVBhcnRGcm9tUGFydHMocGFydHMpO1xuXG4gICAgICByZXR1cm4gc2luZ2xlUGFydDtcbiAgICB9KTtcblxuICAgIGxldCBwYXJ0cyA9IHNpbmdsZVBhcnRzOyAgLy8vXG5cbiAgICBjb25zdCBydWxlTmFtZSA9IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUGFydCA9IG5ldyBDaG9pY2VPZlBhcnRzUGFydChwYXJ0cyk7XG5cbiAgICBwYXJ0cyA9IFtcbiAgICAgIGZpcnN0UGFydCxcbiAgICAgIGNob2ljZU9mUGFydHNQYXJ0XG4gICAgXTtcblxuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZnJvbVBhcnRzQW5kUnVsZU5hbWUocGFydHMsIHJ1bGVOYW1lKTtcbiAgfVxuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGxlZnRSZWN1cnNpdmVSdWxlLCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY2FsbGJhY2sgPSAoKSA9PiB0cnVlKSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gbGVmdFJlY3Vyc2l2ZVJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZGVmaW5pdGlvbnMuZmlsdGVyKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgICAgICBpZiAoZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgICAgICAgcGFzc2VkID0gY2FsbGJhY2sobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucztcbn1cbiJdLCJuYW1lcyI6WyJtZXJnZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJldHJpZXZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsIkNob2ljZU9mUGFydHNQYXJ0IiwiUGFydHMiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmcm9tUGFydHNBbmRSdWxlTmFtZSIsImNhbGxiYWNrIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RQYXJ0Iiwic2luZ2xlUGFydHMiLCJtYXAiLCJkZWZpbml0aW9uIiwiZGVmaW5pdGlvblBhcnRzIiwiZGVmaW5pdGlvblBhcnRzRnJvbURlZmluaXRpb24iLCJwYXJ0cyIsImZpcnN0UGFydEZyb21QYXJ0cyIsInNpbmdsZVBhcnQiLCJzaW5nbGVQYXJ0RnJvbVBhcnRzIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImNob2ljZU9mUGFydHNQYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGUiLCJMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJmaWx0ZXIiLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwYXNzZWQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVdHQSw2QkFBNkIsR0FBN0JBLDZCQUE2QjtRQTJDN0JDLGdDQUFnQyxHQUFoQ0EsZ0NBQWdDO0FBcEQxQixJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFDTixJQUFBLFVBQVcsV0FBWCxXQUFXLENBQUE7QUFFSSxJQUFBLFdBQXlCLFdBQXpCLHlCQUF5QixDQUFBO0FBQ2YsSUFBQSxNQUFvQixXQUFwQixvQkFBb0IsQ0FBQTs7Ozs7Ozs7QUFFNUUsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixFQUMxQixBQUFFRSxpQkFBaUIsR0FBS0MsYUFBSyxNQUFBLENBQTNCRCxpQkFBaUIsQUFBVSxBQUFDO0FBRTdCLFNBQVNKLDZCQUE2QixDQUFDTSx3QkFBd0IsRUFBRUMsb0JBQW9CLEVBQXVCO1FBQXJCQyxRQUFRLEdBQVJBLCtDQUFtQixrQkFBUixXQUFNLEVBQUU7SUFDL0csSUFBSUMsdUJBQXVCLEFBQUM7SUFFNUIsSUFBTUMsNEJBQTRCLEdBQUdSLEtBQUssQ0FBQ0ksd0JBQXdCLENBQUMsRUFDOURLLDhCQUE4QixHQUFHTCx3QkFBd0IsQ0FBQ00sTUFBTSxBQUFDO0lBRXZFLElBQUlELDhCQUE4QixLQUFLLENBQUMsRUFBRTtRQUN4Q0YsdUJBQXVCLEdBQUdDLDRCQUE0QixDQUFDLENBQUMsR0FBRztRQUUzREYsUUFBUSxDQUFDQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ25DLE1BQU07UUFDTCxJQUFJSSxTQUFTLEFBQUM7UUFFZCxJQUFNQyxXQUFXLEdBQUdSLHdCQUF3QixDQUFDUyxHQUFHLENBQUMsU0FBQ04sdUJBQXVCLEVBQUs7WUFDNUVELFFBQVEsQ0FBQ0MsdUJBQXVCLENBQUMsQ0FBQztZQUVsQyxJQUFNTyxVQUFVLEdBQUdQLHVCQUF1QixFQUNwQ1EsZUFBZSxHQUFHQyxDQUFBQSxHQUFBQSxXQUE2QixBQUFZLENBQUEsOEJBQVosQ0FBQ0YsVUFBVSxDQUFDLEVBQzNERyxLQUFLLEdBQUdGLGVBQWUsQUFBQztZQUU5QkosU0FBUyxHQUFHTyxDQUFBQSxHQUFBQSxNQUFrQixBQUFPLENBQUEsbUJBQVAsQ0FBQ0QsS0FBSyxDQUFDO1lBRXJDLElBQU1FLFVBQVUsR0FBR0MsQ0FBQUEsR0FBQUEsTUFBbUIsQUFBTyxDQUFBLG9CQUFQLENBQUNILEtBQUssQ0FBQyxBQUFDO1lBRTlDLE9BQU9FLFVBQVUsQ0FBQztTQUNuQixDQUFDLEFBQUM7UUFFSCxJQUFJRixLQUFLLEdBQUdMLFdBQVcsQUFBQyxFQUFFLEdBQUc7UUFFN0IsSUFBTVMsUUFBUSxHQUFHYiw0QkFBNEIsQ0FBQ2MsV0FBVyxFQUFFLEVBQ3JEQyxpQkFBaUIsR0FBRyxJQUFJckIsaUJBQWlCLENBQUNlLEtBQUssQ0FBQyxBQUFDO1FBRXZEQSxLQUFLLEdBQUc7WUFDTk4sU0FBUztZQUNUWSxpQkFBaUI7U0FDbEIsQ0FBQztRQUVGaEIsdUJBQXVCLEdBQUdGLG9CQUFvQixDQUFDWSxLQUFLLEVBQUVJLFFBQVEsQ0FBQyxDQUFDO0tBQ2pFO0lBRUQsT0FBT2QsdUJBQXVCLENBQUM7Q0FDaEM7QUFFTSxTQUFTUixnQ0FBZ0MsQ0FBQ3lCLGlCQUFpQixFQUFFQyx1QkFBdUIsRUFBeUI7UUFBdkJuQixRQUFRLEdBQVJBLCtDQUFxQixrQkFBVjtlQUFNLElBQUk7S0FBQTtJQUNoSCxJQUFNb0IsV0FBVyxHQUFHRixpQkFBaUIsQ0FBQ0csY0FBYyxFQUFFLEVBQ2hEdkIsd0JBQXdCLEdBQUdzQixXQUFXLENBQUNFLE1BQU0sQ0FBQyxTQUFDZCxVQUFVLEVBQUs7UUFDNUQsSUFBTWUsaUNBQWlDLEdBQUlmLEFBQVUsV0FBWVcsQ0FBdEJYLFVBQVUsRUFBWVcsdUJBQXVCLENBQUEsQUFBQyxBQUFDO1FBRTFGLElBQUlJLGlDQUFpQyxFQUFFO1lBQ3JDLElBQU10Qix1QkFBdUIsR0FBR08sVUFBVSxFQUNwQ2dCLE1BQU0sR0FBR3hCLFFBQVEsQ0FBQ0MsdUJBQXVCLENBQUMsQUFBQztZQUVqRCxJQUFJdUIsTUFBTSxFQUFFO2dCQUNWLE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtLQUNGLENBQUMsQUFBQztJQUVULE9BQU8xQix3QkFBd0IsQ0FBQztDQUNqQyJ9