"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeLeftRecursiveDefinitions = mergeLeftRecursiveDefinitions;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeLeftRecursiveDefinitions(leftRecursiveDefinitions, LeftRecursiveDefinition) {
    var leftRecursiveDefinition;
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitions), leftRecursiveDefinitionsLength = leftRecursiveDefinitions.length;
    if (leftRecursiveDefinitionsLength === 1) {
        leftRecursiveDefinition = firstLeftRecursiveDefinition;
    } else {
        var parts;
        parts = firstLeftRecursiveDefinition.getParts(); ///
        var firstPart = first(parts), part = firstPart; ///
        var singleParts = leftRecursiveDefinitions.map(function(leftRecursiveDefinition) {
            var parts = leftRecursiveDefinition.getParts();
            parts.shift(); ///
            var singlePart = (0, _parts).singlePartFromParts(parts);
            return singlePart;
        });
        parts = singleParts; ///
        var choiceOfPartsPart = new ChoiceOfPartsPart(parts);
        parts = [
            part,
            choiceOfPartsPart
        ];
        var ruleName = firstLeftRecursiveDefinition.getRuleName();
        leftRecursiveDefinition = LeftRecursiveDefinition.fromRuleNameAndParts(ruleName, parts);
    }
    return leftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBzaW5nbGVQYXJ0RnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQ2hvaWNlT2ZQYXJ0c1BhcnQgfSA9IFBhcnRzO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICBsZXQgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG5cbiAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCA9PT0gMSkge1xuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcGFydHM7XG5cbiAgICBwYXJ0cyA9IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UGFydHMoKTsgIC8vL1xuXG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgY29uc3Qgc2luZ2xlUGFydHMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3QgcGFydHMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gICAgICBwYXJ0cy5zaGlmdCgpOyAgLy8vXG5cbiAgICAgIGNvbnN0IHNpbmdsZVBhcnQgPSBzaW5nbGVQYXJ0RnJvbVBhcnRzKHBhcnRzKTtcblxuICAgICAgcmV0dXJuIHNpbmdsZVBhcnQ7XG4gICAgfSk7XG5cbiAgICBwYXJ0cyA9IHNpbmdsZVBhcnRzOyAgLy8vXG5cbiAgICBjb25zdCBjaG9pY2VPZlBhcnRzUGFydCA9IG5ldyBDaG9pY2VPZlBhcnRzUGFydChwYXJ0cyk7XG5cbiAgICBwYXJ0cyA9IFsgLy8vXG4gICAgICBwYXJ0LFxuICAgICAgY2hvaWNlT2ZQYXJ0c1BhcnRcbiAgICBdXG5cbiAgICBjb25zdCBydWxlTmFtZSA9IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKTtcblxuICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lQW5kUGFydHMocnVsZU5hbWUsIHBhcnRzKTtcbiAgfVxuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cbiJdLCJuYW1lcyI6WyJtZXJnZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJDaG9pY2VPZlBhcnRzUGFydCIsIlBhcnRzIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwicGFydCIsInNpbmdsZVBhcnRzIiwibWFwIiwic2hpZnQiLCJzaW5nbGVQYXJ0Iiwic2luZ2xlUGFydEZyb21QYXJ0cyIsImNob2ljZU9mUGFydHNQYXJ0IiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImZyb21SdWxlTmFtZUFuZFBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFVR0EsNkJBQTZCLEdBQTdCQSw2QkFBNkI7QUFSdkIsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBQ04sSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBRU4sSUFBQSxNQUFvQixXQUFwQixvQkFBb0IsQ0FBQTtBQUV4RCxJQUFNLEFBQUVDLEtBQUssR0FBS0MsVUFBYyxlQUFBLENBQXhCRCxLQUFLLEFBQW1CLEVBQzFCLEFBQUVFLGlCQUFpQixHQUFLQyxhQUFLLE1BQUEsQ0FBM0JELGlCQUFpQixBQUFVLEFBQUM7QUFFN0IsU0FBU0gsNkJBQTZCLENBQUNLLHdCQUF3QixFQUFFQyx1QkFBdUIsRUFBRTtJQUMvRixJQUFJQyx1QkFBdUIsQUFBQztJQUU1QixJQUFNQyw0QkFBNEIsR0FBR1AsS0FBSyxDQUFDSSx3QkFBd0IsQ0FBQyxFQUM5REksOEJBQThCLEdBQUdKLHdCQUF3QixDQUFDSyxNQUFNLEFBQUM7SUFFdkUsSUFBSUQsOEJBQThCLEtBQUssQ0FBQyxFQUFFO1FBQ3hDRix1QkFBdUIsR0FBR0MsNEJBQTRCLENBQUM7S0FDeEQsTUFBTTtRQUNMLElBQUlHLEtBQUssQUFBQztRQUVWQSxLQUFLLEdBQUdILDRCQUE0QixDQUFDSSxRQUFRLEVBQUUsQ0FBQyxDQUFFLEdBQUc7UUFFckQsSUFBTUMsU0FBUyxHQUFHWixLQUFLLENBQUNVLEtBQUssQ0FBQyxFQUN4QkcsSUFBSSxHQUFHRCxTQUFTLEFBQUMsRUFBQyxHQUFHO1FBRTNCLElBQU1FLFdBQVcsR0FBR1Ysd0JBQXdCLENBQUNXLEdBQUcsQ0FBQyxTQUFDVCx1QkFBdUIsRUFBSztZQUM1RSxJQUFNSSxLQUFLLEdBQUdKLHVCQUF1QixDQUFDSyxRQUFRLEVBQUUsQUFBQztZQUVqREQsS0FBSyxDQUFDTSxLQUFLLEVBQUUsQ0FBQyxDQUFFLEdBQUc7WUFFbkIsSUFBTUMsVUFBVSxHQUFHQyxDQUFBQSxHQUFBQSxNQUFtQixBQUFPLENBQUEsb0JBQVAsQ0FBQ1IsS0FBSyxDQUFDLEFBQUM7WUFFOUMsT0FBT08sVUFBVSxDQUFDO1NBQ25CLENBQUMsQUFBQztRQUVIUCxLQUFLLEdBQUdJLFdBQVcsQ0FBQyxDQUFFLEdBQUc7UUFFekIsSUFBTUssaUJBQWlCLEdBQUcsSUFBSWpCLGlCQUFpQixDQUFDUSxLQUFLLENBQUMsQUFBQztRQUV2REEsS0FBSyxHQUFHO1lBQ05HLElBQUk7WUFDSk0saUJBQWlCO1NBQ2xCO1FBRUQsSUFBTUMsUUFBUSxHQUFHYiw0QkFBNEIsQ0FBQ2MsV0FBVyxFQUFFLEFBQUM7UUFFNURmLHVCQUF1QixHQUFHRCx1QkFBdUIsQ0FBQ2lCLG9CQUFvQixDQUFDRixRQUFRLEVBQUVWLEtBQUssQ0FBQyxDQUFDO0tBQ3pGO0lBRUQsT0FBT0osdUJBQXVCLENBQUM7Q0FDaEMifQ==