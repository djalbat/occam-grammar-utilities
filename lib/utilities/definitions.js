"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mergeDirectlyLeftRecursiveDefinitions: function() {
        return mergeDirectlyLeftRecursiveDefinitions;
    },
    mergeIndirectlyLeftRecursiveDefinitions: function() {
        return mergeIndirectlyLeftRecursiveDefinitions;
    }
});
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("../definition/recursive/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("../definition/recursive/left/indirectly"));
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, tail = _necessary.arrayUtilities.tail, ChoiceOfPartsPart = _occamParsers.Parts.ChoiceOfPartsPart;
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var firstDirectlyLeftRecursiveDefinition = first(directlyLeftRecursiveDefinitions), ruleName = firstDirectlyLeftRecursiveDefinition.getRuleName();
    var parts = [];
    var firstPart = firstPartFromDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), singleParts = singlePartsFromDirectlyLeftRecursiveDefinitionsAnbRuleName(directlyLeftRecursiveDefinitions, ruleName), singlePartsLength = singleParts.length;
    parts.push(firstPart);
    if (false) {
    ///
    } else if (singlePartsLength === 1) {
        var firstSinglePart = first(singleParts);
        parts.push(firstSinglePart);
    } else {
        var choiceOfSinglePartsPart = new ChoiceOfPartsPart(singleParts);
        parts.push(choiceOfSinglePartsPart);
    }
    parts = (0, _parts.cloneParts)(parts); ///
    var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
    return directlyLeftRecursiveDefinition;
}
function mergeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions), leftRecursiveDefinitions = firstIndirectlyLeftRecursiveDefinition.getLeftRecursiveDefinitions(), ruleName = firstIndirectlyLeftRecursiveDefinition.getRuleName();
    var parts = [];
    var firstPart = firstPartFromIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions), singleParts = singlePartsFromIndirectlyLeftRecursiveDefinitionsAndRuleName(indirectlyLeftRecursiveDefinitions, ruleName), singlePartsLength = singleParts.length;
    parts.push(firstPart);
    if (false) {
    ///
    } else if (singlePartsLength === 0) {
    ///
    } else if (singlePartsLength === 1) {
        var firstSinglePart = first(singleParts);
        parts.push(firstSinglePart);
    } else {
        var choiceOfSinglePartsPart = new ChoiceOfPartsPart(singleParts);
        parts.push(choiceOfSinglePartsPart);
    }
    parts = (0, _parts.cloneParts)(parts); ///
    var indirectlyLeftRecursiveDefinition = _indirectly.default.fromPartsRuleNameAndLeftRecursiveDefinitions(parts, ruleName, leftRecursiveDefinitions);
    return indirectlyLeftRecursiveDefinition;
}
function firstPartFromDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var firstDirectlyLeftRecursiveDefinition = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinition = firstDirectlyLeftRecursiveDefinition, parts = directlyLeftRecursiveDefinition.getParts(), firstPart = first(parts);
    return firstPart;
}
function firstPartFromIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions) {
    var firstIndirectlyLeftRecursiveDefinition = first(indirectlyLeftRecursiveDefinitions), indirectlyLeftRecursiveDefinition = firstIndirectlyLeftRecursiveDefinition, parts = indirectlyLeftRecursiveDefinition.getParts(), firstPart = first(parts);
    return firstPart;
}
function singlePartsFromDirectlyLeftRecursiveDefinitionsAnbRuleName(directlyLeftRecursiveDefinitions, ruleName) {
    var previousFirstPart = null;
    var singleParts = directlyLeftRecursiveDefinitions.map(function(directlyLeftRecursiveDefinition) {
        var parts = directlyLeftRecursiveDefinition.getParts();
        var partsLength = parts.length;
        if (partsLength === 1) {
            var definition = directlyLeftRecursiveDefinition, definitionString = definition.asString();
            throw new Error("The '".concat(definitionString, "' directly left recursive definition of the '").concat(ruleName, "' rule is unary and therefore cannot be rewritten."));
        }
        var firstPart = first(parts);
        if (previousFirstPart !== null) {
            var matches = (0, _part.matchParts)(firstPart, previousFirstPart);
            if (!matches) {
                var definition1 = directlyLeftRecursiveDefinition, definitionString1 = definition1.asString();
                throw new Error("The '".concat(definitionString1, "' directly left recursive definition of the '").concat(ruleName, "' rule does not match one of its sibling directly left recursive definitions and therefore cannot be rewritten."));
            }
        }
        previousFirstPart = firstPart; ///
        var partsTail = tail(parts);
        parts = partsTail; ///
        var singlePart = (0, _parts.singlePartFromParts)(parts);
        return singlePart;
    });
    return singleParts;
}
function singlePartsFromIndirectlyLeftRecursiveDefinitionsAndRuleName(indirectlyLeftRecursiveDefinitions, ruleName) {
    var previousFirstPart = null;
    var singleParts = indirectlyLeftRecursiveDefinitions.reduce(function(singleParts, indirectlyLeftRecursiveDefinition) {
        var parts = indirectlyLeftRecursiveDefinition.getParts();
        var firstPart = first(parts);
        if (previousFirstPart !== null) {
            var matches = (0, _part.matchParts)(firstPart, previousFirstPart);
            if (!matches) {
                var definition = indirectlyLeftRecursiveDefinition, definitionString = definition.asString();
                throw new Error("The '".concat(definitionString, "' directly left recursive definition of the '").concat(ruleName, "' rule does not match one of its sibling directly left recursive definitions and therefore cannot be rewritten."));
            }
        }
        previousFirstPart = firstPart; ///
        var partsTail = tail(parts), partsTailLength = partsTail.length;
        if (partsTailLength > 0) {
            parts = partsTail; ///
            var singlePart = (0, _parts.singlePartFromParts)(parts);
            singleParts.push(singlePart);
        }
        return singleParts;
    }, []);
    return singleParts;
}

//# sourceMappingURL=data:application/json;base64,