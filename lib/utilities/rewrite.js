"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rewriteDirectlyRepeatedNodes: function() {
        return rewriteDirectlyRepeatedNodes;
    },
    rewriteIndirectlyRepeatedNodes: function() {
        return rewriteIndirectlyRepeatedNodes;
    },
    rewriteReducedNodes: function() {
        return rewriteReducedNodes;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _reduced = /*#__PURE__*/ _interop_require_default(require("../node/reduced"));
var _directly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/indirectly"));
var _nodes = require("../utilities/nodes");
var _ruleName = require("../utilities/ruleName");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var front = _necessary.arrayUtilities.front, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push, clear = _necessary.arrayUtilities.clear, backwardsForEach = _necessary.arrayUtilities.backwardsForEach;
function rewriteIndirectlyRepeatedNodes(nonTerminalNode) {
    var parentNode = nonTerminalNode; ///
    var childNodes = parentNode.getChildNodes(), indirectlyRepeatedNodes = findIndirectlyRepeatedNodes(childNodes);
    backwardsForEach(indirectlyRepeatedNodes, function(indirectlyRepeatedNode) {
        nonTerminalNode = nonTerminalNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode); ///
        var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, parentNodeNodeRuleName = parentNode.getRuleName(), ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
        if (parentNodeNodeRuleName === ruleName) {
            var ambiguous = indirectlyRepeatedNode.isAmbiguous(), precedence = indirectlyRepeatedNode.getPrecedence();
            parentNode.setAmbiguous(ambiguous);
            parentNode.setPrecedence(precedence);
        }
        var replacementChildNodes = replacementChildNodesFromNonTerminalNodeNodeAndIndirectlyRepeatedNode(nonTerminalNode, indirectlyRepeatedNode);
        replaceAllChildNodes(parentNode, replacementChildNodes);
        parentNode = nonTerminalNode; ///
    });
    return parentNode;
}
function rewriteDirectlyRepeatedNodes(nonTerminalNode) {
    var _loop = function() {
        var replacementChildNodes = [], replacedChildNodes = directlyRepeatedNodes, parentNode = nonTerminalNode; ///
        directlyRepeatedNodes.forEach(function(directlyRepeatedNode) {
            var directlyRepeatedNodesChildNodes = directlyRepeatedNode.getChildNodes();
            push(replacementChildNodes, directlyRepeatedNodesChildNodes);
        });
        replaceChildNodes(parentNode, replacedChildNodes, replacementChildNodes);
        directlyRepeatedNodes = findDirectlyRepeatedNodes(childNodes);
        directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    };
    var childNodes = nonTerminalNode.getChildNodes();
    var directlyRepeatedNodes, directlyRepeatedNodesLength;
    directlyRepeatedNodes = findDirectlyRepeatedNodes(childNodes);
    directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    while(directlyRepeatedNodesLength > 0)_loop();
}
function rewriteReducedNodes(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    var firstChildNode = first(childNodes), firstChildNodeReducedNode = _instanceof(firstChildNode, _reduced.default);
    if (!firstChildNodeReducedNode) {
        return;
    }
    var replacementChildNodes;
    var parentNode = nonTerminalNode, reducedNode = firstChildNode, replacedChildNode = reducedNode, parentNodeRuleName = parentNode.getRuleName(), reducedNodeRuleName = reducedNode.getRuleName(), reducedNodeAmbiguous = reducedNode.isAmbiguous(), reducedNodePrecedence = reducedNode.getPrecedence(), reducedRuleName = reducedNodeRuleName, parentRuleName = parentNodeRuleName, precedence = reducedNodePrecedence, ambiguous = reducedNodeAmbiguous, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName);
    if (ruleName === parentRuleName) {
        var reducedNodeChildNodes = reducedNode.getChildNodes();
        replacementChildNodes = reducedNodeChildNodes; ///
        parentNode.setPrecedence(precedence);
        parentNode.setAmbiguous(ambiguous);
    } else {
        var childNodes1 = reducedNode.getChildNodes(), _$nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndAmbiguous(ruleName, childNodes1, ambiguous);
        _$nonTerminalNode.setPrecedence(_$nonTerminalNode);
        replacementChildNodes = [
            _$nonTerminalNode
        ];
    }
    replaceChildNode(parentNode, replacedChildNode, replacementChildNodes);
}
function replaceChildNode(parentNode, replacedChildNode, replacementChildNodes) {
    var _childNodes;
    var childNodes = parentNode.getChildNodes(), index = childNodes.indexOf(replacedChildNode), start = index, deleteCount = 1;
    (_childNodes = childNodes).splice.apply(_childNodes, [
        start,
        deleteCount
    ].concat(_to_consumable_array(replacementChildNodes)));
}
function replaceChildNodes(parentNode, replacedChildNodes, replacementChildNodes) {
    var _childNodes;
    var replacedChildNodesLength = replacedChildNodes.length;
    if (replacedChildNodesLength === 0) {
        return;
    }
    var firstReplacedChildNode = first(replacedChildNodes), childNodes = parentNode.getChildNodes(), firstIndex = childNodes.indexOf(firstReplacedChildNode), start = firstIndex, deleteCount = replacedChildNodesLength; ///
    (_childNodes = childNodes).splice.apply(_childNodes, [
        start,
        deleteCount
    ].concat(_to_consumable_array(replacementChildNodes)));
}
function replaceAllChildNodes(parentNode, replacementChildNodes) {
    var childNodes = parentNode.getChildNodes();
    clear(childNodes);
    push(childNodes, replacementChildNodes);
}
function findDirectlyRepeatedNodes(childNodes) {
    var directlyRepeatedNodes = findRepeatedNonTerminalNodes(childNodes, function(childNode) {
        var childNodeDirectlyRepeatedNode = _instanceof(childNode, _directly.default);
        if (childNodeDirectlyRepeatedNode) {
            return true;
        }
    });
    return directlyRepeatedNodes;
}
function findIndirectlyRepeatedNodes(childNodes) {
    var indirectlyRepeatedNodes = findRepeatedNonTerminalNodes(childNodes, function(childNode) {
        var childNodeIndirectlyRepeatedNode = _instanceof(childNode, _indirectly.default);
        if (childNodeIndirectlyRepeatedNode) {
            return true;
        }
    });
    return indirectlyRepeatedNodes;
}
function findRepeatedNonTerminalNodes(childNodes, callback) {
    var repeatedNonTerminalNodes = [], lastIndex = (0, _nodes.findLastIndex)(childNodes, callback);
    if (lastIndex !== null) {
        for(var index = lastIndex; index >= 0; index--){
            var childNode = childNodes[index], childNodeRepeatedNonTerminalNode = callback(childNode);
            if (!childNodeRepeatedNonTerminalNode) {
                break;
            }
            var repeatedNonTerminalNode = childNode; ///
            repeatedNonTerminalNodes.unshift(repeatedNonTerminalNode);
        }
    }
    return repeatedNonTerminalNodes;
}
function nonTerminalNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode) {
    var ruleName, childNodes, ambiguous;
    childNodes = parentNode.getChildNodes();
    var indirectlyRepeatedNodeAmbiguous = indirectlyRepeatedNode.isAmbiguous(), indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), frontChildNodes = front(childNodes);
    ruleName = leftRecursiveRuleName; ///
    childNodes = frontChildNodes; ///
    ambiguous = indirectlyRepeatedNodeAmbiguous; ///
    var nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndAmbiguous(ruleName, childNodes, ambiguous); ///
    return nonTerminalNode;
}
function replacementChildNodesFromNonTerminalNodeNodeAndIndirectlyRepeatedNode(nonTerminalNode, indirectlyRepeatedNode) {
    var replacementChildNodes = [
        nonTerminalNode
    ], indirectlyRepeatedNodeNullary = indirectlyRepeatedNode.isNullary();
    if (!indirectlyRepeatedNodeNullary) {
        var indirectlyRepeatedNodeChildNodes = indirectlyRepeatedNode.getChildNodes();
        push(replacementChildNodes, indirectlyRepeatedNodeChildNodes);
    }
    return replacementChildNodes;
}

//# sourceMappingURL=data:application/json;base64,