"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rewriteDirectlyRepeatedNodes: function() {
        return rewriteDirectlyRepeatedNodes;
    },
    rewriteIndirectlyRepeatedNodes: function() {
        return rewriteIndirectlyRepeatedNodes;
    },
    rewriteReducedNodes: function() {
        return rewriteReducedNodes;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _reduced = /*#__PURE__*/ _interop_require_default(require("../node/reduced"));
var _directly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/indirectly"));
var _ruleName = require("../utilities/ruleName");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var front = _necessary.arrayUtilities.front, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
function rewriteReducedNodes(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    var firstChildNode = first(childNodes), firstChildNodeReducedNode = _instanceof(firstChildNode, _reduced.default);
    if (!firstChildNodeReducedNode) {
        return;
    }
    var replacementChildNodes;
    var parentNode = nonTerminalNode, reducedNode = firstChildNode, replacedChildNode = reducedNode, parentNodeRuleName = parentNode.getRuleName(), reducedNodeOpacity = reducedNode.getOpacity(), reducedNodeRuleName = reducedNode.getRuleName(), reducedNodePrecedence = reducedNode.getPrecedence(), reducedRuleName = reducedNodeRuleName, parentRuleName = parentNodeRuleName, precedence = reducedNodePrecedence, opacity = reducedNodeOpacity, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName), removedChildNodes = reducedNode.removeChildNodes();
    if (ruleName === parentRuleName) {
        replacementChildNodes = removedChildNodes; ///
        parentNode.setPrecedence(precedence);
    } else {
        var childNodes1 = removedChildNodes, _$nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndOpacity(ruleName, childNodes1, opacity), replacementChildNode = _$nonTerminalNode; ///
        replacementChildNode.setPrecedence(precedence);
        replacementChildNodes = [
            replacementChildNode
        ];
    }
    parentNode.replaceChildNode(replacedChildNode, replacementChildNodes);
}
function rewriteDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced;
    directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    while(directlyRepeatedNodesReplaced){
        directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    }
}
function rewriteIndirectlyRepeatedNodes(nonTerminalNode) {
    var parentNode = nonTerminalNode; ///
    var indirectlyRepeatedNodes = findIndirectlyRepeatedNodes(nonTerminalNode);
    indirectlyRepeatedNodes.forEach(function(indirectlyRepeatedNode) {
        var leftRecursiveNode = leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode), childNodes = childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode);
        adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode);
        parentNode.setChildNodes(childNodes);
        parentNode = leftRecursiveNode; ///
    });
    return parentNode;
}
function findRepeatedNodes(nonTerminalNode, RepeatedNode) {
    var repeatedNodes = [];
    var lastIndex = null;
    var childNodes = nonTerminalNode.getChildNodes(), length = childNodes.length;
    for(var index = length - 1; index >= 0; index--){
        var childNode = childNodes[index], childNodeRepeatedNode = _instanceof(childNode, RepeatedNode);
        if (childNodeRepeatedNode) {
            lastIndex = index; ///
            break;
        }
    }
    if (lastIndex !== null) {
        for(var index1 = lastIndex; index1 >= 0; index1--){
            var childNode1 = childNodes[index1], childNodeRepeatedNode1 = _instanceof(childNode1, RepeatedNode);
            if (!childNodeRepeatedNode1) {
                break;
            }
            var repeatedNode = childNode1; ///
            repeatedNodes.unshift(repeatedNode);
        }
    }
    return repeatedNodes;
}
function findDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _directly.default);
    return directlyRepeatedNodes;
}
function findIndirectlyRepeatedNodes(nonTerminalNode) {
    var indirectlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _indirectly.default);
    indirectlyRepeatedNodes.reverse();
    return indirectlyRepeatedNodes;
}
function replaceDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced = false;
    var directlyRepeatedNodes = findDirectlyRepeatedNodes(nonTerminalNode), directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    if (directlyRepeatedNodesLength > 0) {
        var parentNode = nonTerminalNode, replacedChildNodes = directlyRepeatedNodes, replacementChildNodes = []; ///
        directlyRepeatedNodes.forEach(function(directlyRepeatedNode) {
            var directlyRepeatedNodesChildNodes = directlyRepeatedNode.getChildNodes();
            push(replacementChildNodes, directlyRepeatedNodesChildNodes);
        });
        parentNode.replaceChildNodes(replacedChildNodes, replacementChildNodes);
        directlyRepeatedNodesReplaced = true;
    }
    return directlyRepeatedNodesReplaced;
}
function adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode) {
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, parentNodeNodeRuleName = parentNode.getRuleName(), ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
    if (parentNodeNodeRuleName === ruleName) {
        var precedence = indirectlyRepeatedNode.getPrecedence();
        parentNode.setPrecedence(precedence);
    }
}
function leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode) {
    var childNodes;
    childNodes = parentNode.getChildNodes();
    var frontChildNodes = front(childNodes);
    childNodes = parentNode.removeChildNodes(frontChildNodes);
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedNodeOpacity = indirectlyRepeatedNode.getOpacity(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), ruleName = leftRecursiveRuleName, opacity = indirectlyRepeatedNodeOpacity, nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndOpacity(ruleName, childNodes, opacity), leftRecursiveNode = nonTerminalNode; ///
    return leftRecursiveNode;
}
function childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode) {
    var childNodes = [
        leftRecursiveNode
    ], indirectlyRepeatedNodeNullary = indirectlyRepeatedNode.isNullary();
    if (!indirectlyRepeatedNodeNullary) {
        var removedChildNodes = indirectlyRepeatedNode.removeChildNodes();
        push(childNodes, removedChildNodes);
    }
    return childNodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcmV3cml0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5pbXBvcnQgeyBOb25UZXJtaW5hbE5vZGUgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgUmVkdWNlZE5vZGUgZnJvbSBcIi4uL25vZGUvcmVkdWNlZFwiO1xuaW1wb3J0IERpcmVjdGx5UmVwZWF0ZWROb2RlIGZyb20gXCIuLi9ub2RlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5pbXBvcnQgSW5kaXJlY3RseVJlcGVhdGVkTm9kZSBmcm9tIFwiLi4vbm9kZS9yZXBlYXRlZC9pbmRpcmVjdGx5XCI7XG5cbmltcG9ydCB7IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZSwgcnVsZU5hbWVGcm9tSW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuY29uc3QgeyBmcm9udCwgZmlyc3QsIHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gcmV3cml0ZVJlZHVjZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpIHtcbiAgbGV0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gIGNvbnN0IGZpcnN0Q2hpbGROb2RlID0gZmlyc3QoY2hpbGROb2RlcyksXG4gICAgICAgIGZpcnN0Q2hpbGROb2RlUmVkdWNlZE5vZGUgPSAoZmlyc3RDaGlsZE5vZGUgaW5zdGFuY2VvZiBSZWR1Y2VkTm9kZSk7XG5cbiAgaWYgKCFmaXJzdENoaWxkTm9kZVJlZHVjZWROb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHJlcGxhY2VtZW50Q2hpbGROb2RlcztcblxuICBjb25zdCBwYXJlbnROb2RlID0gbm9uVGVybWluYWxOb2RlLCAvLy9cbiAgICAgICAgcmVkdWNlZE5vZGUgPSBmaXJzdENoaWxkTm9kZSwgLy8vXG4gICAgICAgIHJlcGxhY2VkQ2hpbGROb2RlID0gcmVkdWNlZE5vZGUsIC8vL1xuICAgICAgICBwYXJlbnROb2RlUnVsZU5hbWUgPSBwYXJlbnROb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIHJlZHVjZWROb2RlT3BhY2l0eSA9IHJlZHVjZWROb2RlLmdldE9wYWNpdHkoKSxcbiAgICAgICAgcmVkdWNlZE5vZGVSdWxlTmFtZSA9IHJlZHVjZWROb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIHJlZHVjZWROb2RlUHJlY2VkZW5jZSA9IHJlZHVjZWROb2RlLmdldFByZWNlZGVuY2UoKSxcbiAgICAgICAgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZE5vZGVSdWxlTmFtZSwgIC8vL1xuICAgICAgICBwYXJlbnRSdWxlTmFtZSA9IHBhcmVudE5vZGVSdWxlTmFtZSwgIC8vL1xuICAgICAgICBwcmVjZWRlbmNlID0gcmVkdWNlZE5vZGVQcmVjZWRlbmNlLCAvLy9cbiAgICAgICAgb3BhY2l0eSA9IHJlZHVjZWROb2RlT3BhY2l0eSwgLy8vXG4gICAgICAgIHJ1bGVOYW1lID0gcnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lKHJlZHVjZWRSdWxlTmFtZSksXG4gICAgICAgIHJlbW92ZWRDaGlsZE5vZGVzID0gcmVkdWNlZE5vZGUucmVtb3ZlQ2hpbGROb2RlcygpO1xuXG4gIGlmIChydWxlTmFtZSA9PT0gcGFyZW50UnVsZU5hbWUpIHtcbiAgICByZXBsYWNlbWVudENoaWxkTm9kZXMgPSByZW1vdmVkQ2hpbGROb2RlczsgIC8vL1xuXG4gICAgcGFyZW50Tm9kZS5zZXRQcmVjZWRlbmNlKHByZWNlZGVuY2UpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSByZW1vdmVkQ2hpbGROb2RlcywgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlID0gTm9uVGVybWluYWxOb2RlLmZyb21SdWxlTmFtZUNoaWxkTm9kZXNBbmRPcGFjaXR5KHJ1bGVOYW1lLCBjaGlsZE5vZGVzLCBvcGFjaXR5KSxcbiAgICAgICAgICByZXBsYWNlbWVudENoaWxkTm9kZSA9IG5vblRlcm1pbmFsTm9kZTsgLy8vXG5cbiAgICByZXBsYWNlbWVudENoaWxkTm9kZS5zZXRQcmVjZWRlbmNlKHByZWNlZGVuY2UpO1xuXG4gICAgcmVwbGFjZW1lbnRDaGlsZE5vZGVzID0gW1xuICAgICAgcmVwbGFjZW1lbnRDaGlsZE5vZGVcbiAgICBdO1xuICB9XG5cbiAgcGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGROb2RlKHJlcGxhY2VkQ2hpbGROb2RlLCByZXBsYWNlbWVudENoaWxkTm9kZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV3cml0ZURpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpIHtcbiAgbGV0IGRpcmVjdGx5UmVwZWF0ZWROb2Rlc1JlcGxhY2VkO1xuXG4gIGRpcmVjdGx5UmVwZWF0ZWROb2Rlc1JlcGxhY2VkID0gcmVwbGFjZURpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpO1xuXG4gIHdoaWxlIChkaXJlY3RseVJlcGVhdGVkTm9kZXNSZXBsYWNlZCkge1xuICAgIGRpcmVjdGx5UmVwZWF0ZWROb2Rlc1JlcGxhY2VkID0gcmVwbGFjZURpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXRlSW5kaXJlY3RseVJlcGVhdGVkTm9kZXMobm9uVGVybWluYWxOb2RlKSB7XG4gIGxldCBwYXJlbnROb2RlID0gbm9uVGVybWluYWxOb2RlOyAvLy9cblxuICBjb25zdCBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlcyA9IGZpbmRJbmRpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpO1xuXG4gIGluZGlyZWN0bHlSZXBlYXRlZE5vZGVzLmZvckVhY2goKGluZGlyZWN0bHlSZXBlYXRlZE5vZGUpID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlTm9kZSA9IGxlZnRSZWN1cnNpdmVOb2RlRnJvbVBhcmVudE5vZGVBbmRJbmRpcmVjdGx5UmVwZWF0ZWROb2RlKHBhcmVudE5vZGUsIGluZGlyZWN0bHlSZXBlYXRlZE5vZGUpLFxuICAgICAgICAgIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzRnJvbUxlZnRSZWN1cnNpdmVOb2RlTm9kZUFuZEluZGlyZWN0bHlSZXBlYXRlZE5vZGUobGVmdFJlY3Vyc2l2ZU5vZGUsIGluZGlyZWN0bHlSZXBlYXRlZE5vZGUpO1xuXG4gICAgYWRqdXN0UGFyZW50Tm9kZVByZWNlZGVuY2UocGFyZW50Tm9kZSwgaW5kaXJlY3RseVJlcGVhdGVkTm9kZSk7XG5cbiAgICBwYXJlbnROb2RlLnNldENoaWxkTm9kZXMoY2hpbGROb2Rlcyk7XG5cbiAgICBwYXJlbnROb2RlID0gbGVmdFJlY3Vyc2l2ZU5vZGU7IC8vL1xuICB9KTtcblxuICByZXR1cm4gcGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gZmluZFJlcGVhdGVkTm9kZXMobm9uVGVybWluYWxOb2RlLCBSZXBlYXRlZE5vZGUpIHtcbiAgY29uc3QgcmVwZWF0ZWROb2RlcyA9IFtdO1xuXG4gIGxldCBsYXN0SW5kZXggPSBudWxsO1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBsZW5ndGggPSBjaGlsZE5vZGVzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IGxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2luZGV4XSxcbiAgICAgICAgICBjaGlsZE5vZGVSZXBlYXRlZE5vZGUgPSAoY2hpbGROb2RlIGluc3RhbmNlb2YgUmVwZWF0ZWROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVSZXBlYXRlZE5vZGUpIHtcbiAgICAgIGxhc3RJbmRleCA9IGluZGV4OyAgLy8vXG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsYXN0SW5kZXggIT09IG51bGwpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IGxhc3RJbmRleDsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgY29uc3QgY2hpbGROb2RlID0gY2hpbGROb2Rlc1tpbmRleF0sXG4gICAgICAgICAgICBjaGlsZE5vZGVSZXBlYXRlZE5vZGUgPSAoY2hpbGROb2RlIGluc3RhbmNlb2YgUmVwZWF0ZWROb2RlKTtcblxuICAgICAgaWYgKCFjaGlsZE5vZGVSZXBlYXRlZE5vZGUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlcGVhdGVkTm9kZSA9IGNoaWxkTm9kZTsgIC8vL1xuXG4gICAgICByZXBlYXRlZE5vZGVzLnVuc2hpZnQocmVwZWF0ZWROb2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVwZWF0ZWROb2Rlcztcbn1cblxuZnVuY3Rpb24gZmluZERpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpIHtcbiAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZE5vZGVzID0gZmluZFJlcGVhdGVkTm9kZXMobm9uVGVybWluYWxOb2RlLCBEaXJlY3RseVJlcGVhdGVkTm9kZSk7XG5cbiAgcmV0dXJuIGRpcmVjdGx5UmVwZWF0ZWROb2Rlcztcbn1cblxuZnVuY3Rpb24gZmluZEluZGlyZWN0bHlSZXBlYXRlZE5vZGVzKG5vblRlcm1pbmFsTm9kZSkge1xuICBjb25zdCBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlcyA9IGZpbmRSZXBlYXRlZE5vZGVzKG5vblRlcm1pbmFsTm9kZSwgSW5kaXJlY3RseVJlcGVhdGVkTm9kZSk7XG5cbiAgaW5kaXJlY3RseVJlcGVhdGVkTm9kZXMucmV2ZXJzZSgpO1xuXG4gIHJldHVybiBpbmRpcmVjdGx5UmVwZWF0ZWROb2Rlcztcbn1cblxuZnVuY3Rpb24gcmVwbGFjZURpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpIHtcbiAgbGV0IGRpcmVjdGx5UmVwZWF0ZWROb2Rlc1JlcGxhY2VkID0gZmFsc2U7XG5cbiAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZE5vZGVzID0gZmluZERpcmVjdGx5UmVwZWF0ZWROb2Rlcyhub25UZXJtaW5hbE5vZGUpLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkTm9kZXNMZW5ndGggPSBkaXJlY3RseVJlcGVhdGVkTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChkaXJlY3RseVJlcGVhdGVkTm9kZXNMZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IG5vblRlcm1pbmFsTm9kZSwgLy8vXG4gICAgICAgICAgcmVwbGFjZWRDaGlsZE5vZGVzID0gZGlyZWN0bHlSZXBlYXRlZE5vZGVzLCAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudENoaWxkTm9kZXMgPSBbXTsgLy8vXG5cbiAgICBkaXJlY3RseVJlcGVhdGVkTm9kZXMuZm9yRWFjaCgoZGlyZWN0bHlSZXBlYXRlZE5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGRpcmVjdGx5UmVwZWF0ZWROb2Rlc0NoaWxkTm9kZXMgPSBkaXJlY3RseVJlcGVhdGVkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgIHB1c2gocmVwbGFjZW1lbnRDaGlsZE5vZGVzLCBkaXJlY3RseVJlcGVhdGVkTm9kZXNDaGlsZE5vZGVzKTtcbiAgICB9KTtcblxuICAgIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkTm9kZXMocmVwbGFjZWRDaGlsZE5vZGVzLCByZXBsYWNlbWVudENoaWxkTm9kZXMpO1xuXG4gICAgZGlyZWN0bHlSZXBlYXRlZE5vZGVzUmVwbGFjZWQgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGx5UmVwZWF0ZWROb2Rlc1JlcGxhY2VkO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RQYXJlbnROb2RlUHJlY2VkZW5jZShwYXJlbnROb2RlLCBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlSZXBlYXRlZE5vZGVSdWxlTmFtZSA9IGluZGlyZWN0bHlSZXBlYXRlZE5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlUnVsZU5hbWUsICAvLy9cbiAgICAgICAgcGFyZW50Tm9kZU5vZGVSdWxlTmFtZSA9IHBhcmVudE5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSk7XG5cbiAgaWYgKHBhcmVudE5vZGVOb2RlUnVsZU5hbWUgPT09IHJ1bGVOYW1lKSB7XG4gICAgY29uc3QgcHJlY2VkZW5jZSA9IGluZGlyZWN0bHlSZXBlYXRlZE5vZGUuZ2V0UHJlY2VkZW5jZSgpO1xuXG4gICAgcGFyZW50Tm9kZS5zZXRQcmVjZWRlbmNlKHByZWNlZGVuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVOb2RlRnJvbVBhcmVudE5vZGVBbmRJbmRpcmVjdGx5UmVwZWF0ZWROb2RlKHBhcmVudE5vZGUsIGluZGlyZWN0bHlSZXBlYXRlZE5vZGUpIHtcbiAgbGV0IGNoaWxkTm9kZXM7XG5cbiAgY2hpbGROb2RlcyA9IHBhcmVudE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gIGNvbnN0IGZyb250Q2hpbGROb2RlcyA9IGZyb250KGNoaWxkTm9kZXMpO1xuXG4gIGNoaWxkTm9kZXMgPSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkTm9kZXMoZnJvbnRDaGlsZE5vZGVzKTtcblxuICBjb25zdCBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlUnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZE5vZGVPcGFjaXR5ID0gaW5kaXJlY3RseVJlcGVhdGVkTm9kZS5nZXRPcGFjaXR5KCksXG4gICAgICAgIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gaW5kaXJlY3RseVJlcGVhdGVkTm9kZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZShpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSksXG4gICAgICAgIHJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAvLy9cbiAgICAgICAgb3BhY2l0eSA9IGluZGlyZWN0bHlSZXBlYXRlZE5vZGVPcGFjaXR5LCAgLy8vXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZSA9IE5vblRlcm1pbmFsTm9kZS5mcm9tUnVsZU5hbWVDaGlsZE5vZGVzQW5kT3BhY2l0eShydWxlTmFtZSwgY2hpbGROb2Rlcywgb3BhY2l0eSksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVOb2RlID0gbm9uVGVybWluYWxOb2RlOyAgLy8vXG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVOb2RlO1xufVxuXG5mdW5jdGlvbiBjaGlsZE5vZGVzRnJvbUxlZnRSZWN1cnNpdmVOb2RlTm9kZUFuZEluZGlyZWN0bHlSZXBlYXRlZE5vZGUobGVmdFJlY3Vyc2l2ZU5vZGUsIGluZGlyZWN0bHlSZXBlYXRlZE5vZGUpIHtcbiAgY29uc3QgY2hpbGROb2RlcyA9IFtcbiAgICAgICAgICBsZWZ0UmVjdXJzaXZlTm9kZVxuICAgICAgICBdLFxuICAgICAgICBpbmRpcmVjdGx5UmVwZWF0ZWROb2RlTnVsbGFyeSA9IGluZGlyZWN0bHlSZXBlYXRlZE5vZGUuaXNOdWxsYXJ5KCk7XG5cbiAgaWYgKCFpbmRpcmVjdGx5UmVwZWF0ZWROb2RlTnVsbGFyeSkge1xuICAgIGNvbnN0IHJlbW92ZWRDaGlsZE5vZGVzID0gaW5kaXJlY3RseVJlcGVhdGVkTm9kZS5yZW1vdmVDaGlsZE5vZGVzKCk7XG5cbiAgICBwdXNoKGNoaWxkTm9kZXMsIHJlbW92ZWRDaGlsZE5vZGVzKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE5vZGVzO1xufVxuIl0sIm5hbWVzIjpbInJld3JpdGVEaXJlY3RseVJlcGVhdGVkTm9kZXMiLCJyZXdyaXRlSW5kaXJlY3RseVJlcGVhdGVkTm9kZXMiLCJyZXdyaXRlUmVkdWNlZE5vZGVzIiwiZnJvbnQiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0IiwicHVzaCIsIm5vblRlcm1pbmFsTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiZmlyc3RDaGlsZE5vZGUiLCJmaXJzdENoaWxkTm9kZVJlZHVjZWROb2RlIiwiUmVkdWNlZE5vZGUiLCJyZXBsYWNlbWVudENoaWxkTm9kZXMiLCJwYXJlbnROb2RlIiwicmVkdWNlZE5vZGUiLCJyZXBsYWNlZENoaWxkTm9kZSIsInBhcmVudE5vZGVSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicmVkdWNlZE5vZGVPcGFjaXR5IiwiZ2V0T3BhY2l0eSIsInJlZHVjZWROb2RlUnVsZU5hbWUiLCJyZWR1Y2VkTm9kZVByZWNlZGVuY2UiLCJnZXRQcmVjZWRlbmNlIiwicmVkdWNlZFJ1bGVOYW1lIiwicGFyZW50UnVsZU5hbWUiLCJwcmVjZWRlbmNlIiwib3BhY2l0eSIsInJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lIiwicmVtb3ZlZENoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZE5vZGVzIiwic2V0UHJlY2VkZW5jZSIsIk5vblRlcm1pbmFsTm9kZSIsImZyb21SdWxlTmFtZUNoaWxkTm9kZXNBbmRPcGFjaXR5IiwicmVwbGFjZW1lbnRDaGlsZE5vZGUiLCJyZXBsYWNlQ2hpbGROb2RlIiwiZGlyZWN0bHlSZXBlYXRlZE5vZGVzUmVwbGFjZWQiLCJyZXBsYWNlRGlyZWN0bHlSZXBlYXRlZE5vZGVzIiwiaW5kaXJlY3RseVJlcGVhdGVkTm9kZXMiLCJmaW5kSW5kaXJlY3RseVJlcGVhdGVkTm9kZXMiLCJmb3JFYWNoIiwiaW5kaXJlY3RseVJlcGVhdGVkTm9kZSIsImxlZnRSZWN1cnNpdmVOb2RlIiwibGVmdFJlY3Vyc2l2ZU5vZGVGcm9tUGFyZW50Tm9kZUFuZEluZGlyZWN0bHlSZXBlYXRlZE5vZGUiLCJjaGlsZE5vZGVzRnJvbUxlZnRSZWN1cnNpdmVOb2RlTm9kZUFuZEluZGlyZWN0bHlSZXBlYXRlZE5vZGUiLCJhZGp1c3RQYXJlbnROb2RlUHJlY2VkZW5jZSIsInNldENoaWxkTm9kZXMiLCJmaW5kUmVwZWF0ZWROb2RlcyIsIlJlcGVhdGVkTm9kZSIsInJlcGVhdGVkTm9kZXMiLCJsYXN0SW5kZXgiLCJsZW5ndGgiLCJpbmRleCIsImNoaWxkTm9kZSIsImNoaWxkTm9kZVJlcGVhdGVkTm9kZSIsInJlcGVhdGVkTm9kZSIsInVuc2hpZnQiLCJmaW5kRGlyZWN0bHlSZXBlYXRlZE5vZGVzIiwiZGlyZWN0bHlSZXBlYXRlZE5vZGVzIiwiRGlyZWN0bHlSZXBlYXRlZE5vZGUiLCJJbmRpcmVjdGx5UmVwZWF0ZWROb2RlIiwicmV2ZXJzZSIsImRpcmVjdGx5UmVwZWF0ZWROb2Rlc0xlbmd0aCIsInJlcGxhY2VkQ2hpbGROb2RlcyIsImRpcmVjdGx5UmVwZWF0ZWROb2RlIiwiZGlyZWN0bHlSZXBlYXRlZE5vZGVzQ2hpbGROb2RlcyIsInJlcGxhY2VDaGlsZE5vZGVzIiwiaW5kaXJlY3RseVJlcGVhdGVkTm9kZVJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJwYXJlbnROb2RlTm9kZVJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tSW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJmcm9udENoaWxkTm9kZXMiLCJpbmRpcmVjdGx5UmVwZWF0ZWROb2RlT3BhY2l0eSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZXBlYXRlZE5vZGVOdWxsYXJ5IiwiaXNOdWxs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