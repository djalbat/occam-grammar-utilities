"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rewriteDirectlyRepeatedNodes: function() {
        return rewriteDirectlyRepeatedNodes;
    },
    rewriteIndirectlyRepeatedNodes: function() {
        return rewriteIndirectlyRepeatedNodes;
    },
    rewriteReducedNodes: function() {
        return rewriteReducedNodes;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _reduced = /*#__PURE__*/ _interop_require_default(require("../node/reduced"));
var _leftRecursive = /*#__PURE__*/ _interop_require_default(require("../node/leftRecursive"));
var _directly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/indirectly"));
var _ruleName = require("../utilities/ruleName");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var front = _necessary.arrayUtilities.front, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
function rewriteReducedNodes(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    var firstChildNode = first(childNodes), firstChildNodeReducedNode = _instanceof(firstChildNode, _reduced.default);
    if (!firstChildNodeReducedNode) {
        return;
    }
    var replacementChildNodes;
    var parentNode = nonTerminalNode, reducedNode = firstChildNode, replacedChildNode = reducedNode, parentNodeRuleName = parentNode.getRuleName(), reducedNodeOpacity = reducedNode.getOpacity(), reducedNodeRuleName = reducedNode.getRuleName(), reducedNodePrecedence = reducedNode.getPrecedence(), reducedRuleName = reducedNodeRuleName, parentRuleName = parentNodeRuleName, precedence = reducedNodePrecedence, opacity = reducedNodeOpacity, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName), removedChildNodes = reducedNode.removeChildNodes();
    if (ruleName === parentRuleName) {
        replacementChildNodes = removedChildNodes; ///
        parentNode.setPrecedence(precedence);
    } else {
        var childNodes1 = removedChildNodes, _$nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndOpacity(ruleName, childNodes1, opacity);
        _$nonTerminalNode.setPrecedence(_$nonTerminalNode);
        replacementChildNodes = [
            _$nonTerminalNode
        ];
    }
    parentNode.replaceChildNode(replacedChildNode, replacementChildNodes);
}
function rewriteDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced;
    directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    while(directlyRepeatedNodesReplaced){
        directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    }
}
function rewriteIndirectlyRepeatedNodes(nonTerminalNode) {
    var parentNode = nonTerminalNode; ///
    var indirectlyRepeatedNodes = findIndirectlyRepeatedNodes(nonTerminalNode);
    indirectlyRepeatedNodes.forEach(function(indirectlyRepeatedNode) {
        var leftRecursiveNode = leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode), childNodes = childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode);
        adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode);
        parentNode.setChildNodes(childNodes);
        parentNode = leftRecursiveNode; ///
    });
    return parentNode;
}
function findRepeatedNodes(nonTerminalNode, RepeatedNode) {
    var repeatedNodes = [];
    var lastIndex = null;
    var childNodes = nonTerminalNode.getChildNodes(), length = childNodes.length;
    for(var index = length - 1; index >= 0; index--){
        var childNode = childNodes[index], childNodeRepeatedNode = _instanceof(childNode, RepeatedNode);
        if (childNodeRepeatedNode) {
            lastIndex = index; ///
            break;
        }
    }
    if (lastIndex !== null) {
        for(var index1 = lastIndex; index1 >= 0; index1--){
            var childNode1 = childNodes[index1], childNodeRepeatedNode1 = _instanceof(childNode1, RepeatedNode);
            if (!childNodeRepeatedNode1) {
                break;
            }
            var repeatedNode = childNode1; ///
            repeatedNodes.unshift(repeatedNode);
        }
    }
    return repeatedNodes;
}
function findDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _directly.default);
    return directlyRepeatedNodes;
}
function findIndirectlyRepeatedNodes(nonTerminalNode) {
    var indirectlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _indirectly.default);
    indirectlyRepeatedNodes.reverse();
    return indirectlyRepeatedNodes;
}
function replaceDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced = false;
    var directlyRepeatedNodes = findDirectlyRepeatedNodes(nonTerminalNode), directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    if (directlyRepeatedNodesLength > 0) {
        var parentNode = nonTerminalNode, replacedChildNodes = directlyRepeatedNodes, replacementChildNodes = []; ///
        directlyRepeatedNodes.forEach(function(directlyRepeatedNode) {
            var directlyRepeatedNodesChildNodes = directlyRepeatedNode.getChildNodes();
            push(replacementChildNodes, directlyRepeatedNodesChildNodes);
        });
        parentNode.replaceChildNodes(replacedChildNodes, replacementChildNodes);
        directlyRepeatedNodesReplaced = true;
    }
    return directlyRepeatedNodesReplaced;
}
function adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode) {
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, parentNodeNodeRuleName = parentNode.getRuleName(), ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
    if (parentNodeNodeRuleName === ruleName) {
        var precedence = indirectlyRepeatedNode.getPrecedence();
        parentNode.setPrecedence(precedence);
    }
}
function leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode) {
    var childNodes;
    childNodes = parentNode.getChildNodes();
    var frontChildNodes = front(childNodes);
    childNodes = parentNode.removeChildNodes(frontChildNodes);
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedNodeOpacity = indirectlyRepeatedNode.getOpacity(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), ruleName = leftRecursiveRuleName, opacity = indirectlyRepeatedNodeOpacity, leftRecursiveNode = _leftRecursive.default.fromRuleNameChildNodesAndOpacity(ruleName, childNodes, opacity);
    return leftRecursiveNode;
}
function childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode) {
    var childNodes = [
        leftRecursiveNode
    ], indirectlyRepeatedNodeNullary = indirectlyRepeatedNode.isNullary();
    if (!indirectlyRepeatedNodeNullary) {
        var removedChildNodes = indirectlyRepeatedNode.removeChildNodes();
        push(childNodes, removedChildNodes);
    }
    return childNodes;
}

//# sourceMappingURL=data:application/json;base64,