"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rewriteDirectlyRepeatedNodes: function() {
        return rewriteDirectlyRepeatedNodes;
    },
    rewriteIndirectlyRepeatedNodes: function() {
        return rewriteIndirectlyRepeatedNodes;
    },
    rewriteReducedNodes: function() {
        return rewriteReducedNodes;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _reduced = /*#__PURE__*/ _interop_require_default(require("../node/reduced"));
var _directly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/indirectly"));
var _ruleName = require("../utilities/ruleName");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var push = _necessary.arrayUtilities.push;
function rewriteReducedNodes(nonTerminalNode) {
    var reducedChildNode;
    var firstChildNodeReducedNode = nonTerminalNode.someChildNode(function(childNode, index) {
        if (index === 0) {
            if (_instanceof(childNode, _reduced.default)) {
                reducedChildNode = childNode; ///
                return true;
            }
        }
    });
    if (!firstChildNodeReducedNode) {
        return;
    }
    var parentNode = nonTerminalNode, replacedChildNode = reducedChildNode, replacedChildNodeOpacity = replacedChildNode.getOpacity(), replacedChildNodeRuleName = replacedChildNode.getRuleName(), replacedChildNodePrecedence = replacedChildNode.getPrecedence(), replacedChildNodeChildNodes = replacedChildNode.removeChildNodes(), parentNodeRuleName = parentNode.getRuleName(), reducedRuleName = replacedChildNodeRuleName, parentRuleName = parentNodeRuleName, precedence = replacedChildNodePrecedence, opacity = replacedChildNodeOpacity, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName);
    var replacementChildNodes;
    if (ruleName === parentRuleName) {
        replacementChildNodes = replacedChildNodeChildNodes; ///
        parentNode.setPrecedence(precedence);
    } else {
        var childNodes = replacedChildNodeChildNodes, _$nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndOpacity(ruleName, childNodes, opacity), replacementChildNode = _$nonTerminalNode; ///
        replacementChildNode.setPrecedence(precedence);
        replacementChildNodes = [
            replacementChildNode
        ];
    }
    parentNode.replaceChildNode(replacedChildNode, replacementChildNodes);
}
function rewriteDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced;
    directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    while(directlyRepeatedNodesReplaced){
        directlyRepeatedNodesReplaced = replaceDirectlyRepeatedNodes(nonTerminalNode);
    }
}
function rewriteIndirectlyRepeatedNodes(nonTerminalNode) {
    var parentNode = nonTerminalNode; ///
    var indirectlyRepeatedNodes = findIndirectlyRepeatedNodes(nonTerminalNode);
    indirectlyRepeatedNodes.forEach(function(indirectlyRepeatedNode) {
        var leftRecursiveNode = leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode), childNodes = childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode);
        adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode);
        parentNode.setChildNodes(childNodes);
        parentNode = leftRecursiveNode; ///
    });
    return parentNode;
}
function findRepeatedNodes(nonTerminalNode, RepeatedNode) {
    var repeatedNodes;
    var endIndex = -1;
    nonTerminalNode.backwardsSomeChildNode(function(childNode, index) {
        var childNodeRepeatedNode = _instanceof(childNode, RepeatedNode);
        if (childNodeRepeatedNode) {
            endIndex = index + 1;
            return true;
        }
    });
    if (endIndex === -1) {
        repeatedNodes = [];
    } else {
        var startIndex;
        nonTerminalNode.backwardsSomeChildNode(function(childNode, index) {
            if (index < endIndex) {
                var childNodeRepeatedNode = _instanceof(childNode, RepeatedNode);
                if (!childNodeRepeatedNode) {
                    startIndex = index + 1;
                }
            }
        });
        var childNodes = nonTerminalNode.sliceChildNodes(startIndex, endIndex);
        repeatedNodes = childNodes;
    }
    return repeatedNodes;
}
function removeFrontChildNodes(parentNode) {
    var multiplicity = parentNode.getMultiplicity(), deleteCount = multiplicity - 1, start = 0, removedFrontChildNodes = parentNode.spliceChildNodes(start, deleteCount);
    return removedFrontChildNodes;
}
function findDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _directly.default);
    return directlyRepeatedNodes;
}
function findIndirectlyRepeatedNodes(nonTerminalNode) {
    var indirectlyRepeatedNodes = findRepeatedNodes(nonTerminalNode, _indirectly.default);
    indirectlyRepeatedNodes.reverse();
    return indirectlyRepeatedNodes;
}
function replaceDirectlyRepeatedNodes(nonTerminalNode) {
    var directlyRepeatedNodesReplaced = false;
    var directlyRepeatedNodes = findDirectlyRepeatedNodes(nonTerminalNode), directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    if (directlyRepeatedNodesLength > 0) {
        var parentNode = nonTerminalNode, replacedChildNodes = directlyRepeatedNodes, replacementChildNodes = []; ///
        directlyRepeatedNodes.forEach(function(directlyRepeatedNode) {
            var directlyRepeatedNodesChildNodes = directlyRepeatedNode.removeChildNodes();
            push(replacementChildNodes, directlyRepeatedNodesChildNodes);
        });
        parentNode.replaceChildNodes(replacedChildNodes, replacementChildNodes);
        directlyRepeatedNodesReplaced = true;
    }
    return directlyRepeatedNodesReplaced;
}
function adjustParentNodePrecedence(parentNode, indirectlyRepeatedNode) {
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, parentNodeNodeRuleName = parentNode.getRuleName(), ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
    if (parentNodeNodeRuleName === ruleName) {
        var precedence = indirectlyRepeatedNode.getPrecedence();
        parentNode.setPrecedence(precedence);
    }
}
function leftRecursiveNodeFromParentNodeAndIndirectlyRepeatedNode(parentNode, indirectlyRepeatedNode) {
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedNodeOpacity = indirectlyRepeatedNode.getOpacity(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, removedFrontChildNodes = removeFrontChildNodes(parentNode), leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), ruleName = leftRecursiveRuleName, childNodes = removedFrontChildNodes, opacity = indirectlyRepeatedNodeOpacity, nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndOpacity(ruleName, childNodes, opacity), leftRecursiveNode = nonTerminalNode; ///
    return leftRecursiveNode;
}
function childNodesFromLeftRecursiveNodeNodeAndIndirectlyRepeatedNode(leftRecursiveNode, indirectlyRepeatedNode) {
    var childNodes = [
        leftRecursiveNode
    ], indirectlyRepeatedNodeNullary = indirectlyRepeatedNode.isNullary();
    if (!indirectlyRepeatedNodeNullary) {
        var removedChildNodes = indirectlyRepeatedNode.removeChildNodes();
        push(childNodes, removedChildNodes);
    }
    return childNodes;
}

//# sourceMappingURL=data:application/json;base64,