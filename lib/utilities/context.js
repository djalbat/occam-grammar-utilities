"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLeftRecursiveDefinition: function() {
        return addLeftRecursiveDefinition;
    },
    addDirectlyLeftRecursiveDefinition: function() {
        return addDirectlyLeftRecursiveDefinition;
    },
    addDirectlyLeftRecursiveDefinitions: function() {
        return addDirectlyLeftRecursiveDefinitions;
    },
    addIndirectlyLeftRecursiveDefinition: function() {
        return addIndirectlyLeftRecursiveDefinition;
    },
    addIndirectlyLeftRecursiveDefinitions: function() {
        return addIndirectlyLeftRecursiveDefinitions;
    },
    findDirectlyLeftRecursiveDefinition: function() {
        return findDirectlyLeftRecursiveDefinition;
    },
    findDirectlyLeftRecursiveDefinitions: function() {
        return findDirectlyLeftRecursiveDefinitions;
    },
    findIndirectlyLeftRecursiveDefinitions: function() {
        return findIndirectlyLeftRecursiveDefinitions;
    },
    removeDirectlyLeftRecursiveDefinitions: function() {
        return removeDirectlyLeftRecursiveDefinitions;
    },
    removeIndirectlyLeftRecursiveDefinitions: function() {
        return removeIndirectlyLeftRecursiveDefinitions;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/indirectly"));
var _array = require("../utilities/array");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function addLeftRecursiveDefinition(leftRecursiveDefinition, context) {
    var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
    if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
        addDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, context);
    }
    var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly.default);
    if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
        addIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context);
    }
}
function addDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    directlyLeftRecursiveDefinitions.push(directlyLeftRecursiveDefinition);
}
function addDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var directlyLeftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var directlyLeftRecursiveDefinitionsA = directlyLeftRecursiveDefinitions; ///
    (0, _array.push)(directlyLeftRecursiveDefinitionsA, directlyLeftRecursiveDefinitionsB);
}
function addIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions.push(indirectlyLeftRecursiveDefinition);
}
function addIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var indirectlyLeftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    var indirectlyLeftRecursiveDefinitionsA = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.push)(indirectlyLeftRecursiveDefinitionsA, indirectlyLeftRecursiveDefinitionsB);
}
function findDirectlyLeftRecursiveDefinition(rule, context) {
    if (context === undefined) {
        context = rule; ///
        rule = null;
    }
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, directlyLeftRecursiveDefinition = directlyLeftRecursiveDefinitions.find(function(directlyLeftRecursiveDefinition) {
        var directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
        if (rule === null || rule === directlyLeftRecursiveDefinitionRule) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    directlyLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions.filter(function(directlyLeftRecursiveDefinitions) {
        var directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinitions.getRule();
        if (directlyLeftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, definition, leftRecursiveRuleName, context) {
    var indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    indirectlyLeftRecursiveDefinitions = indirectlyLeftRecursiveDefinitions.filter(function(indirectlyLeftRecursiveDefinition) {
        var indirectlyLeftRecursiveDefinitionRule = indirectlyLeftRecursiveDefinition.getRule();
        if (indirectlyLeftRecursiveDefinitionRule === rule) {
            if (leftRecursiveRuleName === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinitionDefinition = indirectlyLeftRecursiveDefinition.getDefinition(), indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName = indirectlyLeftRecursiveDefinition.getLeftRecursiveRuleName();
            if (indirectlyLeftRecursiveDefinitionDefinition !== definition && indirectlyLeftRecursiveDefinitionLeftRecursiveRuleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var directlyLeftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var directlyLeftRecursiveDefinitionsA = directlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(directlyLeftRecursiveDefinitionsA, directlyLeftRecursiveDefinitionsB);
}
function removeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var indirectlyLeftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    indirectlyLeftRecursiveDefinitions = context.indirectlyLeftRecursiveDefinitions;
    var indirectlyLeftRecursiveDefinitionsA = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(indirectlyLeftRecursiveDefinitionsA, indirectlyLeftRecursiveDefinitionsB);
}

//# sourceMappingURL=data:application/json;base64,