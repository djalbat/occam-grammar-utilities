"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLeftRecursiveDefinition: function() {
        return addLeftRecursiveDefinition;
    },
    addLeftRecursiveDefinitions: function() {
        return addLeftRecursiveDefinitions;
    },
    findLeftRecursiveDefinitions: function() {
        return findLeftRecursiveDefinitions;
    },
    removeLeftRecursiveDefinitions: function() {
        return removeLeftRecursiveDefinitions;
    },
    findDirectlyLeftRecursiveDefinition: function() {
        return findDirectlyLeftRecursiveDefinition;
    },
    findDirectlyLeftRecursiveDefinitions: function() {
        return findDirectlyLeftRecursiveDefinitions;
    },
    findIndirectlyLeftRecursiveDefinitions: function() {
        return findIndirectlyLeftRecursiveDefinitions;
    },
    retrieveGreatestIndirectlyLeftRecursiveDefinition: function() {
        return retrieveGreatestIndirectlyLeftRecursiveDefinition;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/indirectly"));
var _array = require("../utilities/array");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function addLeftRecursiveDefinition(addedLeftRecursiveDefinition, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.push(addedLeftRecursiveDefinition);
}
function addLeftRecursiveDefinitions(addedLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    (0, _array.push)(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function findLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (rule === null) {
            return true;
        }
        var leftRecursiveDefinitionsRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return leftRecursiveDefinitions;
}
function removeLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    (0, _array.leftDifference)(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function findDirectlyLeftRecursiveDefinition(rule, context) {
    if (context === undefined) {
        context = rule; ///
        rule = null;
    }
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _directly.default)) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
            if (rule === directlyLeftRecursiveDefinitionRule) {
                return true;
            }
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _directly.default)) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinition.getRule();
            if (directlyLeftRecursiveDefinitionsRule === rule) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, callback, context) {
    if (context === undefined) {
        context = callback;
        callback = function(indirectlyLeftRecursiveDefinition) {
            return true;
        };
    }
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _indirectly.default)) {
            if (rule === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, indirectlyLeftRecursiveDefinitionRule = indirectlyLeftRecursiveDefinition.getRule();
            if (indirectlyLeftRecursiveDefinitionRule === rule) {
                var found = callback(indirectlyLeftRecursiveDefinition);
                if (found) {
                    return true;
                }
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(context) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _indirectly.default)) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            if (greatestIndirectlyLeftRecursiveDefinition === null) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            } else {
                var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
                if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                    greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
                }
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4uL3JlY3Vyc2l2ZURlZmluaXRpb24vbGVmdC9kaXJlY3RseVwiO1xuaW1wb3J0IEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBmcm9tIFwiLi4vcmVjdXJzaXZlRGVmaW5pdGlvbi9sZWZ0L2luZGlyZWN0bHlcIjtcblxuaW1wb3J0IHsgcHVzaCwgbGVmdERpZmZlcmVuY2UgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0O1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5wdXNoKGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0O1xuXG4gIHB1c2gobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBhZGRlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpIHtcbiAgbGV0IHsgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0O1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5maWx0ZXIoKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7ICAvLy9cbiAgICBpZiAocnVsZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUnVsZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKTtcblxuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNSdWxlID09PSBydWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgY29udGV4dCkge1xuICBjb25zdCB7IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9ID0gY29udGV4dDtcblxuICBsZWZ0RGlmZmVyZW5jZShsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24ocnVsZSwgY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29udGV4dCA9IHJ1bGU7IC8vL1xuICAgIHJ1bGUgPSBudWxsO1xuICB9XG5cbiAgY29uc3QgeyBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgfSA9IGNvbnRleHQsXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZmluZCgobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gaW5zdGFuY2VvZiBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBpZiAocnVsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgICAgICAgICBpZiAocnVsZSA9PT0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgfSA9IGNvbnRleHQsXG4gICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5maWx0ZXIoKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgICBpZiAocnVsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUnVsZSA9PT0gcnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29udGV4dCA9IGNhbGxiYWNrO1xuICAgIGNhbGxiYWNrID0gKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4gdHJ1ZVxuICB9XG5cbiAgY29uc3QgeyBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgfSA9IGNvbnRleHQsXG4gICAgICAgIGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZmlsdGVyKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgaWYgKHJ1bGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgICAgICAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKTtcblxuICAgICAgICAgICAgaWYgKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUgPT09IHJ1bGUpIHtcbiAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSBjYWxsYmFjayhpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCkge1xuICBsZXQgZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gIGNvbnN0IHsgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0O1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5mb3JFYWNoKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgY29uc3QgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb247ICAvLy9cblxuICAgICAgaWYgKGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID09PSBudWxsKSB7XG4gICAgICAgIGdyZWF0ZXN0SW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uaXNHcmVhdGVyVGhhbihncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICAgICAgaWYgKGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkdyZWF0ZXJUaGFuR3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgICBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgLy8vXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBncmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cbiJdLCJuYW1lcyI6WyJhZGRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFkZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV0cmlldmVHcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJjb250ZXh0IiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicHVzaCIsImFkZGVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZSIsImZpbHRlciIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUnVsZSIsImdldFJ1bGUiLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdERpZmZlcmVuY2UiLCJ1bmRlZmluZWQiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZmluZCIsIkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNSdWxlIiwiY2FsbGJhY2siLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSIsImZvdW5kIiwiZ3JlYXRlc3RJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmb3JFYWNoIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uR3JlYXRlclRoYW5HcmVhdGVzdEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImlzR3JlYXRlclRoYW4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7SUFPR0EsMEJBQTBCO2VBQTFCQSwwQkFBMEI7O0lBTTFCQywyQkFBMkI7ZUFBM0JB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