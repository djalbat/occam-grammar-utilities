"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLeftRecursiveDefinition: function() {
        return addLeftRecursiveDefinition;
    },
    addLeftRecursiveDefinitions: function() {
        return addLeftRecursiveDefinitions;
    },
    findLeftRecursiveDefinitions: function() {
        return findLeftRecursiveDefinitions;
    },
    removeLeftRecursiveDefinitions: function() {
        return removeLeftRecursiveDefinitions;
    },
    findDirectlyLeftRecursiveDefinition: function() {
        return findDirectlyLeftRecursiveDefinition;
    },
    findDirectlyLeftRecursiveDefinitions: function() {
        return findDirectlyLeftRecursiveDefinitions;
    },
    findIndirectlyLeftRecursiveDefinitions: function() {
        return findIndirectlyLeftRecursiveDefinitions;
    },
    retrieveGreatestIndirectlyLeftRecursiveDefinition: function() {
        return retrieveGreatestIndirectlyLeftRecursiveDefinition;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/indirectly"));
var _array = require("../utilities/array");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function addLeftRecursiveDefinition(addedLeftRecursiveDefinition, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.push(addedLeftRecursiveDefinition);
}
function addLeftRecursiveDefinitions(addedLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    (0, _array.push)(leftRecursiveDefinitions, addedLeftRecursiveDefinitions);
}
function findLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (rule === null) {
            return true;
        }
        var leftRecursiveDefinitionsRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return leftRecursiveDefinitions;
}
function removeLeftRecursiveDefinitions(removedLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    (0, _array.leftDifference)(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function findDirectlyLeftRecursiveDefinition(rule, context) {
    if (context === undefined) {
        context = rule; ///
        rule = null;
    }
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
            if (rule === directlyLeftRecursiveDefinitionRule) {
                return true;
            }
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinition.getRule();
            if (directlyLeftRecursiveDefinitionsRule === rule) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, callback, context) {
    if (context === undefined) {
        context = callback;
        callback = function(indirectlyLeftRecursiveDefinition) {
            return true;
        };
    }
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            if (rule === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, indirectlyLeftRecursiveDefinitionRule = indirectlyLeftRecursiveDefinition.getRule();
            if (indirectlyLeftRecursiveDefinitionRule === rule) {
                var found = callback(indirectlyLeftRecursiveDefinition);
                if (found) {
                    return true;
                }
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(context) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _indirectly.default);
        if (leftRecursiveDefinitionIndirectlyLeftRecursiveDefinition) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            if (greatestIndirectlyLeftRecursiveDefinition === null) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            } else {
                var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
                if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                    greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
                }
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,