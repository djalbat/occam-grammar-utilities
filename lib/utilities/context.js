"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLeftRecursiveDefinition: function() {
        return addLeftRecursiveDefinition;
    },
    addDirectlyLeftRecursiveDefinition: function() {
        return addDirectlyLeftRecursiveDefinition;
    },
    addDirectlyLeftRecursiveDefinitions: function() {
        return addDirectlyLeftRecursiveDefinitions;
    },
    addIndirectlyLeftRecursiveDefinition: function() {
        return addIndirectlyLeftRecursiveDefinition;
    },
    addIndirectlyLeftRecursiveDefinitions: function() {
        return addIndirectlyLeftRecursiveDefinitions;
    },
    findLeftRecursiveDefinitions: function() {
        return findLeftRecursiveDefinitions;
    },
    findDirectlyLeftRecursiveDefinition: function() {
        return findDirectlyLeftRecursiveDefinition;
    },
    findDirectlyLeftRecursiveDefinitions: function() {
        return findDirectlyLeftRecursiveDefinitions;
    },
    findIndirectlyLeftRecursiveDefinitions: function() {
        return findIndirectlyLeftRecursiveDefinitions;
    },
    removeDirectlyLeftRecursiveDefinitions: function() {
        return removeDirectlyLeftRecursiveDefinitions;
    },
    removeIndirectlyLeftRecursiveDefinitions: function() {
        return removeIndirectlyLeftRecursiveDefinitions;
    },
    retrieveGreatestIndirectlyLeftRecursiveDefinition: function() {
        return retrieveGreatestIndirectlyLeftRecursiveDefinition;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/directly"));
var _indirectly = /*#__PURE__*/ _interopRequireDefault(require("../recursiveDefinition/left/indirectly"));
var _array = require("../utilities/array");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function addLeftRecursiveDefinition(leftRecursiveDefinition, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.push(leftRecursiveDefinition);
}
function addDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinition = directlyLeftRecursiveDefinition; ///
    leftRecursiveDefinitions.push(leftRecursiveDefinition);
}
function addDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinitionsA = leftRecursiveDefinitions, leftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    (0, _array.push)(leftRecursiveDefinitionsA, leftRecursiveDefinitionsB);
}
function addIndirectlyLeftRecursiveDefinition(indirectlyLeftRecursiveDefinition, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
    leftRecursiveDefinitions.push(leftRecursiveDefinition);
}
function addIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinitionsA = leftRecursiveDefinitions, leftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.push)(leftRecursiveDefinitionsA, leftRecursiveDefinitionsB);
}
function findLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (rule === null) {
            return true;
        }
        var leftRecursiveDefinitionsRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return leftRecursiveDefinitions;
}
function findDirectlyLeftRecursiveDefinition(rule, context) {
    if (context === undefined) {
        context = rule; ///
        rule = null;
    }
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _directly.default)) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionRule = directlyLeftRecursiveDefinition.getRule();
            if (rule === directlyLeftRecursiveDefinitionRule) {
                return true;
            }
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _directly.default)) {
            if (rule === null) {
                return true;
            }
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinition.getRule();
            if (directlyLeftRecursiveDefinitionsRule === rule) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function findIndirectlyLeftRecursiveDefinitions(rule, callback, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, indirectlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _indirectly.default)) {
            if (rule === null) {
                return true;
            }
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition, indirectlyLeftRecursiveDefinitionRule = indirectlyLeftRecursiveDefinition.getRule();
            if (indirectlyLeftRecursiveDefinitionRule === rule) {
                var found = callback(indirectlyLeftRecursiveDefinition);
                if (found) {
                    return true;
                }
            }
        }
    });
    return indirectlyLeftRecursiveDefinitions;
}
function removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinitionsA = leftRecursiveDefinitions, leftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(leftRecursiveDefinitionsA, leftRecursiveDefinitionsB);
}
function removeIndirectlyLeftRecursiveDefinitions(indirectlyLeftRecursiveDefinitions, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, leftRecursiveDefinitionsA = leftRecursiveDefinitions, leftRecursiveDefinitionsB = indirectlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(leftRecursiveDefinitionsA, leftRecursiveDefinitionsB);
}
function retrieveGreatestIndirectlyLeftRecursiveDefinition(context) {
    var greatestIndirectlyLeftRecursiveDefinition = null;
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, _indirectly.default)) {
            var indirectlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            if (greatestIndirectlyLeftRecursiveDefinition === null) {
                greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
            } else {
                var indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition.isGreaterThan(greatestIndirectlyLeftRecursiveDefinition);
                if (indirectlyLeftRecursiveDefinitionGreaterThanGreatestIndirectlyLeftRecursiveDefinition) {
                    greatestIndirectlyLeftRecursiveDefinition = indirectlyLeftRecursiveDefinition; ///
                }
            }
        }
    });
    return greatestIndirectlyLeftRecursiveDefinition;
}

//# sourceMappingURL=data:application/json;base64,