'use strict';

var classUtilities = require('../utilities/class'),
    ruleNameUtilities = require('../utilities/ruleName');

var isInstanceOf = classUtilities.isInstanceOf,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;

function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function reducedRuleFromRule(rule, rules, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);
  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);
    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, rules, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);
  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);
    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, rules, RewrittenRule) {
  var rewrittenRule;
  var ruleRewrittenRule = isInstanceOf(rule, RewrittenRule);

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    rewrittenRule = RewrittenRule.fromRule(rule);
    var replacedRule = rule,
        ///
    replacementRule = rewrittenRule; ///

    replaceRule(replacedRule, replacementRule, rules);
  }

  return rewrittenRule;
}

module.exports = {
  findRule: findRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromRule: repeatedRuleFromRule,
  rewrittenRuleFromRule: rewrittenRuleFromRule
};

function replaceRule(replacedRule, replacementRule, rules) {
  var index = rules.indexOf(replacedRule);

  if (index > -1) {
    var start = index,
        deleteCount = 1;
    rules.splice(start, deleteCount, replacementRule);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGUuanMiXSwibmFtZXMiOlsiY2xhc3NVdGlsaXRpZXMiLCJyZXF1aXJlIiwicnVsZU5hbWVVdGlsaXRpZXMiLCJpc0luc3RhbmNlT2YiLCJyZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiZmluZFJ1bGUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInJlZHVjZWRSdWxlRnJvbVJ1bGUiLCJSZWR1Y2VkUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJwdXNoIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJSZXBlYXRlZFJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiUmV3cml0dGVuUnVsZSIsInJld3JpdHRlblJ1bGUiLCJydWxlUmV3cml0dGVuUnVsZSIsInJlcGxhY2VkUnVsZSIsInJlcGxhY2VtZW50UnVsZSIsInJlcGxhY2VSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluZGV4IiwiaW5kZXhPZiIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGNBQWMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQTlCO0FBQUEsSUFDTUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQURqQzs7QUFHTSxJQUFFRSxZQUFGLEdBQW1CSCxjQUFuQixDQUFFRyxZQUFGO0FBQUEsSUFDRUMsNEJBREYsR0FDZ0VGLGlCQURoRSxDQUNFRSw0QkFERjtBQUFBLElBQ2dDQywyQkFEaEMsR0FDZ0VILGlCQURoRSxDQUNnQ0csMkJBRGhDOztBQUdOLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxJQUFJLEdBQUdGLFFBQWI7QUFBQSxN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S0FBSyxDQUFDNEIsTUFBTixDQUFhRixLQUFiLEVBQW9CQyxXQUFwQixFQUFpQ1AsZUFBakM7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjbGFzc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9jbGFzcycpLFxuICAgICAgcnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcnVsZU5hbWUnKTtcblxuY29uc3QgeyBpc0luc3RhbmNlT2YgfSA9IGNsYXNzVXRpbGl0aWVzLFxuICAgICAgeyByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSA9IHJ1bGVOYW1lVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpIHtcbiAgY29uc3QgbmFtZSA9IHJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJ1bGUgPSBydWxlcy5maW5kKChydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgICAgICAgIGlmIChydWxlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsOyAvLy9cblxuICByZXR1cm4gcnVsZTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlcywgUmVkdWNlZFJ1bGUpIHtcblx0Y29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcblx0XHRcdFx0cmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuXHRsZXQgcmVkdWNlZFJ1bGUgPSBmaW5kUnVsZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVzKTtcblxuXHRpZiAocmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVkdWNlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzLCBSZXBlYXRlZFJ1bGUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcmVwZWF0ZWRSdWxlTmFtZSA9IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gIGxldCByZXBlYXRlZFJ1bGUgPSBmaW5kUnVsZShyZXBlYXRlZFJ1bGVOYW1lLCBydWxlcyk7XG5cbiAgaWYgKHJlcGVhdGVkUnVsZSA9PT0gbnVsbCkge1xuICAgIHJlcGVhdGVkUnVsZSA9IFJlcGVhdGVkUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIHJ1bGVzLnB1c2gocmVwZWF0ZWRSdWxlKTtcbiAgfVxuXG4gIHJldHVybiByZXBlYXRlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJld3JpdHRlblJ1bGVGcm9tUnVsZShydWxlLCBydWxlcywgUmV3cml0dGVuUnVsZSkge1xuICBsZXQgcmV3cml0dGVuUnVsZTtcblxuICBjb25zdCBydWxlUmV3cml0dGVuUnVsZSA9IGlzSW5zdGFuY2VPZihydWxlLCBSZXdyaXR0ZW5SdWxlKTtcblxuICBpZiAocnVsZVJld3JpdHRlblJ1bGUpIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gcnVsZTsgLy8vXG4gIH0gZWxzZSB7XG4gICAgcmV3cml0dGVuUnVsZSA9IFJld3JpdHRlblJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBjb25zdCByZXBsYWNlZFJ1bGUgPSBydWxlLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnRSdWxlID0gcmV3cml0dGVuUnVsZTsgIC8vL1xuXG4gICAgcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVzKTtcbiAgfVxuXG4gIHJldHVybiByZXdyaXR0ZW5SdWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFJ1bGUsXG5cdHJlZHVjZWRSdWxlRnJvbVJ1bGUsXG4gIHJlcGVhdGVkUnVsZUZyb21SdWxlLFxuICByZXdyaXR0ZW5SdWxlRnJvbVJ1bGVcbn07XG5cbmZ1bmN0aW9uIHJlcGxhY2VSdWxlKHJlcGxhY2VkUnVsZSwgcmVwbGFjZW1lbnRSdWxlLCBydWxlcykge1xuICBjb25zdCBpbmRleCA9IHJ1bGVzLmluZGV4T2YocmVwbGFjZWRSdWxlKTtcblxuICBpZiAoaW5kZXggPiAtMSkge1xuICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgcnVsZXMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgcmVwbGFjZW1lbnRSdWxlKTtcbiAgfVxufVxuIl19