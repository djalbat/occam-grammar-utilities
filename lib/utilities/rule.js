'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName');

var push = arrayUtilities.push,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive;


function eliminateLeftRecursionFromRule(rule, rules) {
  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition, count) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var rightRecursiveRule = RightRecursiveRule.fromRuleNameDefinitionAndNonTerminalNodeAndCount(ruleName, definition, nonTerminalNode, count);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonRecursiveRule = NonRecursiveRule.fromRule(rule),
      nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule),
      rightRecursiveRuleNameDefinitions = rightRecursiveRules.map(function (rightRecursiveRule) {
    var rightRecursiveRuleNameDefinition = RecursiveRuleNameDefinition.fromNonRecursiveRuleAndRecursiveRule(nonRecursiveRule, rightRecursiveRule);

    return rightRecursiveRuleNameDefinition;
  });

  rule.setDefinitions([].concat(_toConsumableArray(rightRecursiveRuleNameDefinitions), [nonRecursiveDefinition]));

  rules.push(nonRecursiveRule);

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJOb25SZWN1cnNpdmVSdWxlIiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwiZGVmaW5pdGlvblV0aWxpdGllcyIsIk5vblJlY3Vyc2l2ZURlZmluaXRpb24iLCJSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24iLCJwdXNoIiwiaXRlcmF0ZVdpdGhEZWxldGUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZSIsInJ1bGVzIiwibmFtZSIsImdldE5hbWUiLCJydWxlTmFtZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJub25UZXJtaW5hbE5vZGUiLCJnZXROb25UZXJtaW5hbE5vZGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVzIiwiZGVmaW5pdGlvbiIsImNvdW50IiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUnVsZU5hbWVEZWZpbml0aW9uQW5kTm9uVGVybWluYWxOb2RlQW5kQ291bnQiLCJub25SZWN1cnNpdmVSdWxlIiwiZnJvbVJ1bGUiLCJub25SZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbU5vblJlY3Vyc2l2ZVJ1bGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbnMiLCJtYXAiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiIsImZyb21Ob25SZWN1cnNpdmVSdWxlQW5kUmVjdXJzaXZlUnVsZSIsInNldERlZmluaXRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7QUFBQSxJQUNNQyxtQkFBbUJELFFBQVEsc0JBQVIsQ0FEekI7QUFBQSxJQUVNRSxxQkFBcUJGLFFBQVEsd0JBQVIsQ0FGM0I7QUFBQSxJQUdNRyxzQkFBc0JILFFBQVEseUJBQVIsQ0FINUI7QUFBQSxJQUlNSSx5QkFBeUJKLFFBQVEsNEJBQVIsQ0FKL0I7QUFBQSxJQUtNSyw4QkFBOEJMLFFBQVEsaUNBQVIsQ0FMcEM7O0lBT1FNLEksR0FBNEJQLGMsQ0FBNUJPLEk7SUFBTUMsaUIsR0FBc0JSLGMsQ0FBdEJRLGlCO0lBQ05DLHlCLEdBQThCTCxtQixDQUE5QksseUI7OztBQUVSLFNBQVNDLDhCQUFULENBQXdDQyxJQUF4QyxFQUE4Q0MsS0FBOUMsRUFBcUQ7QUFDbkQsTUFBTUMsT0FBT0YsS0FBS0csT0FBTCxFQUFiO0FBQUEsTUFDTUMsV0FBV0YsSUFEakI7QUFBQSxNQUN3QjtBQUNsQkcsZ0JBQWNMLEtBQUtNLGNBQUwsRUFGcEI7QUFBQSxNQUdNQyxrQkFBa0JQLEtBQUtRLGtCQUFMLEVBSHhCO0FBQUEsTUFJTUMsc0JBQXNCLEVBSjVCOztBQU1BWixvQkFBa0JRLFdBQWxCLEVBQStCLFVBQUNLLFVBQUQsRUFBYUMsS0FBYixFQUF1QjtBQUNwRCxRQUFNQywwQkFBMEJkLDBCQUEwQlksVUFBMUIsRUFBc0NOLFFBQXRDLENBQWhDOztBQUVBLFFBQUlRLHVCQUFKLEVBQTZCO0FBQzNCLFVBQU1DLHFCQUFxQnJCLG1CQUFtQnNCLGdEQUFuQixDQUFvRVYsUUFBcEUsRUFBOEVNLFVBQTlFLEVBQTBGSCxlQUExRixFQUEyR0ksS0FBM0csQ0FBM0I7O0FBRUFGLDBCQUFvQmIsSUFBcEIsQ0FBeUJpQixrQkFBekI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVZEOztBQVlBLE1BQU1FLG1CQUFtQnhCLGlCQUFpQnlCLFFBQWpCLENBQTBCaEIsSUFBMUIsQ0FBekI7QUFBQSxNQUNNaUIseUJBQXlCdkIsdUJBQXVCd0Isb0JBQXZCLENBQTRDSCxnQkFBNUMsQ0FEL0I7QUFBQSxNQUVNSSxvQ0FBb0NWLG9CQUFvQlcsR0FBcEIsQ0FBd0IsVUFBQ1Asa0JBQUQsRUFBd0I7QUFDbEYsUUFBTVEsbUNBQW1DMUIsNEJBQTRCMkIsb0NBQTVCLENBQWlFUCxnQkFBakUsRUFBbUZGLGtCQUFuRixDQUF6Qzs7QUFFQSxXQUFPUSxnQ0FBUDtBQUNELEdBSm1DLENBRjFDOztBQVFBckIsT0FBS3VCLGNBQUwsOEJBQ0tKLGlDQURMLElBRUVGLHNCQUZGOztBQUtBaEIsUUFBTUwsSUFBTixDQUFXbUIsZ0JBQVg7O0FBRUFuQixPQUFLSyxLQUFMLEVBQVlRLG1CQUFaO0FBQ0Q7O0FBRURlLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjFCO0FBRGUsQ0FBakIiLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIE5vblJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL25vblJlY3Vyc2l2ZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yaWdodFJlY3Vyc2l2ZScpLFxuICAgICAgZGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9kZWZpbml0aW9uJyksXG4gICAgICBOb25SZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9ub25SZWN1cnNpdmUnKSxcbiAgICAgIFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vcmVjdXJzaXZlUnVsZU5hbWUnKTtcblxuY29uc3QgeyBwdXNoLCBpdGVyYXRlV2l0aERlbGV0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgfSA9IGRlZmluaXRpb25VdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJ1bGVOYW1lID0gbmFtZSwgIC8vL1xuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlID0gcnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcyA9IFtdO1xuXG4gIGl0ZXJhdGVXaXRoRGVsZXRlKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbiwgY291bnQpID0+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBjb25zdCByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGVOYW1lRGVmaW5pdGlvbkFuZE5vblRlcm1pbmFsTm9kZUFuZENvdW50KHJ1bGVOYW1lLCBkZWZpbml0aW9uLCBub25UZXJtaW5hbE5vZGUsIGNvdW50KTtcblxuICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5wdXNoKHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgbm9uUmVjdXJzaXZlUnVsZSA9IE5vblJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGUocnVsZSksXG4gICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25SZWN1cnNpdmVEZWZpbml0aW9uLmZyb21Ob25SZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbnMgPSByaWdodFJlY3Vyc2l2ZVJ1bGVzLm1hcCgocmlnaHRSZWN1cnNpdmVSdWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSBSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24uZnJvbU5vblJlY3Vyc2l2ZVJ1bGVBbmRSZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUsIHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb247XG4gICAgICAgIH0pO1xuXG4gIHJ1bGUuc2V0RGVmaW5pdGlvbnMoW1xuICAgIC4uLnJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9ucyxcbiAgICBub25SZWN1cnNpdmVEZWZpbml0aW9uXG4gIF0pO1xuXG4gIHJ1bGVzLnB1c2gobm9uUmVjdXJzaXZlUnVsZSk7XG5cbiAgcHVzaChydWxlcywgcmlnaHRSZWN1cnNpdmVSdWxlcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVcbn07XG4iXX0=