'use strict';

var ReducedRule = require('../rule/reduced'),
    RepeatedRule = require('../rule/repeated'),
    arrayUtilities = require('../utilities/array'),
    ruleNameUtilities = require('../utilities/ruleName');

var filter = arrayUtilities.filter,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function removeRule(rule, rules) {
  var removedRule = rule; ///

  filter(rules, function (rule) {
    if (rule !== removedRule) {
      return true;
    }
  });
}

function reducedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    var definitions = void 0;

    definitions = rule.getDefinitions();

    reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

    rules.push(reducedRule);

    definitions = [];

    rule.setDefinitions(definitions);
  }

  return reducedRule;
}

function repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules) {
  var ruleName = leftRecursiveRuleName,
      ///
  repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

module.exports = {
  findRule: findRule,
  removeRule: removeRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromLeftRecursiveRuleName: repeatedRuleFromLeftRecursiveRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJSZWR1Y2VkUnVsZSIsInJlcXVpcmUiLCJSZXBlYXRlZFJ1bGUiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiZmlsdGVyIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImZpbmRSdWxlIiwicnVsZU5hbWUiLCJydWxlcyIsIm5hbWUiLCJydWxlIiwiZmluZCIsImdldE5hbWUiLCJyZW1vdmVSdWxlIiwicmVtb3ZlZFJ1bGUiLCJyZWR1Y2VkUnVsZUZyb21SdWxlIiwicmVkdWNlZFJ1bGVOYW1lIiwicmVkdWNlZFJ1bGUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZnJvbVJlZHVjZWRSdWxlTmFtZUFuZERlZmluaXRpb25zIiwicHVzaCIsInNldERlZmluaXRpb25zIiwicmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJyZXBlYXRlZFJ1bGUiLCJmcm9tUmVwZWF0ZWRSdWxlTmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGNBQWNDLFFBQVEsaUJBQVIsQ0FBcEI7QUFBQSxJQUNHQyxlQUFlRCxRQUFRLGtCQUFSLENBRGxCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCO0FBQUEsSUFHR0csb0JBQW9CSCxRQUFRLHVCQUFSLENBSHZCOztBQUtNLElBQUVJLE1BQUYsR0FBYUYsY0FBYixDQUFFRSxNQUFGO0FBQUEsSUFDRUMsNEJBREYsR0FDZ0VGLGlCQURoRSxDQUNFRSw0QkFERjtBQUFBLElBQ2dDQywyQkFEaEMsR0FDZ0VILGlCQURoRSxDQUNnQ0csMkJBRGhDOzs7QUFHTixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTUMsT0FBT0YsUUFBYjtBQUFBLE1BQXdCO0FBQ2xCRyxTQUFPRixNQUFNRyxJQUFOLENBQVcsVUFBQ0QsSUFBRCxFQUFVO0FBQzFCLFFBQU1ILFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7O0FBRUEsUUFBSUwsYUFBYUUsSUFBakIsRUFBdUI7QUFDckIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5NLEtBTUQsSUFQWixDQURpQyxDQVFmOztBQUVsQixTQUFPQyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csVUFBVCxDQUFvQkgsSUFBcEIsRUFBMEJGLEtBQTFCLEVBQWlDO0FBQy9CLE1BQU1NLGNBQWNKLElBQXBCLENBRCtCLENBQ0w7O0FBRTFCUCxTQUFPSyxLQUFQLEVBQWMsVUFBQ0UsSUFBRCxFQUFVO0FBQ3RCLFFBQUlBLFNBQVNJLFdBQWIsRUFBMEI7QUFDeEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQUpEO0FBS0Q7O0FBRUQsU0FBU0MsbUJBQVQsQ0FBNkJMLElBQTdCLEVBQW1DRixLQUFuQyxFQUEwQztBQUN6QyxNQUFNRCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDR0ksa0JBQWtCWCw0QkFBNEJFLFFBQTVCLENBRHJCOztBQUdBLE1BQUlVLGNBQWNYLFNBQVNVLGVBQVQsRUFBMEJSLEtBQTFCLENBQWxCOztBQUVBLE1BQUlTLGdCQUFnQixJQUFwQixFQUEwQjtBQUN2QixRQUFJQyxvQkFBSjs7QUFFQUEsa0JBQWNSLEtBQUtTLGNBQUwsRUFBZDs7QUFFQUYsa0JBQWNuQixZQUFZc0IsaUNBQVosQ0FBOENKLGVBQTlDLEVBQStERSxXQUEvRCxDQUFkOztBQUVBVixVQUFNYSxJQUFOLENBQVdKLFdBQVg7O0FBRUFDLGtCQUFjLEVBQWQ7O0FBRUFSLFNBQUtZLGNBQUwsQ0FBb0JKLFdBQXBCO0FBQ0Y7O0FBRUQsU0FBT0QsV0FBUDtBQUNBOztBQUVELFNBQVNNLHFDQUFULENBQStDQyxxQkFBL0MsRUFBc0VoQixLQUF0RSxFQUE2RTtBQUM1RSxNQUFNRCxXQUFXaUIscUJBQWpCO0FBQUEsTUFBd0M7QUFDckNDLHFCQUFtQnJCLDZCQUE2QkcsUUFBN0IsQ0FEdEI7O0FBR0EsTUFBSW1CLGVBQWVwQixTQUFTbUIsZ0JBQVQsRUFBMkJqQixLQUEzQixDQUFuQjs7QUFFQSxNQUFJa0IsaUJBQWlCLElBQXJCLEVBQTJCO0FBQzFCQSxtQkFBZTFCLGFBQWEyQixvQkFBYixDQUFrQ0YsZ0JBQWxDLENBQWY7O0FBRUFqQixVQUFNYSxJQUFOLENBQVdLLFlBQVg7QUFDQTs7QUFFRCxTQUFPQSxZQUFQO0FBQ0E7O0FBRURFLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnZCLG9CQURlO0FBRWZPLHdCQUZlO0FBR2hCRSwwQ0FIZ0I7QUFJaEJRO0FBSmdCLENBQWpCIiwiZmlsZSI6InJ1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlZHVjZWRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yZWR1Y2VkJyksXG5cdFx0XHRSZXBlYXRlZFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3JlcGVhdGVkJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuXHRcdFx0cnVsZU5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcnVsZU5hbWUnKTtcblxuY29uc3QgeyBmaWx0ZXIgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSA9IHJ1bGVOYW1lVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpIHtcbiAgY29uc3QgbmFtZSA9IHJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJ1bGUgPSBydWxlcy5maW5kKChydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgICAgICAgIGlmIChydWxlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsOyAvLy9cblxuICByZXR1cm4gcnVsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUnVsZShydWxlLCBydWxlcykge1xuICBjb25zdCByZW1vdmVkUnVsZSA9IHJ1bGU7IC8vL1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBpZiAocnVsZSAhPT0gcmVtb3ZlZFJ1bGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVkdWNlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlcykge1xuXHRjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuXHRcdFx0XHRyZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZWR1Y2VkUnVsZSA9IGZpbmRSdWxlKHJlZHVjZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG5cdGlmIChyZWR1Y2VkUnVsZSA9PT0gbnVsbCkge1xuICAgIGxldCBkZWZpbml0aW9ucztcblxuICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUmVkdWNlZFJ1bGVOYW1lQW5kRGVmaW5pdGlvbnMocmVkdWNlZFJ1bGVOYW1lLCBkZWZpbml0aW9ucyk7XG5cbiAgICBydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcblxuICAgIGRlZmluaXRpb25zID0gW107XG5cbiAgICBydWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblx0fVxuXG5cdHJldHVybiByZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZShsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAvLy9cblx0XHRcdFx0cmVwZWF0ZWRSdWxlTmFtZSA9IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZXBlYXRlZFJ1bGUgPSBmaW5kUnVsZShyZXBlYXRlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlcGVhdGVkUnVsZSA9PT0gbnVsbCkge1xuXHRcdHJlcGVhdGVkUnVsZSA9IFJlcGVhdGVkUnVsZS5mcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKTtcblxuXHRcdHJ1bGVzLnB1c2gocmVwZWF0ZWRSdWxlKTtcblx0fVxuXG5cdHJldHVybiByZXBlYXRlZFJ1bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kUnVsZSxcbiAgcmVtb3ZlUnVsZSxcblx0cmVkdWNlZFJ1bGVGcm9tUnVsZSxcblx0cmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZVxufTtcbiJdfQ==