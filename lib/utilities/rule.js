'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName');

var push = arrayUtilities.push,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive;


function eliminateLeftRecursionFromRule(rule, rules) {
  var ruleLeftRecursive = isRuleLeftRecursive(rule);

  if (!ruleLeftRecursive) {
    return;
  }

  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition, count) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var rightRecursiveRule = RightRecursiveRule.fromRuleNameDefinitionAndNonTerminalNodeAndCount(ruleName, definition, nonTerminalNode, count);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonRecursiveRule = NonRecursiveRule.fromRule(rule),
      nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule),
      rightRecursiveRuleNameDefinitions = rightRecursiveRules.map(function (rightRecursiveRule) {
    var rightRecursiveRuleNameDefinition = RecursiveRuleNameDefinition.fromNonRecursiveRuleAndRecursiveRule(nonRecursiveRule, rightRecursiveRule);

    return rightRecursiveRuleNameDefinition;
  });

  rule.setDefinitions([].concat(_toConsumableArray(rightRecursiveRuleNameDefinitions), [nonRecursiveDefinition]));

  rules.push(nonRecursiveRule);

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function isRuleLeftRecursive(rule) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      ruleLeftRecursive = definitions.some(function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      return true;
    }
  });

  return ruleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJOb25SZWN1cnNpdmVSdWxlIiwiUmlnaHRSZWN1cnNpdmVSdWxlIiwiZGVmaW5pdGlvblV0aWxpdGllcyIsIk5vblJlY3Vyc2l2ZURlZmluaXRpb24iLCJSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24iLCJwdXNoIiwiaXRlcmF0ZVdpdGhEZWxldGUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZSIsInJ1bGVzIiwicnVsZUxlZnRSZWN1cnNpdmUiLCJpc1J1bGVMZWZ0UmVjdXJzaXZlIiwibmFtZSIsImdldE5hbWUiLCJydWxlTmFtZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJub25UZXJtaW5hbE5vZGUiLCJnZXROb25UZXJtaW5hbE5vZGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVzIiwiZGVmaW5pdGlvbiIsImNvdW50IiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUnVsZU5hbWVEZWZpbml0aW9uQW5kTm9uVGVybWluYWxOb2RlQW5kQ291bnQiLCJub25SZWN1cnNpdmVSdWxlIiwiZnJvbVJ1bGUiLCJub25SZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbU5vblJlY3Vyc2l2ZVJ1bGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbnMiLCJtYXAiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiIsImZyb21Ob25SZWN1cnNpdmVSdWxlQW5kUmVjdXJzaXZlUnVsZSIsInNldERlZmluaXRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsInNvbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXZCO0FBQUEsSUFDTUMsbUJBQW1CRCxRQUFRLHNCQUFSLENBRHpCO0FBQUEsSUFFTUUscUJBQXFCRixRQUFRLHdCQUFSLENBRjNCO0FBQUEsSUFHTUcsc0JBQXNCSCxRQUFRLHlCQUFSLENBSDVCO0FBQUEsSUFJTUkseUJBQXlCSixRQUFRLDRCQUFSLENBSi9CO0FBQUEsSUFLTUssOEJBQThCTCxRQUFRLGlDQUFSLENBTHBDOztJQU9RTSxJLEdBQTRCUCxjLENBQTVCTyxJO0lBQU1DLGlCLEdBQXNCUixjLENBQXRCUSxpQjtJQUNOQyx5QixHQUE4QkwsbUIsQ0FBOUJLLHlCOzs7QUFFUixTQUFTQyw4QkFBVCxDQUF3Q0MsSUFBeEMsRUFBOENDLEtBQTlDLEVBQXFEO0FBQ25ELE1BQU1DLG9CQUFvQkMsb0JBQW9CSCxJQUFwQixDQUExQjs7QUFFQSxNQUFJLENBQUNFLGlCQUFMLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsTUFBTUUsT0FBT0osS0FBS0ssT0FBTCxFQUFiO0FBQUEsTUFDTUMsV0FBV0YsSUFEakI7QUFBQSxNQUN3QjtBQUNsQkcsZ0JBQWNQLEtBQUtRLGNBQUwsRUFGcEI7QUFBQSxNQUdNQyxrQkFBa0JULEtBQUtVLGtCQUFMLEVBSHhCO0FBQUEsTUFJTUMsc0JBQXNCLEVBSjVCOztBQU1BZCxvQkFBa0JVLFdBQWxCLEVBQStCLFVBQUNLLFVBQUQsRUFBYUMsS0FBYixFQUF1QjtBQUNwRCxRQUFNQywwQkFBMEJoQiwwQkFBMEJjLFVBQTFCLEVBQXNDTixRQUF0QyxDQUFoQzs7QUFFQSxRQUFJUSx1QkFBSixFQUE2QjtBQUMzQixVQUFNQyxxQkFBcUJ2QixtQkFBbUJ3QixnREFBbkIsQ0FBb0VWLFFBQXBFLEVBQThFTSxVQUE5RSxFQUEwRkgsZUFBMUYsRUFBMkdJLEtBQTNHLENBQTNCOztBQUVBRiwwQkFBb0JmLElBQXBCLENBQXlCbUIsa0JBQXpCOztBQUVBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FWRDs7QUFZQSxNQUFNRSxtQkFBbUIxQixpQkFBaUIyQixRQUFqQixDQUEwQmxCLElBQTFCLENBQXpCO0FBQUEsTUFDTW1CLHlCQUF5QnpCLHVCQUF1QjBCLG9CQUF2QixDQUE0Q0gsZ0JBQTVDLENBRC9CO0FBQUEsTUFFTUksb0NBQW9DVixvQkFBb0JXLEdBQXBCLENBQXdCLFVBQUNQLGtCQUFELEVBQXdCO0FBQ2xGLFFBQU1RLG1DQUFtQzVCLDRCQUE0QjZCLG9DQUE1QixDQUFpRVAsZ0JBQWpFLEVBQW1GRixrQkFBbkYsQ0FBekM7O0FBRUEsV0FBT1EsZ0NBQVA7QUFDRCxHQUptQyxDQUYxQzs7QUFRQXZCLE9BQUt5QixjQUFMLDhCQUNLSixpQ0FETCxJQUVFRixzQkFGRjs7QUFLQWxCLFFBQU1MLElBQU4sQ0FBV3FCLGdCQUFYOztBQUVBckIsT0FBS0ssS0FBTCxFQUFZVSxtQkFBWjtBQUNEOztBQUVEZSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Y1QjtBQURlLENBQWpCOztBQUlBLFNBQVNJLG1CQUFULENBQTZCSCxJQUE3QixFQUFtQztBQUNqQyxNQUFNTSxXQUFXTixLQUFLSyxPQUFMLEVBQWpCO0FBQUEsTUFDTUUsY0FBY1AsS0FBS1EsY0FBTCxFQURwQjtBQUFBLE1BRU1OLG9CQUFvQkssWUFBWXFCLElBQVosQ0FBaUIsVUFBQ2hCLFVBQUQsRUFBZ0I7QUFDbkQsUUFBTUUsMEJBQTBCaEIsMEJBQTBCYyxVQUExQixFQUFzQ04sUUFBdEMsQ0FBaEM7O0FBRUEsUUFBSVEsdUJBQUosRUFBNkI7QUFDM0IsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5tQixDQUYxQjs7QUFVQSxTQUFPWixpQkFBUDtBQUNEIiwiZmlsZSI6InJ1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBOb25SZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9ub25SZWN1cnNpdmUnKSxcbiAgICAgIFJpZ2h0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmlnaHRSZWN1cnNpdmUnKSxcbiAgICAgIGRlZmluaXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvZGVmaW5pdGlvbicpLFxuICAgICAgTm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vbm9uUmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZVJ1bGVOYW1lJyk7XG5cbmNvbnN0IHsgcHVzaCwgaXRlcmF0ZVdpdGhEZWxldGUgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIH0gPSBkZWZpbml0aW9uVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZXMpIHtcbiAgY29uc3QgcnVsZUxlZnRSZWN1cnNpdmUgPSBpc1J1bGVMZWZ0UmVjdXJzaXZlKHJ1bGUpO1xuXG4gIGlmICghcnVsZUxlZnRSZWN1cnNpdmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBuYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJ1bGVOYW1lID0gbmFtZSwgIC8vL1xuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlID0gcnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcyA9IFtdO1xuXG4gIGl0ZXJhdGVXaXRoRGVsZXRlKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbiwgY291bnQpID0+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBjb25zdCByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGVOYW1lRGVmaW5pdGlvbkFuZE5vblRlcm1pbmFsTm9kZUFuZENvdW50KHJ1bGVOYW1lLCBkZWZpbml0aW9uLCBub25UZXJtaW5hbE5vZGUsIGNvdW50KTtcblxuICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5wdXNoKHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgbm9uUmVjdXJzaXZlUnVsZSA9IE5vblJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGUocnVsZSksXG4gICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25SZWN1cnNpdmVEZWZpbml0aW9uLmZyb21Ob25SZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbnMgPSByaWdodFJlY3Vyc2l2ZVJ1bGVzLm1hcCgocmlnaHRSZWN1cnNpdmVSdWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSBSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24uZnJvbU5vblJlY3Vyc2l2ZVJ1bGVBbmRSZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUsIHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb247XG4gICAgICAgIH0pO1xuXG4gIHJ1bGUuc2V0RGVmaW5pdGlvbnMoW1xuICAgIC4uLnJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9ucyxcbiAgICBub25SZWN1cnNpdmVEZWZpbml0aW9uXG4gIF0pO1xuXG4gIHJ1bGVzLnB1c2gobm9uUmVjdXJzaXZlUnVsZSk7XG5cbiAgcHVzaChydWxlcywgcmlnaHRSZWN1cnNpdmVSdWxlcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVcbn07XG5cbmZ1bmN0aW9uIGlzUnVsZUxlZnRSZWN1cnNpdmUocnVsZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgcnVsZUxlZnRSZWN1cnNpdmUgPSBkZWZpbml0aW9ucy5zb21lKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24sIHJ1bGVOYW1lKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gcnVsZUxlZnRSZWN1cnNpdmU7XG59XG4iXX0=