'use strict';

var ReducedRule = require('../rule/reduced'),
    RepeatedRule = require('../rule/repeated'),
    arrayUtilities = require('../utilities/array'),
    ruleNameUtilities = require('../utilities/ruleName'),
    PlaceHolderDefinition = require('../definition/placeHolder');

var filter = arrayUtilities.filter,
    separate = arrayUtilities.separate,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function removeRule(rule, rules) {
  var removedRule = rule; ///

  filter(rules, function (rule) {
    if (rule !== removedRule) {
      return true;
    }
  });
}

function reducedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    var definitions = void 0;

    definitions = rule.getDefinitions();

    var placeHolderDefinitions = [],
        nonPlaceHolderDefinitions = [];

    separate(definitions, placeHolderDefinitions, nonPlaceHolderDefinitions, function (definition) {
      var definitionPlaceHolderDefinition = definition instanceof PlaceHolderDefinition;

      if (definitionPlaceHolderDefinition) {
        return true;
      }
    });

    definitions = nonPlaceHolderDefinitions; ///

    reducedRule = ReducedRule.fromReducedRuleNameAndDefinitions(reducedRuleName, definitions);

    rules.push(reducedRule);

    definitions = placeHolderDefinitions; ///

    rule.setDefinitions(definitions);
  }

  return reducedRule;
}

function repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules) {
  var ruleName = leftRecursiveRuleName,
      ///
  repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

module.exports = {
  findRule: findRule,
  removeRule: removeRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromLeftRecursiveRuleName: repeatedRuleFromLeftRecursiveRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJSZWR1Y2VkUnVsZSIsInJlcXVpcmUiLCJSZXBlYXRlZFJ1bGUiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUGxhY2VIb2xkZXJEZWZpbml0aW9uIiwiZmlsdGVyIiwic2VwYXJhdGUiLCJyZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiZmluZFJ1bGUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInJlbW92ZVJ1bGUiLCJyZW1vdmVkUnVsZSIsInJlZHVjZWRSdWxlRnJvbVJ1bGUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJwbGFjZUhvbGRlckRlZmluaXRpb25zIiwibm9uUGxhY2VIb2xkZXJEZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJkZWZpbml0aW9uUGxhY2VIb2xkZXJEZWZpbml0aW9uIiwiZnJvbVJlZHVjZWRSdWxlTmFtZUFuZERlZmluaXRpb25zIiwicHVzaCIsInNldERlZmluaXRpb25zIiwicmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJyZXBlYXRlZFJ1bGUiLCJmcm9tUmVwZWF0ZWRSdWxlTmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGNBQWNDLFFBQVEsaUJBQVIsQ0FBcEI7QUFBQSxJQUNHQyxlQUFlRCxRQUFRLGtCQUFSLENBRGxCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCO0FBQUEsSUFHR0csb0JBQW9CSCxRQUFRLHVCQUFSLENBSHZCO0FBQUEsSUFJTUksd0JBQXdCSixRQUFRLDJCQUFSLENBSjlCOztJQU1RSyxNLEdBQXFCSCxjLENBQXJCRyxNO0lBQVFDLFEsR0FBYUosYyxDQUFiSSxRO0lBQ1JDLDRCLEdBQThESixpQixDQUE5REksNEI7SUFBOEJDLDJCLEdBQWdDTCxpQixDQUFoQ0ssMkI7OztBQUV0QyxTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTUMsT0FBT0YsUUFBYjtBQUFBLE1BQXdCO0FBQ2xCRyxTQUFPRixNQUFNRyxJQUFOLENBQVcsVUFBQ0QsSUFBRCxFQUFVO0FBQzFCLFFBQU1ILFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7O0FBRUEsUUFBSUwsYUFBYUUsSUFBakIsRUFBdUI7QUFDckIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5NLEtBTUQsSUFQWixDQURpQyxDQVFmOztBQUVsQixTQUFPQyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csVUFBVCxDQUFvQkgsSUFBcEIsRUFBMEJGLEtBQTFCLEVBQWlDO0FBQy9CLE1BQU1NLGNBQWNKLElBQXBCLENBRCtCLENBQ0w7O0FBRTFCUixTQUFPTSxLQUFQLEVBQWMsVUFBQ0UsSUFBRCxFQUFVO0FBQ3RCLFFBQUlBLFNBQVNJLFdBQWIsRUFBMEI7QUFDeEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQUpEO0FBS0Q7O0FBRUQsU0FBU0MsbUJBQVQsQ0FBNkJMLElBQTdCLEVBQW1DRixLQUFuQyxFQUEwQztBQUN6QyxNQUFNRCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDR0ksa0JBQWtCWCw0QkFBNEJFLFFBQTVCLENBRHJCOztBQUdBLE1BQUlVLGNBQWNYLFNBQVNVLGVBQVQsRUFBMEJSLEtBQTFCLENBQWxCOztBQUVBLE1BQUlTLGdCQUFnQixJQUFwQixFQUEwQjtBQUN2QixRQUFJQyxvQkFBSjs7QUFFQUEsa0JBQWNSLEtBQUtTLGNBQUwsRUFBZDs7QUFFQSxRQUFNQyx5QkFBeUIsRUFBL0I7QUFBQSxRQUNNQyw0QkFBNEIsRUFEbEM7O0FBR0FsQixhQUFTZSxXQUFULEVBQXNCRSxzQkFBdEIsRUFBOENDLHlCQUE5QyxFQUF5RSxVQUFDQyxVQUFELEVBQWdCO0FBQ3ZGLFVBQU1DLGtDQUFtQ0Qsc0JBQXNCckIscUJBQS9EOztBQUVBLFVBQUlzQiwrQkFBSixFQUFxQztBQUNuQyxlQUFPLElBQVA7QUFDRDtBQUNGLEtBTkQ7O0FBUUFMLGtCQUFjRyx5QkFBZCxDQWhCdUIsQ0FnQm1COztBQUUxQ0osa0JBQWNyQixZQUFZNEIsaUNBQVosQ0FBOENSLGVBQTlDLEVBQStERSxXQUEvRCxDQUFkOztBQUVBVixVQUFNaUIsSUFBTixDQUFXUixXQUFYOztBQUVBQyxrQkFBY0Usc0JBQWQsQ0F0QnVCLENBc0JlOztBQUV0Q1YsU0FBS2dCLGNBQUwsQ0FBb0JSLFdBQXBCO0FBQ0Y7O0FBRUQsU0FBT0QsV0FBUDtBQUNBOztBQUVELFNBQVNVLHFDQUFULENBQStDQyxxQkFBL0MsRUFBc0VwQixLQUF0RSxFQUE2RTtBQUM1RSxNQUFNRCxXQUFXcUIscUJBQWpCO0FBQUEsTUFBd0M7QUFDckNDLHFCQUFtQnpCLDZCQUE2QkcsUUFBN0IsQ0FEdEI7O0FBR0EsTUFBSXVCLGVBQWV4QixTQUFTdUIsZ0JBQVQsRUFBMkJyQixLQUEzQixDQUFuQjs7QUFFQSxNQUFJc0IsaUJBQWlCLElBQXJCLEVBQTJCO0FBQzFCQSxtQkFBZWhDLGFBQWFpQyxvQkFBYixDQUFrQ0YsZ0JBQWxDLENBQWY7O0FBRUFyQixVQUFNaUIsSUFBTixDQUFXSyxZQUFYO0FBQ0E7O0FBRUQsU0FBT0EsWUFBUDtBQUNBOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2YzQixvQkFEZTtBQUVmTyx3QkFGZTtBQUdoQkUsMENBSGdCO0FBSWhCWTtBQUpnQixDQUFqQiIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWR1Y2VkUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmVkdWNlZCcpLFxuXHRcdFx0UmVwZWF0ZWRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yZXBlYXRlZCcpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcblx0XHRcdHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGVOYW1lJyksXG4gICAgICBQbGFjZUhvbGRlckRlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3BsYWNlSG9sZGVyJyk7XG5cbmNvbnN0IHsgZmlsdGVyLCBzZXBhcmF0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUsIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IHJ1bGVzLmZpbmQoKHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgaWYgKHJ1bGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IG51bGw7IC8vL1xuXG4gIHJldHVybiBydWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSdWxlKHJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IHJlbW92ZWRSdWxlID0gcnVsZTsgLy8vXG5cbiAgZmlsdGVyKHJ1bGVzLCAocnVsZSkgPT4ge1xuICAgIGlmIChydWxlICE9PSByZW1vdmVkUnVsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWR1Y2VkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgbGV0IGRlZmluaXRpb25zO1xuXG4gICAgZGVmaW5pdGlvbnMgPSBydWxlLmdldERlZmluaXRpb25zKCk7XG5cbiAgICBjb25zdCBwbGFjZUhvbGRlckRlZmluaXRpb25zID0gW10sXG4gICAgICAgICAgbm9uUGxhY2VIb2xkZXJEZWZpbml0aW9ucyA9IFtdO1xuXG4gICAgc2VwYXJhdGUoZGVmaW5pdGlvbnMsIHBsYWNlSG9sZGVyRGVmaW5pdGlvbnMsIG5vblBsYWNlSG9sZGVyRGVmaW5pdGlvbnMsIChkZWZpbml0aW9uKSA9PiB7XG4gICAgICBjb25zdCBkZWZpbml0aW9uUGxhY2VIb2xkZXJEZWZpbml0aW9uID0gKGRlZmluaXRpb24gaW5zdGFuY2VvZiBQbGFjZUhvbGRlckRlZmluaXRpb24pO1xuXG4gICAgICBpZiAoZGVmaW5pdGlvblBsYWNlSG9sZGVyRGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluaXRpb25zID0gbm9uUGxhY2VIb2xkZXJEZWZpbml0aW9uczsgIC8vL1xuXG4gICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUmVkdWNlZFJ1bGVOYW1lQW5kRGVmaW5pdGlvbnMocmVkdWNlZFJ1bGVOYW1lLCBkZWZpbml0aW9ucyk7XG5cbiAgICBydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcblxuICAgIGRlZmluaXRpb25zID0gcGxhY2VIb2xkZXJEZWZpbml0aW9uczsgLy8vXG5cbiAgICBydWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblx0fVxuXG5cdHJldHVybiByZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZShsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAvLy9cblx0XHRcdFx0cmVwZWF0ZWRSdWxlTmFtZSA9IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZXBlYXRlZFJ1bGUgPSBmaW5kUnVsZShyZXBlYXRlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlcGVhdGVkUnVsZSA9PT0gbnVsbCkge1xuXHRcdHJlcGVhdGVkUnVsZSA9IFJlcGVhdGVkUnVsZS5mcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKTtcblxuXHRcdHJ1bGVzLnB1c2gocmVwZWF0ZWRSdWxlKTtcblx0fVxuXG5cdHJldHVybiByZXBlYXRlZFJ1bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kUnVsZSxcbiAgcmVtb3ZlUnVsZSxcblx0cmVkdWNlZFJ1bGVGcm9tUnVsZSxcblx0cmVwZWF0ZWRSdWxlRnJvbUxlZnRSZWN1cnNpdmVSdWxlTmFtZVxufTtcbiJdfQ==