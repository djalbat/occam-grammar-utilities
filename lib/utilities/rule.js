"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findRule = findRule;
exports.reducedRuleFromRule = reducedRuleFromRule;
exports.repeatedRuleFromRule = repeatedRuleFromRule;
exports.rewrittenRuleFromRule = rewrittenRuleFromRule;

var _class = require("../utilities/class");

var _ruleName = require("../utilities/ruleName");

function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function reducedRuleFromRule(rule, rules, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName);
  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);
    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, rules, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = (0, _ruleName.repeatedRuleNameFromRuleName)(ruleName);
  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);
    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, rules, RewrittenRule) {
  var rewrittenRule;
  var ruleRewrittenRule = (0, _class.isInstanceOf)(rule, RewrittenRule);

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    rewrittenRule = RewrittenRule.fromRule(rule);
    var replacedRule = rule,
        ///
    replacementRule = rewrittenRule; ///

    replaceRule(replacedRule, replacementRule, rules);
  }

  return rewrittenRule;
}

function replaceRule(replacedRule, replacementRule, rules) {
  var index = rules.indexOf(replacedRule);

  if (index > -1) {
    var start = index,
        deleteCount = 1;
    rules.splice(start, deleteCount, replacementRule);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGUuanMiXSwibmFtZXMiOlsiZmluZFJ1bGUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInJlZHVjZWRSdWxlRnJvbVJ1bGUiLCJSZWR1Y2VkUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJwdXNoIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJSZXBlYXRlZFJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiUmV3cml0dGVuUnVsZSIsInJld3JpdHRlblJ1bGUiLCJydWxlUmV3cml0dGVuUnVsZSIsInJlcGxhY2VkUnVsZSIsInJlcGxhY2VtZW50UnVsZSIsInJlcGxhY2VSdWxlIiwiaW5kZXgiLCJpbmRleE9mIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInNwbGljZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFFTyxTQUFTQSxRQUFULENBQWtCQyxRQUFsQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDeEMsTUFBTUMsSUFBSSxHQUFHRixRQUFiO0FBQUEsTUFBd0I7QUFDbEJHLEVBQUFBLElBQUksR0FBR0YsS0FBSyxDQUFDRyxJQUFOLENBQVcsVUFBQ0QsSUFBRCxFQUFVO0FBQzFCLFFBQU1ILFFBQVEsR0FBR0csSUFBSSxDQUFDRSxPQUFMLEVBQWpCOztBQUVBLFFBQUlMLFFBQVEsS0FBS0UsSUFBakIsRUFBdUI7QUFDckIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5NLEtBTUQsSUFQWixDQUR3QyxDQVF0Qjs7QUFFbEIsU0FBT0MsSUFBUDtBQUNEOztBQUVNLFNBQVNHLG1CQUFULENBQTZCSCxJQUE3QixFQUFtQ0YsS0FBbkMsRUFBMENNLFdBQTFDLEVBQXVEO0FBQzdELE1BQU1QLFFBQVEsR0FBR0csSUFBSSxDQUFDRSxPQUFMLEVBQWpCO0FBQUEsTUFDR0csZUFBZSxHQUFHLDJDQUE0QlIsUUFBNUIsQ0FEckI7QUFHQSxNQUFJUyxXQUFXLEdBQUdWLFFBQVEsQ0FBQ1MsZUFBRCxFQUFrQlAsS0FBbEIsQ0FBMUI7O0FBRUEsTUFBSVEsV0FBVyxLQUFLLElBQXBCLEVBQTBCO0FBQ3ZCQSxJQUFBQSxXQUFXLEdBQUdGLFdBQVcsQ0FBQ0csUUFBWixDQUFxQlAsSUFBckIsQ0FBZDtBQUVBRixJQUFBQSxLQUFLLENBQUNVLElBQU4sQ0FBV0YsV0FBWDtBQUNGOztBQUVELFNBQU9BLFdBQVA7QUFDQTs7QUFFTSxTQUFTRyxvQkFBVCxDQUE4QlQsSUFBOUIsRUFBb0NGLEtBQXBDLEVBQTJDWSxZQUEzQyxFQUF5RDtBQUM5RCxNQUFNYixRQUFRLEdBQUdHLElBQUksQ0FBQ0UsT0FBTCxFQUFqQjtBQUFBLE1BQ01TLGdCQUFnQixHQUFHLDRDQUE2QmQsUUFBN0IsQ0FEekI7QUFHQSxNQUFJZSxZQUFZLEdBQUdoQixRQUFRLENBQUNlLGdCQUFELEVBQW1CYixLQUFuQixDQUEzQjs7QUFFQSxNQUFJYyxZQUFZLEtBQUssSUFBckIsRUFBMkI7QUFDekJBLElBQUFBLFlBQVksR0FBR0YsWUFBWSxDQUFDSCxRQUFiLENBQXNCUCxJQUF0QixDQUFmO0FBRUFGLElBQUFBLEtBQUssQ0FBQ1UsSUFBTixDQUFXSSxZQUFYO0FBQ0Q7O0FBRUQsU0FBT0EsWUFBUDtBQUNEOztBQUVNLFNBQVNDLHFCQUFULENBQStCYixJQUEvQixFQUFxQ0YsS0FBckMsRUFBNENnQixhQUE1QyxFQUEyRDtBQUNoRSxNQUFJQyxhQUFKO0FBRUEsTUFBTUMsaUJBQWlCLEdBQUcseUJBQWFoQixJQUFiLEVBQW1CYyxhQUFuQixDQUExQjs7QUFFQSxNQUFJRSxpQkFBSixFQUF1QjtBQUNyQkQsSUFBQUEsYUFBYSxHQUFHZixJQUFoQixDQURxQixDQUNDO0FBQ3ZCLEdBRkQsTUFFTztBQUNMZSxJQUFBQSxhQUFhLEdBQUdELGFBQWEsQ0FBQ1AsUUFBZCxDQUF1QlAsSUFBdkIsQ0FBaEI7QUFFQSxRQUFNaUIsWUFBWSxHQUFHakIsSUFBckI7QUFBQSxRQUE0QjtBQUN0QmtCLElBQUFBLGVBQWUsR0FBR0gsYUFEeEIsQ0FISyxDQUltQzs7QUFFeENJLElBQUFBLFdBQVcsQ0FBQ0YsWUFBRCxFQUFlQyxlQUFmLEVBQWdDcEIsS0FBaEMsQ0FBWDtBQUNEOztBQUVELFNBQU9pQixhQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksV0FBVCxDQUFxQkYsWUFBckIsRUFBbUNDLGVBQW5DLEVBQW9EcEIsS0FBcEQsRUFBMkQ7QUFDekQsTUFBTXNCLEtBQUssR0FBR3RCLEtBQUssQ0FBQ3VCLE9BQU4sQ0FBY0osWUFBZCxDQUFkOztBQUVBLE1BQUlHLEtBQUssR0FBRyxDQUFDLENBQWIsRUFBZ0I7QUFDZCxRQUFNRSxLQUFLLEdBQUdGLEtBQWQ7QUFBQSxRQUNNRyxXQUFXLEdBQUcsQ0FEcEI7QUFHQXpCLElBQUFBLEtBQUssQ0FBQzBCLE1BQU4sQ0FBYUYsS0FBYixFQUFvQkMsV0FBcEIsRUFBaUNMLGVBQWpDO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc0luc3RhbmNlT2YgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NsYXNzXCI7XG5pbXBvcnQgeyByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3J1bGVOYW1lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUnVsZShydWxlTmFtZSwgcnVsZXMpIHtcbiAgY29uc3QgbmFtZSA9IHJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJ1bGUgPSBydWxlcy5maW5kKChydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgICAgICAgIGlmIChydWxlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSB8fCBudWxsOyAvLy9cblxuICByZXR1cm4gcnVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJlZHVjZWRSdWxlKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIHJ1bGVzLnB1c2gocmVkdWNlZFJ1bGUpO1xuXHR9XG5cblx0cmV0dXJuIHJlZHVjZWRSdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBlYXRlZFJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgbGV0IHJlcGVhdGVkUnVsZSA9IGZpbmRSdWxlKHJlcGVhdGVkUnVsZU5hbWUsIHJ1bGVzKTtcblxuICBpZiAocmVwZWF0ZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVwZWF0ZWRSdWxlID0gUmVwZWF0ZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZXBlYXRlZFJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJld3JpdHRlblJ1bGVGcm9tUnVsZShydWxlLCBydWxlcywgUmV3cml0dGVuUnVsZSkge1xuICBsZXQgcmV3cml0dGVuUnVsZTtcblxuICBjb25zdCBydWxlUmV3cml0dGVuUnVsZSA9IGlzSW5zdGFuY2VPZihydWxlLCBSZXdyaXR0ZW5SdWxlKTtcblxuICBpZiAocnVsZVJld3JpdHRlblJ1bGUpIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gcnVsZTsgLy8vXG4gIH0gZWxzZSB7XG4gICAgcmV3cml0dGVuUnVsZSA9IFJld3JpdHRlblJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBjb25zdCByZXBsYWNlZFJ1bGUgPSBydWxlLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnRSdWxlID0gcmV3cml0dGVuUnVsZTsgIC8vL1xuXG4gICAgcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVzKTtcbiAgfVxuXG4gIHJldHVybiByZXdyaXR0ZW5SdWxlO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlUnVsZShyZXBsYWNlZFJ1bGUsIHJlcGxhY2VtZW50UnVsZSwgcnVsZXMpIHtcbiAgY29uc3QgaW5kZXggPSBydWxlcy5pbmRleE9mKHJlcGxhY2VkUnVsZSk7XG5cbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICBjb25zdCBzdGFydCA9IGluZGV4LFxuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIHJ1bGVzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIHJlcGxhY2VtZW50UnVsZSk7XG4gIH1cbn1cbiJdfQ==