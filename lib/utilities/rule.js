'use strict';

var ReducedRule = require('../rule/reduced'),
    RepeatedRule = require('../rule/repeated'),
    RewrittenRule = require('../rule/rewritten'),
    arrayUtilities = require('../utilities/array'),
    ruleNameUtilities = require('../utilities/ruleName');

var filter = arrayUtilities.filter,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function removeRule(rule, rules) {
  var removedRule = rule; ///

  filter(rules, function (rule) {
    if (rule !== removedRule) {
      return true;
    }
  });
}

function reducedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);

    rules.push(reducedRule);
  }

  return reducedRule;
}

function rewrittenRuleFromRule(rule, rules) {
  var rewrittenRule = void 0;

  var ruleRewrittenRule = rule instanceof RewrittenRule;

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    removeRule(rule, rules);

    rewrittenRule = RewrittenRule.fromRule(rule);

    rules.push(rewrittenRule);
  }

  return rewrittenRule;
}

function repeatedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

module.exports = {
  findRule: findRule,
  removeRule: removeRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromRule: repeatedRuleFromRule,
  rewrittenRuleFromRule: rewrittenRuleFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJSZWR1Y2VkUnVsZSIsInJlcXVpcmUiLCJSZXBlYXRlZFJ1bGUiLCJSZXdyaXR0ZW5SdWxlIiwiYXJyYXlVdGlsaXRpZXMiLCJydWxlTmFtZVV0aWxpdGllcyIsImZpbHRlciIsInJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJmaW5kUnVsZSIsInJ1bGVOYW1lIiwicnVsZXMiLCJuYW1lIiwicnVsZSIsImZpbmQiLCJnZXROYW1lIiwicmVtb3ZlUnVsZSIsInJlbW92ZWRSdWxlIiwicmVkdWNlZFJ1bGVGcm9tUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJwdXNoIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwicmV3cml0dGVuUnVsZSIsInJ1bGVSZXdyaXR0ZW5SdWxlIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsY0FBY0MsUUFBUSxpQkFBUixDQUFwQjtBQUFBLElBQ0dDLGVBQWVELFFBQVEsa0JBQVIsQ0FEbEI7QUFBQSxJQUVNRSxnQkFBZ0JGLFFBQVEsbUJBQVIsQ0FGdEI7QUFBQSxJQUdNRyxpQkFBaUJILFFBQVEsb0JBQVIsQ0FIdkI7QUFBQSxJQUlHSSxvQkFBb0JKLFFBQVEsdUJBQVIsQ0FKdkI7O0FBTU0sSUFBRUssTUFBRixHQUFhRixjQUFiLENBQUVFLE1BQUY7QUFBQSxJQUNFQyw0QkFERixHQUNnRUYsaUJBRGhFLENBQ0VFLDRCQURGO0FBQUEsSUFDZ0NDLDJCQURoQyxHQUNnRUgsaUJBRGhFLENBQ2dDRywyQkFEaEM7OztBQUdOLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxPQUFPRixRQUFiO0FBQUEsTUFBd0I7QUFDbEJHLFNBQU9GLE1BQU1HLElBQU4sQ0FBVyxVQUFDRCxJQUFELEVBQVU7QUFDMUIsUUFBTUgsV0FBV0csS0FBS0UsT0FBTCxFQUFqQjs7QUFFQSxRQUFJTCxhQUFhRSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk0sS0FNRCxJQVBaLENBRGlDLENBUWY7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxVQUFULENBQW9CSCxJQUFwQixFQUEwQkYsS0FBMUIsRUFBaUM7QUFDL0IsTUFBTU0sY0FBY0osSUFBcEIsQ0FEK0IsQ0FDTDs7QUFFMUJQLFNBQU9LLEtBQVAsRUFBYyxVQUFDRSxJQUFELEVBQVU7QUFDdEIsUUFBSUEsU0FBU0ksV0FBYixFQUEwQjtBQUN4QixhQUFPLElBQVA7QUFDRDtBQUNGLEdBSkQ7QUFLRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2QkwsSUFBN0IsRUFBbUNGLEtBQW5DLEVBQTBDO0FBQ3pDLE1BQU1ELFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7QUFBQSxNQUNHSSxrQkFBa0JYLDRCQUE0QkUsUUFBNUIsQ0FEckI7O0FBR0EsTUFBSVUsY0FBY1gsU0FBU1UsZUFBVCxFQUEwQlIsS0FBMUIsQ0FBbEI7O0FBRUEsTUFBSVMsZ0JBQWdCLElBQXBCLEVBQTBCO0FBQ3ZCQSxrQkFBY3BCLFlBQVlxQixRQUFaLENBQXFCUixJQUFyQixDQUFkOztBQUVBRixVQUFNVyxJQUFOLENBQVdGLFdBQVg7QUFDRjs7QUFFRCxTQUFPQSxXQUFQO0FBQ0E7O0FBRUQsU0FBU0cscUJBQVQsQ0FBK0JWLElBQS9CLEVBQXFDRixLQUFyQyxFQUE0QztBQUMxQyxNQUFJYSxzQkFBSjs7QUFFQSxNQUFNQyxvQkFBcUJaLGdCQUFnQlYsYUFBM0M7O0FBRUEsTUFBSXNCLGlCQUFKLEVBQXVCO0FBQ3JCRCxvQkFBZ0JYLElBQWhCLENBRHFCLENBQ0M7QUFDdkIsR0FGRCxNQUVPO0FBQ0xHLGVBQVdILElBQVgsRUFBaUJGLEtBQWpCOztBQUVBYSxvQkFBZ0JyQixjQUFja0IsUUFBZCxDQUF1QlIsSUFBdkIsQ0FBaEI7O0FBRUFGLFVBQU1XLElBQU4sQ0FBV0UsYUFBWDtBQUNEOztBQUVELFNBQU9BLGFBQVA7QUFDRDs7QUFFRCxTQUFTRSxvQkFBVCxDQUE4QmIsSUFBOUIsRUFBb0NGLEtBQXBDLEVBQTJDO0FBQzFDLE1BQU1ELFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7QUFBQSxNQUNHWSxtQkFBbUJwQiw2QkFBNkJHLFFBQTdCLENBRHRCOztBQUdBLE1BQUlrQixlQUFlbkIsU0FBU2tCLGdCQUFULEVBQTJCaEIsS0FBM0IsQ0FBbkI7O0FBRUEsTUFBSWlCLGlCQUFpQixJQUFyQixFQUEyQjtBQUMxQkEsbUJBQWUxQixhQUFhbUIsUUFBYixDQUFzQlIsSUFBdEIsQ0FBZjs7QUFFQUYsVUFBTVcsSUFBTixDQUFXTSxZQUFYO0FBQ0E7O0FBRUQsU0FBT0EsWUFBUDtBQUNBOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZyQixvQkFEZTtBQUVmTyx3QkFGZTtBQUdoQkUsMENBSGdCO0FBSWZRLDRDQUplO0FBS2ZIO0FBTGUsQ0FBakIiLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVkdWNlZFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3JlZHVjZWQnKSxcblx0XHRcdFJlcGVhdGVkUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmVwZWF0ZWQnKSxcbiAgICAgIFJld3JpdHRlblJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3Jld3JpdHRlbicpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcblx0XHRcdHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGVOYW1lJyk7XG5cbmNvbnN0IHsgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZmluZFJ1bGUocnVsZU5hbWUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBydWxlID0gcnVsZXMuZmluZCgocnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICAgICAgICBpZiAocnVsZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgbnVsbDsgLy8vXG5cbiAgcmV0dXJuIHJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJ1bGUocnVsZSwgcnVsZXMpIHtcbiAgY29uc3QgcmVtb3ZlZFJ1bGUgPSBydWxlOyAvLy9cblxuICBmaWx0ZXIocnVsZXMsIChydWxlKSA9PiB7XG4gICAgaWYgKHJ1bGUgIT09IHJlbW92ZWRSdWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlZHVjZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMpIHtcblx0Y29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcblx0XHRcdFx0cmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuXHRsZXQgcmVkdWNlZFJ1bGUgPSBmaW5kUnVsZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVzKTtcblxuXHRpZiAocmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVkdWNlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJld3JpdHRlblJ1bGVGcm9tUnVsZShydWxlLCBydWxlcykge1xuICBsZXQgcmV3cml0dGVuUnVsZTtcblxuICBjb25zdCBydWxlUmV3cml0dGVuUnVsZSA9IChydWxlIGluc3RhbmNlb2YgUmV3cml0dGVuUnVsZSk7XG5cbiAgaWYgKHJ1bGVSZXdyaXR0ZW5SdWxlKSB7XG4gICAgcmV3cml0dGVuUnVsZSA9IHJ1bGU7IC8vL1xuICB9IGVsc2Uge1xuICAgIHJlbW92ZVJ1bGUocnVsZSwgcnVsZXMpO1xuXG4gICAgcmV3cml0dGVuUnVsZSA9IFJld3JpdHRlblJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlcy5wdXNoKHJld3JpdHRlblJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJld3JpdHRlblJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuXHRsZXQgcmVwZWF0ZWRSdWxlID0gZmluZFJ1bGUocmVwZWF0ZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG5cdGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcblx0XHRyZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cblx0XHRydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVwZWF0ZWRSdWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFJ1bGUsXG4gIHJlbW92ZVJ1bGUsXG5cdHJlZHVjZWRSdWxlRnJvbVJ1bGUsXG4gIHJlcGVhdGVkUnVsZUZyb21SdWxlLFxuICByZXdyaXR0ZW5SdWxlRnJvbVJ1bGVcbn07XG4iXX0=