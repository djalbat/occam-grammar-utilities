'use strict';

var ruleNameUtilities = require('../utilities/ruleName');

var repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function reducedRuleFromRule(rule, rules, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);

    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, rules, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, rules, RewrittenRule) {
  var rewrittenRule = void 0;

  var ruleRewrittenRule = rule instanceof RewrittenRule;

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    rewrittenRule = RewrittenRule.fromRule(rule);

    var replacedRule = rule,
        ///
    replacementRule = rewrittenRule; ///

    replaceRule(replacedRule, replacementRule, rules);
  }

  return rewrittenRule;
}

module.exports = {
  findRule: findRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromRule: repeatedRuleFromRule,
  rewrittenRuleFromRule: rewrittenRuleFromRule
};

function replaceRule(replacedRule, replacementRule, rules) {
  var index = rules.indexOf(replacedRule);

  if (index > -1) {
    var start = index,
        deleteCount = 1;

    rules.splice(start, deleteCount, replacementRule);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJydWxlTmFtZVV0aWxpdGllcyIsInJlcXVpcmUiLCJyZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwiZmluZFJ1bGUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInJlZHVjZWRSdWxlRnJvbVJ1bGUiLCJSZWR1Y2VkUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJwdXNoIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJSZXBlYXRlZFJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiUmV3cml0dGVuUnVsZSIsInJld3JpdHRlblJ1bGUiLCJydWxlUmV3cml0dGVuUnVsZSIsInJlcGxhY2VkUnVsZSIsInJlcGxhY2VtZW50UnVsZSIsInJlcGxhY2VSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluZGV4IiwiaW5kZXhPZiIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLG9CQUFvQkMsUUFBUSx1QkFBUixDQUExQjs7SUFFUUMsNEIsR0FBOERGLGlCLENBQTlERSw0QjtJQUE4QkMsMkIsR0FBZ0NILGlCLENBQWhDRywyQjs7O0FBRXRDLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxPQUFPRixRQUFiO0FBQUEsTUFBd0I7QUFDbEJHLFNBQU9GLE1BQU1HLElBQU4sQ0FBVyxVQUFDRCxJQUFELEVBQVU7QUFDMUIsUUFBTUgsV0FBV0csS0FBS0UsT0FBTCxFQUFqQjs7QUFFQSxRQUFJTCxhQUFhRSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk0sS0FNRCxJQVBaLENBRGlDLENBUWY7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxtQkFBVCxDQUE2QkgsSUFBN0IsRUFBbUNGLEtBQW5DLEVBQTBDTSxXQUExQyxFQUF1RDtBQUN0RCxNQUFNUCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDR0csa0JBQWtCViw0QkFBNEJFLFFBQTVCLENBRHJCOztBQUdBLE1BQUlTLGNBQWNWLFNBQVNTLGVBQVQsRUFBMEJQLEtBQTFCLENBQWxCOztBQUVBLE1BQUlRLGdCQUFnQixJQUFwQixFQUEwQjtBQUN2QkEsa0JBQWNGLFlBQVlHLFFBQVosQ0FBcUJQLElBQXJCLENBQWQ7O0FBRUFGLFVBQU1VLElBQU4sQ0FBV0YsV0FBWDtBQUNGOztBQUVELFNBQU9BLFdBQVA7QUFDQTs7QUFFRCxTQUFTRyxvQkFBVCxDQUE4QlQsSUFBOUIsRUFBb0NGLEtBQXBDLEVBQTJDWSxZQUEzQyxFQUF5RDtBQUN2RCxNQUFNYixXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDTVMsbUJBQW1CakIsNkJBQTZCRyxRQUE3QixDQUR6Qjs7QUFHQSxNQUFJZSxlQUFlaEIsU0FBU2UsZ0JBQVQsRUFBMkJiLEtBQTNCLENBQW5COztBQUVBLE1BQUljLGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QkEsbUJBQWVGLGFBQWFILFFBQWIsQ0FBc0JQLElBQXRCLENBQWY7O0FBRUFGLFVBQU1VLElBQU4sQ0FBV0ksWUFBWDtBQUNEOztBQUVELFNBQU9BLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmIsSUFBL0IsRUFBcUNGLEtBQXJDLEVBQTRDZ0IsYUFBNUMsRUFBMkQ7QUFDekQsTUFBSUMsc0JBQUo7O0FBRUEsTUFBTUMsb0JBQXFCaEIsZ0JBQWdCYyxhQUEzQzs7QUFFQSxNQUFJRSxpQkFBSixFQUF1QjtBQUNyQkQsb0JBQWdCZixJQUFoQixDQURxQixDQUNDO0FBQ3ZCLEdBRkQsTUFFTztBQUNMZSxvQkFBZ0JELGNBQWNQLFFBQWQsQ0FBdUJQLElBQXZCLENBQWhCOztBQUVBLFFBQU1pQixlQUFlakIsSUFBckI7QUFBQSxRQUE0QjtBQUN0QmtCLHNCQUFrQkgsYUFEeEIsQ0FISyxDQUltQzs7QUFFeENJLGdCQUFZRixZQUFaLEVBQTBCQyxlQUExQixFQUEyQ3BCLEtBQTNDO0FBQ0Q7O0FBRUQsU0FBT2lCLGFBQVA7QUFDRDs7QUFFREssT0FBT0MsT0FBUCxHQUFpQjtBQUNmekIsb0JBRGU7QUFFaEJPLDBDQUZnQjtBQUdmTSw0Q0FIZTtBQUlmSTtBQUplLENBQWpCOztBQU9BLFNBQVNNLFdBQVQsQ0FBcUJGLFlBQXJCLEVBQW1DQyxlQUFuQyxFQUFvRHBCLEtBQXBELEVBQTJEO0FBQ3pELE1BQU13QixRQUFReEIsTUFBTXlCLE9BQU4sQ0FBY04sWUFBZCxDQUFkOztBQUVBLE1BQUlLLFFBQVEsQ0FBQyxDQUFiLEVBQWdCO0FBQ2QsUUFBTUUsUUFBUUYsS0FBZDtBQUFBLFFBQ01HLGNBQWMsQ0FEcEI7O0FBR0EzQixVQUFNNEIsTUFBTixDQUFhRixLQUFiLEVBQW9CQyxXQUFwQixFQUFpQ1AsZUFBakM7QUFDRDtBQUNGIiwiZmlsZSI6InJ1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGVOYW1lJyk7XG5cbmNvbnN0IHsgcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZmluZFJ1bGUocnVsZU5hbWUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBydWxlID0gcnVsZXMuZmluZCgocnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICAgICAgICBpZiAocnVsZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgbnVsbDsgLy8vXG5cbiAgcmV0dXJuIHJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJlZHVjZWRSdWxlKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIHJ1bGVzLnB1c2gocmVkdWNlZFJ1bGUpO1xuXHR9XG5cblx0cmV0dXJuIHJlZHVjZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXBlYXRlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlcywgUmVwZWF0ZWRSdWxlKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICBsZXQgcmVwZWF0ZWRSdWxlID0gZmluZFJ1bGUocmVwZWF0ZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG4gIGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcbiAgICByZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG4gIH1cblxuICByZXR1cm4gcmVwZWF0ZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXdyaXR0ZW5SdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJld3JpdHRlblJ1bGUpIHtcbiAgbGV0IHJld3JpdHRlblJ1bGU7XG5cbiAgY29uc3QgcnVsZVJld3JpdHRlblJ1bGUgPSAocnVsZSBpbnN0YW5jZW9mIFJld3JpdHRlblJ1bGUpO1xuXG4gIGlmIChydWxlUmV3cml0dGVuUnVsZSkge1xuICAgIHJld3JpdHRlblJ1bGUgPSBydWxlOyAvLy9cbiAgfSBlbHNlIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gUmV3cml0dGVuUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIGNvbnN0IHJlcGxhY2VkUnVsZSA9IHJ1bGUsICAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudFJ1bGUgPSByZXdyaXR0ZW5SdWxlOyAgLy8vXG5cbiAgICByZXBsYWNlUnVsZShyZXBsYWNlZFJ1bGUsIHJlcGxhY2VtZW50UnVsZSwgcnVsZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJld3JpdHRlblJ1bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kUnVsZSxcblx0cmVkdWNlZFJ1bGVGcm9tUnVsZSxcbiAgcmVwZWF0ZWRSdWxlRnJvbVJ1bGUsXG4gIHJld3JpdHRlblJ1bGVGcm9tUnVsZVxufTtcblxuZnVuY3Rpb24gcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IGluZGV4ID0gcnVsZXMuaW5kZXhPZihyZXBsYWNlZFJ1bGUpO1xuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleCxcbiAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICBydWxlcy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50LCByZXBsYWNlbWVudFJ1bGUpO1xuICB9XG59XG4iXX0=