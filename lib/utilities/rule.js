'use strict';

var ReducedRule = require('../rule/reduced'),
    RepeatedRule = require('../rule/repeated'),
    arrayUtilities = require('../utilities/array'),
    ruleNameUtilities = require('../utilities/ruleName');

var filter = arrayUtilities.filter,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function removeRule(rule, rules) {
  var removedRule = rule; ///

  filter(rules, function (rule) {
    if (rule !== removedRule) {
      return true;
    }
  });
}

function reducedRuleFromRule(rule, rules) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromReducedRuleNameAndRule(reducedRuleName, rule);

    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules) {
  var ruleName = leftRecursiveRuleName,
      ///
  repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

module.exports = {
  findRule: findRule,
  removeRule: removeRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromLeftRecursiveRuleName: repeatedRuleFromLeftRecursiveRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJSZWR1Y2VkUnVsZSIsInJlcXVpcmUiLCJSZXBlYXRlZFJ1bGUiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiZmlsdGVyIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImZpbmRSdWxlIiwicnVsZU5hbWUiLCJydWxlcyIsIm5hbWUiLCJydWxlIiwiZmluZCIsImdldE5hbWUiLCJyZW1vdmVSdWxlIiwicmVtb3ZlZFJ1bGUiLCJyZWR1Y2VkUnVsZUZyb21SdWxlIiwicmVkdWNlZFJ1bGVOYW1lIiwicmVkdWNlZFJ1bGUiLCJmcm9tUmVkdWNlZFJ1bGVOYW1lQW5kUnVsZSIsInB1c2giLCJyZXBlYXRlZFJ1bGVGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZSIsInJlcGVhdGVkUnVsZSIsImZyb21SZXBlYXRlZFJ1bGVOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsY0FBY0MsUUFBUSxpQkFBUixDQUFwQjtBQUFBLElBQ0dDLGVBQWVELFFBQVEsa0JBQVIsQ0FEbEI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsb0JBQVIsQ0FGdkI7QUFBQSxJQUdHRyxvQkFBb0JILFFBQVEsdUJBQVIsQ0FIdkI7O0FBS00sSUFBRUksTUFBRixHQUFhRixjQUFiLENBQUVFLE1BQUY7QUFBQSxJQUNFQyw0QkFERixHQUNnRUYsaUJBRGhFLENBQ0VFLDRCQURGO0FBQUEsSUFDZ0NDLDJCQURoQyxHQUNnRUgsaUJBRGhFLENBQ2dDRywyQkFEaEM7OztBQUdOLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxPQUFPRixRQUFiO0FBQUEsTUFBd0I7QUFDbEJHLFNBQU9GLE1BQU1HLElBQU4sQ0FBVyxVQUFDRCxJQUFELEVBQVU7QUFDMUIsUUFBTUgsV0FBV0csS0FBS0UsT0FBTCxFQUFqQjs7QUFFQSxRQUFJTCxhQUFhRSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk0sS0FNRCxJQVBaLENBRGlDLENBUWY7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxVQUFULENBQW9CSCxJQUFwQixFQUEwQkYsS0FBMUIsRUFBaUM7QUFDL0IsTUFBTU0sY0FBY0osSUFBcEIsQ0FEK0IsQ0FDTDs7QUFFMUJQLFNBQU9LLEtBQVAsRUFBYyxVQUFDRSxJQUFELEVBQVU7QUFDdEIsUUFBSUEsU0FBU0ksV0FBYixFQUEwQjtBQUN4QixhQUFPLElBQVA7QUFDRDtBQUNGLEdBSkQ7QUFLRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2QkwsSUFBN0IsRUFBbUNGLEtBQW5DLEVBQTBDO0FBQ3pDLE1BQU1ELFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7QUFBQSxNQUNHSSxrQkFBa0JYLDRCQUE0QkUsUUFBNUIsQ0FEckI7O0FBR0EsTUFBSVUsY0FBY1gsU0FBU1UsZUFBVCxFQUEwQlIsS0FBMUIsQ0FBbEI7O0FBRUEsTUFBSVMsZ0JBQWdCLElBQXBCLEVBQTBCO0FBQ3pCQSxrQkFBY25CLFlBQVlvQiwwQkFBWixDQUF1Q0YsZUFBdkMsRUFBd0ROLElBQXhELENBQWQ7O0FBRUVGLFVBQU1XLElBQU4sQ0FBV0YsV0FBWDtBQUNGOztBQUVELFNBQU9BLFdBQVA7QUFDQTs7QUFFRCxTQUFTRyxxQ0FBVCxDQUErQ0MscUJBQS9DLEVBQXNFYixLQUF0RSxFQUE2RTtBQUM1RSxNQUFNRCxXQUFXYyxxQkFBakI7QUFBQSxNQUF3QztBQUNyQ0MscUJBQW1CbEIsNkJBQTZCRyxRQUE3QixDQUR0Qjs7QUFHQSxNQUFJZ0IsZUFBZWpCLFNBQVNnQixnQkFBVCxFQUEyQmQsS0FBM0IsQ0FBbkI7O0FBRUEsTUFBSWUsaUJBQWlCLElBQXJCLEVBQTJCO0FBQzFCQSxtQkFBZXZCLGFBQWF3QixvQkFBYixDQUFrQ0YsZ0JBQWxDLENBQWY7O0FBRUFkLFVBQU1XLElBQU4sQ0FBV0ksWUFBWDtBQUNBOztBQUVELFNBQU9BLFlBQVA7QUFDQTs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmcEIsb0JBRGU7QUFFZk8sd0JBRmU7QUFHaEJFLDBDQUhnQjtBQUloQks7QUFKZ0IsQ0FBakIiLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVkdWNlZFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3JlZHVjZWQnKSxcblx0XHRcdFJlcGVhdGVkUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmVwZWF0ZWQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG5cdFx0XHRydWxlTmFtZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9ydWxlTmFtZScpO1xuXG5jb25zdCB7IGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUsIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IHJ1bGVzLmZpbmQoKHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgaWYgKHJ1bGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IG51bGw7IC8vL1xuXG4gIHJldHVybiBydWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSdWxlKHJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IHJlbW92ZWRSdWxlID0gcnVsZTsgLy8vXG5cbiAgZmlsdGVyKHJ1bGVzLCAocnVsZSkgPT4ge1xuICAgIGlmIChydWxlICE9PSByZW1vdmVkUnVsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWR1Y2VkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG5cdFx0cmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUmVkdWNlZFJ1bGVOYW1lQW5kUnVsZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZWR1Y2VkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVkdWNlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21MZWZ0UmVjdXJzaXZlUnVsZU5hbWUobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcykge1xuXHRjb25zdCBydWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgLy8vXG5cdFx0XHRcdHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuXHRsZXQgcmVwZWF0ZWRSdWxlID0gZmluZFJ1bGUocmVwZWF0ZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG5cdGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcblx0XHRyZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJlcGVhdGVkUnVsZU5hbWUocmVwZWF0ZWRSdWxlTmFtZSk7XG5cblx0XHRydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVwZWF0ZWRSdWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFJ1bGUsXG4gIHJlbW92ZVJ1bGUsXG5cdHJlZHVjZWRSdWxlRnJvbVJ1bGUsXG5cdHJlcGVhdGVkUnVsZUZyb21MZWZ0UmVjdXJzaXZlUnVsZU5hbWVcbn07XG4iXX0=