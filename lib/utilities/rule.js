'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var partUtilities = require('../utilities/part'),
    arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName');

var first = arrayUtilities.first,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    push = arrayUtilities.push,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    leftRecursiveRuleNameFromLeftRecursiveDefinition = definitionUtilities.leftRecursiveRuleNameFromLeftRecursiveDefinition;


function eliminateLeftRecursionFromRule(rule, rules) {
  var ruleName = rule.getName(),
      ruleLeftRecursive = isRuleLeftRecursive(rule, rules, ruleName);

  if (!ruleLeftRecursive) {
    return;
  }

  var definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition, count) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, rules, ruleName);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = definition,
          ///
      leftRecursiveRuleName = leftRecursiveRuleNameFromLeftRecursiveDefinition(leftRecursiveDefinition),
          leftRecursiveRule = findRuleByName(leftRecursiveRuleName, rules),
          rightRecursiveRule = RightRecursiveRule.fromLeftRecursiveRuleAndNonTerminalNode(leftRecursiveRule, nonTerminalNode, count);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonRecursiveRule = NonRecursiveRule.fromRule(rule),
      nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule),
      rightRecursiveRuleNameDefinitions = rightRecursiveRules.map(function (rightRecursiveRule) {
    var rightRecursiveRuleNameDefinition = RecursiveRuleNameDefinition.fromNonRecursiveRuleAndRecursiveRule(nonRecursiveRule, rightRecursiveRule);

    return rightRecursiveRuleNameDefinition;
  });

  rule.setDefinitions([].concat(_toConsumableArray(rightRecursiveRuleNameDefinitions), [nonRecursiveDefinition]));

  rules.push(nonRecursiveRule);

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function isDefinitionLeftRecursive(definition, rules, ruleName) {
  var definitionLeftRecursive = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart,
        ///
    ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleNamePartRuleNameRuleName = ruleNamePartRuleName === ruleName;

    if (ruleNamePartRuleNameRuleName) {
      definitionLeftRecursive = true;
    } else {
      var name = ruleNamePartRuleName,
          ///
      rule = findRuleByName(name, rules),
          ruleLeftRecursive = isRuleLeftRecursive(rule, rules, ruleName);

      definitionLeftRecursive = ruleLeftRecursive; ///
    }
  }

  return definitionLeftRecursive;
}

function isRuleLeftRecursive(rule, rules, ruleName) {
  var definitions = rule.getDefinitions(),
      ruleLeftRecursive = definitions.some(function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, rules, ruleName);

    if (definitionLeftRecursive) {
      return true;
    }
  });

  return ruleLeftRecursive;
}

function findRuleByName(name, rules) {
  var rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJwYXJ0VXRpbGl0aWVzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiTm9uUmVjdXJzaXZlUnVsZSIsIlJpZ2h0UmVjdXJzaXZlUnVsZSIsImRlZmluaXRpb25VdGlsaXRpZXMiLCJOb25SZWN1cnNpdmVEZWZpbml0aW9uIiwiUmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9uIiwiZmlyc3QiLCJpc1BhcnRSdWxlTmFtZVBhcnQiLCJwdXNoIiwiaXRlcmF0ZVdpdGhEZWxldGUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUiLCJydWxlIiwicnVsZXMiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTGVmdFJlY3Vyc2l2ZSIsImlzUnVsZUxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwibm9uVGVybWluYWxOb2RlIiwiZ2V0Tm9uVGVybWluYWxOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsImRlZmluaXRpb24iLCJjb3VudCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGUiLCJmaW5kUnVsZUJ5TmFtZSIsInJpZ2h0UmVjdXJzaXZlUnVsZSIsImZyb21MZWZ0UmVjdXJzaXZlUnVsZUFuZE5vblRlcm1pbmFsTm9kZSIsIm5vblJlY3Vyc2l2ZVJ1bGUiLCJmcm9tUnVsZSIsIm5vblJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tTm9uUmVjdXJzaXZlUnVsZSIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9ucyIsIm1hcCIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9uIiwiZnJvbU5vblJlY3Vyc2l2ZVJ1bGVBbmRSZWN1cnNpdmVSdWxlIiwic2V0RGVmaW5pdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFydHMiLCJnZXRQYXJ0cyIsImZpcnN0UGFydCIsImZpcnN0UGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydFJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJydWxlTmFtZVBhcnRSdWxlTmFtZVJ1bGVOYW1lIiwibmFtZSIsInNvbWUiLCJmaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLGdCQUFnQkMsUUFBUSxtQkFBUixDQUF0QjtBQUFBLElBQ01DLGlCQUFpQkQsUUFBUSxvQkFBUixDQUR2QjtBQUFBLElBRU1FLG1CQUFtQkYsUUFBUSxzQkFBUixDQUZ6QjtBQUFBLElBR01HLHFCQUFxQkgsUUFBUSx3QkFBUixDQUgzQjtBQUFBLElBSU1JLHNCQUFzQkosUUFBUSx5QkFBUixDQUo1QjtBQUFBLElBS01LLHlCQUF5QkwsUUFBUSw0QkFBUixDQUwvQjtBQUFBLElBTU1NLDhCQUE4Qk4sUUFBUSxpQ0FBUixDQU5wQzs7QUFRTSxJQUFFTyxLQUFGLEdBQVlOLGNBQVosQ0FBRU0sS0FBRjtBQUFBLElBQ0VDLGtCQURGLEdBQ3lCVCxhQUR6QixDQUNFUyxrQkFERjtBQUFBLElBRUVDLElBRkYsR0FFOEJSLGNBRjlCLENBRUVRLElBRkY7QUFBQSxJQUVRQyxpQkFGUixHQUU4QlQsY0FGOUIsQ0FFUVMsaUJBRlI7QUFBQSxJQUdFQyxnREFIRixHQUd1RFAsbUJBSHZELENBR0VPLGdEQUhGOzs7QUFLTixTQUFTQyw4QkFBVCxDQUF3Q0MsSUFBeEMsRUFBOENDLEtBQTlDLEVBQXFEO0FBQ25ELE1BQU1DLFdBQVdGLEtBQUtHLE9BQUwsRUFBakI7QUFBQSxNQUNNQyxvQkFBb0JDLG9CQUFvQkwsSUFBcEIsRUFBMEJDLEtBQTFCLEVBQWlDQyxRQUFqQyxDQUQxQjs7QUFHQSxNQUFJLENBQUNFLGlCQUFMLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsTUFBTUUsY0FBY04sS0FBS08sY0FBTCxFQUFwQjtBQUFBLE1BQ01DLGtCQUFrQlIsS0FBS1Msa0JBQUwsRUFEeEI7QUFBQSxNQUVNQyxzQkFBc0IsRUFGNUI7O0FBSUFiLG9CQUFrQlMsV0FBbEIsRUFBK0IsVUFBQ0ssVUFBRCxFQUFhQyxLQUFiLEVBQXVCO0FBQ3BELFFBQU1DLDBCQUEwQkMsMEJBQTBCSCxVQUExQixFQUFzQ1YsS0FBdEMsRUFBNkNDLFFBQTdDLENBQWhDOztBQUVBLFFBQUlXLHVCQUFKLEVBQTZCO0FBQzNCLFVBQU1FLDBCQUEwQkosVUFBaEM7QUFBQSxVQUE0QztBQUN0Q0ssOEJBQXdCbEIsaURBQWlEaUIsdUJBQWpELENBRDlCO0FBQUEsVUFFTUUsb0JBQW9CQyxlQUFlRixxQkFBZixFQUFzQ2YsS0FBdEMsQ0FGMUI7QUFBQSxVQUdNa0IscUJBQXFCN0IsbUJBQW1COEIsdUNBQW5CLENBQTJESCxpQkFBM0QsRUFBOEVULGVBQTlFLEVBQStGSSxLQUEvRixDQUgzQjs7QUFLQUYsMEJBQW9CZCxJQUFwQixDQUF5QnVCLGtCQUF6Qjs7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBYkQ7O0FBZUEsTUFBTUUsbUJBQW1CaEMsaUJBQWlCaUMsUUFBakIsQ0FBMEJ0QixJQUExQixDQUF6QjtBQUFBLE1BQ011Qix5QkFBeUIvQix1QkFBdUJnQyxvQkFBdkIsQ0FBNENILGdCQUE1QyxDQUQvQjtBQUFBLE1BRU1JLG9DQUFvQ2Ysb0JBQW9CZ0IsR0FBcEIsQ0FBd0IsVUFBQ1Asa0JBQUQsRUFBd0I7QUFDbEYsUUFBTVEsbUNBQW1DbEMsNEJBQTRCbUMsb0NBQTVCLENBQWlFUCxnQkFBakUsRUFBbUZGLGtCQUFuRixDQUF6Qzs7QUFFQSxXQUFPUSxnQ0FBUDtBQUNELEdBSm1DLENBRjFDOztBQVFBM0IsT0FBSzZCLGNBQUwsOEJBQ0tKLGlDQURMLElBRUVGLHNCQUZGOztBQUtBdEIsUUFBTUwsSUFBTixDQUFXeUIsZ0JBQVg7O0FBRUF6QixPQUFLSyxLQUFMLEVBQVlTLG1CQUFaO0FBQ0Q7O0FBRURvQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZoQztBQURlLENBQWpCOztBQUlBLFNBQVNlLHlCQUFULENBQW1DSCxVQUFuQyxFQUErQ1YsS0FBL0MsRUFBc0RDLFFBQXRELEVBQWdFO0FBQzlELE1BQUlXLDBCQUEwQixLQUE5Qjs7QUFFQSxNQUFNbUIsUUFBUXJCLFdBQVdzQixRQUFYLEVBQWQ7QUFBQSxNQUNNQyxZQUFZeEMsTUFBTXNDLEtBQU4sQ0FEbEI7QUFBQSxNQUVNRyx3QkFBd0J4QyxtQkFBbUJ1QyxTQUFuQixDQUY5Qjs7QUFJQSxNQUFJQyxxQkFBSixFQUEyQjtBQUN6QixRQUFNQyxlQUFlRixTQUFyQjtBQUFBLFFBQWdDO0FBQzFCRywyQkFBdUJELGFBQWFFLFdBQWIsRUFEN0I7QUFBQSxRQUVNQywrQkFBZ0NGLHlCQUF5Qm5DLFFBRi9EOztBQUlBLFFBQUlxQyw0QkFBSixFQUFrQztBQUNoQzFCLGdDQUEwQixJQUExQjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU0yQixPQUFPSCxvQkFBYjtBQUFBLFVBQW9DO0FBQzlCckMsYUFBT2tCLGVBQWVzQixJQUFmLEVBQXFCdkMsS0FBckIsQ0FEYjtBQUFBLFVBRU1HLG9CQUFvQkMsb0JBQW9CTCxJQUFwQixFQUEwQkMsS0FBMUIsRUFBaUNDLFFBQWpDLENBRjFCOztBQUlBVyxnQ0FBMEJULGlCQUExQixDQUxLLENBS3lDO0FBQy9DO0FBQ0Y7O0FBRUQsU0FBT1MsdUJBQVA7QUFDRDs7QUFFRCxTQUFTUixtQkFBVCxDQUE2QkwsSUFBN0IsRUFBbUNDLEtBQW5DLEVBQTBDQyxRQUExQyxFQUFvRDtBQUNsRCxNQUFNSSxjQUFjTixLQUFLTyxjQUFMLEVBQXBCO0FBQUEsTUFDTUgsb0JBQW9CRSxZQUFZbUMsSUFBWixDQUFpQixVQUFDOUIsVUFBRCxFQUFnQjtBQUNuRCxRQUFNRSwwQkFBMEJDLDBCQUEwQkgsVUFBMUIsRUFBc0NWLEtBQXRDLEVBQTZDQyxRQUE3QyxDQUFoQzs7QUFFQSxRQUFJVyx1QkFBSixFQUE2QjtBQUMzQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTm1CLENBRDFCOztBQVNBLFNBQU9ULGlCQUFQO0FBQ0Q7O0FBRUQsU0FBU2MsY0FBVCxDQUF3QnNCLElBQXhCLEVBQThCdkMsS0FBOUIsRUFBcUM7QUFDbkMsTUFBTUQsT0FBT0MsTUFBTXlDLElBQU4sQ0FBVyxVQUFTMUMsSUFBVCxFQUFlO0FBQ3JDLFFBQU1FLFdBQVdGLEtBQUtHLE9BQUwsRUFBakI7O0FBRUEsUUFBSUQsYUFBYXNDLElBQWpCLEVBQXVCO0FBQ3JCLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FOWSxLQU1QLElBTk4sQ0FEbUMsQ0FPdkI7O0FBRVosU0FBT3hDLElBQVA7QUFDRCIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJ0VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3BhcnQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBOb25SZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9ub25SZWN1cnNpdmUnKSxcbiAgICAgIFJpZ2h0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmlnaHRSZWN1cnNpdmUnKSxcbiAgICAgIGRlZmluaXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvZGVmaW5pdGlvbicpLFxuICAgICAgTm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vbm9uUmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3JlY3Vyc2l2ZVJ1bGVOYW1lJyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBpc1BhcnRSdWxlTmFtZVBhcnQgfSA9IHBhcnRVdGlsaXRpZXMsXG4gICAgICB7IHB1c2gsIGl0ZXJhdGVXaXRoRGVsZXRlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIH0gPSBkZWZpbml0aW9uVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZXMpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcnVsZUxlZnRSZWN1cnNpdmUgPSBpc1J1bGVMZWZ0UmVjdXJzaXZlKHJ1bGUsIHJ1bGVzLCBydWxlTmFtZSk7XG5cbiAgaWYgKCFydWxlTGVmdFJlY3Vyc2l2ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBub25UZXJtaW5hbE5vZGUgPSBydWxlLmdldE5vblRlcm1pbmFsTm9kZSgpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzID0gW107XG5cbiAgaXRlcmF0ZVdpdGhEZWxldGUoZGVmaW5pdGlvbnMsIChkZWZpbml0aW9uLCBjb3VudCkgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBydWxlcywgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSxcbiAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlID0gZmluZFJ1bGVCeU5hbWUobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBSaWdodFJlY3Vyc2l2ZVJ1bGUuZnJvbUxlZnRSZWN1cnNpdmVSdWxlQW5kTm9uVGVybWluYWxOb2RlKGxlZnRSZWN1cnNpdmVSdWxlLCBub25UZXJtaW5hbE5vZGUsIGNvdW50KTtcblxuICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5wdXNoKHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgbm9uUmVjdXJzaXZlUnVsZSA9IE5vblJlY3Vyc2l2ZVJ1bGUuZnJvbVJ1bGUocnVsZSksXG4gICAgICAgIG5vblJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25SZWN1cnNpdmVEZWZpbml0aW9uLmZyb21Ob25SZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbnMgPSByaWdodFJlY3Vyc2l2ZVJ1bGVzLm1hcCgocmlnaHRSZWN1cnNpdmVSdWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24gPSBSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24uZnJvbU5vblJlY3Vyc2l2ZVJ1bGVBbmRSZWN1cnNpdmVSdWxlKG5vblJlY3Vyc2l2ZVJ1bGUsIHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG5cbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb247XG4gICAgICAgIH0pO1xuXG4gIHJ1bGUuc2V0RGVmaW5pdGlvbnMoW1xuICAgIC4uLnJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9ucyxcbiAgICBub25SZWN1cnNpdmVEZWZpbml0aW9uXG4gIF0pO1xuXG4gIHJ1bGVzLnB1c2gobm9uUmVjdXJzaXZlUnVsZSk7XG5cbiAgcHVzaChydWxlcywgcmlnaHRSZWN1cnNpdmVSdWxlcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVcbn07XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZXMsIHJ1bGVOYW1lKSB7XG4gIGxldCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFJ1bGVOYW1lUGFydCA9IGlzUGFydFJ1bGVOYW1lUGFydChmaXJzdFBhcnQpO1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lUGFydFJ1bGVOYW1lID0gcnVsZU5hbWVQYXJ0LmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcnVsZU5hbWVQYXJ0UnVsZU5hbWVSdWxlTmFtZSA9IChydWxlTmFtZVBhcnRSdWxlTmFtZSA9PT0gcnVsZU5hbWUpO1xuXG4gICAgaWYgKHJ1bGVOYW1lUGFydFJ1bGVOYW1lUnVsZU5hbWUpIHtcbiAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmFtZSA9IHJ1bGVOYW1lUGFydFJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICBydWxlID0gZmluZFJ1bGVCeU5hbWUobmFtZSwgcnVsZXMpLFxuICAgICAgICAgICAgcnVsZUxlZnRSZWN1cnNpdmUgPSBpc1J1bGVMZWZ0UmVjdXJzaXZlKHJ1bGUsIHJ1bGVzLCBydWxlTmFtZSk7XG5cbiAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcnVsZUxlZnRSZWN1cnNpdmU7ICAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIGlzUnVsZUxlZnRSZWN1cnNpdmUocnVsZSwgcnVsZXMsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBydWxlTGVmdFJlY3Vyc2l2ZSA9IGRlZmluaXRpb25zLnNvbWUoKGRlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZXMsIHJ1bGVOYW1lKTtcblxuICAgICAgICAgIGlmIChkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gcnVsZUxlZnRSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIGZpbmRSdWxlQnlOYW1lKG5hbWUsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGUgPSBydWxlcy5maW5kKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pIHx8IG51bGw7IC8vL1xuXG4gIHJldHVybiBydWxlO1xufVxuIl19