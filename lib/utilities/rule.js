'use strict';

var arrayUtilities = require('../utilities/array'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    RightRecursiveRuleNamePart = require('../part/rightRecursiveRuleName');

var push = arrayUtilities.push,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive;


function eliminateLeftRecursionFromRule(rule, rules) {
  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  var count = 1;

  iterateWithDelete(definitions, function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = definition,
          ///
      rightRecursiveRuleName = '' + ruleName + count++ + '~',
          rightRecursiveRule = RightRecursiveRule.fromLeftRecursiveDefinitionRightRecursiveRuleNameAndnonTerminalNode(leftRecursiveDefinition, rightRecursiveRuleName, nonTerminalNode);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  definitions.forEach(function (definition) {
    rightRecursiveRules.forEach(function (rightRecursiveRule) {
      var rightRecursiveRuleNamePart = RightRecursiveRuleNamePart.fromRightRecursiveRule(rightRecursiveRule);

      definition.addPart(rightRecursiveRuleNamePart);
    });
  });

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJkZWZpbml0aW9uVXRpbGl0aWVzIiwiUmlnaHRSZWN1cnNpdmVSdWxlTmFtZVBhcnQiLCJwdXNoIiwiaXRlcmF0ZVdpdGhEZWxldGUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZSIsInJ1bGVzIiwibmFtZSIsImdldE5hbWUiLCJydWxlTmFtZSIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJub25UZXJtaW5hbE5vZGUiLCJnZXROb25UZXJtaW5hbE5vZGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGVzIiwiY291bnQiLCJkZWZpbml0aW9uIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJmcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kbm9uVGVybWluYWxOb2RlIiwiZm9yRWFjaCIsInJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVQYXJ0IiwiZnJvbVJpZ2h0UmVjdXJzaXZlUnVsZSIsImFkZFBhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7QUFBQSxJQUNNQyxxQkFBcUJELFFBQVEsd0JBQVIsQ0FEM0I7QUFBQSxJQUVNRSxzQkFBc0JGLFFBQVEseUJBQVIsQ0FGNUI7QUFBQSxJQUdNRyw2QkFBNkJILFFBQVEsZ0NBQVIsQ0FIbkM7O0lBS1FJLEksR0FBNEJMLGMsQ0FBNUJLLEk7SUFBTUMsaUIsR0FBc0JOLGMsQ0FBdEJNLGlCO0lBQ05DLHlCLEdBQThCSixtQixDQUE5QkkseUI7OztBQUVSLFNBQVNDLDhCQUFULENBQXdDQyxJQUF4QyxFQUE4Q0MsS0FBOUMsRUFBcUQ7QUFDbkQsTUFBTUMsT0FBT0YsS0FBS0csT0FBTCxFQUFiO0FBQUEsTUFDTUMsV0FBV0YsSUFEakI7QUFBQSxNQUN3QjtBQUNsQkcsZ0JBQWNMLEtBQUtNLGNBQUwsRUFGcEI7QUFBQSxNQUdNQyxrQkFBa0JQLEtBQUtRLGtCQUFMLEVBSHhCO0FBQUEsTUFJTUMsc0JBQXNCLEVBSjVCOztBQU1BLE1BQUlDLFFBQVEsQ0FBWjs7QUFFQWIsb0JBQWtCUSxXQUFsQixFQUErQixVQUFDTSxVQUFELEVBQWdCO0FBQzdDLFFBQU1DLDBCQUEwQmQsMEJBQTBCYSxVQUExQixFQUFzQ1AsUUFBdEMsQ0FBaEM7O0FBRUEsUUFBSVEsdUJBQUosRUFBNkI7QUFDM0IsVUFBTUMsMEJBQTBCRixVQUFoQztBQUFBLFVBQTRDO0FBQ3RDRyxvQ0FBNEJWLFFBQTVCLEdBQXVDTSxPQUF2QyxNQUROO0FBQUEsVUFFTUsscUJBQXFCdEIsbUJBQW1CdUIsbUVBQW5CLENBQXVGSCx1QkFBdkYsRUFBZ0hDLHNCQUFoSCxFQUF3SVAsZUFBeEksQ0FGM0I7O0FBSUFFLDBCQUFvQmIsSUFBcEIsQ0FBeUJtQixrQkFBekI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVpEOztBQWNBVixjQUFZWSxPQUFaLENBQW9CLFVBQUNOLFVBQUQsRUFBZ0I7QUFDbENGLHdCQUFvQlEsT0FBcEIsQ0FBNEIsVUFBQ0Ysa0JBQUQsRUFBd0I7QUFDbEQsVUFBTUcsNkJBQTZCdkIsMkJBQTJCd0Isc0JBQTNCLENBQWtESixrQkFBbEQsQ0FBbkM7O0FBRUFKLGlCQUFXUyxPQUFYLENBQW1CRiwwQkFBbkI7QUFDRCxLQUpEO0FBS0QsR0FORDs7QUFRQXRCLE9BQUtLLEtBQUwsRUFBWVEsbUJBQVo7QUFDRDs7QUFFRFksT0FBT0MsT0FBUCxHQUFpQjtBQUNmdkI7QUFEZSxDQUFqQiIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yaWdodFJlY3Vyc2l2ZScpLFxuICAgICAgZGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9kZWZpbml0aW9uJyksXG4gICAgICBSaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lUGFydCA9IHJlcXVpcmUoJy4uL3BhcnQvcmlnaHRSZWN1cnNpdmVSdWxlTmFtZScpO1xuXG5jb25zdCB7IHB1c2gsIGl0ZXJhdGVXaXRoRGVsZXRlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSB9ID0gZGVmaW5pdGlvblV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBub25UZXJtaW5hbE5vZGUgPSBydWxlLmdldE5vblRlcm1pbmFsTm9kZSgpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzID0gW107XG5cbiAgbGV0IGNvdW50ID0gMTtcblxuICBpdGVyYXRlV2l0aERlbGV0ZShkZWZpbml0aW9ucywgKGRlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZSA9IGAke3J1bGVOYW1lfSR7Y291bnQrK31+YCxcbiAgICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kbm9uVGVybWluYWxOb2RlKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lLCBub25UZXJtaW5hbE5vZGUpO1xuXG4gICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5mb3JFYWNoKChyaWdodFJlY3Vyc2l2ZVJ1bGUpID0+IHtcbiAgICAgIGNvbnN0IHJpZ2h0UmVjdXJzaXZlUnVsZU5hbWVQYXJ0ID0gUmlnaHRSZWN1cnNpdmVSdWxlTmFtZVBhcnQuZnJvbVJpZ2h0UmVjdXJzaXZlUnVsZShyaWdodFJlY3Vyc2l2ZVJ1bGUpO1xuXG4gICAgICBkZWZpbml0aW9uLmFkZFBhcnQocmlnaHRSZWN1cnNpdmVSdWxlTmFtZVBhcnQpO1xuICAgIH0pO1xuICB9KTtcblxuICBwdXNoKHJ1bGVzLCByaWdodFJlY3Vyc2l2ZVJ1bGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZVxufTtcbiJdfQ==