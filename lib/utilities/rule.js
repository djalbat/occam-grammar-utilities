"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducedRuleFromRule = reducedRuleFromRule;
exports.repeatedRuleFromRule = repeatedRuleFromRule;
exports.rewrittenRuleFromRule = rewrittenRuleFromRule;

var _class = require("../utilities/class");

var _ruleName = require("../utilities/ruleName");

function reducedRuleFromRule(rule, ruleMap, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName);
  var reducedRule = ruleMap[reducedRuleName] || null;

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);
    ruleMap[reducedRuleName] = reducedRule;
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, ruleMap, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = (0, _ruleName.repeatedRuleNameFromRuleName)(ruleName);
  var repeatedRule = ruleMap[repeatedRuleName] || null;

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);
    ruleMap[repeatedRuleName] = repeatedRule;
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, ruleMap, RewrittenRule) {
  var rewrittenRule;
  var ruleRewrittenRule = (0, _class.isInstanceOf)(rule, RewrittenRule);

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    rewrittenRule = RewrittenRule.fromRule(rule);
    var replacedRule = rule,
        ///
    replacementRule = rewrittenRule; ///

    replaceRule(replacedRule, replacementRule, ruleMap);
  }

  return rewrittenRule;
}

function replaceRule(replacedRule, replacementRule, ruleMap) {
  var replacedRuleName = replacedRule.getName(),
      replacementRuleName = replacementRule.getName();
  delete ruleMap[replacedRuleName];
  ruleMap[replacementRuleName] = replacementRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGUuanMiXSwibmFtZXMiOlsicmVkdWNlZFJ1bGVGcm9tUnVsZSIsInJ1bGUiLCJydWxlTWFwIiwiUmVkdWNlZFJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZSIsImZyb21SdWxlIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJSZXBlYXRlZFJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiUmV3cml0dGVuUnVsZSIsInJld3JpdHRlblJ1bGUiLCJydWxlUmV3cml0dGVuUnVsZSIsInJlcGxhY2VkUnVsZSIsInJlcGxhY2VtZW50UnVsZSIsInJlcGxhY2VSdWxlIiwicmVwbGFjZWRSdWxlTmFtZSIsInJlcGxhY2VtZW50UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFFTyxTQUFTQSxtQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUNDLE9BQW5DLEVBQTRDQyxXQUE1QyxFQUF5RDtBQUMvRCxNQUFNQyxRQUFRLEdBQUdILElBQUksQ0FBQ0ksT0FBTCxFQUFqQjtBQUFBLE1BQ0dDLGVBQWUsR0FBRywyQ0FBNEJGLFFBQTVCLENBRHJCO0FBR0EsTUFBSUcsV0FBVyxHQUFHTCxPQUFPLENBQUNJLGVBQUQsQ0FBUCxJQUE0QixJQUE5Qzs7QUFFQSxNQUFJQyxXQUFXLEtBQUssSUFBcEIsRUFBMEI7QUFDdkJBLElBQUFBLFdBQVcsR0FBR0osV0FBVyxDQUFDSyxRQUFaLENBQXFCUCxJQUFyQixDQUFkO0FBRUFDLElBQUFBLE9BQU8sQ0FBQ0ksZUFBRCxDQUFQLEdBQTJCQyxXQUEzQjtBQUNGOztBQUVELFNBQU9BLFdBQVA7QUFDQTs7QUFFTSxTQUFTRSxvQkFBVCxDQUE4QlIsSUFBOUIsRUFBb0NDLE9BQXBDLEVBQTZDUSxZQUE3QyxFQUEyRDtBQUNoRSxNQUFNTixRQUFRLEdBQUdILElBQUksQ0FBQ0ksT0FBTCxFQUFqQjtBQUFBLE1BQ01NLGdCQUFnQixHQUFHLDRDQUE2QlAsUUFBN0IsQ0FEekI7QUFHQSxNQUFJUSxZQUFZLEdBQUdWLE9BQU8sQ0FBQ1MsZ0JBQUQsQ0FBUCxJQUE2QixJQUFoRDs7QUFFQSxNQUFJQyxZQUFZLEtBQUssSUFBckIsRUFBMkI7QUFDekJBLElBQUFBLFlBQVksR0FBR0YsWUFBWSxDQUFDRixRQUFiLENBQXNCUCxJQUF0QixDQUFmO0FBRUFDLElBQUFBLE9BQU8sQ0FBQ1MsZ0JBQUQsQ0FBUCxHQUE0QkMsWUFBNUI7QUFDRDs7QUFFRCxTQUFPQSxZQUFQO0FBQ0Q7O0FBRU0sU0FBU0MscUJBQVQsQ0FBK0JaLElBQS9CLEVBQXFDQyxPQUFyQyxFQUE4Q1ksYUFBOUMsRUFBNkQ7QUFDbEUsTUFBSUMsYUFBSjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHLHlCQUFhZixJQUFiLEVBQW1CYSxhQUFuQixDQUExQjs7QUFFQSxNQUFJRSxpQkFBSixFQUF1QjtBQUNyQkQsSUFBQUEsYUFBYSxHQUFHZCxJQUFoQixDQURxQixDQUNDO0FBQ3ZCLEdBRkQsTUFFTztBQUNMYyxJQUFBQSxhQUFhLEdBQUdELGFBQWEsQ0FBQ04sUUFBZCxDQUF1QlAsSUFBdkIsQ0FBaEI7QUFFQSxRQUFNZ0IsWUFBWSxHQUFHaEIsSUFBckI7QUFBQSxRQUE0QjtBQUN0QmlCLElBQUFBLGVBQWUsR0FBR0gsYUFEeEIsQ0FISyxDQUltQzs7QUFFeENJLElBQUFBLFdBQVcsQ0FBQ0YsWUFBRCxFQUFlQyxlQUFmLEVBQWdDaEIsT0FBaEMsQ0FBWDtBQUNEOztBQUVELFNBQU9hLGFBQVA7QUFDRDs7QUFFRCxTQUFTSSxXQUFULENBQXFCRixZQUFyQixFQUFtQ0MsZUFBbkMsRUFBb0RoQixPQUFwRCxFQUE2RDtBQUMzRCxNQUFNa0IsZ0JBQWdCLEdBQUdILFlBQVksQ0FBQ1osT0FBYixFQUF6QjtBQUFBLE1BQ01nQixtQkFBbUIsR0FBR0gsZUFBZSxDQUFDYixPQUFoQixFQUQ1QjtBQUdBLFNBQU9ILE9BQU8sQ0FBQ2tCLGdCQUFELENBQWQ7QUFFQWxCLEVBQUFBLE9BQU8sQ0FBQ21CLG1CQUFELENBQVAsR0FBK0JILGVBQS9CO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jbGFzc1wiO1xuaW1wb3J0IHsgcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlTmFtZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlTWFwLCBSZWR1Y2VkUnVsZSkge1xuXHRjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuXHRcdFx0XHRyZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSB8fCBudWxsO1xuXG5cdGlmIChyZWR1Y2VkUnVsZSA9PT0gbnVsbCkge1xuICAgIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlTWFwW3JlZHVjZWRSdWxlTmFtZV0gPSByZWR1Y2VkUnVsZTtcblx0fVxuXG5cdHJldHVybiByZWR1Y2VkUnVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVNYXAsIFJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBlYXRlZFJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgbGV0IHJlcGVhdGVkUnVsZSA9IHJ1bGVNYXBbcmVwZWF0ZWRSdWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAocmVwZWF0ZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVwZWF0ZWRSdWxlID0gUmVwZWF0ZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZU1hcFtyZXBlYXRlZFJ1bGVOYW1lXSA9IHJlcGVhdGVkUnVsZTtcbiAgfVxuXG4gIHJldHVybiByZXBlYXRlZFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXR0ZW5SdWxlRnJvbVJ1bGUocnVsZSwgcnVsZU1hcCwgUmV3cml0dGVuUnVsZSkge1xuICBsZXQgcmV3cml0dGVuUnVsZTtcblxuICBjb25zdCBydWxlUmV3cml0dGVuUnVsZSA9IGlzSW5zdGFuY2VPZihydWxlLCBSZXdyaXR0ZW5SdWxlKTtcblxuICBpZiAocnVsZVJld3JpdHRlblJ1bGUpIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gcnVsZTsgLy8vXG4gIH0gZWxzZSB7XG4gICAgcmV3cml0dGVuUnVsZSA9IFJld3JpdHRlblJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBjb25zdCByZXBsYWNlZFJ1bGUgPSBydWxlLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnRSdWxlID0gcmV3cml0dGVuUnVsZTsgIC8vL1xuXG4gICAgcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVNYXApO1xuICB9XG5cbiAgcmV0dXJuIHJld3JpdHRlblJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VSdWxlKHJlcGxhY2VkUnVsZSwgcmVwbGFjZW1lbnRSdWxlLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJlcGxhY2VkUnVsZU5hbWUgPSByZXBsYWNlZFJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBsYWNlbWVudFJ1bGVOYW1lID0gcmVwbGFjZW1lbnRSdWxlLmdldE5hbWUoKTtcblxuICBkZWxldGUgcnVsZU1hcFtyZXBsYWNlZFJ1bGVOYW1lXTtcblxuICBydWxlTWFwW3JlcGxhY2VtZW50UnVsZU5hbWVdID0gcmVwbGFjZW1lbnRSdWxlO1xufVxuIl19