"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reducedRuleFromRule = reducedRuleFromRule;
exports.repeatedRuleFromRule = repeatedRuleFromRule;
exports.rewrittenRuleFromRule = rewrittenRuleFromRule;
var _class = require("../utilities/class");
var _ruleName = require("../utilities/ruleName");
function reducedRuleFromRule(rule, ruleMap, ReducedRule) {
    var ruleName = rule.getName(), reducedRuleName = _ruleName.reducedRuleNameFromRuleName(ruleName);
    var reducedRule = ruleMap[reducedRuleName] || null;
    if (reducedRule === null) {
        reducedRule = ReducedRule.fromRule(rule);
        ruleMap[reducedRuleName] = reducedRule;
    }
    return reducedRule;
}
function repeatedRuleFromRule(rule, ruleMap, RepeatedRule) {
    var ruleName = rule.getName(), repeatedRuleName = _ruleName.repeatedRuleNameFromRuleName(ruleName);
    var repeatedRule = ruleMap[repeatedRuleName] || null;
    if (repeatedRule === null) {
        repeatedRule = RepeatedRule.fromRule(rule);
        ruleMap[repeatedRuleName] = repeatedRule;
    }
    return repeatedRule;
}
function rewrittenRuleFromRule(rule, ruleMap, RewrittenRule) {
    var rewrittenRule;
    var ruleRewrittenRule = _class.isInstanceOf(rule, RewrittenRule);
    if (ruleRewrittenRule) {
        rewrittenRule = rule; ///
    } else {
        rewrittenRule = RewrittenRule.fromRule(rule);
        var replacedRule = rule, replacementRule = rewrittenRule; ///
        replaceRule(replacedRule, replacementRule, ruleMap);
    }
    return rewrittenRule;
}
function replaceRule(replacedRule, replacementRule, ruleMap) {
    var replacedRuleName = replacedRule.getName(), replacementRuleName = replacementRule.getName();
    delete ruleMap[replacedRuleName];
    ruleMap[replacementRuleName] = replacementRule;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jbGFzc1wiO1xuaW1wb3J0IHsgcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlTmFtZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlTWFwLCBSZWR1Y2VkUnVsZSkge1xuXHRjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuXHRcdFx0XHRyZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSB8fCBudWxsO1xuXG5cdGlmIChyZWR1Y2VkUnVsZSA9PT0gbnVsbCkge1xuICAgIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlTWFwW3JlZHVjZWRSdWxlTmFtZV0gPSByZWR1Y2VkUnVsZTtcblx0fVxuXG5cdHJldHVybiByZWR1Y2VkUnVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVNYXAsIFJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBlYXRlZFJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgbGV0IHJlcGVhdGVkUnVsZSA9IHJ1bGVNYXBbcmVwZWF0ZWRSdWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAocmVwZWF0ZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVwZWF0ZWRSdWxlID0gUmVwZWF0ZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZU1hcFtyZXBlYXRlZFJ1bGVOYW1lXSA9IHJlcGVhdGVkUnVsZTtcbiAgfVxuXG4gIHJldHVybiByZXBlYXRlZFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXR0ZW5SdWxlRnJvbVJ1bGUocnVsZSwgcnVsZU1hcCwgUmV3cml0dGVuUnVsZSkge1xuICBsZXQgcmV3cml0dGVuUnVsZTtcblxuICBjb25zdCBydWxlUmV3cml0dGVuUnVsZSA9IGlzSW5zdGFuY2VPZihydWxlLCBSZXdyaXR0ZW5SdWxlKTtcblxuICBpZiAocnVsZVJld3JpdHRlblJ1bGUpIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gcnVsZTsgLy8vXG4gIH0gZWxzZSB7XG4gICAgcmV3cml0dGVuUnVsZSA9IFJld3JpdHRlblJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBjb25zdCByZXBsYWNlZFJ1bGUgPSBydWxlLCAgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnRSdWxlID0gcmV3cml0dGVuUnVsZTsgIC8vL1xuXG4gICAgcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVNYXApO1xuICB9XG5cbiAgcmV0dXJuIHJld3JpdHRlblJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VSdWxlKHJlcGxhY2VkUnVsZSwgcmVwbGFjZW1lbnRSdWxlLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJlcGxhY2VkUnVsZU5hbWUgPSByZXBsYWNlZFJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBsYWNlbWVudFJ1bGVOYW1lID0gcmVwbGFjZW1lbnRSdWxlLmdldE5hbWUoKTtcblxuICBkZWxldGUgcnVsZU1hcFtyZXBsYWNlZFJ1bGVOYW1lXTtcblxuICBydWxlTWFwW3JlcGxhY2VtZW50UnVsZU5hbWVdID0gcmVwbGFjZW1lbnRSdWxlO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQUE7Ozs7UUFLQSxtQkFBQSxHQUFBLG1CQUFBO1FBZUEsb0JBQUEsR0FBQSxvQkFBQTtRQWVBLHFCQUFBLEdBQUEscUJBQUE7SUFqQ0EsTUFBQTtJQUNBLFNBQUE7U0FFQSxtQkFBQSxDQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQTtRQUNBLFFBQUEsR0FBQSxJQUFBLENBQUEsT0FBQSxJQUNBLGVBQUEsR0FKQSxTQUFBLDZCQUlBLFFBQUE7UUFFQSxXQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsS0FBQSxJQUFBO1FBRUEsV0FBQSxLQUFBLElBQUE7QUFDQSxtQkFBQSxHQUFBLFdBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQTtBQUVBLGVBQUEsQ0FBQSxlQUFBLElBQUEsV0FBQTs7V0FHQSxXQUFBOztTQUdBLG9CQUFBLENBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxZQUFBO1FBQ0EsUUFBQSxHQUFBLElBQUEsQ0FBQSxPQUFBLElBQ0EsZ0JBQUEsR0FuQkEsU0FBQSw4QkFtQkEsUUFBQTtRQUVBLFlBQUEsR0FBQSxPQUFBLENBQUEsZ0JBQUEsS0FBQSxJQUFBO1FBRUEsWUFBQSxLQUFBLElBQUE7QUFDQSxvQkFBQSxHQUFBLFlBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQTtBQUVBLGVBQUEsQ0FBQSxnQkFBQSxJQUFBLFlBQUE7O1dBR0EsWUFBQTs7U0FHQSxxQkFBQSxDQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQTtRQUNBLGFBQUE7UUFFQSxpQkFBQSxHQXBDQSxNQUFBLGNBb0NBLElBQUEsRUFBQSxhQUFBO1FBRUEsaUJBQUE7QUFDQSxxQkFBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTs7QUFFQSxxQkFBQSxHQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQTtZQUVBLFlBQUEsR0FBQSxJQUFBLEVBQ0EsZUFBQSxHQUFBLGFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtBQUVBLG1CQUFBLENBQUEsWUFBQSxFQUFBLGVBQUEsRUFBQSxPQUFBOztXQUdBLGFBQUE7O1NBR0EsV0FBQSxDQUFBLFlBQUEsRUFBQSxlQUFBLEVBQUEsT0FBQTtRQUNBLGdCQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsSUFDQSxtQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBO1dBRUEsT0FBQSxDQUFBLGdCQUFBO0FBRUEsV0FBQSxDQUFBLG1CQUFBLElBQUEsZUFBQSJ9