'use strict';

var arrayUtilities = require('../utilities/array'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonLeftRecursiveDefinition = require('../definition/nonLeftRecursive');

var push = arrayUtilities.push,
    unshift = arrayUtilities.unshift,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive;


function eliminateLeftRecursionFromRule(rule, rules) {
  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var rightRecursiveRule = RightRecursiveRule.fromRuleNameDefinitionAndNonTerminalNode(ruleName, definition, nonTerminalNode);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonLeftRecursiveDefinitions = [];

  definitions.forEach(function (definition) {
    rightRecursiveRules.forEach(function (rightRecursiveRule) {
      var nonLeftRecursiveDefinition = NonLeftRecursiveDefinition.fromDefinitionAndRightRecursiveRule(definition, rightRecursiveRule);

      nonLeftRecursiveDefinitions.push(nonLeftRecursiveDefinition);
    });
  });

  unshift(definitions, nonLeftRecursiveDefinitions);

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJkZWZpbml0aW9uVXRpbGl0aWVzIiwiTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwdXNoIiwidW5zaGlmdCIsIml0ZXJhdGVXaXRoRGVsZXRlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZSIsInJ1bGUiLCJydWxlcyIsIm5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwibm9uVGVybWluYWxOb2RlIiwiZ2V0Tm9uVGVybWluYWxOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsImRlZmluaXRpb24iLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJpZ2h0UmVjdXJzaXZlUnVsZSIsImZyb21SdWxlTmFtZURlZmluaXRpb25BbmROb25UZXJtaW5hbE5vZGUiLCJub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmb3JFYWNoIiwibm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmcm9tRGVmaW5pdGlvbkFuZFJpZ2h0UmVjdXJzaXZlUnVsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxvQkFBUixDQUF2QjtBQUFBLElBQ01DLHFCQUFxQkQsUUFBUSx3QkFBUixDQUQzQjtBQUFBLElBRU1FLHNCQUFzQkYsUUFBUSx5QkFBUixDQUY1QjtBQUFBLElBR01HLDZCQUE2QkgsUUFBUSxnQ0FBUixDQUhuQzs7SUFLUUksSSxHQUFxQ0wsYyxDQUFyQ0ssSTtJQUFNQyxPLEdBQStCTixjLENBQS9CTSxPO0lBQVNDLGlCLEdBQXNCUCxjLENBQXRCTyxpQjtJQUNmQyx5QixHQUE4QkwsbUIsQ0FBOUJLLHlCOzs7QUFFUixTQUFTQyw4QkFBVCxDQUF3Q0MsSUFBeEMsRUFBOENDLEtBQTlDLEVBQXFEO0FBQ25ELE1BQU1DLE9BQU9GLEtBQUtHLE9BQUwsRUFBYjtBQUFBLE1BQ01DLFdBQVdGLElBRGpCO0FBQUEsTUFDd0I7QUFDbEJHLGdCQUFjTCxLQUFLTSxjQUFMLEVBRnBCO0FBQUEsTUFHTUMsa0JBQWtCUCxLQUFLUSxrQkFBTCxFQUh4QjtBQUFBLE1BSU1DLHNCQUFzQixFQUo1Qjs7QUFNQVosb0JBQWtCUSxXQUFsQixFQUErQixVQUFDSyxVQUFELEVBQWdCO0FBQzdDLFFBQU1DLDBCQUEwQmIsMEJBQTBCWSxVQUExQixFQUFzQ04sUUFBdEMsQ0FBaEM7O0FBRUEsUUFBSU8sdUJBQUosRUFBNkI7QUFDM0IsVUFBTUMscUJBQXFCcEIsbUJBQW1CcUIsd0NBQW5CLENBQTREVCxRQUE1RCxFQUFzRU0sVUFBdEUsRUFBa0ZILGVBQWxGLENBQTNCOztBQUVBRSwwQkFBb0JkLElBQXBCLENBQXlCaUIsa0JBQXpCOztBQUVBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FWRDs7QUFZQSxNQUFNRSw4QkFBOEIsRUFBcEM7O0FBRUFULGNBQVlVLE9BQVosQ0FBb0IsVUFBQ0wsVUFBRCxFQUFnQjtBQUNsQ0Qsd0JBQW9CTSxPQUFwQixDQUE0QixVQUFDSCxrQkFBRCxFQUF3QjtBQUNsRCxVQUFNSSw2QkFBNkJ0QiwyQkFBMkJ1QixtQ0FBM0IsQ0FBK0RQLFVBQS9ELEVBQTJFRSxrQkFBM0UsQ0FBbkM7O0FBRUFFLGtDQUE0Qm5CLElBQTVCLENBQWlDcUIsMEJBQWpDO0FBQ0QsS0FKRDtBQUtELEdBTkQ7O0FBUUFwQixVQUFRUyxXQUFSLEVBQXFCUywyQkFBckI7O0FBRUFuQixPQUFLTSxLQUFMLEVBQVlRLG1CQUFaO0FBQ0Q7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnBCO0FBRGUsQ0FBakIiLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIFJpZ2h0UmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcmlnaHRSZWN1cnNpdmUnKSxcbiAgICAgIGRlZmluaXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvZGVmaW5pdGlvbicpLFxuICAgICAgTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL25vbkxlZnRSZWN1cnNpdmUnKTtcblxuY29uc3QgeyBwdXNoLCB1bnNoaWZ0LCBpdGVyYXRlV2l0aERlbGV0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgfSA9IGRlZmluaXRpb25VdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJ1bGVOYW1lID0gbmFtZSwgIC8vL1xuICAgICAgICBkZWZpbml0aW9ucyA9IHJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlID0gcnVsZS5nZXROb25UZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlcyA9IFtdO1xuXG4gIGl0ZXJhdGVXaXRoRGVsZXRlKGRlZmluaXRpb25zLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBydWxlTmFtZSk7XG5cbiAgICBpZiAoZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGNvbnN0IHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tUnVsZU5hbWVEZWZpbml0aW9uQW5kTm9uVGVybWluYWxOb2RlKHJ1bGVOYW1lLCBkZWZpbml0aW9uLCBub25UZXJtaW5hbE5vZGUpO1xuXG4gICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5mb3JFYWNoKChyaWdodFJlY3Vyc2l2ZVJ1bGUpID0+IHtcbiAgICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbURlZmluaXRpb25BbmRSaWdodFJlY3Vyc2l2ZVJ1bGUoZGVmaW5pdGlvbiwgcmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgbm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLnB1c2gobm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH0pO1xuICB9KTtcblxuICB1bnNoaWZ0KGRlZmluaXRpb25zLCBub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIHB1c2gocnVsZXMsIHJpZ2h0UmVjdXJzaXZlUnVsZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlXG59O1xuIl19