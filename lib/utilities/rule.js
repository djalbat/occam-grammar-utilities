"use strict";

var _class = require("../utilities/class");

var _ruleName = require("../utilities/ruleName");

function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function reducedRuleFromRule(rule, rules, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName);
  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);
    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, rules, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = (0, _ruleName.repeatedRuleNameFromRuleName)(ruleName);
  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);
    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, rules, RewrittenRule) {
  var rewrittenRule;
  var ruleRewrittenRule = (0, _class.isInstanceOf)(rule, RewrittenRule);

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    rewrittenRule = RewrittenRule.fromRule(rule);
    var replacedRule = rule,
        ///
    replacementRule = rewrittenRule; ///

    replaceRule(replacedRule, replacementRule, rules);
  }

  return rewrittenRule;
}

module.exports = {
  findRule: findRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromRule: repeatedRuleFromRule,
  rewrittenRuleFromRule: rewrittenRuleFromRule
};

function replaceRule(replacedRule, replacementRule, rules) {
  var index = rules.indexOf(replacedRule);

  if (index > -1) {
    var start = index,
        deleteCount = 1;
    rules.splice(start, deleteCount, replacementRule);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGUuanMiXSwibmFtZXMiOlsiZmluZFJ1bGUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInJlZHVjZWRSdWxlRnJvbVJ1bGUiLCJSZWR1Y2VkUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJwdXNoIiwicmVwZWF0ZWRSdWxlRnJvbVJ1bGUiLCJSZXBlYXRlZFJ1bGUiLCJyZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlIiwicmV3cml0dGVuUnVsZUZyb21SdWxlIiwiUmV3cml0dGVuUnVsZSIsInJld3JpdHRlblJ1bGUiLCJydWxlUmV3cml0dGVuUnVsZSIsInJlcGxhY2VkUnVsZSIsInJlcGxhY2VtZW50UnVsZSIsInJlcGxhY2VSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluZGV4IiwiaW5kZXhPZiIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUNBOztBQUVBLFNBQVNBLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxJQUFJLEdBQUdGLFFBQWI7QUFBQSxNQUF3QjtBQUNsQkcsRUFBQUEsSUFBSSxHQUFHRixLQUFLLENBQUNHLElBQU4sQ0FBVyxVQUFDRCxJQUFELEVBQVU7QUFDMUIsUUFBTUgsUUFBUSxHQUFHRyxJQUFJLENBQUNFLE9BQUwsRUFBakI7O0FBRUEsUUFBSUwsUUFBUSxLQUFLRSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk0sS0FNRCxJQVBaLENBRGlDLENBUWY7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxtQkFBVCxDQUE2QkgsSUFBN0IsRUFBbUNGLEtBQW5DLEVBQTBDTSxXQUExQyxFQUF1RDtBQUN0RCxNQUFNUCxRQUFRLEdBQUdHLElBQUksQ0FBQ0UsT0FBTCxFQUFqQjtBQUFBLE1BQ0dHLGVBQWUsR0FBRywyQ0FBNEJSLFFBQTVCLENBRHJCO0FBR0EsTUFBSVMsV0FBVyxHQUFHVixRQUFRLENBQUNTLGVBQUQsRUFBa0JQLEtBQWxCLENBQTFCOztBQUVBLE1BQUlRLFdBQVcsS0FBSyxJQUFwQixFQUEwQjtBQUN2QkEsSUFBQUEsV0FBVyxHQUFHRixXQUFXLENBQUNHLFFBQVosQ0FBcUJQLElBQXJCLENBQWQ7QUFFQUYsSUFBQUEsS0FBSyxDQUFDVSxJQUFOLENBQVdGLFdBQVg7QUFDRjs7QUFFRCxTQUFPQSxXQUFQO0FBQ0E7O0FBRUQsU0FBU0csb0JBQVQsQ0FBOEJULElBQTlCLEVBQW9DRixLQUFwQyxFQUEyQ1ksWUFBM0MsRUFBeUQ7QUFDdkQsTUFBTWIsUUFBUSxHQUFHRyxJQUFJLENBQUNFLE9BQUwsRUFBakI7QUFBQSxNQUNNUyxnQkFBZ0IsR0FBRyw0Q0FBNkJkLFFBQTdCLENBRHpCO0FBR0EsTUFBSWUsWUFBWSxHQUFHaEIsUUFBUSxDQUFDZSxnQkFBRCxFQUFtQmIsS0FBbkIsQ0FBM0I7O0FBRUEsTUFBSWMsWUFBWSxLQUFLLElBQXJCLEVBQTJCO0FBQ3pCQSxJQUFBQSxZQUFZLEdBQUdGLFlBQVksQ0FBQ0gsUUFBYixDQUFzQlAsSUFBdEIsQ0FBZjtBQUVBRixJQUFBQSxLQUFLLENBQUNVLElBQU4sQ0FBV0ksWUFBWDtBQUNEOztBQUVELFNBQU9BLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmIsSUFBL0IsRUFBcUNGLEtBQXJDLEVBQTRDZ0IsYUFBNUMsRUFBMkQ7QUFDekQsTUFBSUMsYUFBSjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHLHlCQUFhaEIsSUFBYixFQUFtQmMsYUFBbkIsQ0FBMUI7O0FBRUEsTUFBSUUsaUJBQUosRUFBdUI7QUFDckJELElBQUFBLGFBQWEsR0FBR2YsSUFBaEIsQ0FEcUIsQ0FDQztBQUN2QixHQUZELE1BRU87QUFDTGUsSUFBQUEsYUFBYSxHQUFHRCxhQUFhLENBQUNQLFFBQWQsQ0FBdUJQLElBQXZCLENBQWhCO0FBRUEsUUFBTWlCLFlBQVksR0FBR2pCLElBQXJCO0FBQUEsUUFBNEI7QUFDdEJrQixJQUFBQSxlQUFlLEdBQUdILGFBRHhCLENBSEssQ0FJbUM7O0FBRXhDSSxJQUFBQSxXQUFXLENBQUNGLFlBQUQsRUFBZUMsZUFBZixFQUFnQ3BCLEtBQWhDLENBQVg7QUFDRDs7QUFFRCxTQUFPaUIsYUFBUDtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnpCLEVBQUFBLFFBQVEsRUFBUkEsUUFEZTtBQUVoQk8sRUFBQUEsbUJBQW1CLEVBQW5CQSxtQkFGZ0I7QUFHZk0sRUFBQUEsb0JBQW9CLEVBQXBCQSxvQkFIZTtBQUlmSSxFQUFBQSxxQkFBcUIsRUFBckJBO0FBSmUsQ0FBakI7O0FBT0EsU0FBU00sV0FBVCxDQUFxQkYsWUFBckIsRUFBbUNDLGVBQW5DLEVBQW9EcEIsS0FBcEQsRUFBMkQ7QUFDekQsTUFBTXdCLEtBQUssR0FBR3hCLEtBQUssQ0FBQ3lCLE9BQU4sQ0FBY04sWUFBZCxDQUFkOztBQUVBLE1BQUlLLEtBQUssR0FBRyxDQUFDLENBQWIsRUFBZ0I7QUFDZCxRQUFNRSxLQUFLLEdBQUdGLEtBQWQ7QUFBQSxRQUNNRyxXQUFXLEdBQUcsQ0FEcEI7QUFHQTNCLElBQUFBLEtBQUssQ0FBQzRCLE1BQU4sQ0FBYUYsS0FBYixFQUFvQkMsV0FBcEIsRUFBaUNQLGVBQWpDO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc0luc3RhbmNlT2YgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NsYXNzXCI7XG5pbXBvcnQgeyByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lLCByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3J1bGVOYW1lXCI7XG5cbmZ1bmN0aW9uIGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IHJ1bGVzLmZpbmQoKHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgaWYgKHJ1bGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IG51bGw7IC8vL1xuXG4gIHJldHVybiBydWxlO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzLCBSZWR1Y2VkUnVsZSkge1xuXHRjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuXHRcdFx0XHRyZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG5cdGxldCByZWR1Y2VkUnVsZSA9IGZpbmRSdWxlKHJlZHVjZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG5cdGlmIChyZWR1Y2VkUnVsZSA9PT0gbnVsbCkge1xuICAgIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcblx0fVxuXG5cdHJldHVybiByZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0ZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJlcGVhdGVkUnVsZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICByZXBlYXRlZFJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cbiAgbGV0IHJlcGVhdGVkUnVsZSA9IGZpbmRSdWxlKHJlcGVhdGVkUnVsZU5hbWUsIHJ1bGVzKTtcblxuICBpZiAocmVwZWF0ZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVwZWF0ZWRSdWxlID0gUmVwZWF0ZWRSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZXBlYXRlZFJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZTtcbn1cblxuZnVuY3Rpb24gcmV3cml0dGVuUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzLCBSZXdyaXR0ZW5SdWxlKSB7XG4gIGxldCByZXdyaXR0ZW5SdWxlO1xuXG4gIGNvbnN0IHJ1bGVSZXdyaXR0ZW5SdWxlID0gaXNJbnN0YW5jZU9mKHJ1bGUsIFJld3JpdHRlblJ1bGUpO1xuXG4gIGlmIChydWxlUmV3cml0dGVuUnVsZSkge1xuICAgIHJld3JpdHRlblJ1bGUgPSBydWxlOyAvLy9cbiAgfSBlbHNlIHtcbiAgICByZXdyaXR0ZW5SdWxlID0gUmV3cml0dGVuUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIGNvbnN0IHJlcGxhY2VkUnVsZSA9IHJ1bGUsICAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudFJ1bGUgPSByZXdyaXR0ZW5SdWxlOyAgLy8vXG5cbiAgICByZXBsYWNlUnVsZShyZXBsYWNlZFJ1bGUsIHJlcGxhY2VtZW50UnVsZSwgcnVsZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJld3JpdHRlblJ1bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kUnVsZSxcblx0cmVkdWNlZFJ1bGVGcm9tUnVsZSxcbiAgcmVwZWF0ZWRSdWxlRnJvbVJ1bGUsXG4gIHJld3JpdHRlblJ1bGVGcm9tUnVsZVxufTtcblxuZnVuY3Rpb24gcmVwbGFjZVJ1bGUocmVwbGFjZWRSdWxlLCByZXBsYWNlbWVudFJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IGluZGV4ID0gcnVsZXMuaW5kZXhPZihyZXBsYWNlZFJ1bGUpO1xuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleCxcbiAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICBydWxlcy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50LCByZXBsYWNlbWVudFJ1bGUpO1xuICB9XG59XG4iXX0=