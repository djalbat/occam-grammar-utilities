'use strict';

var necessary = require('necessary');

var ruleNameUtilities = require('../utilities/ruleName');

var arrayUtilities = necessary.arrayUtilities,
    filter = arrayUtilities.filter,
    repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function removeRule(rule, rules) {
  var removedRule = rule; ///

  filter(rules, function (rule) {
    if (rule !== removedRule) {
      return true;
    }
  });
}

function reducedRuleFromRule(rule, rules, ReducedRule) {
  var ruleName = rule.getName(),
      reducedRuleName = reducedRuleNameFromRuleName(ruleName);

  var reducedRule = findRule(reducedRuleName, rules);

  if (reducedRule === null) {
    reducedRule = ReducedRule.fromRule(rule);

    rules.push(reducedRule);
  }

  return reducedRule;
}

function repeatedRuleFromRule(rule, rules, RepeatedRule) {
  var ruleName = rule.getName(),
      repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

  var repeatedRule = findRule(repeatedRuleName, rules);

  if (repeatedRule === null) {
    repeatedRule = RepeatedRule.fromRule(rule);

    rules.push(repeatedRule);
  }

  return repeatedRule;
}

function rewrittenRuleFromRule(rule, rules, RewrittenRule) {
  var rewrittenRule = void 0;

  var ruleRewrittenRule = rule instanceof RewrittenRule;

  if (ruleRewrittenRule) {
    rewrittenRule = rule; ///
  } else {
    removeRule(rule, rules);

    rewrittenRule = RewrittenRule.fromRule(rule);

    rules.push(rewrittenRule);
  }

  return rewrittenRule;
}

module.exports = {
  findRule: findRule,
  removeRule: removeRule,
  reducedRuleFromRule: reducedRuleFromRule,
  repeatedRuleFromRule: repeatedRuleFromRule,
  rewrittenRuleFromRule: rewrittenRuleFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwicnVsZU5hbWVVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsImZpbHRlciIsInJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJmaW5kUnVsZSIsInJ1bGVOYW1lIiwicnVsZXMiLCJuYW1lIiwicnVsZSIsImZpbmQiLCJnZXROYW1lIiwicmVtb3ZlUnVsZSIsInJlbW92ZWRSdWxlIiwicmVkdWNlZFJ1bGVGcm9tUnVsZSIsIlJlZHVjZWRSdWxlIiwicmVkdWNlZFJ1bGVOYW1lIiwicmVkdWNlZFJ1bGUiLCJmcm9tUnVsZSIsInB1c2giLCJyZXBlYXRlZFJ1bGVGcm9tUnVsZSIsIlJlcGVhdGVkUnVsZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJyZXBlYXRlZFJ1bGUiLCJyZXdyaXR0ZW5SdWxlRnJvbVJ1bGUiLCJSZXdyaXR0ZW5SdWxlIiwicmV3cml0dGVuUnVsZSIsInJ1bGVSZXdyaXR0ZW5SdWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1DLG9CQUFvQkQsUUFBUSx1QkFBUixDQUExQjs7QUFFTSxJQUFFRSxjQUFGLEdBQXFCSCxTQUFyQixDQUFFRyxjQUFGO0FBQUEsSUFDRUMsTUFERixHQUNhRCxjQURiLENBQ0VDLE1BREY7QUFBQSxJQUVFQyw0QkFGRixHQUVnRUgsaUJBRmhFLENBRUVHLDRCQUZGO0FBQUEsSUFFZ0NDLDJCQUZoQyxHQUVnRUosaUJBRmhFLENBRWdDSSwyQkFGaEM7OztBQUlOLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxPQUFPRixRQUFiO0FBQUEsTUFBd0I7QUFDbEJHLFNBQU9GLE1BQU1HLElBQU4sQ0FBVyxVQUFDRCxJQUFELEVBQVU7QUFDMUIsUUFBTUgsV0FBV0csS0FBS0UsT0FBTCxFQUFqQjs7QUFFQSxRQUFJTCxhQUFhRSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk0sS0FNRCxJQVBaLENBRGlDLENBUWY7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxVQUFULENBQW9CSCxJQUFwQixFQUEwQkYsS0FBMUIsRUFBaUM7QUFDL0IsTUFBTU0sY0FBY0osSUFBcEIsQ0FEK0IsQ0FDTDs7QUFFMUJQLFNBQU9LLEtBQVAsRUFBYyxVQUFDRSxJQUFELEVBQVU7QUFDdEIsUUFBSUEsU0FBU0ksV0FBYixFQUEwQjtBQUN4QixhQUFPLElBQVA7QUFDRDtBQUNGLEdBSkQ7QUFLRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2QkwsSUFBN0IsRUFBbUNGLEtBQW5DLEVBQTBDUSxXQUExQyxFQUF1RDtBQUN0RCxNQUFNVCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDR0ssa0JBQWtCWiw0QkFBNEJFLFFBQTVCLENBRHJCOztBQUdBLE1BQUlXLGNBQWNaLFNBQVNXLGVBQVQsRUFBMEJULEtBQTFCLENBQWxCOztBQUVBLE1BQUlVLGdCQUFnQixJQUFwQixFQUEwQjtBQUN2QkEsa0JBQWNGLFlBQVlHLFFBQVosQ0FBcUJULElBQXJCLENBQWQ7O0FBRUFGLFVBQU1ZLElBQU4sQ0FBV0YsV0FBWDtBQUNGOztBQUVELFNBQU9BLFdBQVA7QUFDQTs7QUFFRCxTQUFTRyxvQkFBVCxDQUE4QlgsSUFBOUIsRUFBb0NGLEtBQXBDLEVBQTJDYyxZQUEzQyxFQUF5RDtBQUN2RCxNQUFNZixXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsTUFDTVcsbUJBQW1CbkIsNkJBQTZCRyxRQUE3QixDQUR6Qjs7QUFHQSxNQUFJaUIsZUFBZWxCLFNBQVNpQixnQkFBVCxFQUEyQmYsS0FBM0IsQ0FBbkI7O0FBRUEsTUFBSWdCLGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QkEsbUJBQWVGLGFBQWFILFFBQWIsQ0FBc0JULElBQXRCLENBQWY7O0FBRUFGLFVBQU1ZLElBQU4sQ0FBV0ksWUFBWDtBQUNEOztBQUVELFNBQU9BLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmYsSUFBL0IsRUFBcUNGLEtBQXJDLEVBQTRDa0IsYUFBNUMsRUFBMkQ7QUFDekQsTUFBSUMsc0JBQUo7O0FBRUEsTUFBTUMsb0JBQXFCbEIsZ0JBQWdCZ0IsYUFBM0M7O0FBRUEsTUFBSUUsaUJBQUosRUFBdUI7QUFDckJELG9CQUFnQmpCLElBQWhCLENBRHFCLENBQ0M7QUFDdkIsR0FGRCxNQUVPO0FBQ0xHLGVBQVdILElBQVgsRUFBaUJGLEtBQWpCOztBQUVBbUIsb0JBQWdCRCxjQUFjUCxRQUFkLENBQXVCVCxJQUF2QixDQUFoQjs7QUFFQUYsVUFBTVksSUFBTixDQUFXTyxhQUFYO0FBQ0Q7O0FBRUQsU0FBT0EsYUFBUDtBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Z4QixvQkFEZTtBQUVmTyx3QkFGZTtBQUdoQkUsMENBSGdCO0FBSWZNLDRDQUplO0FBS2ZJO0FBTGUsQ0FBakIiLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGVOYW1lJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSwgcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIH0gPSBydWxlTmFtZVV0aWxpdGllcztcblxuZnVuY3Rpb24gZmluZFJ1bGUocnVsZU5hbWUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBydWxlID0gcnVsZXMuZmluZCgocnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICAgICAgICBpZiAocnVsZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgbnVsbDsgLy8vXG5cbiAgcmV0dXJuIHJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJ1bGUocnVsZSwgcnVsZXMpIHtcbiAgY29uc3QgcmVtb3ZlZFJ1bGUgPSBydWxlOyAvLy9cblxuICBmaWx0ZXIocnVsZXMsIChydWxlKSA9PiB7XG4gICAgaWYgKHJ1bGUgIT09IHJlbW92ZWRSdWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlZHVjZWRSdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJlZHVjZWRSdWxlKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG4gICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICAgIHJ1bGVzLnB1c2gocmVkdWNlZFJ1bGUpO1xuXHR9XG5cblx0cmV0dXJuIHJlZHVjZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXBlYXRlZFJ1bGVGcm9tUnVsZShydWxlLCBydWxlcywgUmVwZWF0ZWRSdWxlKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICBsZXQgcmVwZWF0ZWRSdWxlID0gZmluZFJ1bGUocmVwZWF0ZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG4gIGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcbiAgICByZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG4gIH1cblxuICByZXR1cm4gcmVwZWF0ZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXdyaXR0ZW5SdWxlRnJvbVJ1bGUocnVsZSwgcnVsZXMsIFJld3JpdHRlblJ1bGUpIHtcbiAgbGV0IHJld3JpdHRlblJ1bGU7XG5cbiAgY29uc3QgcnVsZVJld3JpdHRlblJ1bGUgPSAocnVsZSBpbnN0YW5jZW9mIFJld3JpdHRlblJ1bGUpO1xuXG4gIGlmIChydWxlUmV3cml0dGVuUnVsZSkge1xuICAgIHJld3JpdHRlblJ1bGUgPSBydWxlOyAvLy9cbiAgfSBlbHNlIHtcbiAgICByZW1vdmVSdWxlKHJ1bGUsIHJ1bGVzKTtcblxuICAgIHJld3JpdHRlblJ1bGUgPSBSZXdyaXR0ZW5SdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgcnVsZXMucHVzaChyZXdyaXR0ZW5SdWxlKTtcbiAgfVxuXG4gIHJldHVybiByZXdyaXR0ZW5SdWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFJ1bGUsXG4gIHJlbW92ZVJ1bGUsXG5cdHJlZHVjZWRSdWxlRnJvbVJ1bGUsXG4gIHJlcGVhdGVkUnVsZUZyb21SdWxlLFxuICByZXdyaXR0ZW5SdWxlRnJvbVJ1bGVcbn07XG4iXX0=