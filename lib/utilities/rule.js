'use strict';

var arrayUtilities = require('../utilities/array'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonLeftRecursiveDefinition = require('../definition/nonLeftRecursive');

var isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive,
    push = arrayUtilities.push,
    unshift = arrayUtilities.unshift,
    iterateWithDelete = arrayUtilities.iterateWithDelete;


function eliminateLeftRecursionFromRule(rule, rules) {
  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition, count) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var rightRecursiveRule = RightRecursiveRule.fromRuleNameDefinitionAndNonTerminalNodeAndCount(ruleName, definition, nonTerminalNode, count);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonLeftRecursiveDefinitions = [];

  definitions.forEach(function (definition) {
    rightRecursiveRules.forEach(function (rightRecursiveRule) {
      var nonLeftRecursiveDefinition = NonLeftRecursiveDefinition.fromDefinitionAndRightRecursiveRule(definition, rightRecursiveRule);

      nonLeftRecursiveDefinitions.push(nonLeftRecursiveDefinition);
    });
  });

  unshift(definitions, nonLeftRecursiveDefinitions);

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJkZWZpbml0aW9uVXRpbGl0aWVzIiwiTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicHVzaCIsInVuc2hpZnQiLCJpdGVyYXRlV2l0aERlbGV0ZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZSIsInJ1bGUiLCJydWxlcyIsIm5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwibm9uVGVybWluYWxOb2RlIiwiZ2V0Tm9uVGVybWluYWxOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsImRlZmluaXRpb24iLCJjb3VudCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmlnaHRSZWN1cnNpdmVSdWxlIiwiZnJvbVJ1bGVOYW1lRGVmaW5pdGlvbkFuZE5vblRlcm1pbmFsTm9kZUFuZENvdW50Iiwibm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZm9yRWFjaCIsIm5vbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbURlZmluaXRpb25BbmRSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7QUFBQSxJQUNNQyxxQkFBcUJELFFBQVEsd0JBQVIsQ0FEM0I7QUFBQSxJQUVNRSxzQkFBc0JGLFFBQVEseUJBQVIsQ0FGNUI7QUFBQSxJQUdNRyw2QkFBNkJILFFBQVEsZ0NBQVIsQ0FIbkM7O0FBS00sSUFBRUkseUJBQUYsR0FBZ0NGLG1CQUFoQyxDQUFFRSx5QkFBRjtBQUFBLElBQ0VDLElBREYsR0FDdUNOLGNBRHZDLENBQ0VNLElBREY7QUFBQSxJQUNRQyxPQURSLEdBQ3VDUCxjQUR2QyxDQUNRTyxPQURSO0FBQUEsSUFDaUJDLGlCQURqQixHQUN1Q1IsY0FEdkMsQ0FDaUJRLGlCQURqQjs7O0FBR04sU0FBU0MsOEJBQVQsQ0FBd0NDLElBQXhDLEVBQThDQyxLQUE5QyxFQUFxRDtBQUNuRCxNQUFNQyxPQUFPRixLQUFLRyxPQUFMLEVBQWI7QUFBQSxNQUNNQyxXQUFXRixJQURqQjtBQUFBLE1BQ3dCO0FBQ2xCRyxnQkFBY0wsS0FBS00sY0FBTCxFQUZwQjtBQUFBLE1BR01DLGtCQUFrQlAsS0FBS1Esa0JBQUwsRUFIeEI7QUFBQSxNQUlNQyxzQkFBc0IsRUFKNUI7O0FBTUFYLG9CQUFrQk8sV0FBbEIsRUFBK0IsVUFBQ0ssVUFBRCxFQUFhQyxLQUFiLEVBQXVCO0FBQ3BELFFBQU1DLDBCQUEwQmpCLDBCQUEwQmUsVUFBMUIsRUFBc0NOLFFBQXRDLENBQWhDOztBQUVBLFFBQUlRLHVCQUFKLEVBQTZCO0FBQzNCLFVBQU1DLHFCQUFxQnJCLG1CQUFtQnNCLGdEQUFuQixDQUFvRVYsUUFBcEUsRUFBOEVNLFVBQTlFLEVBQTBGSCxlQUExRixFQUEyR0ksS0FBM0csQ0FBM0I7O0FBRUFGLDBCQUFvQmIsSUFBcEIsQ0FBeUJpQixrQkFBekI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVZEOztBQVlBLE1BQU1FLDhCQUE4QixFQUFwQzs7QUFFQVYsY0FBWVcsT0FBWixDQUFvQixVQUFDTixVQUFELEVBQWdCO0FBQ2xDRCx3QkFBb0JPLE9BQXBCLENBQTRCLFVBQUNILGtCQUFELEVBQXdCO0FBQ2xELFVBQU1JLDZCQUE2QnZCLDJCQUEyQndCLG1DQUEzQixDQUErRFIsVUFBL0QsRUFBMkVHLGtCQUEzRSxDQUFuQzs7QUFFQUUsa0NBQTRCbkIsSUFBNUIsQ0FBaUNxQiwwQkFBakM7QUFDRCxLQUpEO0FBS0QsR0FORDs7QUFRQXBCLFVBQVFRLFdBQVIsRUFBcUJVLDJCQUFyQjs7QUFFQW5CLE9BQUtLLEtBQUwsRUFBWVEsbUJBQVo7QUFDRDs7QUFFRFUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmckI7QUFEZSxDQUFqQiIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yaWdodFJlY3Vyc2l2ZScpLFxuICAgICAgZGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9kZWZpbml0aW9uJyksXG4gICAgICBOb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vbm9uTGVmdFJlY3Vyc2l2ZScpO1xuXG5jb25zdCB7IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgfSA9IGRlZmluaXRpb25VdGlsaXRpZXMsXG4gICAgICB7IHB1c2gsIHVuc2hpZnQsIGl0ZXJhdGVXaXRoRGVsZXRlIH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBub25UZXJtaW5hbE5vZGUgPSBydWxlLmdldE5vblRlcm1pbmFsTm9kZSgpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzID0gW107XG5cbiAgaXRlcmF0ZVdpdGhEZWxldGUoZGVmaW5pdGlvbnMsIChkZWZpbml0aW9uLCBjb3VudCkgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBydWxlTmFtZSk7XG5cbiAgICBpZiAoZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGNvbnN0IHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tUnVsZU5hbWVEZWZpbml0aW9uQW5kTm9uVGVybWluYWxOb2RlQW5kQ291bnQocnVsZU5hbWUsIGRlZmluaXRpb24sIG5vblRlcm1pbmFsTm9kZSwgY291bnQpO1xuXG4gICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBbXTtcblxuICBkZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgcmlnaHRSZWN1cnNpdmVSdWxlcy5mb3JFYWNoKChyaWdodFJlY3Vyc2l2ZVJ1bGUpID0+IHtcbiAgICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbURlZmluaXRpb25BbmRSaWdodFJlY3Vyc2l2ZVJ1bGUoZGVmaW5pdGlvbiwgcmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgbm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLnB1c2gobm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICAgIH0pO1xuICB9KTtcblxuICB1bnNoaWZ0KGRlZmluaXRpb25zLCBub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIHB1c2gocnVsZXMsIHJpZ2h0UmVjdXJzaXZlUnVsZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlXG59O1xuIl19