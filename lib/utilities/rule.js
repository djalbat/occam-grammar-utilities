'use strict';

var arrayUtilities = require('../utilities/array'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonLeftRecursiveDefinition = require('../definition/nonLeftRecursive');

var push = arrayUtilities.push,
    unshift = arrayUtilities.unshift,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    isDefinitionLeftRecursive = definitionUtilities.isDefinitionLeftRecursive;


function eliminateLeftRecursionFromRule(rule, rules) {
  var name = rule.getName(),
      ruleName = name,
      ///
  definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  var count = 1;

  iterateWithDelete(definitions, function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = definition,
          ///
      rightRecursiveRuleName = '' + ruleName + count++ + '~',
          rightRecursiveRule = RightRecursiveRule.fromLeftRecursiveDefinitionRightRecursiveRuleNameAndnonTerminalNode(leftRecursiveDefinition, rightRecursiveRuleName, nonTerminalNode);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  rightRecursiveRules.forEach(function (rightRecursiveRule) {
    var nonLeftRecursiveDefinitions = definitions.map(function (definition) {
      var nonLeftRecursiveDefinition = NonLeftRecursiveDefinition.fromDefinitionAndRightRecursiveRule(definition, rightRecursiveRule);

      return nonLeftRecursiveDefinition;
    });

    unshift(definitions, nonLeftRecursiveDefinitions);
  });

  push(rules, rightRecursiveRules);
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJkZWZpbml0aW9uVXRpbGl0aWVzIiwiTm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwdXNoIiwidW5zaGlmdCIsIml0ZXJhdGVXaXRoRGVsZXRlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZSIsInJ1bGUiLCJydWxlcyIsIm5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWUiLCJkZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwibm9uVGVybWluYWxOb2RlIiwiZ2V0Tm9uVGVybWluYWxOb2RlIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsImNvdW50IiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmlnaHRSZWN1cnNpdmVSdWxlIiwiZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUmlnaHRSZWN1cnNpdmVSdWxlTmFtZUFuZG5vblRlcm1pbmFsTm9kZSIsImZvckVhY2giLCJub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJtYXAiLCJub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21EZWZpbml0aW9uQW5kUmlnaHRSZWN1cnNpdmVSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXZCO0FBQUEsSUFDTUMscUJBQXFCRCxRQUFRLHdCQUFSLENBRDNCO0FBQUEsSUFFTUUsc0JBQXNCRixRQUFRLHlCQUFSLENBRjVCO0FBQUEsSUFHTUcsNkJBQTZCSCxRQUFRLGdDQUFSLENBSG5DOztJQUtRSSxJLEdBQXFDTCxjLENBQXJDSyxJO0lBQU1DLE8sR0FBK0JOLGMsQ0FBL0JNLE87SUFBU0MsaUIsR0FBc0JQLGMsQ0FBdEJPLGlCO0lBQ2ZDLHlCLEdBQThCTCxtQixDQUE5QksseUI7OztBQUVSLFNBQVNDLDhCQUFULENBQXdDQyxJQUF4QyxFQUE4Q0MsS0FBOUMsRUFBcUQ7QUFDbkQsTUFBTUMsT0FBT0YsS0FBS0csT0FBTCxFQUFiO0FBQUEsTUFDTUMsV0FBV0YsSUFEakI7QUFBQSxNQUN3QjtBQUNsQkcsZ0JBQWNMLEtBQUtNLGNBQUwsRUFGcEI7QUFBQSxNQUdNQyxrQkFBa0JQLEtBQUtRLGtCQUFMLEVBSHhCO0FBQUEsTUFJTUMsc0JBQXNCLEVBSjVCOztBQU1BLE1BQUlDLFFBQVEsQ0FBWjs7QUFFQWIsb0JBQWtCUSxXQUFsQixFQUErQixVQUFDTSxVQUFELEVBQWdCO0FBQzdDLFFBQU1DLDBCQUEwQmQsMEJBQTBCYSxVQUExQixFQUFzQ1AsUUFBdEMsQ0FBaEM7O0FBRUEsUUFBSVEsdUJBQUosRUFBNkI7QUFDM0IsVUFBTUMsMEJBQTBCRixVQUFoQztBQUFBLFVBQTRDO0FBQ3RDRyxvQ0FBNEJWLFFBQTVCLEdBQXVDTSxPQUF2QyxNQUROO0FBQUEsVUFFTUsscUJBQXFCdkIsbUJBQW1Cd0IsbUVBQW5CLENBQXVGSCx1QkFBdkYsRUFBZ0hDLHNCQUFoSCxFQUF3SVAsZUFBeEksQ0FGM0I7O0FBSUFFLDBCQUFvQmQsSUFBcEIsQ0FBeUJvQixrQkFBekI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVpEOztBQWNBTixzQkFBb0JRLE9BQXBCLENBQTRCLFVBQUNGLGtCQUFELEVBQXdCO0FBQ2xELFFBQU1HLDhCQUE4QmIsWUFBWWMsR0FBWixDQUFnQixVQUFDUixVQUFELEVBQWdCO0FBQ2xFLFVBQU1TLDZCQUE2QjFCLDJCQUEyQjJCLG1DQUEzQixDQUErRFYsVUFBL0QsRUFBMkVJLGtCQUEzRSxDQUFuQzs7QUFFQSxhQUFPSywwQkFBUDtBQUNELEtBSm1DLENBQXBDOztBQU1BeEIsWUFBUVMsV0FBUixFQUFxQmEsMkJBQXJCO0FBQ0QsR0FSRDs7QUFVQXZCLE9BQUtNLEtBQUwsRUFBWVEsbUJBQVo7QUFDRDs7QUFFRGEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmeEI7QUFEZSxDQUFqQiIsImZpbGUiOiJydWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yaWdodFJlY3Vyc2l2ZScpLFxuICAgICAgZGVmaW5pdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9kZWZpbml0aW9uJyksXG4gICAgICBOb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vbm9uTGVmdFJlY3Vyc2l2ZScpO1xuXG5jb25zdCB7IHB1c2gsIHVuc2hpZnQsIGl0ZXJhdGVXaXRoRGVsZXRlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSB9ID0gZGVmaW5pdGlvblV0aWxpdGllcztcblxuZnVuY3Rpb24gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBub25UZXJtaW5hbE5vZGUgPSBydWxlLmdldE5vblRlcm1pbmFsTm9kZSgpLFxuICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzID0gW107XG5cbiAgbGV0IGNvdW50ID0gMTtcblxuICBpdGVyYXRlV2l0aERlbGV0ZShkZWZpbml0aW9ucywgKGRlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlTmFtZSA9IGAke3J1bGVOYW1lfSR7Y291bnQrK31+YCxcbiAgICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lQW5kbm9uVGVybWluYWxOb2RlKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCByaWdodFJlY3Vyc2l2ZVJ1bGVOYW1lLCBub25UZXJtaW5hbE5vZGUpO1xuXG4gICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVzLnB1c2gocmlnaHRSZWN1cnNpdmVSdWxlKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByaWdodFJlY3Vyc2l2ZVJ1bGVzLmZvckVhY2goKHJpZ2h0UmVjdXJzaXZlUnVsZSkgPT4ge1xuICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGRlZmluaXRpb25zLm1hcCgoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3Qgbm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBOb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tRGVmaW5pdGlvbkFuZFJpZ2h0UmVjdXJzaXZlUnVsZShkZWZpbml0aW9uLCByaWdodFJlY3Vyc2l2ZVJ1bGUpO1xuXG4gICAgICByZXR1cm4gbm9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG4gICAgfSk7XG5cbiAgICB1bnNoaWZ0KGRlZmluaXRpb25zLCBub25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuICB9KTtcblxuICBwdXNoKHJ1bGVzLCByaWdodFJlY3Vyc2l2ZVJ1bGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZVxufTtcbiJdfQ==