'use strict';

var ReducedRule = require('../rule/reduced'),
    RepeatedRule = require('../rule/repeated'),
    ruleNameUtilities = require('../utilities/ruleName'),
    RuleNameDefinition = require('../definition/ruleName');

var repeatedRuleNameFromRuleName = ruleNameUtilities.repeatedRuleNameFromRuleName,
    reducedRuleNameFromRuleName = ruleNameUtilities.reducedRuleNameFromRuleName;


function findRule(ruleName, rules) {
	var name = ruleName,
	    ///
	rule = rules.find(function (rule) {
		var ruleName = rule.getName();

		if (ruleName === name) {
			return true;
		}
	}) || null; ///

	return rule;
}

function reducedRuleFromRule(rule, rules) {
	var ruleName = rule.getName(),
	    reducedRuleName = reducedRuleNameFromRuleName(ruleName);

	var reducedRule = findRule(reducedRuleName, rules);

	if (reducedRule === null) {
		reducedRule = ReducedRule.fromReducedRuleNameAndRule(reducedRuleName, rule);

		if (reducedRule !== null) {
			rules.push(reducedRule);

			var reducedRuleNameDefinition = RuleNameDefinition.fromRuleName(reducedRuleName),
			    definitions = [reducedRuleNameDefinition];

			rule.setDefinitions(definitions);
		}
	}

	return reducedRule;
}

function repeatedRuleFromLeftRecursiveRuleName(leftRecursiveRuleName, rules) {
	var ruleName = leftRecursiveRuleName,
	    ///
	repeatedRuleName = repeatedRuleNameFromRuleName(ruleName);

	var repeatedRule = findRule(repeatedRuleName, rules);

	if (repeatedRule === null) {
		repeatedRule = RepeatedRule.fromRepeatedRuleName(repeatedRuleName);

		rules.push(repeatedRule);
	}

	return repeatedRule;
}

module.exports = {
	findRule: findRule,
	reducedRuleFromRule: reducedRuleFromRule,
	repeatedRuleFromLeftRecursiveRuleName: repeatedRuleFromLeftRecursiveRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZS5qcyJdLCJuYW1lcyI6WyJSZWR1Y2VkUnVsZSIsInJlcXVpcmUiLCJSZXBlYXRlZFJ1bGUiLCJydWxlTmFtZVV0aWxpdGllcyIsIlJ1bGVOYW1lRGVmaW5pdGlvbiIsInJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJmaW5kUnVsZSIsInJ1bGVOYW1lIiwicnVsZXMiLCJuYW1lIiwicnVsZSIsImZpbmQiLCJnZXROYW1lIiwicmVkdWNlZFJ1bGVGcm9tUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlIiwiZnJvbVJlZHVjZWRSdWxlTmFtZUFuZFJ1bGUiLCJwdXNoIiwicmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZSIsImRlZmluaXRpb25zIiwic2V0RGVmaW5pdGlvbnMiLCJyZXBlYXRlZFJ1bGVGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZSIsInJlcGVhdGVkUnVsZSIsImZyb21SZXBlYXRlZFJ1bGVOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsY0FBY0MsUUFBUSxpQkFBUixDQUFwQjtBQUFBLElBQ0dDLGVBQWVELFFBQVEsa0JBQVIsQ0FEbEI7QUFBQSxJQUVHRSxvQkFBb0JGLFFBQVEsdUJBQVIsQ0FGdkI7QUFBQSxJQUdHRyxxQkFBcUJILFFBQVEsd0JBQVIsQ0FIeEI7O0lBS1FJLDRCLEdBQThERixpQixDQUE5REUsNEI7SUFBOEJDLDJCLEdBQWdDSCxpQixDQUFoQ0csMkI7OztBQUV0QyxTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsS0FBTUMsT0FBT0YsUUFBYjtBQUFBLEtBQXdCO0FBQ2xCRyxRQUFPRixNQUFNRyxJQUFOLENBQVcsVUFBQ0QsSUFBRCxFQUFVO0FBQzFCLE1BQU1ILFdBQVdHLEtBQUtFLE9BQUwsRUFBakI7O0FBRUEsTUFBSUwsYUFBYUUsSUFBakIsRUFBdUI7QUFDckIsVUFBTyxJQUFQO0FBQ0Q7QUFDRixFQU5NLEtBTUQsSUFQWixDQURpQyxDQVFmOztBQUVsQixRQUFPQyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csbUJBQVQsQ0FBNkJILElBQTdCLEVBQW1DRixLQUFuQyxFQUEwQztBQUN6QyxLQUFNRCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsS0FDR0Usa0JBQWtCVCw0QkFBNEJFLFFBQTVCLENBRHJCOztBQUdBLEtBQUlRLGNBQWNULFNBQVNRLGVBQVQsRUFBMEJOLEtBQTFCLENBQWxCOztBQUVBLEtBQUlPLGdCQUFnQixJQUFwQixFQUEwQjtBQUN6QkEsZ0JBQWNoQixZQUFZaUIsMEJBQVosQ0FBdUNGLGVBQXZDLEVBQXdESixJQUF4RCxDQUFkOztBQUVBLE1BQUlLLGdCQUFnQixJQUFwQixFQUEwQjtBQUN6QlAsU0FBTVMsSUFBTixDQUFXRixXQUFYOztBQUVBLE9BQU1HLDRCQUE0QmYsbUJBQW1CZ0IsWUFBbkIsQ0FBZ0NMLGVBQWhDLENBQWxDO0FBQUEsT0FDR00sY0FBYyxDQUNiRix5QkFEYSxDQURqQjs7QUFLQVIsUUFBS1csY0FBTCxDQUFvQkQsV0FBcEI7QUFDQTtBQUNEOztBQUVELFFBQU9MLFdBQVA7QUFDQTs7QUFFRCxTQUFTTyxxQ0FBVCxDQUErQ0MscUJBQS9DLEVBQXNFZixLQUF0RSxFQUE2RTtBQUM1RSxLQUFNRCxXQUFXZ0IscUJBQWpCO0FBQUEsS0FBd0M7QUFDckNDLG9CQUFtQnBCLDZCQUE2QkcsUUFBN0IsQ0FEdEI7O0FBR0EsS0FBSWtCLGVBQWVuQixTQUFTa0IsZ0JBQVQsRUFBMkJoQixLQUEzQixDQUFuQjs7QUFFQSxLQUFJaUIsaUJBQWlCLElBQXJCLEVBQTJCO0FBQzFCQSxpQkFBZXhCLGFBQWF5QixvQkFBYixDQUFrQ0YsZ0JBQWxDLENBQWY7O0FBRUFoQixRQUFNUyxJQUFOLENBQVdRLFlBQVg7QUFDQTs7QUFFRCxRQUFPQSxZQUFQO0FBQ0E7O0FBRURFLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnRCLG1CQURlO0FBRWhCTyx5Q0FGZ0I7QUFHaEJTO0FBSGdCLENBQWpCIiwiZmlsZSI6InJ1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlZHVjZWRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9yZWR1Y2VkJyksXG5cdFx0XHRSZXBlYXRlZFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3JlcGVhdGVkJyksXG5cdFx0XHRydWxlTmFtZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9ydWxlTmFtZScpLFxuXHRcdFx0UnVsZU5hbWVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9ydWxlTmFtZScpO1xuXG5jb25zdCB7IHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUsIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IHJ1bGVzLmZpbmQoKHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgaWYgKHJ1bGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IG51bGw7IC8vL1xuXG4gIHJldHVybiBydWxlO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VkUnVsZUZyb21SdWxlKHJ1bGUsIHJ1bGVzKSB7XG5cdGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG5cdFx0XHRcdHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSk7XG5cblx0bGV0IHJlZHVjZWRSdWxlID0gZmluZFJ1bGUocmVkdWNlZFJ1bGVOYW1lLCBydWxlcyk7XG5cblx0aWYgKHJlZHVjZWRSdWxlID09PSBudWxsKSB7XG5cdFx0cmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUmVkdWNlZFJ1bGVOYW1lQW5kUnVsZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGUpO1xuXG5cdFx0aWYgKHJlZHVjZWRSdWxlICE9PSBudWxsKSB7XG5cdFx0XHRydWxlcy5wdXNoKHJlZHVjZWRSdWxlKTtcblxuXHRcdFx0Y29uc3QgcmVkdWNlZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IFJ1bGVOYW1lRGVmaW5pdGlvbi5mcm9tUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKSxcblx0XHRcdFx0XHRcdGRlZmluaXRpb25zID0gW1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VkUnVsZU5hbWVEZWZpbml0aW9uXG5cdFx0XHRcdFx0XHRdO1xuXG5cdFx0XHRydWxlLnNldERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVkdWNlZFJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGVkUnVsZUZyb21MZWZ0UmVjdXJzaXZlUnVsZU5hbWUobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlcykge1xuXHRjb25zdCBydWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgLy8vXG5cdFx0XHRcdHJlcGVhdGVkUnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuXHRsZXQgcmVwZWF0ZWRSdWxlID0gZmluZFJ1bGUocmVwZWF0ZWRSdWxlTmFtZSwgcnVsZXMpO1xuXG5cdGlmIChyZXBlYXRlZFJ1bGUgPT09IG51bGwpIHtcblx0XHRyZXBlYXRlZFJ1bGUgPSBSZXBlYXRlZFJ1bGUuZnJvbVJlcGVhdGVkUnVsZU5hbWUocmVwZWF0ZWRSdWxlTmFtZSk7XG5cblx0XHRydWxlcy5wdXNoKHJlcGVhdGVkUnVsZSk7XG5cdH1cblxuXHRyZXR1cm4gcmVwZWF0ZWRSdWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZFJ1bGUsXG5cdHJlZHVjZWRSdWxlRnJvbVJ1bGUsXG5cdHJlcGVhdGVkUnVsZUZyb21MZWZ0UmVjdXJzaXZlUnVsZU5hbWVcbn07XG4iXX0=