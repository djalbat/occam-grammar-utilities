'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;
var partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType;


function isPartRecursive(part) {
  var recursiveRuleNames = recursiveRuleNamesFromPart(part),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      partRecursive = recursiveRuleNamesLength > 0;

  return partRecursive;
}

function isPartLeftRecursive(part) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part),
      partLeftRecursive = leftRecursiveRuleName !== null;

  return partLeftRecursive;
}

function recursiveRuleNamesFromPart(part) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var partRecursive = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        {
          var ruleNamePart = part,
              ///
          ruleName = ruleNamePart.getRuleName(),
              recursiveRuleNamesIncludesRuleName = recursiveRuleNames.includes(ruleName);

          if (!recursiveRuleNamesIncludesRuleName) {
            var recursiveRuleName = ruleName; ///

            recursiveRuleNames.push(recursiveRuleName);
          }
        }
        break;

      case OptionalPartPartType:
        {
          var optionalPartPart = part; ///

          part = optionalPartPart.getPart();

          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case OneOrMorePartsPartType:
        {
          var oneOrMorePartsPart = part; ///

          part = oneOrMorePartsPart.getPart();

          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case ZeroOrMorePartsPartType:
        {
          var zeroOrMorePartsPart = part; ///

          part = zeroOrMorePartsPart.getPart(); ///

          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case GroupOfPartsPartType:
        {
          var groupOfPartsPart = part,
              ///
          parts = groupOfPartsPart.getParts();

          partRecursive = parts.some(function (part) {
            recursiveRuleNamesFromPart(part, recursiveRuleNames);
          });
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var choiceOfPartsPart = part,
              ///
          _parts = choiceOfPartsPart.getParts();

          partRecursive = _parts.some(function (part) {
            recursiveRuleNamesFromPart(part, recursiveRuleNames);
          });
        }
        break;
    }
  }

  return partRecursive;
}

function leftRecursiveRuleNameFromPart(part) {
  var leftRecursiveRuleName = null;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        {
          var ruleNamePart = part,
              ///
          ruleName = ruleNamePart.getRuleName();

          leftRecursiveRuleName = ruleName; ///
        }
        break;

      case OptionalPartPartType:
        {
          var optionalPartPart = part; ///

          part = optionalPartPart.getPart();

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        }
        break;

      case OneOrMorePartsPartType:
        {
          var oneOrMorePartsPart = part; ///

          part = oneOrMorePartsPart.getPart();

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        }
        break;

      case ZeroOrMorePartsPartType:
        {
          var zeroOrMorePartsPart = part; ///

          part = zeroOrMorePartsPart.getPart();

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        }
        break;

      case GroupOfPartsPartType:
        {
          var groupOfPartsPart = part,
              ///
          parts = groupOfPartsPart.getParts(),
              firstPart = first(parts);

          part = firstPart; ///

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var choiceOfPartsPart = part,
              ///
          _parts2 = choiceOfPartsPart.getParts();

          _parts2.some(function (part) {
            leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

            if (leftRecursiveRuleName !== null) {
              return true;
            }
          });
        }
        break;
    }
  }

  return leftRecursiveRuleName;
}

module.exports = {
  isPartRecursive: isPartRecursive,
  isPartLeftRecursive: isPartLeftRecursive,
  recursiveRuleNamesFromPart: recursiveRuleNamesFromPart,
  leftRecursiveRuleNameFromPart: leftRecursiveRuleNameFromPart
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,