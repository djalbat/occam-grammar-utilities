'use strict';

var parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first;
var partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType;

function recursiveRuleNamesFromPart(part, recursiveRuleNames) {
  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        {
          var ruleNamePart = part,
              ///
          ruleName = ruleNamePart.getRuleName(),
              recursiveRuleNamesIncludesRuleName = recursiveRuleNames.includes(ruleName);

          if (!recursiveRuleNamesIncludesRuleName) {
            var recursiveRuleName = ruleName; ///

            recursiveRuleNames.push(recursiveRuleName);
          }
        }
        break;

      case OptionalPartPartType:
        {
          var optionalPartPart = part; ///

          part = optionalPartPart.getPart();
          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case OneOrMorePartsPartType:
        {
          var oneOrMorePartsPart = part; ///

          part = oneOrMorePartsPart.getPart();
          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case ZeroOrMorePartsPartType:
        {
          var zeroOrMorePartsPart = part; ///

          part = zeroOrMorePartsPart.getPart(); ///

          recursiveRuleNamesFromPart(part, recursiveRuleNames);
        }
        break;

      case GroupOfPartsPartType:
        {
          var groupOfPartsPart = part,
              ///
          parts = groupOfPartsPart.getParts();
          parts.forEach(function (part) {
            return recursiveRuleNamesFromPart(part, recursiveRuleNames);
          });
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var choiceOfPartsPart = part,
              ///
          _parts = choiceOfPartsPart.getParts();

          _parts.forEach(function (part) {
            return recursiveRuleNamesFromPart(part, recursiveRuleNames);
          });
        }
        break;
    }
  }
}

function leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames) {
  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        {
          var ruleNamePart = part,
              ///
          ruleName = ruleNamePart.getRuleName(),
              leftRecursiveRuleNamesIncludesRuleName = leftRecursiveRuleNames.includes(ruleName);

          if (!leftRecursiveRuleNamesIncludesRuleName) {
            var leftRecursiveRuleName = ruleName; ///

            leftRecursiveRuleNames.push(leftRecursiveRuleName);
          }
        }
        break;

      case OptionalPartPartType:
        {
          var optionalPartPart = part; ///

          part = optionalPartPart.getPart();
          leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
        }
        break;

      case OneOrMorePartsPartType:
        {
          var oneOrMorePartsPart = part; ///

          part = oneOrMorePartsPart.getPart();
          leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
        }
        break;

      case ZeroOrMorePartsPartType:
        {
          var zeroOrMorePartsPart = part; ///

          part = zeroOrMorePartsPart.getPart();
          leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
        }
        break;

      case GroupOfPartsPartType:
        {
          var groupOfPartsPart = part,
              ///
          parts = groupOfPartsPart.getParts(),
              firstPart = first(parts);
          part = firstPart; ///

          leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var choiceOfPartsPart = part,
              ///
          _parts2 = choiceOfPartsPart.getParts();

          _parts2.forEach(function (part) {
            return leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
          });
        }
        break;
    }
  }
}

module.exports = {
  recursiveRuleNamesFromPart: recursiveRuleNamesFromPart,
  leftRecursiveRuleNamesFromPart: leftRecursiveRuleNamesFromPart
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,