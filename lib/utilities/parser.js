"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rulesFromBNF: function() {
        return rulesFromBNF;
    },
    parserFromRules: function() {
        return parserFromRules;
    },
    parserFromRulesAndStartRuleName: function() {
        return parserFromRulesAndStartRuleName;
    },
    default: function() {
        return _default;
    }
});
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _rules = require("../utilities/rules");
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    var startRule = (0, _rules.startRuleFromRulesAndStartRuleName)(rules, startRuleName), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgcnVsZXNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgeyBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlc1wiO1xuXG5jb25zdCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcyB9ID0gcnVsZXNVdGlsaXRpZXM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuICBjb25zdCB0b2tlbnMgPSBibmZMZXhlci50b2tlbnNGcm9tQk5GKGJuZiksXG4gICAgICAgIHJ1bGVzID0gYm5mUGFyc2VyLnJ1bGVzRnJvbVRva2Vucyh0b2tlbnMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlcyhDbGFzcywgcnVsZXMpIHtcbiAgY29uc3Qgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBwYXJzZXIgPSBuZXcgQ2xhc3Moc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICByZXR1cm4gcGFyc2VyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShDbGFzcywgcnVsZXMsIHN0YXJ0UnVsZU5hbWUpIHtcbiAgY29uc3Qgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShydWxlcywgc3RhcnRSdWxlTmFtZSksXG4gICAgICAgIHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlc0Zyb21CTkYsXG4gIHBhcnNlckZyb21SdWxlcyxcbiAgcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZVxufTtcbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJwYXJzZXJGcm9tUnVsZXMiLCJwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIiwicnVsZU1hcEZyb21SdWxlcyIsInJ1bGVzVXRpbGl0aWVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwiYm5mIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwiQ2xhc3MiLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwicGFyc2VyIiwic3RhcnRSdWxlTmFtZSIsInN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7SUFZR0EsWUFBWTtlQUFaQSxZQUFZOztJQU9aQyxlQUFlO2VBQWZBLGVBQWU7O0lBUWZDLCtCQUErQjtlQUEvQkEsK0JBQStCOztJQVEvQyxPQUlFO2VBSkYsUUFJRTs7OzJCQXJDdUIsY0FBYzs0QkFDRyxlQUFlO3FCQUVOLG9CQUFvQjtBQUV2RSxJQUFRQyxnQkFBZ0IsR0FBeUJDLGFBQWMsZUFBQSxDQUF2REQsZ0JBQWdCLEVBQUVFLGtCQUFrQixHQUFLRCxhQUFjLGVBQUEsQ0FBckNDLGtCQUFrQixBQUFvQjtBQUVoRSxJQUFNQyxRQUFRLEdBQUdDLFlBQVEsU0FBQSxDQUFDQyxXQUFXLEVBQUUsRUFDakNDLFNBQVMsR0FBR0MsYUFBUyxVQUFBLENBQUNGLFdBQVcsRUFBRSxBQUFDO0FBRW5DLFNBQVNSLFlBQVksQ0FBQ1csR0FBRyxFQUFFO0lBQ2hDLElBQU1DLE1BQU0sR0FBR04sUUFBUSxDQUFDTyxhQUFhLENBQUNGLEdBQUcsQ0FBQyxFQUNwQ0csS0FBSyxHQUFHTCxTQUFTLENBQUNNLGVBQWUsQ0FBQ0gsTUFBTSxDQUFDLEFBQUM7SUFFaEQsT0FBT0UsS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVNLFNBQVNiLGVBQWUsQ0FBQ2UsS0FBSyxFQUFFRixLQUFLLEVBQUU7SUFDNUMsSUFBTUcsU0FBUyxHQUFHWixrQkFBa0IsQ0FBQ1MsS0FBSyxDQUFDLEVBQ3JDSSxPQUFPLEdBQUdmLGdCQUFnQixDQUFDVyxLQUFLLENBQUMsRUFDakNLLE1BQU0sR0FBRyxJQUFJSCxLQUFLLENBQUNDLFNBQVMsRUFBRUMsT0FBTyxDQUFDLEFBQUM7SUFFN0MsT0FBT0MsTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFTSxTQUFTakIsK0JBQStCLENBQUNjLEtBQUssRUFBRUYsS0FBSyxFQUFFTSxhQUFhLEVBQUU7SUFDM0UsSUFBTUgsU0FBUyxHQUFHSSxJQUFBQSxNQUFrQyxtQ0FBQSxFQUFDUCxLQUFLLEVBQUVNLGFBQWEsQ0FBQyxFQUNwRUYsT0FBTyxHQUFHZixnQkFBZ0IsQ0FBQ1csS0FBSyxDQUFDLEVBQ2pDSyxNQUFNLEdBQUcsSUFBSUgsS0FBSyxDQUFDQyxTQUFTLEVBQUVDLE9BQU8sQ0FBQyxBQUFDO0lBRTdDLE9BQU9DLE1BQU0sQ0FBQztBQUNoQixDQUFDO0lBRUQsUUFJRSxHQUphO0lBQ2JuQixZQUFZLEVBQVpBLFlBQVk7SUFDWkMsZUFBZSxFQUFmQSxlQUFlO0lBQ2ZDLCtCQUErQixFQUEvQkEsK0JBQStCO0NBQ2hDIn0=