"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parserFromRules = parserFromRules;
exports.parserFromRulesAndStartRuleName = parserFromRulesAndStartRuleName;
exports.default = void 0;
var _occamParsers = require("occam-parsers");
var _rules = require("../utilities/rules");
var _eliminateLeftRecursion = _interopRequireDefault(require("../eliminateLeftRecursion"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var rulesFromBNF = _occamParsers.rulesUtilities.rulesFromBNF, ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
function parserFromRules(Class, rules) {
    var ruleMap = ruleMapFromRules(rules);
    var startRule = startRuleFromRules(rules);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    var ruleMap = ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRulesAndStartRuleName(rules, startRuleName);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBydWxlc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCB7IHN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3J1bGVzXCI7XG5cbmltcG9ydCBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uICBmcm9tIFwiLi4vZWxpbWluYXRlTGVmdFJlY3Vyc2lvblwiO1xuXG5jb25zdCB7IHJ1bGVzRnJvbUJORiwgcnVsZU1hcEZyb21SdWxlcywgc3RhcnRSdWxlRnJvbVJ1bGVzIH0gPSBydWxlc1V0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlcyhDbGFzcywgcnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpO1xuXG4gIGxldCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpO1xuXG4gIHN0YXJ0UnVsZSA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24oc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICBjb25zdCBwYXJzZXIgPSBuZXcgQ2xhc3Moc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICByZXR1cm4gcGFyc2VyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShDbGFzcywgcnVsZXMsIHN0YXJ0UnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpO1xuXG4gIGxldCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKHJ1bGVzLCBzdGFydFJ1bGVOYW1lKTtcblxuICBzdGFydFJ1bGUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlc0Zyb21CTkYsXG4gIHBhcnNlckZyb21SdWxlcyxcbiAgcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZVxufTtcbiJdLCJuYW1lcyI6WyJwYXJzZXJGcm9tUnVsZXMiLCJwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIiwicnVsZXNGcm9tQk5GIiwicnVsZXNVdGlsaXRpZXMiLCJydWxlTWFwRnJvbVJ1bGVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwiQ2xhc3MiLCJydWxlcyIsInJ1bGVNYXAiLCJzdGFydFJ1bGUiLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIiwicGFyc2VyIiwic3RhcnRSdWxlTmFtZSIsInN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVVHQSxlQUFlLEdBQWZBLGVBQWU7UUFZZkMsK0JBQStCLEdBQS9CQSwrQkFBK0I7O0FBcEJoQixJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFFSyxJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBRW5DLElBQUEsdUJBQTJCLGtDQUEzQiwyQkFBMkIsRUFBQTs7Ozs7O0FBRS9ELElBQVFDLFlBQVksR0FBMkNDLGFBQWMsZUFBQSxDQUFyRUQsWUFBWSxFQUFFRSxnQkFBZ0IsR0FBeUJELGFBQWMsZUFBQSxDQUF2REMsZ0JBQWdCLEVBQUVDLGtCQUFrQixHQUFLRixhQUFjLGVBQUEsQ0FBckNFLGtCQUFrQixBQUFvQjtBQUV2RSxTQUFTTCxlQUFlLENBQUNNLEtBQUssRUFBRUMsS0FBSyxFQUFFO0lBQzVDLElBQU1DLE9BQU8sR0FBR0osZ0JBQWdCLENBQUNHLEtBQUssQ0FBQyxBQUFDO0lBRXhDLElBQUlFLFNBQVMsR0FBR0osa0JBQWtCLENBQUNFLEtBQUssQ0FBQyxBQUFDO0lBRTFDRSxTQUFTLEdBQUdDLENBQUFBLEdBQUFBLHVCQUFzQixBQUFvQixDQUFBLFFBQXBCLENBQUNELFNBQVMsRUFBRUQsT0FBTyxDQUFDLENBQUM7SUFFdkQsSUFBTUcsTUFBTSxHQUFHLElBQUlMLEtBQUssQ0FBQ0csU0FBUyxFQUFFRCxPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPRyxNQUFNLENBQUM7Q0FDZjtBQUVNLFNBQVNWLCtCQUErQixDQUFDSyxLQUFLLEVBQUVDLEtBQUssRUFBRUssYUFBYSxFQUFFO0lBQzNFLElBQU1KLE9BQU8sR0FBR0osZ0JBQWdCLENBQUNHLEtBQUssQ0FBQyxBQUFDO0lBRXhDLElBQUlFLFNBQVMsR0FBR0ksQ0FBQUEsR0FBQUEsTUFBa0MsQUFBc0IsQ0FBQSxtQ0FBdEIsQ0FBQ04sS0FBSyxFQUFFSyxhQUFhLENBQUMsQUFBQztJQUV6RUgsU0FBUyxHQUFHQyxDQUFBQSxHQUFBQSx1QkFBc0IsQUFBb0IsQ0FBQSxRQUFwQixDQUFDRCxTQUFTLEVBQUVELE9BQU8sQ0FBQyxDQUFDO0lBRXZELElBQU1HLE1BQU0sR0FBRyxJQUFJTCxLQUFLLENBQUNHLFNBQVMsRUFBRUQsT0FBTyxDQUFDLEFBQUM7SUFFN0MsT0FBT0csTUFBTSxDQUFDO0NBQ2Y7ZUFFYztJQUNiVCxZQUFZLEVBQVpBLFlBQVk7SUFDWkYsZUFBZSxFQUFmQSxlQUFlO0lBQ2ZDLCtCQUErQixFQUEvQkEsK0JBQStCO0NBQ2hDIn0=