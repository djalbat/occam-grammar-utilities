"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rulesFromBNF: function() {
        return rulesFromBNF;
    },
    parserFromRules: function() {
        return parserFromRules;
    },
    parserFromRulesAndStartRuleName: function() {
        return parserFromRulesAndStartRuleName;
    },
    default: function() {
        return _default;
    }
});
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _eliminateLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("../eliminateLeftRecursion"));
var _rules = require("../utilities/rules");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var ruleMap = ruleMapFromRules(rules), startRule = startRuleFromRules(rules);
    (0, _eliminateLeftRecursion.default)(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    var ruleMap = ruleMapFromRules(rules);
    var startRule = startRuleFromRules(rules);
    (0, _eliminateLeftRecursion.default)(startRule, ruleMap);
    startRule = (0, _rules.startRuleFromRulesAndStartRuleName)(rules, startRuleName);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgcnVsZXNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiAgZnJvbSBcIi4uL2VsaW1pbmF0ZUxlZnRSZWN1cnNpb25cIjtcblxuaW1wb3J0IHsgc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZXJGcm9tUnVsZXMoQ2xhc3MsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUoQ2xhc3MsIHJ1bGVzLCBzdGFydFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBsZXQgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShydWxlcywgc3RhcnRSdWxlTmFtZSk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlc0Zyb21CTkYsXG4gIHBhcnNlckZyb21SdWxlcyxcbiAgcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZVxufTtcbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJwYXJzZXJGcm9tUnVsZXMiLCJwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIiwicnVsZU1hcEZyb21SdWxlcyIsInJ1bGVzVXRpbGl0aWVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwiYm5mIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwiQ2xhc3MiLCJydWxlTWFwIiwic3RhcnRSdWxlIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInBhcnNlciIsInN0YXJ0UnVsZU5hbWUiLCJzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBY0dBLFlBQVk7ZUFBWkEsWUFBWTs7SUFPWkMsZUFBZTtlQUFmQSxlQUFlOztJQVdmQywrQkFBK0I7ZUFBL0JBLCtCQUErQjs7SUFjL0MsT0FJRTtlQUpGLFFBSUU7OzsyQkFoRHVCLGNBQWM7NEJBQ0csZUFBZTsyRUFFckIsMkJBQTJCO3FCQUVaLG9CQUFvQjs7Ozs7O0FBRXZFLElBQVFDLGdCQUFnQixHQUF5QkMsYUFBYyxlQUFBLENBQXZERCxnQkFBZ0IsRUFBRUUsa0JBQWtCLEdBQUtELGFBQWMsZUFBQSxDQUFyQ0Msa0JBQWtCLEFBQW9CO0FBRWhFLElBQU1DLFFBQVEsR0FBR0MsWUFBUSxTQUFBLENBQUNDLFdBQVcsRUFBRSxFQUNqQ0MsU0FBUyxHQUFHQyxhQUFTLFVBQUEsQ0FBQ0YsV0FBVyxFQUFFLEFBQUM7QUFFbkMsU0FBU1IsWUFBWSxDQUFDVyxHQUFHLEVBQUU7SUFDaEMsSUFBTUMsTUFBTSxHQUFHTixRQUFRLENBQUNPLGFBQWEsQ0FBQ0YsR0FBRyxDQUFDLEVBQ3BDRyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ00sZUFBZSxDQUFDSCxNQUFNLENBQUMsQUFBQztJQUVoRCxPQUFPRSxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNiLGVBQWUsQ0FBQ2UsS0FBSyxFQUFFRixLQUFLLEVBQUU7SUFDNUMsSUFBTUcsT0FBTyxHQUFHZCxnQkFBZ0IsQ0FBQ1csS0FBSyxDQUFDLEVBQ2pDSSxTQUFTLEdBQUdiLGtCQUFrQixDQUFDUyxLQUFLLENBQUMsQUFBQztJQUU1Q0ssSUFBQUEsdUJBQXNCLFFBQUEsRUFBQ0QsU0FBUyxFQUFFRCxPQUFPLENBQUMsQ0FBQztJQUUzQyxJQUFNRyxNQUFNLEdBQUcsSUFBSUosS0FBSyxDQUFDRSxTQUFTLEVBQUVELE9BQU8sQ0FBQyxBQUFDO0lBRTdDLE9BQU9HLE1BQU0sQ0FBQztDQUNmO0FBRU0sU0FBU2xCLCtCQUErQixDQUFDYyxLQUFLLEVBQUVGLEtBQUssRUFBRU8sYUFBYSxFQUFFO0lBQzNFLElBQU1KLE9BQU8sR0FBR2QsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxBQUFDO0lBRXhDLElBQUlJLFNBQVMsR0FBR2Isa0JBQWtCLENBQUNTLEtBQUssQ0FBQyxBQUFDO0lBRTFDSyxJQUFBQSx1QkFBc0IsUUFBQSxFQUFDRCxTQUFTLEVBQUVELE9BQU8sQ0FBQyxDQUFDO0lBRTNDQyxTQUFTLEdBQUdJLElBQUFBLE1BQWtDLG1DQUFBLEVBQUNSLEtBQUssRUFBRU8sYUFBYSxDQUFDLENBQUM7SUFFckUsSUFBTUQsTUFBTSxHQUFHLElBQUlKLEtBQUssQ0FBQ0UsU0FBUyxFQUFFRCxPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPRyxNQUFNLENBQUM7Q0FDZjtJQUVELFFBSUUsR0FKYTtJQUNicEIsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLGVBQWUsRUFBZkEsZUFBZTtJQUNmQywrQkFBK0IsRUFBL0JBLCtCQUErQjtDQUNoQyJ9