"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.parserFromRules = parserFromRules;
exports.parserFromRulesAndStartRuleName = parserFromRulesAndStartRuleName;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _rules = require("../utilities/rules");
var _eliminateLeftRecursion = _interopRequireDefault(require("../eliminateLeftRecursion"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var ruleMap = (0, _rules).ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRules(rules);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    var ruleMap = (0, _rules).ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRulesAndStartRuleName(rules, startRuleName);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCB7IHJ1bGVNYXBGcm9tUnVsZXMsIHN0YXJ0UnVsZUZyb21SdWxlcywgc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuaW1wb3J0IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24gIGZyb20gXCIuLi9lbGltaW5hdGVMZWZ0UmVjdXJzaW9uXCI7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuICBjb25zdCB0b2tlbnMgPSBibmZMZXhlci50b2tlbnNGcm9tQk5GKGJuZiksXG4gICAgICAgIHJ1bGVzID0gYm5mUGFyc2VyLnJ1bGVzRnJvbVRva2Vucyh0b2tlbnMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlcyhDbGFzcywgcnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpO1xuXG4gIGxldCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpO1xuXG4gIHN0YXJ0UnVsZSA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24oc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICBjb25zdCBwYXJzZXIgPSBuZXcgQ2xhc3Moc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICByZXR1cm4gcGFyc2VyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShDbGFzcywgcnVsZXMsIHN0YXJ0UnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpO1xuXG4gIGxldCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKHJ1bGVzLCBzdGFydFJ1bGVOYW1lKTtcblxuICBzdGFydFJ1bGUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlc0Zyb21CTkYsXG4gIHBhcnNlckZyb21SdWxlcyxcbiAgcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZVxufTtcbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJwYXJzZXJGcm9tUnVsZXMiLCJwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwiYm5mIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwiQ2xhc3MiLCJydWxlTWFwIiwicnVsZU1hcEZyb21SdWxlcyIsInN0YXJ0UnVsZSIsInN0YXJ0UnVsZUZyb21SdWxlcyIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJwYXJzZXIiLCJzdGFydFJ1bGVOYW1lIiwic3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBWUdBLFlBQVksR0FBWkEsWUFBWTtRQU9aQyxlQUFlLEdBQWZBLGVBQWU7UUFZZkMsK0JBQStCLEdBQS9CQSwrQkFBK0I7O0FBN0J0QixJQUFBLFlBQWMsV0FBZCxjQUFjLENBQUE7QUFDYixJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFFZ0QsSUFBQSxNQUFvQixXQUFwQixvQkFBb0IsQ0FBQTtBQUV6RSxJQUFBLHVCQUEyQixrQ0FBM0IsMkJBQTJCLEVBQUE7Ozs7OztBQUUvRCxJQUFNQyxRQUFRLEdBQUdDLFlBQVEsU0FBQSxDQUFDQyxXQUFXLEVBQUUsRUFDakNDLFNBQVMsR0FBR0MsYUFBUyxVQUFBLENBQUNGLFdBQVcsRUFBRSxBQUFDO0FBRW5DLFNBQVNMLFlBQVksQ0FBQ1EsR0FBRyxFQUFFO0lBQ2hDLElBQU1DLE1BQU0sR0FBR04sUUFBUSxDQUFDTyxhQUFhLENBQUNGLEdBQUcsQ0FBQyxFQUNwQ0csS0FBSyxHQUFHTCxTQUFTLENBQUNNLGVBQWUsQ0FBQ0gsTUFBTSxDQUFDLEFBQUM7SUFFaEQsT0FBT0UsS0FBSyxDQUFDO0NBQ2Q7QUFFTSxTQUFTVixlQUFlLENBQUNZLEtBQUssRUFBRUYsS0FBSyxFQUFFO0lBQzVDLElBQU1HLE9BQU8sR0FBR0MsQ0FBQUEsR0FBQUEsTUFBZ0IsQUFBTyxDQUFBLGlCQUFQLENBQUNKLEtBQUssQ0FBQyxBQUFDO0lBRXhDLElBQUlLLFNBQVMsR0FBR0MsQ0FBQUEsR0FBQUEsTUFBa0IsQUFBTyxDQUFBLG1CQUFQLENBQUNOLEtBQUssQ0FBQyxBQUFDO0lBRTFDSyxTQUFTLEdBQUdFLENBQUFBLEdBQUFBLHVCQUFzQixBQUFvQixDQUFBLFFBQXBCLENBQUNGLFNBQVMsRUFBRUYsT0FBTyxDQUFDLENBQUM7SUFFdkQsSUFBTUssTUFBTSxHQUFHLElBQUlOLEtBQUssQ0FBQ0csU0FBUyxFQUFFRixPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPSyxNQUFNLENBQUM7Q0FDZjtBQUVNLFNBQVNqQiwrQkFBK0IsQ0FBQ1csS0FBSyxFQUFFRixLQUFLLEVBQUVTLGFBQWEsRUFBRTtJQUMzRSxJQUFNTixPQUFPLEdBQUdDLENBQUFBLEdBQUFBLE1BQWdCLEFBQU8sQ0FBQSxpQkFBUCxDQUFDSixLQUFLLENBQUMsQUFBQztJQUV4QyxJQUFJSyxTQUFTLEdBQUdLLENBQUFBLEdBQUFBLE1BQWtDLEFBQXNCLENBQUEsbUNBQXRCLENBQUNWLEtBQUssRUFBRVMsYUFBYSxDQUFDLEFBQUM7SUFFekVKLFNBQVMsR0FBR0UsQ0FBQUEsR0FBQUEsdUJBQXNCLEFBQW9CLENBQUEsUUFBcEIsQ0FBQ0YsU0FBUyxFQUFFRixPQUFPLENBQUMsQ0FBQztJQUV2RCxJQUFNSyxNQUFNLEdBQUcsSUFBSU4sS0FBSyxDQUFDRyxTQUFTLEVBQUVGLE9BQU8sQ0FBQyxBQUFDO0lBRTdDLE9BQU9LLE1BQU0sQ0FBQztDQUNmO2VBRWM7SUFDYm5CLFlBQVksRUFBWkEsWUFBWTtJQUNaQyxlQUFlLEVBQWZBLGVBQWU7SUFDZkMsK0JBQStCLEVBQS9CQSwrQkFBK0I7Q0FDaEMifQ==