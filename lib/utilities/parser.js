"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rulesFromBNF: function() {
        return rulesFromBNF;
    },
    parserFromRules: function() {
        return parserFromRules;
    },
    parserFromRulesAndStartRuleName: function() {
        return parserFromRulesAndStartRuleName;
    },
    default: function() {
        return _default;
    }
});
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _eliminateLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("../eliminateLeftRecursion"));
var _rules = require("../utilities/rules");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf);
    var rules = bnfParser.rulesFromTokens(tokens);
    rules = (0, _eliminateLeftRecursion.default)(rules);
    return rules;
}
function parserFromRules(Class, rules) {
    rules = (0, _eliminateLeftRecursion.default)(rules);
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    rules = (0, _eliminateLeftRecursion.default)(rules);
    var startRule = (0, _rules.startRuleFromRulesAndStartRuleName)(rules, startRuleName), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgcnVsZXNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiAgZnJvbSBcIi4uL2VsaW1pbmF0ZUxlZnRSZWN1cnNpb25cIjtcblxuaW1wb3J0IHsgc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpO1xuXG4gIGxldCBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICBydWxlcyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlcyhDbGFzcywgcnVsZXMpIHtcbiAgcnVsZXMgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKTtcblxuICBjb25zdCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBydWxlTWFwID0gcnVsZU1hcEZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHBhcnNlciA9IG5ldyBDbGFzcyhzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIHJldHVybiBwYXJzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKENsYXNzLCBydWxlcywgc3RhcnRSdWxlTmFtZSkge1xuICBydWxlcyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpO1xuXG4gIGNvbnN0IHN0YXJ0UnVsZSA9IHN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUocnVsZXMsIHN0YXJ0UnVsZU5hbWUpLFxuICAgICAgICBydWxlTWFwID0gcnVsZU1hcEZyb21SdWxlcyhydWxlcyksXG4gICAgICAgIHBhcnNlciA9IG5ldyBDbGFzcyhzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIHJldHVybiBwYXJzZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcnVsZXNGcm9tQk5GLFxuICBwYXJzZXJGcm9tUnVsZXMsXG4gIHBhcnNlckZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWVcbn07XG4iXSwibmFtZXMiOlsicnVsZXNGcm9tQk5GIiwicGFyc2VyRnJvbVJ1bGVzIiwicGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsImJuZkxleGVyIiwiQk5GTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsIkJORlBhcnNlciIsImJuZiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlcyIsInJ1bGVzRnJvbVRva2VucyIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJDbGFzcyIsInN0YXJ0UnVsZSIsInJ1bGVNYXAiLCJwYXJzZXIiLCJzdGFydFJ1bGVOYW1lIiwic3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQWNHQSxZQUFZO2VBQVpBLFlBQVk7O0lBVVpDLGVBQWU7ZUFBZkEsZUFBZTs7SUFVZkMsK0JBQStCO2VBQS9CQSwrQkFBK0I7O0lBVS9DLE9BSUU7ZUFKRixRQUlFOzs7MkJBOUN1QixjQUFjOzRCQUNHLGVBQWU7MkVBRXJCLDJCQUEyQjtxQkFFWixvQkFBb0I7Ozs7OztBQUV2RSxJQUFRQyxnQkFBZ0IsR0FBeUJDLGFBQWMsZUFBQSxDQUF2REQsZ0JBQWdCLEVBQUVFLGtCQUFrQixHQUFLRCxhQUFjLGVBQUEsQ0FBckNDLGtCQUFrQixBQUFvQjtBQUVoRSxJQUFNQyxRQUFRLEdBQUdDLFlBQVEsU0FBQSxDQUFDQyxXQUFXLEVBQUUsRUFDakNDLFNBQVMsR0FBR0MsYUFBUyxVQUFBLENBQUNGLFdBQVcsRUFBRSxBQUFDO0FBRW5DLFNBQVNSLFlBQVksQ0FBQ1csR0FBRyxFQUFFO0lBQ2hDLElBQU1DLE1BQU0sR0FBR04sUUFBUSxDQUFDTyxhQUFhLENBQUNGLEdBQUcsQ0FBQyxBQUFDO0lBRTNDLElBQUlHLEtBQUssR0FBR0wsU0FBUyxDQUFDTSxlQUFlLENBQUNILE1BQU0sQ0FBQyxBQUFDO0lBRTlDRSxLQUFLLEdBQUdFLElBQUFBLHVCQUFzQixRQUFBLEVBQUNGLEtBQUssQ0FBQyxDQUFDO0lBRXRDLE9BQU9BLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFTSxTQUFTYixlQUFlLENBQUNnQixLQUFLLEVBQUVILEtBQUssRUFBRTtJQUM1Q0EsS0FBSyxHQUFHRSxJQUFBQSx1QkFBc0IsUUFBQSxFQUFDRixLQUFLLENBQUMsQ0FBQztJQUV0QyxJQUFNSSxTQUFTLEdBQUdiLGtCQUFrQixDQUFDUyxLQUFLLENBQUMsRUFDckNLLE9BQU8sR0FBR2hCLGdCQUFnQixDQUFDVyxLQUFLLENBQUMsRUFDakNNLE1BQU0sR0FBRyxJQUFJSCxLQUFLLENBQUNDLFNBQVMsRUFBRUMsT0FBTyxDQUFDLEFBQUM7SUFFN0MsT0FBT0MsTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFTSxTQUFTbEIsK0JBQStCLENBQUNlLEtBQUssRUFBRUgsS0FBSyxFQUFFTyxhQUFhLEVBQUU7SUFDM0VQLEtBQUssR0FBR0UsSUFBQUEsdUJBQXNCLFFBQUEsRUFBQ0YsS0FBSyxDQUFDLENBQUM7SUFFdEMsSUFBTUksU0FBUyxHQUFHSSxJQUFBQSxNQUFrQyxtQ0FBQSxFQUFDUixLQUFLLEVBQUVPLGFBQWEsQ0FBQyxFQUNwRUYsT0FBTyxHQUFHaEIsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxFQUNqQ00sTUFBTSxHQUFHLElBQUlILEtBQUssQ0FBQ0MsU0FBUyxFQUFFQyxPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztJQUVELFFBSUUsR0FKYTtJQUNicEIsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLGVBQWUsRUFBZkEsZUFBZTtJQUNmQywrQkFBK0IsRUFBL0JBLCtCQUErQjtDQUNoQyJ9