"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rulesFromBNF: function() {
        return rulesFromBNF;
    },
    parserFromRules: function() {
        return parserFromRules;
    },
    parserFromRulesAndStartRuleName: function() {
        return parserFromRulesAndStartRuleName;
    },
    default: function() {
        return _default;
    }
});
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _eliminateLeftRecursion = /*#__PURE__*/ _interopRequireDefault(require("../eliminateLeftRecursion"));
var _rules = require("../utilities/rules");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    rules = (0, _eliminateLeftRecursion.default)(rules);
    var startRule = startRuleFromRules(rules), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    rules = (0, _eliminateLeftRecursion.default)(rules);
    var startRule = (0, _rules.startRuleFromRulesAndStartRuleName)(rules, startRuleName), ruleMap = ruleMapFromRules(rules), parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgcnVsZXNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiAgZnJvbSBcIi4uL2VsaW1pbmF0ZUxlZnRSZWN1cnNpb25cIjtcblxuaW1wb3J0IHsgc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcnVsZXNcIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZXJGcm9tUnVsZXMoQ2xhc3MsIHJ1bGVzKSB7XG4gIHJ1bGVzID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihydWxlcyk7XG5cbiAgY29uc3Qgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBwYXJzZXIgPSBuZXcgQ2xhc3Moc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICByZXR1cm4gcGFyc2VyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShDbGFzcywgcnVsZXMsIHN0YXJ0UnVsZU5hbWUpIHtcbiAgcnVsZXMgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzKTtcblxuICBjb25zdCBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKHJ1bGVzLCBzdGFydFJ1bGVOYW1lKSxcbiAgICAgICAgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBwYXJzZXIgPSBuZXcgQ2xhc3Moc3RhcnRSdWxlLCBydWxlTWFwKTtcblxuICByZXR1cm4gcGFyc2VyO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJ1bGVzRnJvbUJORixcbiAgcGFyc2VyRnJvbVJ1bGVzLFxuICBwYXJzZXJGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lXG59O1xuIl0sIm5hbWVzIjpbInJ1bGVzRnJvbUJORiIsInBhcnNlckZyb21SdWxlcyIsInBhcnNlckZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUiLCJydWxlTWFwRnJvbVJ1bGVzIiwicnVsZXNVdGlsaXRpZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJibmZMZXhlciIsIkJORkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJCTkZQYXJzZXIiLCJibmYiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJDbGFzcyIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwicGFyc2VyIiwic3RhcnRSdWxlTmFtZSIsInN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7SUFjR0EsWUFBWTtlQUFaQSxZQUFZOztJQU9aQyxlQUFlO2VBQWZBLGVBQWU7O0lBVWZDLCtCQUErQjtlQUEvQkEsK0JBQStCOztJQVUvQyxPQUlFO2VBSkYsUUFJRTs7OzJCQTNDdUIsY0FBYzs0QkFDRyxlQUFlOzJFQUVyQiwyQkFBMkI7cUJBRVosb0JBQW9COzs7Ozs7QUFFdkUsSUFBUUMsZ0JBQWdCLEdBQXlCQyxhQUFjLGVBQUEsQ0FBdkRELGdCQUFnQixFQUFFRSxrQkFBa0IsR0FBS0QsYUFBYyxlQUFBLENBQXJDQyxrQkFBa0IsQUFBb0I7QUFFaEUsSUFBTUMsUUFBUSxHQUFHQyxZQUFRLFNBQUEsQ0FBQ0MsV0FBVyxFQUFFLEVBQ2pDQyxTQUFTLEdBQUdDLGFBQVMsVUFBQSxDQUFDRixXQUFXLEVBQUUsQUFBQztBQUVuQyxTQUFTUixZQUFZLENBQUNXLEdBQUcsRUFBRTtJQUNoQyxJQUFNQyxNQUFNLEdBQUdOLFFBQVEsQ0FBQ08sYUFBYSxDQUFDRixHQUFHLENBQUMsRUFDcENHLEtBQUssR0FBR0wsU0FBUyxDQUFDTSxlQUFlLENBQUNILE1BQU0sQ0FBQyxBQUFDO0lBRWhELE9BQU9FLEtBQUssQ0FBQztDQUNkO0FBRU0sU0FBU2IsZUFBZSxDQUFDZSxLQUFLLEVBQUVGLEtBQUssRUFBRTtJQUM1Q0EsS0FBSyxHQUFHRyxJQUFBQSx1QkFBc0IsUUFBQSxFQUFDSCxLQUFLLENBQUMsQ0FBQztJQUV0QyxJQUFNSSxTQUFTLEdBQUdiLGtCQUFrQixDQUFDUyxLQUFLLENBQUMsRUFDckNLLE9BQU8sR0FBR2hCLGdCQUFnQixDQUFDVyxLQUFLLENBQUMsRUFDakNNLE1BQU0sR0FBRyxJQUFJSixLQUFLLENBQUNFLFNBQVMsRUFBRUMsT0FBTyxDQUFDLEFBQUM7SUFFN0MsT0FBT0MsTUFBTSxDQUFDO0NBQ2Y7QUFFTSxTQUFTbEIsK0JBQStCLENBQUNjLEtBQUssRUFBRUYsS0FBSyxFQUFFTyxhQUFhLEVBQUU7SUFDM0VQLEtBQUssR0FBR0csSUFBQUEsdUJBQXNCLFFBQUEsRUFBQ0gsS0FBSyxDQUFDLENBQUM7SUFFdEMsSUFBTUksU0FBUyxHQUFHSSxJQUFBQSxNQUFrQyxtQ0FBQSxFQUFDUixLQUFLLEVBQUVPLGFBQWEsQ0FBQyxFQUNwRUYsT0FBTyxHQUFHaEIsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxFQUNqQ00sTUFBTSxHQUFHLElBQUlKLEtBQUssQ0FBQ0UsU0FBUyxFQUFFQyxPQUFPLENBQUMsQUFBQztJQUU3QyxPQUFPQyxNQUFNLENBQUM7Q0FDZjtJQUVELFFBSUUsR0FKYTtJQUNicEIsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLGVBQWUsRUFBZkEsZUFBZTtJQUNmQywrQkFBK0IsRUFBL0JBLCtCQUErQjtDQUNoQyJ9