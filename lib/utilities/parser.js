"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.parserFromRules = parserFromRules;
exports.parserFromRulesAndStartRuleName = parserFromRulesAndStartRuleName;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _rules = require("../utilities/rules");
var _eliminateLeftRecursion = _interopRequireDefault(require("../eliminateLeftRecursion"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function parserFromRules(Class, rules) {
    var ruleMap = ruleMapFromRules(rules);
    var startRule = startRuleFromRules(rules);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
function parserFromRulesAndStartRuleName(Class, rules, startRuleName) {
    var ruleMap = ruleMapFromRules(rules);
    var startRule = (0, _rules).startRuleFromRulesAndStartRuleName(rules, startRuleName);
    startRule = (0, _eliminateLeftRecursion).default(startRule, ruleMap);
    var parser = new Class(startRule, ruleMap);
    return parser;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    parserFromRules: parserFromRules,
    parserFromRulesAndStartRuleName: parserFromRulesAndStartRuleName
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCTkZMZXhlciB9IGZyb20gXCJvY2NhbS1sZXhlcnNcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgcnVsZXNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5pbXBvcnQgeyBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlc1wiO1xuXG5pbXBvcnQgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiAgZnJvbSBcIi4uL2VsaW1pbmF0ZUxlZnRSZWN1cnNpb25cIjtcblxuY29uc3QgeyBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZXJGcm9tUnVsZXMoQ2xhc3MsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBsZXQgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBzdGFydFJ1bGUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgY29uc3QgcGFyc2VyID0gbmV3IENsYXNzKHN0YXJ0UnVsZSwgcnVsZU1hcCk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlckZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUoQ2xhc3MsIHJ1bGVzLCBzdGFydFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKTtcblxuICBsZXQgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZShydWxlcywgc3RhcnRSdWxlTmFtZSk7XG5cbiAgc3RhcnRSdWxlID0gZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IHBhcnNlciA9IG5ldyBDbGFzcyhzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIHJldHVybiBwYXJzZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcnVsZXNGcm9tQk5GLFxuICBwYXJzZXJGcm9tUnVsZXMsXG4gIHBhcnNlckZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWVcbn07XG4iXSwibmFtZXMiOlsicnVsZXNGcm9tQk5GIiwicGFyc2VyRnJvbVJ1bGVzIiwicGFyc2VyRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlc1V0aWxpdGllcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsImJuZkxleGVyIiwiQk5GTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsIkJORlBhcnNlciIsImJuZiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlcyIsInJ1bGVzRnJvbVRva2VucyIsIkNsYXNzIiwicnVsZU1hcCIsInN0YXJ0UnVsZSIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJwYXJzZXIiLCJzdGFydFJ1bGVOYW1lIiwic3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBY0dBLFlBQVksR0FBWkEsWUFBWTtRQU9aQyxlQUFlLEdBQWZBLGVBQWU7UUFZZkMsK0JBQStCLEdBQS9CQSwrQkFBK0I7O0FBL0J0QixJQUFBLFlBQWMsV0FBZCxjQUFjLENBQUE7QUFDRyxJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFFTixJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBRW5DLElBQUEsdUJBQTJCLGtDQUEzQiwyQkFBMkIsRUFBQTs7Ozs7O0FBRS9ELElBQVFDLGdCQUFnQixHQUF5QkMsYUFBYyxlQUFBLENBQXZERCxnQkFBZ0IsRUFBRUUsa0JBQWtCLEdBQUtELGFBQWMsZUFBQSxDQUFyQ0Msa0JBQWtCLEFBQW9CO0FBRWhFLElBQU1DLFFBQVEsR0FBR0MsWUFBUSxTQUFBLENBQUNDLFdBQVcsRUFBRSxFQUNqQ0MsU0FBUyxHQUFHQyxhQUFTLFVBQUEsQ0FBQ0YsV0FBVyxFQUFFLEFBQUM7QUFFbkMsU0FBU1IsWUFBWSxDQUFDVyxHQUFHLEVBQUU7SUFDaEMsSUFBTUMsTUFBTSxHQUFHTixRQUFRLENBQUNPLGFBQWEsQ0FBQ0YsR0FBRyxDQUFDLEVBQ3BDRyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ00sZUFBZSxDQUFDSCxNQUFNLENBQUMsQUFBQztJQUVoRCxPQUFPRSxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNiLGVBQWUsQ0FBQ2UsS0FBSyxFQUFFRixLQUFLLEVBQUU7SUFDNUMsSUFBTUcsT0FBTyxHQUFHZCxnQkFBZ0IsQ0FBQ1csS0FBSyxDQUFDLEFBQUM7SUFFeEMsSUFBSUksU0FBUyxHQUFHYixrQkFBa0IsQ0FBQ1MsS0FBSyxDQUFDLEFBQUM7SUFFMUNJLFNBQVMsR0FBR0MsQ0FBQUEsR0FBQUEsdUJBQXNCLEFBQW9CLENBQUEsUUFBcEIsQ0FBQ0QsU0FBUyxFQUFFRCxPQUFPLENBQUMsQ0FBQztJQUV2RCxJQUFNRyxNQUFNLEdBQUcsSUFBSUosS0FBSyxDQUFDRSxTQUFTLEVBQUVELE9BQU8sQ0FBQyxBQUFDO0lBRTdDLE9BQU9HLE1BQU0sQ0FBQztDQUNmO0FBRU0sU0FBU2xCLCtCQUErQixDQUFDYyxLQUFLLEVBQUVGLEtBQUssRUFBRU8sYUFBYSxFQUFFO0lBQzNFLElBQU1KLE9BQU8sR0FBR2QsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxBQUFDO0lBRXhDLElBQUlJLFNBQVMsR0FBR0ksQ0FBQUEsR0FBQUEsTUFBa0MsQUFBc0IsQ0FBQSxtQ0FBdEIsQ0FBQ1IsS0FBSyxFQUFFTyxhQUFhLENBQUMsQUFBQztJQUV6RUgsU0FBUyxHQUFHQyxDQUFBQSxHQUFBQSx1QkFBc0IsQUFBb0IsQ0FBQSxRQUFwQixDQUFDRCxTQUFTLEVBQUVELE9BQU8sQ0FBQyxDQUFDO0lBRXZELElBQU1HLE1BQU0sR0FBRyxJQUFJSixLQUFLLENBQUNFLFNBQVMsRUFBRUQsT0FBTyxDQUFDLEFBQUM7SUFFN0MsT0FBT0csTUFBTSxDQUFDO0NBQ2Y7ZUFFYztJQUNicEIsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLGVBQWUsRUFBZkEsZUFBZTtJQUNmQywrQkFBK0IsRUFBL0JBLCtCQUErQjtDQUNoQyJ9