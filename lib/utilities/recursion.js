'use strict';

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    RecursiveDefinition = require('../definition/recursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RightRecursiveDefinition = require('../definition/rightRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName'),
    NonRecursiveRuleNameDefinition = require('../definition/nonRecursiveRuleName');

var first = arrayUtilities.first,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    push = arrayUtilities.push,
    filter = arrayUtilities.filter,
    iterateWithReplace = arrayUtilities.iterateWithReplace,
    isDefinitionImmediatelyLeftRecursive = definitionUtilities.isDefinitionImmediatelyLeftRecursive,
    findRuleByName = ruleUtilities.findRuleByName,
    deleteRuleByName = ruleUtilities.deleteRuleByName,
    isRuleImmediatelyLeftRecursive = ruleUtilities.isRuleImmediatelyLeftRecursive;


function eliminateLeftRecursionFromRule(rule, ruleName, rules) {
  if (ruleName === null) {
    ruleName = rule.getName();
  }

  var definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  definitions.forEach(function (definition, count) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleName, rule, rules, count);

    if (recursiveDefinition === null) {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    } else {
      recursiveDefinitions.push(recursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromRuleRuleNameAndNonRecursiveDefinitions(rule, ruleName, nonRecursiveDefinitions),
        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromNonRecursiveRule(nonRecursiveRule),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveRuleNameDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function eliminateLeftRecursionFromDefinition(definition, ruleName, rule, rules, count) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleName, rule, rules, count);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleName, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleName, rule, rules, count) {
  var recursiveDefinition = null;

  var ruleNamePartRuleName = ruleNamePart.getRuleName(),
      ruleNamePartRuleNameRuleName = ruleNamePartRuleName === ruleName;

  if (ruleNamePartRuleNameRuleName) {
    var _ruleName = rule.getName(),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRuleName(definition, _ruleName, rules, count);

    recursiveDefinition = RecursiveDefinition.fromRuleName(_ruleName, count);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}

function eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleName, rules) {
  var recursiveDefinition = null;

  var ruleNamePartRuleName = ruleNamePart.getRuleName(),
      name = ruleNamePartRuleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleName, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,