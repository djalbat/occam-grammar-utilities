'use strict';

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName');

var first = arrayUtilities.first,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    push = arrayUtilities.push,
    filter = arrayUtilities.filter,
    iterateWithReplace = arrayUtilities.iterateWithReplace,
    isDefinitionImmediatelyLeftRecursive = definitionUtilities.isDefinitionImmediatelyLeftRecursive,
    findRuleByName = ruleUtilities.findRuleByName,
    deleteRuleByName = ruleUtilities.deleteRuleByName,
    isRuleImmediatelyLeftRecursive = ruleUtilities.isRuleImmediatelyLeftRecursive;


function eliminateLeftRecursionFromRule(rule, ruleName, rules) {
  var ruleLeftRecursive = false;

  if (ruleName === null) {
    ruleName = rule.getName();
  }

  var definitions = rule.getDefinitions(),
      nonRecursiveRule = NonRecursiveRule.fromRule(rule),
      rightRecursiveRules = [],
      nonRecursiveDefinitions = [];

  iterateWithReplace(definitions, function (definition, count) {
    var definitionImmediatelyLeftRecursive = isDefinitionImmediatelyLeftRecursive(definition, ruleName);

    if (definitionImmediatelyLeftRecursive) {
      var immediatelyLeftRecursiveDefinition = definition,
          ///
      rightRecursiveRule = RightRecursiveRule.fromRuleAndImmediatelyLeftRecursiveDefinition(rule, immediatelyLeftRecursiveDefinition, count),
          rightRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRuleAndRightRecursiveRule(nonRecursiveRule, rightRecursiveRule);

      rightRecursiveRules.push(rightRecursiveRule);

      return rightRecursiveDefinition;
    }

    var definitionLeftRecursive = eliminateLeftRecursionFromDefinition(definition, ruleName, rules);

    if (!definitionLeftRecursive) {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    }
  });

  nonRecursiveRule.addNonRecursiveDefinitions(nonRecursiveDefinitions);

  push(rules, rightRecursiveRules);

  var definitionsLength = definitions.length,
      nonRecursiveDefinitionsLength = nonRecursiveDefinitions.length;

  if (nonRecursiveDefinitionsLength < definitionsLength) {
    var nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule);

    filter(definitions, function (definition) {
      var nonRecursiveDefinitionsIncludesDefinition = nonRecursiveDefinitions.includes(definition);

      if (!nonRecursiveDefinitionsIncludesDefinition) {
        return true;
      }
    });

    rule.addDefinition(nonRecursiveDefinition);

    rules.push(nonRecursiveRule);
  }

  return ruleLeftRecursive;
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function eliminateLeftRecursionFromDefinition(definition, ruleName, rules) {
  var definitionLeftRecursive = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart,
        ///
    ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleNamePartRuleNameRuleName = ruleNamePartRuleName === ruleName;

    if (ruleNamePartRuleNameRuleName) {
      definitionLeftRecursive = true;
    } else {
      var name = ruleNamePartRuleName,
          ///
      rule = findRuleByName(name, rules),
          ruleLeftRecursive = eliminateLeftRecursionFromRule(rule, ruleName, rules);

      definitionLeftRecursive = ruleLeftRecursive; ///
    }
  }

  return definitionLeftRecursive;
}

function isDefinitionLeftRecursive(definition, ruleName, rules) {
  var definitionLeftRecursive = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart,
        ///
    ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleNamePartRuleNameRuleName = ruleNamePartRuleName === ruleName;

    if (ruleNamePartRuleNameRuleName) {
      definitionLeftRecursive = true;
    } else {
      var name = ruleNamePartRuleName,
          ///
      rule = findRuleByName(name, rules),
          ruleLeftRecursive = isRuleLeftRecursive(rule, ruleName, rules);

      definitionLeftRecursive = ruleLeftRecursive; ///
    }
  }

  return definitionLeftRecursive;
}

function isRuleLeftRecursive(rule, ruleName, rules) {
  var definitions = rule.getDefinitions(),
      ruleLeftRecursive = definitions.some(function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName, rules);

    if (definitionLeftRecursive) {
      return true;
    }
  });

  return ruleLeftRecursive;
}

// definitions.forEach((definition) => {
// const leftRecursiveRule = leftRecursiveRuleFromRuleNameAndDefinition(definition, ruleName, rules);
//
// if (leftRecursiveRule !== null) {
//   rule = leftRecursiveRule; ///
//
//   const definitions = rule.getDefinitions(),
//         nonTerminalNode = rule.getNonTerminalNode(),
//         rightRecursiveRules = [];
//
//   iterateWithDelete(definitions, (definition, count) => {
//     const definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);
//
//     if (definitionLeftRecursive) {
//       const rightRecursiveRule = RightRecursiveRule.fromLeftRecursiveRuleAndNonTerminalNode(leftRecursiveRule, nonTerminalNode, count);
//
//       rightRecursiveRules.push(rightRecursiveRule);
//
//       return true;
//     }
//   });

// const nonRecursiveRule = NonRecursiveRule.fromRule(rule),
//       nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule),
//       rightRecursiveRuleNameDefinitions = rightRecursiveRules.map((rightRecursiveRule) => {
//         const rightRecursiveRuleNameDefinition = RecursiveRuleNameDefinition.fromNonRecursiveRuleAndRecursiveRule(nonRecursiveRule, rightRecursiveRule);
//
//         return rightRecursiveRuleNameDefinition;
//       });
//
// rule.setDefinitions([
//   ...rightRecursiveRuleNameDefinitions,
//   nonRecursiveDefinition
// ]);
//
// rules.push(nonRecursiveRule);
//
// push(rules, rightRecursiveRules);

// rightRecursiveRules.forEach((rightRecursiveRule) => {
//   const leftRecursiveRuleName = rightRecursiveRule.getLeftRecursiveRuleName();
//
//   deleteRuleByName(leftRecursiveRuleName, rules);
// });
// }
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,