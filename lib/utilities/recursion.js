'use strict';

var necessary = require('necessary');

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    RecursiveDefinition = require('../definition/recursive'),
    NonRecursiveRuleNameDefinition = require('../definition/nonRecursiveRuleName');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart;


function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition, count) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rule, rules, count);

    if (recursiveDefinition === null) {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    } else {
      recursiveDefinitions.push(recursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromRuleRuleNamesAndNonRecursiveDefinitions(rule, ruleNames, nonRecursiveDefinitions),
        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromNonRecursiveRule(nonRecursiveRule),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveRuleNameDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rule, rules, count) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rule, rules, count);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rule, rules, count) {
  var recursiveDefinition = null;

  var firstRuleName = first(ruleNames),
      ruleNamePartRuleName = ruleNamePart.getRuleName(),
      ruleNamePartRuleNameRuleName = ruleNamePartRuleName === firstRuleName;

  if (ruleNamePartRuleNameRuleName) {
    var ruleName = rule.getName(),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRuleName(definition, ruleName, rules, count);

    recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName, count);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}

function eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleNamePartRuleName = ruleNamePart.getRuleName(),
      name = ruleNamePartRuleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcmVjdXJzaW9uLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJwYXJ0VXRpbGl0aWVzIiwicnVsZVV0aWxpdGllcyIsIk5vblJlY3Vyc2l2ZVJ1bGUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJSZWN1cnNpdmVEZWZpbml0aW9uIiwiTm9uUmVjdXJzaXZlUnVsZU5hbWVEZWZpbml0aW9uIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsImZpbmRSdWxlQnlOYW1lIiwiaXNQYXJ0UnVsZU5hbWVQYXJ0IiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbkZyb21SdWxlIiwicnVsZSIsInJ1bGVOYW1lcyIsInJ1bGVzIiwicnVsZU5hbWUiLCJnZXROYW1lIiwiZGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwibm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJjb25jYXQiLCJmb3JFYWNoIiwiZGVmaW5pdGlvbiIsImNvdW50IiwicmVjdXJzaXZlRGVmaW5pdGlvbiIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbiIsIm5vblJlY3Vyc2l2ZURlZmluaXRpb24iLCJwdXNoIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJydWxlUmVjdXJzaXZlIiwibm9uUmVjdXJzaXZlUnVsZSIsImZyb21SdWxlUnVsZU5hbWVzQW5kTm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJub25SZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb24iLCJmcm9tTm9uUmVjdXJzaXZlUnVsZSIsInNldERlZmluaXRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJydWxlTmFtZVBhcnQiLCJlbGltaW5hdGVJbW1lZGlhdGVMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24iLCJlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbiIsImZpcnN0UnVsZU5hbWUiLCJydWxlTmFtZVBhcnRSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicnVsZU5hbWVQYXJ0UnVsZU5hbWVSdWxlTmFtZSIsInJpZ2h0UmVjdXJzaXZlUnVsZSIsImZyb21EZWZpbml0aW9uQW5kUnVsZU5hbWUiLCJmcm9tUnVsZU5hbWUiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsZ0JBQWdCRCxRQUFRLG1CQUFSLENBQXRCO0FBQUEsSUFDTUUsZ0JBQWdCRixRQUFRLG1CQUFSLENBRHRCO0FBQUEsSUFFTUcsbUJBQW1CSCxRQUFRLHNCQUFSLENBRnpCO0FBQUEsSUFHTUkscUJBQXFCSixRQUFRLHdCQUFSLENBSDNCO0FBQUEsSUFJTUssc0JBQXNCTCxRQUFRLHlCQUFSLENBSjVCO0FBQUEsSUFLTU0saUNBQWlDTixRQUFRLG9DQUFSLENBTHZDOztBQU9NLElBQUVPLGNBQUYsR0FBcUJSLFNBQXJCLENBQUVRLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjtBQUFBLElBRUVDLGNBRkYsR0FFcUJQLGFBRnJCLENBRUVPLGNBRkY7QUFBQSxJQUdFQyxrQkFIRixHQUd5QlQsYUFIekIsQ0FHRVMsa0JBSEY7OztBQUtOLFNBQVNDLDhCQUFULENBQXdDQyxJQUF4QyxFQUE4Q0MsU0FBOUMsRUFBeURDLEtBQXpELEVBQWdFO0FBQzlELE1BQU1DLFdBQVdILEtBQUtJLE9BQUwsRUFBakI7QUFBQSxNQUNNQyxjQUFjTCxLQUFLTSxjQUFMLEVBRHBCO0FBQUEsTUFFTUMsdUJBQXVCLEVBRjdCO0FBQUEsTUFHTUMsMEJBQTBCLEVBSGhDOztBQUtBUCxjQUFZQSxVQUFVUSxNQUFWLENBQWlCTixRQUFqQixDQUFaOztBQUVBRSxjQUFZSyxPQUFaLENBQW9CLFVBQUNDLFVBQUQsRUFBYUMs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QXBFLEVBQWdGVixTQUFoRixFQUEyRkMsS0FBM0YsRUFBa0c7QUFDaEcsTUFBSVcsc0JBQXNCLElBQTFCOztBQUVBLE1BQU1zQix1QkFBdUJKLGFBQWFLLFdBQWIsRUFBN0I7QUFBQSxNQUNNSyxPQUFPTixvQkFEYjtBQUFBLE1BQ29DO0FBQzlCbkMsU0FBT0gsZUFBZTRDLElBQWYsRUFBcUJ2QyxLQUFyQixDQUZiOztBQUlBLE1BQUlGLFNBQVMsSUFBYixFQUFtQjtBQUNqQixRQUFNbUIsZ0JBQWdCcEIsK0JBQStCQyxJQUEvQixFQUFxQ0MsU0FBckMsRUFBZ0RDLEtBQWhELENBQXRCOztBQUVBLFFBQUlpQixhQUFKLEVBQW1CO0FBQ2pCTiw0QkFBc0JGLFVBQXRCLENBRGlCLENBQ2lCO0FBQ25DO0FBQ0Y7O0FBRUQsU0FBT0UsbUJBQVA7QUFDRCIsImZpbGUiOiJyZWN1cnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBwYXJ0VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3BhcnQnKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgTm9uUmVjdXJzaXZlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvbm9uUmVjdXJzaXZlJyksXG4gICAgICBSaWdodFJlY3Vyc2l2ZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9yZWN1cnNpdmUnKSxcbiAgICAgIE5vblJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vbm9uUmVjdXJzaXZlUnVsZU5hbWUnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlOYW1lIH0gPSBydWxlVXRpbGl0aWVzLFxuICAgICAgeyBpc1BhcnRSdWxlTmFtZVBhcnQgfSA9IHBhcnRVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tUnVsZShydWxlLCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgIGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICByZWN1cnNpdmVEZWZpbml0aW9ucyA9IFtdLFxuICAgICAgICBub25SZWN1cnNpdmVEZWZpbml0aW9ucyA9IFtdO1xuXG4gIHJ1bGVOYW1lcyA9IHJ1bGVOYW1lcy5jb25jYXQocnVsZU5hbWUpO1xuXG4gIGRlZmluaXRpb25zLmZvckVhY2goKGRlZmluaXRpb24sIGNvdW50KSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGUsIHJ1bGVzLCBjb3VudCk7XG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbiA9PT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb247ICAvLy9cblxuICAgICAgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChub25SZWN1cnNpdmVEZWZpbml0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnMucHVzaChyZWN1cnNpdmVEZWZpbml0aW9uKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoID0gcmVjdXJzaXZlRGVmaW5pdGlvbnMubGVuZ3RoLFxuICAgICAgICBydWxlUmVjdXJzaXZlID0gKHJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoID4gMCk7XG5cbiAgaWYgKHJ1bGVSZWN1cnNpdmUpIHtcbiAgICBjb25zdCBub25SZWN1cnNpdmVSdWxlID0gTm9uUmVjdXJzaXZlUnVsZS5mcm9tUnVsZVJ1bGVOYW1lc0FuZE5vblJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIHJ1bGVOYW1lcywgbm9uUmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICAgIG5vblJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IE5vblJlY3Vyc2l2ZVJ1bGVOYW1lRGVmaW5pdGlvbi5mcm9tTm9uUmVjdXJzaXZlUnVsZShub25SZWN1cnNpdmVSdWxlKSxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgICAgLi4ucmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICAgICBub25SZWN1cnNpdmVSdWxlTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdO1xuXG4gICAgcnVsZS5zZXREZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG5cbiAgICBydWxlcy5wdXNoKG5vblJlY3Vyc2l2ZVJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVSZWN1cnNpdmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGVcbn07XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGUsIHJ1bGVzLCBjb3VudCkge1xuICBsZXQgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gaXNQYXJ0UnVsZU5hbWVQYXJ0KGZpcnN0UGFydCk7XG5cbiAgaWYgKGZpcnN0UGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbiA9PT0gbnVsbCkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihydWxlTmFtZVBhcnQsIGRlZmluaXRpb24sIHJ1bGVOYW1lcywgcnVsZSwgcnVsZXMsIGNvdW50KTtcbiAgICB9XG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbiA9PT0gbnVsbCkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbkZyb21EZWZpbml0aW9uKHJ1bGVOYW1lUGFydCwgZGVmaW5pdGlvbiwgcnVsZU5hbWVzLCBydWxlcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUltbWVkaWF0ZUxlZnRSZWN1cnNpb25Gcm9tRGVmaW5pdGlvbihydWxlTmFtZVBhcnQsIGRlZmluaXRpb24sIHJ1bGVOYW1lcywgcnVsZSwgcnVsZXMsIGNvdW50KSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBmaXJzdFJ1bGVOYW1lID0gZmlyc3QocnVsZU5hbWVzKSxcbiAgICAgICAgcnVsZU5hbWVQYXJ0UnVsZU5hbWUgPSBydWxlTmFtZVBhcnQuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgcnVsZU5hbWVQYXJ0UnVsZU5hbWVSdWxlTmFtZSA9IChydWxlTmFtZVBhcnRSdWxlTmFtZSA9PT0gZmlyc3RSdWxlTmFtZSk7XG5cbiAgaWYgKHJ1bGVOYW1lUGFydFJ1bGVOYW1lUnVsZU5hbWUpIHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZSA9IFJpZ2h0UmVjdXJzaXZlUnVsZS5mcm9tRGVmaW5pdGlvbkFuZFJ1bGVOYW1lKGRlZmluaXRpb24sIHJ1bGVOYW1lLCBydWxlcywgY291bnQpO1xuXG4gICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IFJlY3Vyc2l2ZURlZmluaXRpb24uZnJvbVJ1bGVOYW1lKHJ1bGVOYW1lLCBjb3VudCk7XG5cbiAgICBydWxlcy5wdXNoKHJpZ2h0UmVjdXJzaXZlUnVsZSk7XG4gIH1cblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uRnJvbURlZmluaXRpb24ocnVsZU5hbWVQYXJ0LCBkZWZpbml0aW9uLCBydWxlTmFtZXMsIHJ1bGVzKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBydWxlTmFtZVBhcnRSdWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBuYW1lID0gcnVsZU5hbWVQYXJ0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IGZpbmRSdWxlQnlOYW1lKG5hbWUsIHJ1bGVzKTtcblxuICBpZiAocnVsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJ1bGVSZWN1cnNpdmUgPSBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uRnJvbVJ1bGUocnVsZSwgcnVsZU5hbWVzLCBydWxlcyk7XG5cbiAgICBpZiAocnVsZVJlY3Vyc2l2ZSkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbiA9IGRlZmluaXRpb247IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuIl19