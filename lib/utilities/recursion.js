'use strict';

var necessary = require('necessary');

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    RecursiveDefinition = require('../definition/recursive'),
    NonRecursiveRuleNameDefinition = require('../definition/nonRecursiveRuleName');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart;


function eliminateLeftRecursionFromRule(rule, ruleNames, rules) {
  var ruleName = rule.getName(),
      definitions = rule.getDefinitions(),
      recursiveDefinitions = [],
      nonRecursiveDefinitions = [];

  ruleNames = ruleNames.concat(ruleName);

  definitions.forEach(function (definition, count) {
    var recursiveDefinition = eliminateLeftRecursionFromDefinition(definition, ruleNames, rule, rules, count);

    if (recursiveDefinition === null) {
      var nonRecursiveDefinition = definition; ///

      nonRecursiveDefinitions.push(nonRecursiveDefinition);
    } else {
      recursiveDefinitions.push(recursiveDefinition);
    }
  });

  var recursiveDefinitionsLength = recursiveDefinitions.length,
      ruleRecursive = recursiveDefinitionsLength > 0;

  if (ruleRecursive) {
    var nonRecursiveRule = NonRecursiveRule.fromNonRecursiveDefinitionsAndRuleNames(nonRecursiveDefinitions, ruleNames),
        nonRecursiveRuleNameDefinition = NonRecursiveRuleNameDefinition.fromNonRecursiveRule(nonRecursiveRule),
        _definitions = [].concat(recursiveDefinitions, [nonRecursiveRuleNameDefinition]);

    rule.setDefinitions(_definitions);

    rules.push(nonRecursiveRule);
  }

  return ruleRecursive;
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function eliminateLeftRecursionFromDefinition(definition, ruleNames, rule, rules, count) {
  var recursiveDefinition = null;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rule, rules, count);
    }

    if (recursiveDefinition === null) {
      recursiveDefinition = eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rules);
    }
  }

  return recursiveDefinition;
}

function eliminateImmediateLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rule, rules, count) {
  var recursiveDefinition = null;

  var firstRuleName = first(ruleNames),
      ruleNamePartRuleName = ruleNamePart.getRuleName(),
      ruleNamePartRuleNameRuleName = ruleNamePartRuleName === firstRuleName;

  if (ruleNamePartRuleNameRuleName) {
    var ruleName = rule.getName(),
        rightRecursiveRule = RightRecursiveRule.fromDefinitionAndRuleName(definition, ruleName, rules, count);

    recursiveDefinition = RecursiveDefinition.fromRuleName(ruleName, count);

    rules.push(rightRecursiveRule);
  }

  return recursiveDefinition;
}

function eliminateImplicitLeftRecursionFromDefinition(ruleNamePart, definition, ruleNames, rules) {
  var recursiveDefinition = null;

  var ruleNamePartRuleName = ruleNamePart.getRuleName(),
      name = ruleNamePartRuleName,
      ///
  rule = findRuleByName(name, rules);

  if (rule !== null) {
    var ruleRecursive = eliminateLeftRecursionFromRule(rule, ruleNames, rules);

    if (ruleRecursive) {
      recursiveDefinition = definition; ///
    }
  }

  return recursiveDefinition;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,