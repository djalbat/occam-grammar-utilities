'use strict';

var parsers = require('occam-parsers');

var typeUtilities = require('../utilities/type');

var Parts = parsers.Parts,
    typeFromPart = typeUtilities.typeFromPart,
    typesFromParts = typeUtilities.typesFromParts,
    ChoiceOfPartsPart = Parts.ChoiceOfPartsPart,
    GroupOfPartsPart = Parts.GroupOfPartsPart,
    OneOrMorePartsPart = Parts.OneOrMorePartsPart,
    OptionalPartPart = Parts.OptionalPartPart,
    ZeroOrMorePartsPart = Parts.ZeroOrMorePartsPart,
    RuleNamePart = Parts.RuleNamePart,
    partTypes = typesFromParts([OptionalPartPart, OneOrMorePartsPart, ZeroOrMorePartsPart]),
    partsTypes = typesFromParts([GroupOfPartsPart, ChoiceOfPartsPart]),
    ruleNamePartType = typeFromPart(RuleNamePart);


function ruleNamesFromParts(parts, ruleNames) {
  parts.forEach(function (part) {
    ruleNamesFromPart(part, ruleNames);
  });
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partTerminalPart = part.isTerminalPart(),
      partNonTerminalPart = !partTerminalPart;

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === ruleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

module.exports = {
  ruleNamesFromParts: ruleNamesFromParts,
  isPartRuleNamePart: isPartRuleNamePart
};

function ruleNamesFromPart(part, ruleNames) {
  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part,
        ruleName = ruleNamePart.getRuleName();

    ruleNames.push(ruleName);
  } else {
    var partTerminalPart = part.isTerminalPart(),
        partNonTerminalPart = !partTerminalPart;

    if (partNonTerminalPart) {
      var nonTerminalPart = part,
          ///
      type = nonTerminalPart.getType(),
          typePartType = partTypes.includes(type),
          typePartsType = partsTypes.includes(type);

      if (false) {} else if (typePartType) {
        var partPart = nonTerminalPart,
            ///
        _part = partPart.getPart();

        ruleNamesFromPart(_part, ruleNames);
      } else if (typePartsType) {
        var partsPart = nonTerminalPart,
            ///
        parts = partsPart.getParts();

        ruleNamesFromParts(parts, ruleNames);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsInR5cGVVdGlsaXRpZXMiLCJQYXJ0cyIsInR5cGVGcm9tUGFydCIsInR5cGVzRnJvbVBhcnRzIiwiQ2hvaWNlT2ZQYXJ0c1BhcnQiLCJHcm91cE9mUGFydHNQYXJ0IiwiT25lT3JNb3JlUGFydHNQYXJ0IiwiT3B0aW9uYWxQYXJ0UGFydCIsIlplcm9Pck1vcmVQYXJ0c1BhcnQiLCJSdWxlTmFtZVBhcnQiLCJwYXJ0VHlwZXMiLCJwYXJ0c1R5cGVzIiwicnVsZU5hbWVQYXJ0VHlwZSIsInJ1bGVOYW1lc0Zyb21QYXJ0cyIsInBhcnRzIiwicnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJydWxlTmFtZXNGcm9tUGFydCIsImlzUGFydFJ1bGVOYW1lUGFydCIsInBhcnRSdWxlTmFtZVBhcnQiLCJwYXJ0VGVybWluYWxQYXJ0IiwiaXNUZXJtaW5hbFBhcnQiLCJwYXJ0Tm9uVGVybWluYWxQYXJ0Iiwibm9uVGVybWluYWxQYXJ0IiwidHlwZSIsImdldFR5cGUiLCJ0eXBlUnVsZU5hbWVQYXJ0VHlwZSIsIm5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlTmFtZVBhcnQiLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicHVzaCIsInR5cGVQYXJ0VHlwZSIsImluY2x1ZGVzIiwidHlwZVBhcnRzVHlwZSIsInBhcnRQYXJ0IiwiZ2V0UGFydCIsInBhcnRzUGFydCIsImdldFBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRUEsSUFBTUMsZ0JBQWdCRCxRQUFRLG1CQUFSLENBQXRCOztBQUVNLElBQUVFLEtBQUYsR0FBWUgsT0FBWixDQUFFRyxLQUFGO0FBQUEsSUFDRUMsWUFERixHQUNtQ0YsYUFEbkMsQ0FDRUUsWUFERjtBQUFBLElBQ2dCQyxjQURo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RDtBQUNGO0FBQ0Y7QUFDRiIsImZpbGUiOiJwYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpO1xuXG5jb25zdCB0eXBlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3R5cGUnKTtcblxuY29uc3QgeyBQYXJ0cyB9ID0gcGFyc2VycyxcbiAgICAgIHsgdHlwZUZyb21QYXJ0LCB0eXBlc0Zyb21QYXJ0cyB9ID0gdHlwZVV0aWxpdGllcyxcbiAgICAgIHsgQ2hvaWNlT2ZQYXJ0c1BhcnQsIEdyb3VwT2ZQYXJ0c1BhcnQsIE9uZU9yTW9yZVBhcnRzUGFydCwgT3B0aW9uYWxQYXJ0UGFydCwgWmVyb09yTW9yZVBhcnRzUGFydCwgUnVsZU5hbWVQYXJ0IH0gPSBQYXJ0cyxcbiAgICAgIHBhcnRUeXBlcyA9IHR5cGVzRnJvbVBhcnRzKFsgT3B0aW9uYWxQYXJ0UGFydCwgT25lT3JNb3JlUGFydHNQYXJ0LCBaZXJvT3JNb3JlUGFydHNQYXJ0IF0pLFxuICAgICAgcGFydHNUeXBlcyA9IHR5cGVzRnJvbVBhcnRzKFsgR3JvdXBPZlBhcnRzUGFydCwgQ2hvaWNlT2ZQYXJ0c1BhcnQgXSksXG4gICAgICBydWxlTmFtZVBhcnRUeXBlID0gdHlwZUZyb21QYXJ0KFJ1bGVOYW1lUGFydCk7XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcnVsZU5hbWVzKSB7XG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xuICAgIHJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJ1bGVOYW1lcyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCkge1xuICBsZXQgcGFydFJ1bGVOYW1lUGFydCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRUZXJtaW5hbFBhcnQgPSBwYXJ0LmlzVGVybWluYWxQYXJ0KCksXG4gICAgICAgIHBhcnROb25UZXJtaW5hbFBhcnQgPSAhcGFydFRlcm1pbmFsUGFydDtcblxuICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IHBhcnQsICAvLy9cbiAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICB0eXBlUnVsZU5hbWVQYXJ0VHlwZSA9ICh0eXBlID09PSBydWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgICBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQgPSB0eXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gICAgcGFydFJ1bGVOYW1lUGFydCA9IG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhcnRSdWxlTmFtZVBhcnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydWxlTmFtZXNGcm9tUGFydHMsXG4gIGlzUGFydFJ1bGVOYW1lUGFydFxufTtcblxuZnVuY3Rpb24gcnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcnVsZU5hbWVzKSB7XG4gIGNvbnN0IHBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCk7XG5cbiAgaWYgKHBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBwYXJ0LFxuICAgICAgICAgIHJ1bGVOYW1lID0gcnVsZU5hbWVQYXJ0LmdldFJ1bGVOYW1lKCk7XG5cbiAgICBydWxlTmFtZXMucHVzaChydWxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydFRlcm1pbmFsUGFydCA9IHBhcnQuaXNUZXJtaW5hbFBhcnQoKSxcbiAgICAgICAgICBwYXJ0Tm9uVGVybWluYWxQYXJ0ID0gIXBhcnRUZXJtaW5hbFBhcnQ7XG5cbiAgICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxQYXJ0ID0gcGFydCwgLy8vXG4gICAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICAgIHR5cGVQYXJ0VHlwZSA9IHBhcnRUeXBlcy5pbmNsdWRlcyh0eXBlKSxcbiAgICAgICAgICAgIHR5cGVQYXJ0c1R5cGUgPSBwYXJ0c1R5cGVzLmluY2x1ZGVzKHR5cGUpO1xuXG4gICAgICBpZiAoZmFsc2UpIHtcblxuICAgICAgfSBlbHNlIGlmICh0eXBlUGFydFR5cGUpIHtcbiAgICAgICAgY29uc3QgcGFydFBhcnQgPSBub25UZXJtaW5hbFBhcnQsIC8vL1xuICAgICAgICAgICAgICBwYXJ0ID0gcGFydFBhcnQuZ2V0UGFydCgpO1xuXG4gICAgICAgIHJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJ1bGVOYW1lcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVQYXJ0c1R5cGUpIHtcbiAgICAgICAgY29uc3QgcGFydHNQYXJ0ID0gbm9uVGVybWluYWxQYXJ0LCAvLy9cbiAgICAgICAgICAgICAgcGFydHMgPSBwYXJ0c1BhcnQuZ2V0UGFydHMoKTtcblxuICAgICAgICBydWxlTmFtZXNGcm9tUGFydHMocGFydHMsIHJ1bGVOYW1lcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=