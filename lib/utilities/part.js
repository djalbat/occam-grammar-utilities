'use strict';

var parsers = require('occam-parsers');

var Parts = parsers.Parts,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPart = Parts.OptionalPartPart,
    RuleNamePart = Parts.RuleNamePart;


function ruleNameFromPart(part) {
  var ruleName = null;

  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part; ///

    ruleName = ruleNamePart.getRuleName();
  }

  return ruleName;
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === RuleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

function ruleNamePartFromRuleName(ruleName) {
  var noWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var lookAhead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var ruleNamePart = new RuleNamePart(ruleName, noWhitespace, lookAhead);

  return ruleNamePart;
}

function optionalRuleNamePartPartFromRuleName(ruleName) {
  var ruleNamePart = ruleNamePartFromRuleName(ruleName),
      optionalRuleNamePartPart = new OptionalPartPart(ruleNamePart);

  return optionalRuleNamePartPart;
}

module.exports = {
  ruleNameFromPart: ruleNameFromPart,
  isPartRuleNamePart: isPartRuleNamePart,
  ruleNamePartFromRuleName: ruleNamePartFromRuleName,
  optionalRuleNamePartPartFromRuleName: optionalRuleNamePartPartFromRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIlBhcnRzIiwicGFydFR5cGVzIiwiUnVsZU5hbWVQYXJ0VHlwZSIsIk9wdGlvbmFsUGFydFBhcnQiLCJSdWxlTmFtZVBhcnQiLCJydWxlTmFtZUZyb21QYXJ0IiwicGFydCIsInJ1bGVOYW1lIiwicGFydFJ1bGVOYW1lUGFydCIsImlzUGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydCIsImdldFJ1bGVOYW1lIiwicGFydE5vblRlcm1pbmFsUGFydCIsImlzTm9uVGVybWluYWxQYXJ0Iiwibm9uVGVybWluYWxQYXJ0IiwidHlwZSIsImdldFR5cGUiLCJ0eXBlUnVsZU5hbWVQYXJ0VHlwZSIsIm5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydEZyb21SdWxlTmFtZSIsIm5vV2hpdGVzcGFjZSIsImxvb2tBaGVhZCIsIm9wdGlvbmFsUnVsZU5hbWVQYXJ0UGFydEZyb21SdWxlTmFtZSIsIm9wdGlvbmFsUnVsZU5hbWVQYXJ0UGFydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsZUFBUixDQUFoQjs7SUFFUUMsSyxHQUFxQkYsTyxDQUFyQkUsSztJQUFPQyxTLEdBQWNILE8sQ0FBZEcsUztJQUNQQyxnQixHQUFxQkQsUyxDQUFyQkMsZ0I7SUFDQUMsZ0IsR0FBbUNILEssQ0FBbkNHLGdCO0lBQWtCQyxZLEdBQWlCSixLLENBQWpCSSxZOzs7QUFFMUIsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUlDLFdBQVcsSUFBZjs7QUFFQSxNQUFNQyxtQkFBbUJDLG1CQUFtQkgsSUFBbkIsQ0FBekI7O0FBRUEsTUFBSUUsZ0JBQUosRUFBc0I7QUFDcEIsUUFBTUUsZUFBZUosSUFBckIsQ0FEb0IsQ0FDUTs7QUFFNUJDLGVBQVdHLGFBQWFDLFdBQWIsRUFBWDtBQUNEOztBQUVELFNBQU9KLFFBQVA7QUFDRDs7QUFFRCxTQUFTRSxrQkFBVCxDQUE0QkgsSUFBNUIsRUFBa0M7QUFDaEMsTUFBSUUsbUJBQW1CLEtBQXZCOztBQUVBLE1BQU1JLHNCQUFzQk4sS0FBS08saUJBQUwsRUFBNUI7O0FBRUEsTUFBSUQsbUJBQUosRUFBeUI7QUFDdkIsUUFBTUUsa0JBQWtCUixJQUF4QjtBQUFBLFFBQStCO0FBQ3pCUyxXQUFPRCxnQkFBZ0JFLE9BQWhCLEVBRGI7QUFBQSxRQUVNQyx1QkFBd0JGLFNBQVNiLGdCQUZ2QztBQUFBLFFBR01nQiw4QkFBOEJELG9CQUhwQyxDQUR1QixDQUlvQzs7QUFFM0RULHVCQUFtQlUsMkJBQW5CLENBTnVCLENBTTBCO0FBQ2xEOztBQUVELFNBQU9WLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU1csd0JBQVQsQ0FBa0NaLFFBQWxDLEVBQXFGO0FBQUEsTUFBekNhLFlBQXlDLHVFQUExQixLQUEwQjtBQUFBLE1BQW5CQyxTQUFtQix1RUFBUCxLQUFPOztBQUNuRixNQUFNWCxlQUFlLElBQUlOLFlBQUosQ0FBaUJHLFFBQWpCLEVBQTJCYSxZQUEzQixFQUF5Q0MsU0FBekMsQ0FBckI7O0FBRUEsU0FBT1gsWUFBUDtBQUNEOztBQUVELFNBQVNZLG9DQUFULENBQThDZixRQUE5QyxFQUF3RDtBQUN0RCxNQUFNRyxlQUFlUyx5QkFBeUJaLFFBQXpCLENBQXJCO0FBQUEsTUFDTWdCLDJCQUEyQixJQUFJcEIsZ0JBQUosQ0FBcUJPLFlBQXJCLENBRGpDOztBQUdBLFNBQU9hLHdCQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnBCLG9DQURlO0FBRWZJLHdDQUZlO0FBR2ZVLG9EQUhlO0FBSWZHO0FBSmUsQ0FBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKTtcblxuY29uc3QgeyBQYXJ0cywgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXMsXG4gICAgICB7IE9wdGlvbmFsUGFydFBhcnQsIFJ1bGVOYW1lUGFydCB9ID0gUGFydHM7XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVBhcnQocGFydCkge1xuICBsZXQgcnVsZU5hbWUgPSBudWxsO1xuXG4gIGNvbnN0IHBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCk7XG5cbiAgaWYgKHBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBwYXJ0OyAgLy8vXG5cbiAgICBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5mdW5jdGlvbiBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCkge1xuICBsZXQgcGFydFJ1bGVOYW1lUGFydCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnROb25UZXJtaW5hbFBhcnQgPSBwYXJ0LmlzTm9uVGVybWluYWxQYXJ0KCk7XG5cbiAgaWYgKHBhcnROb25UZXJtaW5hbFBhcnQpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbFBhcnQgPSBwYXJ0LCAgLy8vXG4gICAgICAgICAgdHlwZSA9IG5vblRlcm1pbmFsUGFydC5nZXRUeXBlKCksXG4gICAgICAgICAgdHlwZVJ1bGVOYW1lUGFydFR5cGUgPSAodHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgICAgbm9uVGVybWluYWxQYXJ0UnVsZU5hbWVQYXJ0ID0gdHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICAgIHBhcnRSdWxlTmFtZVBhcnQgPSBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQ7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBwYXJ0UnVsZU5hbWVQYXJ0O1xufVxuXG5mdW5jdGlvbiBydWxlTmFtZVBhcnRGcm9tUnVsZU5hbWUocnVsZU5hbWUsIG5vV2hpdGVzcGFjZSA9IGZhbHNlLCBsb29rQWhlYWQgPSBmYWxzZSkge1xuICBjb25zdCBydWxlTmFtZVBhcnQgPSBuZXcgUnVsZU5hbWVQYXJ0KHJ1bGVOYW1lLCBub1doaXRlc3BhY2UsIGxvb2tBaGVhZCk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lUGFydDtcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWxSdWxlTmFtZVBhcnRQYXJ0RnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHJ1bGVOYW1lUGFydEZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgIG9wdGlvbmFsUnVsZU5hbWVQYXJ0UGFydCA9IG5ldyBPcHRpb25hbFBhcnRQYXJ0KHJ1bGVOYW1lUGFydCk7XG5cbiAgcmV0dXJuIG9wdGlvbmFsUnVsZU5hbWVQYXJ0UGFydDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJ1bGVOYW1lRnJvbVBhcnQsXG4gIGlzUGFydFJ1bGVOYW1lUGFydCxcbiAgcnVsZU5hbWVQYXJ0RnJvbVJ1bGVOYW1lLFxuICBvcHRpb25hbFJ1bGVOYW1lUGFydFBhcnRGcm9tUnVsZU5hbWVcbn07XG4iXX0=