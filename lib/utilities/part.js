'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;
var partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType;


function isPartRecursive(part) {
  var ruleNames = rulesNamesFromPart(part),
      ruleNamesLength = ruleNames.length,
      partRecursive = ruleNamesLength > 0;

  return partRecursive;
}

function ruleNamesFromPart(part) {
  var ruleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var partRecursive = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName(),
            ruleNamesIncludesRuleName = ruleNames.includes(ruleName);

        if (!ruleNamesIncludesRuleName) {
          ruleNames.push(ruleName);
        }
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        ruleNamesFromPart(part, ruleNames);
        break;

      case GroupOfPartsPartType:
      case ChoiceOfPartsPartType:
        {
          var parts = part.getParts();

          partRecursive = parts.some(function (part) {
            ruleNamesFromPart(part, ruleNames);
          });
        }
        break;
    }
  }

  return partRecursive;
}

function isPartLeftRecursive(part) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part),
      partLeftRecursive = leftRecursiveRuleName !== null;

  return partLeftRecursive;
}

function leftRecursiveRuleNameFromPart(part) {
  var leftRecursiveRuleName = null;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName();

        leftRecursiveRuleName = ruleName; ///
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        break;

      case GroupOfPartsPartType:
        {
          var parts = _part.getParts(),
              firstPart = first(parts),
              _part = firstPart; ///

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(_part);
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var _parts = part.getParts();

          _parts.some(function (part) {
            leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

            if (leftRecursiveRuleName !== null) {
              return true;
            }
          });
        }
        break;
    }
  }

  return leftRecursiveRuleName;
}

module.exports = {
  isPartRecursive: isPartRecursive,
  ruleNamesFromPart: ruleNamesFromPart,
  isPartLeftRecursive: isPartLeftRecursive,
  leftRecursiveRuleNameFromPart: leftRecursiveRuleNameFromPart
};

// function ruleNamePartFromRuleName(ruleName, noWhitespace = false, lookAhead = false) {
//   const ruleNamePart = new RuleNamePart(ruleName, noWhitespace, lookAhead);
//
//   return ruleNamePart;
// }
//
// function optionalRuleNamePartPartFromRuleName(ruleName) {
//   const ruleNamePart = ruleNamePartFromRuleName(ruleName),
//       optionalRuleNamePartPart = new OptionalPartPart(ruleNamePart);
//
//   return optionalRuleNamePartPart;
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,