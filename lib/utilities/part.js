'use strict';

var parsers = require('occam-parsers');

var Parts = parsers.Parts,
    partTypes = parsers.partTypes,
    RuleNamePart = Parts.RuleNamePart,
    RuleNamePartType = partTypes.RuleNamePartType;


function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === RuleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

function ruleNamePartFromRuleName(ruleName) {
  var noWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var ruleNamePart = new RuleNamePart(ruleName, noWhitespace);

  return ruleNamePart;
}

module.exports = {
  isPartRuleNamePart: isPartRuleNamePart,
  ruleNamePartFromRuleName: ruleNamePartFromRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIlBhcnRzIiwicGFydFR5cGVzIiwiUnVsZU5hbWVQYXJ0IiwiUnVsZU5hbWVQYXJ0VHlwZSIsImlzUGFydFJ1bGVOYW1lUGFydCIsInBhcnQiLCJwYXJ0UnVsZU5hbWVQYXJ0IiwicGFydE5vblRlcm1pbmFsUGFydCIsImlzTm9uVGVybWluYWxQYXJ0Iiwibm9uVGVybWluYWxQYXJ0IiwidHlwZSIsImdldFR5cGUiLCJ0eXBlUnVsZU5hbWVQYXJ0VHlwZSIsIm5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydEZyb21SdWxlTmFtZSIsInJ1bGVOYW1lIiwibm9XaGl0ZXNwYWNlIiwicnVsZU5hbWVQYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsVUFBVUMsUUFBUSxlQUFSLENBQWhCOztJQUVRQyxLLEdBQXFCRixPLENBQXJCRSxLO0lBQU9DLFMsR0FBY0gsTyxDQUFkRyxTO0lBQ1BDLFksR0FBaUJGLEssQ0FBakJFLFk7SUFDQUMsZ0IsR0FBcUJGLFMsQ0FBckJFLGdCOzs7QUFFUixTQUFTQyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBa0M7QUFDaEMsTUFBSUMsbUJBQW1CLEtBQXZCOztBQUVBLE1BQU1DLHNCQUFzQkYsS0FBS0csaUJBQUwsRUFBNUI7O0FBRUEsTUFBSUQsbUJBQUosRUFBeUI7QUFDdkIsUUFBTUUsa0JBQWtCSixJQUF4QjtBQUFBLFFBQStCO0FBQ3pCSyxXQUFPRCxnQkFBZ0JFLE9BQWhCLEVBRGI7QUFBQSxRQUVNQyx1QkFBd0JGLFNBQVNQLGdCQUZ2QztBQUFBLFFBR01VLDhCQUE4QkQsb0JBSHBDLENBRHVCLENBSW9DOztBQUUzRE4sdUJBQW1CTywyQkFBbkIsQ0FOdUIsQ0FNMEI7QUFDbEQ7O0FBRUQsU0FBT1AsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTUSx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBa0U7QUFBQSxNQUF0QkMsWUFBc0IsdUVBQVAsS0FBTzs7QUFDaEUsTUFBTUMsZUFBZSxJQUFJZixZQUFKLENBQWlCYSxRQUFqQixFQUEyQkMsWUFBM0IsQ0FBckI7O0FBRUEsU0FBT0MsWUFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZmLHdDQURlO0FBRWZVO0FBRmUsQ0FBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKTtcblxuY29uc3QgeyBQYXJ0cywgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnQgfSA9IFBhcnRzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXM7XG5cbmZ1bmN0aW9uIGlzUGFydFJ1bGVOYW1lUGFydChwYXJ0KSB7XG4gIGxldCBwYXJ0UnVsZU5hbWVQYXJ0ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydE5vblRlcm1pbmFsUGFydCA9IHBhcnQuaXNOb25UZXJtaW5hbFBhcnQoKTtcblxuICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IHBhcnQsICAvLy9cbiAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICB0eXBlUnVsZU5hbWVQYXJ0VHlwZSA9ICh0eXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgICBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQgPSB0eXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gICAgcGFydFJ1bGVOYW1lUGFydCA9IG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhcnRSdWxlTmFtZVBhcnQ7XG59XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lUGFydEZyb21SdWxlTmFtZShydWxlTmFtZSwgbm9XaGl0ZXNwYWNlID0gZmFsc2UpIHtcbiAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gbmV3IFJ1bGVOYW1lUGFydChydWxlTmFtZSwgbm9XaGl0ZXNwYWNlKTtcblxuICByZXR1cm4gcnVsZU5hbWVQYXJ0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNQYXJ0UnVsZU5hbWVQYXJ0LFxuICBydWxlTmFtZVBhcnRGcm9tUnVsZU5hbWVcbn07XG4iXX0=