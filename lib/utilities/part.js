"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isPartComplex = isPartComplex;
exports.isPartLookAhead = isPartLookAhead;
exports.ruleNamePartFromRuleName = ruleNamePartFromRuleName;
exports.sequenceOfPartsPartFromParts = sequenceOfPartsPartFromParts;
exports.optionalOneOrMorePartsPartFromPart = optionalOneOrMorePartsPartFromPart;
var _occamParsers = require("occam-parsers");
var RuleNamePartType = _occamParsers.partTypes.RuleNamePartType, ChoiceOfPartsPartType = _occamParsers.partTypes.ChoiceOfPartsPartType, SequenceOfPartsPartType = _occamParsers.partTypes.SequenceOfPartsPartType, OptionalPartPart = _occamParsers.Parts.OptionalPartPart, RuleNamePart = _occamParsers.Parts.RuleNamePart, OneOrMorePartsPart = _occamParsers.Parts.OneOrMorePartsPart, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart;
function isPartComplex(part) {
    var partType = part.getType(), partTypeChoiceOfPartsType = partType === ChoiceOfPartsPartType, partTypeSequenceOfPartsType = partType === SequenceOfPartsPartType, partTypeComplexPartType = partTypeChoiceOfPartsType || partTypeSequenceOfPartsType, partComplex = partTypeComplexPartType; ///
    return partComplex;
}
function isPartLookAhead(part) {
    var partLookAhead = false;
    var partType = part.getType(), partTypeRuleNamePartType = partType === RuleNamePartType, partRuleNamePart = partTypeRuleNamePartType; ///
    if (partRuleNamePart) {
        var ruleNamePart = part; ///
        partLookAhead = ruleNamePart.isLookAhead();
    }
    return partLookAhead;
}
function ruleNamePartFromRuleName(ruleName) {
    var lookAhead = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var ruleNamePart = new RuleNamePart(ruleName, lookAhead);
    return ruleNamePart;
}
function sequenceOfPartsPartFromParts(parts) {
    var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
    return sequenceOfPartsPart;
}
function optionalOneOrMorePartsPartFromPart(part) {
    var oneOrMorePartsPart = new OneOrMorePartsPart(part), optionalOneOrMorePartsPart = new OptionalPartPart(oneOrMorePartsPart);
    return optionalOneOrMorePartsPart;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUGFydHMsIHBhcnRUeXBlcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmNvbnN0IHsgUnVsZU5hbWVQYXJ0VHlwZSwgQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlLCBTZXF1ZW5jZU9mUGFydHNQYXJ0VHlwZSB9ID0gcGFydFR5cGVzLFxuICAgICAgeyBPcHRpb25hbFBhcnRQYXJ0LCBSdWxlTmFtZVBhcnQsIE9uZU9yTW9yZVBhcnRzUGFydCwgU2VxdWVuY2VPZlBhcnRzUGFydCB9ID0gUGFydHM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcnRDb21wbGV4KHBhcnQpIHtcbiAgY29uc3QgcGFydFR5cGUgPSBwYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgcGFydFR5cGVDaG9pY2VPZlBhcnRzVHlwZSA9IChwYXJ0VHlwZSA9PT0gQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlKSxcbiAgICAgICAgcGFydFR5cGVTZXF1ZW5jZU9mUGFydHNUeXBlID0gKHBhcnRUeXBlID09PSBTZXF1ZW5jZU9mUGFydHNQYXJ0VHlwZSksXG4gICAgICAgIHBhcnRUeXBlQ29tcGxleFBhcnRUeXBlID0gcGFydFR5cGVDaG9pY2VPZlBhcnRzVHlwZSB8fCBwYXJ0VHlwZVNlcXVlbmNlT2ZQYXJ0c1R5cGUsXG4gICAgICAgIHBhcnRDb21wbGV4ID0gcGFydFR5cGVDb21wbGV4UGFydFR5cGU7ICAvLy9cblxuICByZXR1cm4gcGFydENvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcnRMb29rQWhlYWQocGFydCkge1xuICBsZXQgcGFydExvb2tBaGVhZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRUeXBlID0gcGFydC5nZXRUeXBlKCksXG4gICAgICAgIHBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChwYXJ0VHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgIHBhcnRSdWxlTmFtZVBhcnQgPSBwYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICBpZiAocGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHBhcnQ7IC8vL1xuXG4gICAgcGFydExvb2tBaGVhZCA9IHJ1bGVOYW1lUGFydC5pc0xvb2tBaGVhZCgpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnRMb29rQWhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZVBhcnRGcm9tUnVsZU5hbWUocnVsZU5hbWUsIGxvb2tBaGVhZCA9IGZhbHNlKSB7XG4gIGNvbnN0IHJ1bGVOYW1lUGFydCA9IG5ldyBSdWxlTmFtZVBhcnQocnVsZU5hbWUsIGxvb2tBaGVhZCk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbmNlT2ZQYXJ0c1BhcnRGcm9tUGFydHMocGFydHMpIHtcbiAgY29uc3Qgc2VxdWVuY2VPZlBhcnRzUGFydCA9IG5ldyBTZXF1ZW5jZU9mUGFydHNQYXJ0KHBhcnRzKTtcblxuICByZXR1cm4gc2VxdWVuY2VPZlBhcnRzUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbmFsT25lT3JNb3JlUGFydHNQYXJ0RnJvbVBhcnQocGFydCkge1xuICBjb25zdCBvbmVPck1vcmVQYXJ0c1BhcnQgPSBuZXcgT25lT3JNb3JlUGFydHNQYXJ0KHBhcnQpLFxuICAgICAgICBvcHRpb25hbE9uZU9yTW9yZVBhcnRzUGFydCA9IG5ldyBPcHRpb25hbFBhcnRQYXJ0KG9uZU9yTW9yZVBhcnRzUGFydCk7XG5cbiAgcmV0dXJuIG9wdGlvbmFsT25lT3JNb3JlUGFydHNQYXJ0O1xufVxuIl0sIm5hbWVzIjpbImlzUGFydENvbXBsZXgiLCJpc1BhcnRMb29rQWhlYWQiLCJydWxlTmFtZVBhcnRGcm9tUnVsZU5hbWUiLCJzZXF1ZW5jZU9mUGFydHNQYXJ0RnJvbVBhcnRzIiwib3B0aW9uYWxPbmVPck1vcmVQYXJ0c1BhcnRGcm9tUGFydCIsIlJ1bGVOYW1lUGFydFR5cGUiLCJwYXJ0VHlwZXMiLCJDaG9pY2VPZlBhcnRzUGFydFR5cGUiLCJTZXF1ZW5jZU9mUGFydHNQYXJ0VHlwZSIsIk9wdGlvbmFsUGFydFBhcnQiLCJQYXJ0cyIsIlJ1bGVOYW1lUGFydCIsIk9uZU9yTW9yZVBhcnRzUGFydCIsIlNlcXVlbmNlT2ZQYXJ0c1BhcnQiLCJwYXJ0IiwicGFydFR5cGUiLCJnZXRUeXBlIiwicGFydFR5cGVDaG9pY2VPZlBhcnRzVHlwZSIsInBhcnRUeXBlU2VxdWVuY2VPZlBhcnRzVHlwZSIsInBhcnRUeXBlQ29tcGxleFBhcnRUeXBlIiwicGFydENvbXBsZXgiLCJwYXJ0TG9va0FoZWFkIiwicGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlIiwicGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydCIsImlzTG9va0FoZWFkIiwicnVsZU5hbWUiLCJsb29rQWhlYWQiLCJwYXJ0cyIsInNlcXVlbmNlT2ZQYXJ0c1BhcnQiLCJvbmVPck1vcmVQYXJ0c1BhcnQiLCJvcHRpb25hbE9uZU9yTW9yZVBhcnRzUGFydCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBT0dBLGFBQWEsR0FBYkEsYUFBYTtRQVViQyxlQUFlLEdBQWZBLGVBQWU7UUFnQmZDLHdCQUF3QixHQUF4QkEsd0JBQXdCO1FBTXhCQyw0QkFBNEIsR0FBNUJBLDRCQUE0QjtRQU01QkMsa0NBQWtDLEdBQWxDQSxrQ0FBa0M7QUEzQ2pCLElBQUEsYUFBZSxXQUFmLGVBQWUsQ0FBQTtBQUVoRCxJQUFRQyxnQkFBZ0IsR0FBcURDLGFBQVMsVUFBQSxDQUE5RUQsZ0JBQWdCLEVBQUVFLHFCQUFxQixHQUE4QkQsYUFBUyxVQUFBLENBQTVEQyxxQkFBcUIsRUFBRUMsdUJBQXVCLEdBQUtGLGFBQVMsVUFBQSxDQUFyQ0UsdUJBQXVCLEVBQ2hFQyxnQkFBZ0IsR0FBNERDLGFBQUssTUFBQSxDQUFqRkQsZ0JBQWdCLEVBQUVFLFlBQVksR0FBOENELGFBQUssTUFBQSxDQUEvREMsWUFBWSxFQUFFQyxrQkFBa0IsR0FBMEJGLGFBQUssTUFBQSxDQUFqREUsa0JBQWtCLEVBQUVDLG1CQUFtQixHQUFLSCxhQUFLLE1BQUEsQ0FBN0JHLG1CQUFtQixBQUFXO0FBRW5GLFNBQVNiLGFBQWEsQ0FBQ2MsSUFBSSxFQUFFO0lBQ2xDLElBQU1DLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxPQUFPLEVBQUUsRUFDekJDLHlCQUF5QixHQUFJRixRQUFRLEtBQUtSLHFCQUFxQixBQUFDLEVBQ2hFVywyQkFBMkIsR0FBSUgsUUFBUSxLQUFLUCx1QkFBdUIsQUFBQyxFQUNwRVcsdUJBQXVCLEdBQUdGLHlCQUF5QixJQUFJQywyQkFBMkIsRUFDbEZFLFdBQVcsR0FBR0QsdUJBQXVCLEFBQUMsRUFBRSxHQUFHO0lBRWpELE9BQU9DLFdBQVcsQ0FBQztDQUNwQjtBQUVNLFNBQVNuQixlQUFlLENBQUNhLElBQUksRUFBRTtJQUNwQyxJQUFJTyxhQUFhLEdBQUcsS0FBSyxBQUFDO0lBRTFCLElBQU1OLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxPQUFPLEVBQUUsRUFDekJNLHdCQUF3QixHQUFJUCxRQUFRLEtBQUtWLGdCQUFnQixBQUFDLEVBQzFEa0IsZ0JBQWdCLEdBQUdELHdCQUF3QixBQUFDLEVBQUUsR0FBRztJQUV2RCxJQUFJQyxnQkFBZ0IsRUFBRTtRQUNwQixJQUFNQyxZQUFZLEdBQUdWLElBQUksQUFBQyxFQUFDLEdBQUc7UUFFOUJPLGFBQWEsR0FBR0csWUFBWSxDQUFDQyxXQUFXLEVBQUUsQ0FBQztLQUM1QztJQUVELE9BQU9KLGFBQWEsQ0FBQztDQUN0QjtBQUVNLFNBQVNuQix3QkFBd0IsQ0FBQ3dCLFFBQVEsRUFBcUI7UUFBbkJDLFNBQVMsR0FBVEEsK0NBQWlCLGtCQUFMLEtBQUs7SUFDbEUsSUFBTUgsWUFBWSxHQUFHLElBQUliLFlBQVksQ0FBQ2UsUUFBUSxFQUFFQyxTQUFTLENBQUMsQUFBQztJQUUzRCxPQUFPSCxZQUFZLENBQUM7Q0FDckI7QUFFTSxTQUFTckIsNEJBQTRCLENBQUN5QixLQUFLLEVBQUU7SUFDbEQsSUFBTUMsbUJBQW1CLEdBQUcsSUFBSWhCLG1CQUFtQixDQUFDZSxLQUFLLENBQUMsQUFBQztJQUUzRCxPQUFPQyxtQkFBbUIsQ0FBQztDQUM1QjtBQUVNLFNBQVN6QixrQ0FBa0MsQ0FBQ1UsSUFBSSxFQUFFO0lBQ3ZELElBQU1nQixrQkFBa0IsR0FBRyxJQUFJbEIsa0JBQWtCLENBQUNFLElBQUksQ0FBQyxFQUNqRGlCLDBCQUEwQixHQUFHLElBQUl0QixnQkFBZ0IsQ0FBQ3FCLGtCQUFrQixDQUFDLEFBQUM7SUFFNUUsT0FBT0MsMEJBQTBCLENBQUM7Q0FDbkMifQ==