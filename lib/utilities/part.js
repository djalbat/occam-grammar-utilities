'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;
var Parts = parsers.Parts,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType,
    OptionalPartPart = Parts.OptionalPartPart,
    RuleNamePart = Parts.RuleNamePart;


function ruleNameFromPart(part) {
  var ruleName = null;

  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part; ///

    ruleName = ruleNamePart.getRuleName();
  }

  return ruleName;
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === RuleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

function isPartLeftRecursive(part) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part),
      partLeftRecursive = leftRecursiveRuleName !== null;

  return partLeftRecursive;
}

function leftRecursiveRuleNameFromPart(part) {
  var leftRecursiveRuleName = null;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName();

        leftRecursiveRuleName = ruleName; ///
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        break;

      case GroupOfPartsPartType:
      case ChoiceOfPartsPartType:
        var parts = part.getParts(),
            firstPart = first(parts);

        part = firstPart; ///

        leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        break;
    }
  }

  return leftRecursiveRuleName;
}

function ruleNamePartFromRuleName(ruleName) {
  var noWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var lookAhead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var ruleNamePart = new RuleNamePart(ruleName, noWhitespace, lookAhead);

  return ruleNamePart;
}

function optionalRuleNamePartPartFromRuleName(ruleName) {
  var ruleNamePart = ruleNamePartFromRuleName(ruleName),
      optionalRuleNamePartPart = new OptionalPartPart(ruleNamePart);

  return optionalRuleNamePartPart;
}

module.exports = {
  ruleNameFromPart: ruleNameFromPart,
  isPartRuleNamePart: isPartRuleNamePart,
  isPartLeftRecursive: isPartLeftRecursive,
  ruleNamePartFromRuleName: ruleNamePartFromRuleName,
  leftRecursiveRuleNameFromPart: leftRecursiveRuleNameFromPart,
  optionalRuleNamePartPartFromRuleName: optionalRuleNamePartPartFromRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,