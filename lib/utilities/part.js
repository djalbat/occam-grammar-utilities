"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isPartComplex = isPartComplex;
exports.isPartLookAhead = isPartLookAhead;
exports.sequenceOfPartsPartFromParts = sequenceOfPartsPartFromParts;
exports.optionalOneOrMorePartsPartFromPart = optionalOneOrMorePartsPartFromPart;
exports.ruleNamePartFromRuleNameAndLookAhead = ruleNamePartFromRuleNameAndLookAhead;
var _occamParsers = require("occam-parsers");
var RuleNamePartType = _occamParsers.partTypes.RuleNamePartType, ChoiceOfPartsPartType = _occamParsers.partTypes.ChoiceOfPartsPartType, SequenceOfPartsPartType = _occamParsers.partTypes.SequenceOfPartsPartType, OptionalPartPart = _occamParsers.Parts.OptionalPartPart, RuleNamePart = _occamParsers.Parts.RuleNamePart, OneOrMorePartsPart = _occamParsers.Parts.OneOrMorePartsPart, SequenceOfPartsPart = _occamParsers.Parts.SequenceOfPartsPart;
function isPartComplex(part) {
    var partType = part.getType(), partTypeChoiceOfPartsType = partType === ChoiceOfPartsPartType, partTypeSequenceOfPartsType = partType === SequenceOfPartsPartType, partTypeComplexPartType = partTypeChoiceOfPartsType || partTypeSequenceOfPartsType, partComplex = partTypeComplexPartType; ///
    return partComplex;
}
function isPartLookAhead(part) {
    var partLookAhead = false;
    var partType = part.getType(), partTypeRuleNamePartType = partType === RuleNamePartType, partRuleNamePart = partTypeRuleNamePartType; ///
    if (partRuleNamePart) {
        var ruleNamePart = part; ///
        partLookAhead = ruleNamePart.isLookAhead();
    }
    return partLookAhead;
}
function sequenceOfPartsPartFromParts(parts) {
    var sequenceOfPartsPart = new SequenceOfPartsPart(parts);
    return sequenceOfPartsPart;
}
function optionalOneOrMorePartsPartFromPart(part) {
    var oneOrMorePartsPart = new OneOrMorePartsPart(part), optionalOneOrMorePartsPart = new OptionalPartPart(oneOrMorePartsPart);
    return optionalOneOrMorePartsPart;
}
function ruleNamePartFromRuleNameAndLookAhead(ruleName, lookAhead) {
    var ruleNamePart = new RuleNamePart(ruleName, lookAhead);
    return ruleNamePart;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUGFydHMsIHBhcnRUeXBlcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmNvbnN0IHsgUnVsZU5hbWVQYXJ0VHlwZSwgQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlLCBTZXF1ZW5jZU9mUGFydHNQYXJ0VHlwZSB9ID0gcGFydFR5cGVzLFxuICAgICAgeyBPcHRpb25hbFBhcnRQYXJ0LCBSdWxlTmFtZVBhcnQsIE9uZU9yTW9yZVBhcnRzUGFydCwgU2VxdWVuY2VPZlBhcnRzUGFydCB9ID0gUGFydHM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcnRDb21wbGV4KHBhcnQpIHtcbiAgY29uc3QgcGFydFR5cGUgPSBwYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgcGFydFR5cGVDaG9pY2VPZlBhcnRzVHlwZSA9IChwYXJ0VHlwZSA9PT0gQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlKSxcbiAgICAgICAgcGFydFR5cGVTZXF1ZW5jZU9mUGFydHNUeXBlID0gKHBhcnRUeXBlID09PSBTZXF1ZW5jZU9mUGFydHNQYXJ0VHlwZSksXG4gICAgICAgIHBhcnRUeXBlQ29tcGxleFBhcnRUeXBlID0gcGFydFR5cGVDaG9pY2VPZlBhcnRzVHlwZSB8fCBwYXJ0VHlwZVNlcXVlbmNlT2ZQYXJ0c1R5cGUsXG4gICAgICAgIHBhcnRDb21wbGV4ID0gcGFydFR5cGVDb21wbGV4UGFydFR5cGU7ICAvLy9cblxuICByZXR1cm4gcGFydENvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcnRMb29rQWhlYWQocGFydCkge1xuICBsZXQgcGFydExvb2tBaGVhZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRUeXBlID0gcGFydC5nZXRUeXBlKCksXG4gICAgICAgIHBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChwYXJ0VHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgIHBhcnRSdWxlTmFtZVBhcnQgPSBwYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICBpZiAocGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHBhcnQ7IC8vL1xuXG4gICAgcGFydExvb2tBaGVhZCA9IHJ1bGVOYW1lUGFydC5pc0xvb2tBaGVhZCgpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnRMb29rQWhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZU9mUGFydHNQYXJ0RnJvbVBhcnRzKHBhcnRzKSB7XG4gIGNvbnN0IHNlcXVlbmNlT2ZQYXJ0c1BhcnQgPSBuZXcgU2VxdWVuY2VPZlBhcnRzUGFydChwYXJ0cyk7XG5cbiAgcmV0dXJuIHNlcXVlbmNlT2ZQYXJ0c1BhcnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcHRpb25hbE9uZU9yTW9yZVBhcnRzUGFydEZyb21QYXJ0KHBhcnQpIHtcbiAgY29uc3Qgb25lT3JNb3JlUGFydHNQYXJ0ID0gbmV3IE9uZU9yTW9yZVBhcnRzUGFydChwYXJ0KSxcbiAgICAgICAgb3B0aW9uYWxPbmVPck1vcmVQYXJ0c1BhcnQgPSBuZXcgT3B0aW9uYWxQYXJ0UGFydChvbmVPck1vcmVQYXJ0c1BhcnQpO1xuXG4gIHJldHVybiBvcHRpb25hbE9uZU9yTW9yZVBhcnRzUGFydDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lUGFydEZyb21SdWxlTmFtZUFuZExvb2tBaGVhZChydWxlTmFtZSwgbG9va0FoZWFkKSB7XG4gIGNvbnN0IHJ1bGVOYW1lUGFydCA9IG5ldyBSdWxlTmFtZVBhcnQocnVsZU5hbWUsIGxvb2tBaGVhZCk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lUGFydDtcbn1cbiJdLCJuYW1lcyI6WyJpc1BhcnRDb21wbGV4IiwiaXNQYXJ0TG9va0FoZWFkIiwic2VxdWVuY2VPZlBhcnRzUGFydEZyb21QYXJ0cyIsIm9wdGlvbmFsT25lT3JNb3JlUGFydHNQYXJ0RnJvbVBhcnQiLCJydWxlTmFtZVBhcnRGcm9tUnVsZU5hbWVBbmRMb29rQWhlYWQiLCJSdWxlTmFtZVBhcnRUeXBlIiwicGFydFR5cGVzIiwiQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlIiwiU2VxdWVuY2VPZlBhcnRzUGFydFR5cGUiLCJPcHRpb25hbFBhcnRQYXJ0IiwiUGFydHMiLCJSdWxlTmFtZVBhcnQiLCJPbmVPck1vcmVQYXJ0c1BhcnQiLCJTZXF1ZW5jZU9mUGFydHNQYXJ0IiwicGFydCIsInBhcnRUeXBlIiwiZ2V0VHlwZSIsInBhcnRUeXBlQ2hvaWNlT2ZQYXJ0c1R5cGUiLCJwYXJ0VHlwZVNlcXVlbmNlT2ZQYXJ0c1R5cGUiLCJwYXJ0VHlwZUNvbXBsZXhQYXJ0VHlwZSIsInBhcnRDb21wbGV4IiwicGFydExvb2tBaGVhZCIsInBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSIsInBhcnRSdWxlTmFtZVBhcnQiLCJydWxlTmFtZVBhcnQiLCJpc0xvb2tBaGVhZCIsInBhcnRzIiwic2VxdWVuY2VPZlBhcnRzUGFydCIsIm9uZU9yTW9yZVBhcnRzUGFydCIsIm9wdGlvbmFsT25lT3JNb3JlUGFydHNQYXJ0IiwicnVsZU5hbWUiLCJsb29rQWhlYWQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQU9HQSxhQUFhLEdBQWJBLGFBQWE7UUFVYkMsZUFBZSxHQUFmQSxlQUFlO1FBZ0JmQyw0QkFBNEIsR0FBNUJBLDRCQUE0QjtRQU01QkMsa0NBQWtDLEdBQWxDQSxrQ0FBa0M7UUFPbENDLG9DQUFvQyxHQUFwQ0Esb0NBQW9DO0FBNUNuQixJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFFaEQsSUFBUUMsZ0JBQWdCLEdBQXFEQyxhQUFTLFVBQUEsQ0FBOUVELGdCQUFnQixFQUFFRSxxQkFBcUIsR0FBOEJELGFBQVMsVUFBQSxDQUE1REMscUJBQXFCLEVBQUVDLHVCQUF1QixHQUFLRixhQUFTLFVBQUEsQ0FBckNFLHVCQUF1QixFQUNoRUMsZ0JBQWdCLEdBQTREQyxhQUFLLE1BQUEsQ0FBakZELGdCQUFnQixFQUFFRSxZQUFZLEdBQThDRCxhQUFLLE1BQUEsQ0FBL0RDLFlBQVksRUFBRUMsa0JBQWtCLEdBQTBCRixhQUFLLE1BQUEsQ0FBakRFLGtCQUFrQixFQUFFQyxtQkFBbUIsR0FBS0gsYUFBSyxNQUFBLENBQTdCRyxtQkFBbUIsQUFBVztBQUVuRixTQUFTYixhQUFhLENBQUNjLElBQUksRUFBRTtJQUNsQyxJQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTyxFQUFFLEVBQ3pCQyx5QkFBeUIsR0FBSUYsUUFBUSxLQUFLUixxQkFBcUIsQUFBQyxFQUNoRVcsMkJBQTJCLEdBQUlILFFBQVEsS0FBS1AsdUJBQXVCLEFBQUMsRUFDcEVXLHVCQUF1QixHQUFHRix5QkFBeUIsSUFBSUMsMkJBQTJCLEVBQ2xGRSxXQUFXLEdBQUdELHVCQUF1QixBQUFDLEVBQUUsR0FBRztJQUVqRCxPQUFPQyxXQUFXLENBQUM7Q0FDcEI7QUFFTSxTQUFTbkIsZUFBZSxDQUFDYSxJQUFJLEVBQUU7SUFDcEMsSUFBSU8sYUFBYSxHQUFHLEtBQUssQUFBQztJQUUxQixJQUFNTixRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTyxFQUFFLEVBQ3pCTSx3QkFBd0IsR0FBSVAsUUFBUSxLQUFLVixnQkFBZ0IsQUFBQyxFQUMxRGtCLGdCQUFnQixHQUFHRCx3QkFBd0IsQUFBQyxFQUFFLEdBQUc7SUFFdkQsSUFBSUMsZ0JBQWdCLEVBQUU7UUFDcEIsSUFBTUMsWUFBWSxHQUFHVixJQUFJLEFBQUMsRUFBQyxHQUFHO1FBRTlCTyxhQUFhLEdBQUdHLFlBQVksQ0FBQ0MsV0FBVyxFQUFFLENBQUM7S0FDNUM7SUFFRCxPQUFPSixhQUFhLENBQUM7Q0FDdEI7QUFFTSxTQUFTbkIsNEJBQTRCLENBQUN3QixLQUFLLEVBQUU7SUFDbEQsSUFBTUMsbUJBQW1CLEdBQUcsSUFBSWQsbUJBQW1CLENBQUNhLEtBQUssQ0FBQyxBQUFDO0lBRTNELE9BQU9DLG1CQUFtQixDQUFDO0NBQzVCO0FBRU0sU0FBU3hCLGtDQUFrQyxDQUFDVyxJQUFJLEVBQUU7SUFDdkQsSUFBTWMsa0JBQWtCLEdBQUcsSUFBSWhCLGtCQUFrQixDQUFDRSxJQUFJLENBQUMsRUFDakRlLDBCQUEwQixHQUFHLElBQUlwQixnQkFBZ0IsQ0FBQ21CLGtCQUFrQixDQUFDLEFBQUM7SUFFNUUsT0FBT0MsMEJBQTBCLENBQUM7Q0FDbkM7QUFFTSxTQUFTekIsb0NBQW9DLENBQUMwQixRQUFRLEVBQUVDLFNBQVMsRUFBRTtJQUN4RSxJQUFNUCxZQUFZLEdBQUcsSUFBSWIsWUFBWSxDQUFDbUIsUUFBUSxFQUFFQyxTQUFTLENBQUMsQUFBQztJQUUzRCxPQUFPUCxZQUFZLENBQUM7Q0FDckIifQ==