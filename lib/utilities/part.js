'use strict';

var parsers = require('occam-parsers');

var typeUtilities = require('../utilities/type');

var Parts = parsers.Parts,
    typesFromParts = typeUtilities.typesFromParts,
    ChoiceOfPartsPart = Parts.ChoiceOfPartsPart,
    GroupOfPartsPart = Parts.GroupOfPartsPart,
    OneOrMorePartsPart = Parts.OneOrMorePartsPart,
    OptionalPartPart = Parts.OptionalPartPart,
    ZeroOrMorePartsPart = Parts.ZeroOrMorePartsPart,
    RuleNamePart = Parts.RuleNamePart,
    partsTypes = typesFromParts([GroupOfPartsPart, ChoiceOfPartsPart]),
    partTypes = typesFromParts([OptionalPartPart, OneOrMorePartsPart, ZeroOrMorePartsPart]),
    type = RuleNamePart.type,
    ruleNamePartType = type; ///

function ruleNamesFromParts(parts, ruleNames) {
  parts.forEach(function (part) {
    ruleNamesFromPart(part, ruleNames);
  });
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partTerminalPart = part.isTerminalPart(),
      partNonTerminalPart = !partTerminalPart;

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    _type = nonTerminalPart.getType(),
        typeRuleNamePartType = _type === ruleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

module.exports = {
  ruleNamesFromParts: ruleNamesFromParts,
  isPartRuleNamePart: isPartRuleNamePart
};

function ruleNamesFromPart(part, ruleNames) {
  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part,
        ruleName = ruleNamePart.getRuleName();

    ruleNames.push(ruleName);
  } else {
    var partTerminalPart = part.isTerminalPart(),
        partNonTerminalPart = !partTerminalPart;

    if (partNonTerminalPart) {
      var nonTerminalPart = part,
          ///
      _type2 = nonTerminalPart.getType(),
          typePartType = partTypes.includes(_type2),
          typePartsType = partsTypes.includes(_type2);

      if (false) {} else if (typePartType) {
        var partPart = nonTerminalPart,
            ///
        _part = partPart.getPart();

        ruleNamesFromPart(_part, ruleNames);
      } else if (typePartsType) {
        var partsPart = nonTerminalPart,
            ///
        parts = partsPart.getParts();

        ruleNamesFromParts(parts, ruleNames);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsInR5cGVVdGlsaXRpZXMiLCJQYXJ0cyIsInR5cGVzRnJvbVBhcnRzIiwiQ2hvaWNlT2ZQYXJ0c1BhcnQiLCJHcm91cE9mUGFydHNQYXJ0IiwiT25lT3JNb3JlUGFydHNQYXJ0IiwiT3B0aW9uYWxQYXJ0UGFydCIsIlplcm9Pck1vcmVQYXJ0c1BhcnQiLCJSdWxlTmFtZVBhcnQiLCJwYXJ0c1R5cGVzIiwicGFydFR5cGVzIiwidHlwZSIsInJ1bGVOYW1lUGFydFR5cGUiLCJydWxlTmFtZXNGcm9tUGFydHMiLCJwYXJ0cyIsInJ1bGVOYW1lcyIsImZvckVhY2giLCJwYXJ0IiwicnVsZU5hbWVzRnJvbVBhcnQiLCJpc1BhcnRSdWxlTmFtZVBhcnQiLCJwYXJ0UnVsZU5hbWVQYXJ0IiwicGFydFRlcm1pbmFsUGFydCIsImlzVGVybWluYWxQYXJ0IiwicGFydE5vblRlcm1pbmFsUGFydCIsIm5vblRlcm1pbmFsUGFydCIsImdldFR5cGUiLCJ0eXBlUnVsZU5hbWVQYXJ0VHlwZSIsIm5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlTmFtZVBhcnQiLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicHVzaCIsInR5cGVQYXJ0VHlwZSIsImluY2x1ZGVzIiwidHlwZVBhcnRzVHlwZSIsInBhcnRQYXJ0IiwiZ2V0UGFydCIsInBhcnRzUGFydCIsImdldFBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRUEsSUFBTUMsZ0JBQWdCRCxRQUFRLG1CQUFSLENBQXRCOztBQUVNLElBQUVFLEtBQUYsR0FBWUgsT0FBWixDQUFFRyxLQUFGO0FBQUEsSUFDRUMsY0FERixHQUNxQkYsYUFEckIsQ0FDRUUsY0FERjtBQUFBLElBRUVDLGlCQUZGLEdBRW1IRixLQUZuSCxD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ImZpbGUiOiJwYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpO1xuXG5jb25zdCB0eXBlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3R5cGUnKTtcblxuY29uc3QgeyBQYXJ0cyB9ID0gcGFyc2VycyxcbiAgICAgIHsgdHlwZXNGcm9tUGFydHMgfSA9IHR5cGVVdGlsaXRpZXMsXG4gICAgICB7IENob2ljZU9mUGFydHNQYXJ0LCBHcm91cE9mUGFydHNQYXJ0LCBPbmVPck1vcmVQYXJ0c1BhcnQsIE9wdGlvbmFsUGFydFBhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQsIFJ1bGVOYW1lUGFydCB9ID0gUGFydHMsXG4gICAgICBwYXJ0c1R5cGVzID0gdHlwZXNGcm9tUGFydHMoW1xuICAgICAgICBHcm91cE9mUGFydHNQYXJ0LFxuICAgICAgICBDaG9pY2VPZlBhcnRzUGFydFxuICAgICAgXSksXG4gICAgICBwYXJ0VHlwZXMgPSB0eXBlc0Zyb21QYXJ0cyhbXG4gICAgICAgIE9wdGlvbmFsUGFydFBhcnQsXG4gICAgICAgIE9uZU9yTW9yZVBhcnRzUGFydCxcbiAgICAgICAgWmVyb09yTW9yZVBhcnRzUGFydFxuICAgICAgXSksXG4gICAgICB7IHR5cGUgfSA9IFJ1bGVOYW1lUGFydCxcbiAgICAgIHJ1bGVOYW1lUGFydFR5cGUgPSB0eXBlOyAgLy8vXG5cbmZ1bmN0aW9uIHJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcnVsZU5hbWVzKSB7XG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xuICAgIHJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJ1bGVOYW1lcyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCkge1xuICBsZXQgcGFydFJ1bGVOYW1lUGFydCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRUZXJtaW5hbFBhcnQgPSBwYXJ0LmlzVGVybWluYWxQYXJ0KCksXG4gICAgICAgIHBhcnROb25UZXJtaW5hbFBhcnQgPSAhcGFydFRlcm1pbmFsUGFydDtcblxuICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IHBhcnQsICAvLy9cbiAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICB0eXBlUnVsZU5hbWVQYXJ0VHlwZSA9ICh0eXBlID09PSBydWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgICBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQgPSB0eXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gICAgcGFydFJ1bGVOYW1lUGFydCA9IG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhcnRSdWxlTmFtZVBhcnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydWxlTmFtZXNGcm9tUGFydHMsXG4gIGlzUGFydFJ1bGVOYW1lUGFydFxufTtcblxuZnVuY3Rpb24gcnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcnVsZU5hbWVzKSB7XG4gIGNvbnN0IHBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCk7XG5cbiAgaWYgKHBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBwYXJ0LFxuICAgICAgICAgIHJ1bGVOYW1lID0gcnVsZU5hbWVQYXJ0LmdldFJ1bGVOYW1lKCk7XG5cbiAgICBydWxlTmFtZXMucHVzaChydWxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydFRlcm1pbmFsUGFydCA9IHBhcnQuaXNUZXJtaW5hbFBhcnQoKSxcbiAgICAgICAgICBwYXJ0Tm9uVGVybWluYWxQYXJ0ID0gIXBhcnRUZXJtaW5hbFBhcnQ7XG5cbiAgICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxQYXJ0ID0gcGFydCwgLy8vXG4gICAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICAgIHR5cGVQYXJ0VHlwZSA9IHBhcnRUeXBlcy5pbmNsdWRlcyh0eXBlKSxcbiAgICAgICAgICAgIHR5cGVQYXJ0c1R5cGUgPSBwYXJ0c1R5cGVzLmluY2x1ZGVzKHR5cGUpO1xuXG4gICAgICBpZiAoZmFsc2UpIHtcblxuICAgICAgfSBlbHNlIGlmICh0eXBlUGFydFR5cGUpIHtcbiAgICAgICAgY29uc3QgcGFydFBhcnQgPSBub25UZXJtaW5hbFBhcnQsIC8vL1xuICAgICAgICAgICAgICBwYXJ0ID0gcGFydFBhcnQuZ2V0UGFydCgpO1xuXG4gICAgICAgIHJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJ1bGVOYW1lcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVQYXJ0c1R5cGUpIHtcbiAgICAgICAgY29uc3QgcGFydHNQYXJ0ID0gbm9uVGVybWluYWxQYXJ0LCAvLy9cbiAgICAgICAgICAgICAgcGFydHMgPSBwYXJ0c1BhcnQuZ2V0UGFydHMoKTtcblxuICAgICAgICBydWxlTmFtZXNGcm9tUGFydHMocGFydHMsIHJ1bGVOYW1lcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=