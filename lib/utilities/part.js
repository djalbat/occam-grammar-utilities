'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;
var partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType;


function isPartRecursive(part) {
  var recursiveRuleNames = recursiveRuleNamesFromPart(part),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      partRecursive = recursiveRuleNamesLength > 0;

  return partRecursive;
}

function isPartLeftRecursive(part) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part),
      partLeftRecursive = leftRecursiveRuleName !== null;

  return partLeftRecursive;
}

function recursiveRuleNamesFromPart(part) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var partRecursive = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName(),
            recursiveRuleNamesIncludesRuleName = recursiveRuleNames.includes(ruleName);

        if (!recursiveRuleNamesIncludesRuleName) {
          recursiveRuleNames.push(ruleName);
        }
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        recursiveRuleNamesFromPart(part, recursiveRuleNames);
        break;

      case GroupOfPartsPartType:
      case ChoiceOfPartsPartType:
        {
          var parts = part.getParts();

          partRecursive = parts.some(function (part) {
            recursiveRuleNamesFromPart(part, ruleNames);
          });
        }
        break;
    }
  }

  return partRecursive;
}

function leftRecursiveRuleNameFromPart(part) {
  var leftRecursiveRuleName = null;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName();

        leftRecursiveRuleName = ruleName; ///
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        break;

      case GroupOfPartsPartType:
        {
          var parts = _part.getParts(),
              firstPart = first(parts),
              _part = firstPart; ///

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(_part);
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var _parts = part.getParts();

          _parts.some(function (part) {
            leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

            if (leftRecursiveRuleName !== null) {
              return true;
            }
          });
        }
        break;
    }
  }

  return leftRecursiveRuleName;
}

module.exports = {
  isPartRecursive: isPartRecursive,
  isPartLeftRecursive: isPartLeftRecursive,
  recursiveRuleNamesFromPart: recursiveRuleNamesFromPart,
  leftRecursiveRuleNameFromPart: leftRecursiveRuleNameFromPart
};

// function ruleNamePartFromRuleName(ruleName, noWhitespace = false, lookAhead = false) {
//   const ruleNamePart = new RuleNamePart(ruleName, noWhitespace, lookAhead);
//
//   return ruleNamePart;
// }
//
// function optionalRuleNamePartPartFromRuleName(ruleName) {
//   const ruleNamePart = ruleNamePartFromRuleName(ruleName),
//       optionalRuleNamePartPart = new OptionalPartPart(ruleNamePart);
//
//   return optionalRuleNamePartPart;
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJwYXJ0VHlwZXMiLCJSdWxlTmFtZVBhcnRUeXBlIiwiT3B0aW9uYWxQYXJ0UGFydFR5cGUiLCJHcm91cE9mUGFydHNQYXJ0VHlwZSIsIkNob2ljZU9mUGFydHNQYXJ0VHlwZSIsIk9uZU9yTW9yZVBhcnRzUGFydFR5cGUiLCJaZXJvT3JNb3JlUGFydHNQYXJ0VHlwZSIsImlzUGFydFJlY3Vyc2l2ZSIsInBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImxlbmd0aCIsInBhcnRSZWN1cnNpdmUiLCJpc1BhcnRMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQiLCJwYXJ0TGVmdFJlY3Vyc2l2ZSIsInBhcnROb25UZXJtaW5hbFBhcnQiLCJpc05vblRlcm1pbmFsUGFydCIsInR5cGUiLCJnZXRUeXBlIiwicnVsZU5hbWVQYXJ0IiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUiLCJpbmNsdWRlcyIsInB1c2giLCJnZXRQYXJ0IiwicGFydHMiLCJnZXRQYXJ0cyIsInNvbWUiLCJydWxlTmFtZXMiLCJmaXJzdFBhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBQXZCOztJQUVRRSxLLEdBQVVELGMsQ0FBVkMsSztBQUVGLElBQUVDLFNBQUYsR0FBZ0JKLE9BQWhCLENBQUVJLFNBQUY7QUFBQSxJQUNFQyxnQkFERixHQU04QkQsU0FO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RyxZQUFZbEMsTUFBTThCLEtBQU4sQ0FEbEI7QUFBQSxjQUVNckIsUUFBT3lCLFNBRmIsQ0FEd0IsQ0FHQTs7QUFFeEJsQixrQ0FBd0JDLDhCQUE4QlIsS0FBOUIsQ0FBeEI7QUFDRDtBQUNEOztBQUVGLFdBQUtKLHFCQUFMO0FBQTZCO0FBQ3pCLGNBQU15QixTQUFRckIsS0FBS3NCLFFBQUwsRUFBZDs7QUFFQUQsaUJBQU1FLElBQU4sQ0FBVyxVQUFDdkIsSUFBRCxFQUFVO0FBQ25CTyxvQ0FBd0JDLDhCQUE4QlIsSUFBOUIsQ0FBeEI7O0FBRUEsZ0JBQUlPLDBCQUEwQixJQUE5QixFQUFvQztBQUNsQyxxQkFBTyxJQUFQO0FBQ0Q7QUFDRixXQU5EO0FBT0Q7QUFDRDtBQXBDSjtBQXNDRDs7QUFFRCxTQUFPQSxxQkFBUDtBQUNEOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmNUIsa0NBRGU7QUFFZk8sMENBRmU7QUFHZkosd0RBSGU7QUFJZk07QUFKZSxDQUFqQjs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKTtcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNvbnN0IHsgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlLFxuICAgICAgICBPcHRpb25hbFBhcnRQYXJ0VHlwZSxcbiAgICAgICAgR3JvdXBPZlBhcnRzUGFydFR5cGUsXG4gICAgICAgIENob2ljZU9mUGFydHNQYXJ0VHlwZSxcbiAgICAgICAgT25lT3JNb3JlUGFydHNQYXJ0VHlwZSxcbiAgICAgICAgWmVyb09yTW9yZVBhcnRzUGFydFR5cGUgfSA9IHBhcnRUeXBlcztcblxuZnVuY3Rpb24gaXNQYXJ0UmVjdXJzaXZlKHBhcnQpIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IHJlY3Vyc2l2ZVJ1bGVOYW1lcy5sZW5ndGgsXG4gICAgICAgIHBhcnRSZWN1cnNpdmUgPSAocmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIHBhcnRSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIGlzUGFydExlZnRSZWN1cnNpdmUocGFydCkge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUGFydChwYXJ0KSxcbiAgICAgICAgcGFydExlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lICE9PSBudWxsKTtcblxuICByZXR1cm4gcGFydExlZnRSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGxldCBwYXJ0UmVjdXJzaXZlID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydE5vblRlcm1pbmFsUGFydCA9IHBhcnQuaXNOb25UZXJtaW5hbFBhcnQoKTtcblxuICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IHR5cGUgPSBwYXJ0LmdldFR5cGUoKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBSdWxlTmFtZVBhcnRUeXBlIDpcbiAgICAgICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gcGFydCwgIC8vL1xuICAgICAgICAgICAgICBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNJbmNsdWRlc1J1bGVOYW1lID0gcmVjdXJzaXZlUnVsZU5hbWVzLmluY2x1ZGVzKHJ1bGVOYW1lKTtcblxuICAgICAgICBpZiAoIXJlY3Vyc2l2ZVJ1bGVOYW1lc0luY2x1ZGVzUnVsZU5hbWUpIHtcbiAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMucHVzaChydWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgT3B0aW9uYWxQYXJ0UGFydFR5cGUgOlxuICAgICAgY2FzZSBPbmVPck1vcmVQYXJ0c1BhcnRUeXBlIDpcbiAgICAgIGNhc2UgWmVyb09yTW9yZVBhcnRzUGFydFR5cGUgOlxuICAgICAgICBwYXJ0ID0gcGFydC5nZXRQYXJ0KCk7ICAvLy9cblxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCByZWN1cnNpdmVSdWxlTmFtZXMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBHcm91cE9mUGFydHNQYXJ0VHlwZSA6XG4gICAgICBjYXNlIENob2ljZU9mUGFydHNQYXJ0VHlwZSA6IHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBhcnQuZ2V0UGFydHMoKTtcblxuICAgICAgICAgIHBhcnRSZWN1cnNpdmUgPSBwYXJ0cy5zb21lKChwYXJ0KSA9PiB7XG4gICAgICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBydWxlTmFtZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0UmVjdXJzaXZlO1xufVxuXG5mdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUGFydChwYXJ0KSB7XG4gIGxldCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBudWxsO1xuXG4gIGNvbnN0IHBhcnROb25UZXJtaW5hbFBhcnQgPSBwYXJ0LmlzTm9uVGVybWluYWxQYXJ0KCk7XG5cbiAgaWYgKHBhcnROb25UZXJtaW5hbFBhcnQpIHtcbiAgICBjb25zdCB0eXBlID0gcGFydC5nZXRUeXBlKCk7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUnVsZU5hbWVQYXJ0VHlwZSA6XG4gICAgICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHBhcnQsICAvLy9cbiAgICAgICAgICAgICAgcnVsZU5hbWUgPSBydWxlTmFtZVBhcnQuZ2V0UnVsZU5hbWUoKTtcblxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBydWxlTmFtZTsgLy8vXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIE9wdGlvbmFsUGFydFBhcnRUeXBlIDpcbiAgICAgIGNhc2UgT25lT3JNb3JlUGFydHNQYXJ0VHlwZSA6XG4gICAgICBjYXNlIFplcm9Pck1vcmVQYXJ0c1BhcnRUeXBlIDpcbiAgICAgICAgcGFydCA9IHBhcnQuZ2V0UGFydCgpOyAgLy8vXG5cbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQocGFydCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEdyb3VwT2ZQYXJ0c1BhcnRUeXBlIDoge1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gcGFydC5nZXRQYXJ0cygpLFxuICAgICAgICAgICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0KHBhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIENob2ljZU9mUGFydHNQYXJ0VHlwZSA6IHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBhcnQuZ2V0UGFydHMoKTtcblxuICAgICAgICAgIHBhcnRzLnNvbWUoKHBhcnQpID0+IHtcbiAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0KHBhcnQpO1xuXG4gICAgICAgICAgICBpZiAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1BhcnRSZWN1cnNpdmUsXG4gIGlzUGFydExlZnRSZWN1cnNpdmUsXG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0LFxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUGFydFxufTtcblxuLy8gZnVuY3Rpb24gcnVsZU5hbWVQYXJ0RnJvbVJ1bGVOYW1lKHJ1bGVOYW1lLCBub1doaXRlc3BhY2UgPSBmYWxzZSwgbG9va0FoZWFkID0gZmFsc2UpIHtcbi8vICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gbmV3IFJ1bGVOYW1lUGFydChydWxlTmFtZSwgbm9XaGl0ZXNwYWNlLCBsb29rQWhlYWQpO1xuLy9cbi8vICAgcmV0dXJuIHJ1bGVOYW1lUGFydDtcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBvcHRpb25hbFJ1bGVOYW1lUGFydFBhcnRGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbi8vICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gcnVsZU5hbWVQYXJ0RnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbi8vICAgICAgIG9wdGlvbmFsUnVsZU5hbWVQYXJ0UGFydCA9IG5ldyBPcHRpb25hbFBhcnRQYXJ0KHJ1bGVOYW1lUGFydCk7XG4vL1xuLy8gICByZXR1cm4gb3B0aW9uYWxSdWxlTmFtZVBhcnRQYXJ0O1xuLy8gfVxuIl19