'use strict';

var parsers = require('occam-parsers');

var partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType,
    partPartTypes = [OptionalPartPartType, OneOrMorePartsPartType, ZeroOrMorePartsPartType],
    partsPartTypes = [GroupOfPartsPartType, ChoiceOfPartsPartType];


function partRuleNamesFromParts(parts, partRuleNames) {
  parts.forEach(function (part) {
    partRuleNamesFromPart(part, partRuleNames);
  });
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partTerminalPart = part.isTerminalPart(),
      partNonTerminalPart = !partTerminalPart;

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === RuleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

module.exports = {
  partRuleNamesFromParts: partRuleNamesFromParts,
  isPartRuleNamePart: isPartRuleNamePart
};

function partRuleNamesFromPart(part, partRuleNames) {
  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part,
        ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleName = ruleNamePartRuleName; ///

    partRuleNames.push(ruleName);
  } else {
    var partTerminalPart = part.isTerminalPart(),
        partNonTerminalPart = !partTerminalPart;

    if (partNonTerminalPart) {
      var nonTerminalPart = part,
          ///
      type = nonTerminalPart.getType(),
          typePartPartType = partPartTypes.includes(type),
          typePartsPartType = partsPartTypes.includes(type);

      if (false) {
        ///
      } else if (typePartPartType) {
        var partPart = nonTerminalPart,
            ///
        _part = partPart.getPart();

        partRuleNamesFromPart(_part, partRuleNames);
      } else if (typePartsPartType) {
        var partsPart = nonTerminalPart,
            ///
        parts = partsPart.getParts();

        partRuleNamesFromParts(parts, partRuleNames);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsInBhcnRUeXBlcyIsIlJ1bGVOYW1lUGFydFR5cGUiLCJPcHRpb25hbFBhcnRQYXJ0VHlwZSIsIkdyb3VwT2ZQYXJ0c1BhcnRUeXBlIiwiQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlIiwiT25lT3JNb3JlUGFydHNQYXJ0VHlwZSIsIlplcm9Pck1vcmVQYXJ0c1BhcnRUeXBlIiwicGFydFBhcnRUeXBlcyIsInBhcnRzUGFydFR5cGVzIiwicGFydFJ1bGVOYW1lc0Zyb21QYXJ0cyIsInBhcnRzIiwicGFydFJ1bGVOYW1lcyIsImZvckVhY2giLCJwYXJ0IiwicGFydFJ1bGVOYW1lc0Zyb21QYXJ0IiwiaXNQYXJ0UnVsZU5hbWVQYXJ0IiwicGFydFJ1bGVOYW1lUGFydCIsInBhcnRUZXJtaW5hbFBhcnQiLCJpc1Rlcm1pbmFsUGFydCIsInBhcnROb25UZXJtaW5hbFBhcnQiLCJub25UZXJtaW5hbFBhcnQiLCJ0eXBlIiwiZ2V0VHlwZSIsInR5cGVSdWxlTmFtZVBhcnRUeXBlIiwibm9uVGVybWluYWxQYXJ0UnVsZU5hbWVQYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydFJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJydWxlTmFtZSIsInB1c2giLCJ0eXBlUGFydFBhcnRUeXBlIiwiaW5jbHVkZXMiLCJ0eXBlUGFydHNQYXJ0VHlwZSIsInBhcnRQYXJ0IiwiZ2V0UGFydCIsInBhcnRzUGFydCIsImdldFBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRU0sSUFBRUMsU0FBRixHQUFnQkYsT0FBaEIsQ0FBRUUsU0FBRjtBQUFBLElBQ0VDLGdCQURGLEdBQzJJRCxTQUQzSSxDQUNFQyxnQkFERjtBQUFBLElBQ29CQyxvQkFEcEIsR0FDMklGLFNBRDNJLENBQ29CRSxvQkFEcEI7QUFBQSxJQUMwQ0Msb0JBRDFDLEdBQzJJSCxTQUQzSSxDQUMwQ0csb0JBRDFDO0FBQUEsSUFDZ0VDLHFCQURoRSxHQUMySUosU0FEM0ksQ0FDZ0VJLHFCQURoRTtBQUFBLElBQ3VGQyxzQkFEdkYsR0FDMklMLFNBRDNJLENBQ3VGSyxzQkFEdkY7QUFBQSxJQUMrR0MsdUJBRC9HLEdBQzJJTixTQUQzSSxDQUMrR00sdUJBRC9HO0FBQUEsSUFFQUMsYUFGQSxHQUVnQixDQUNkTCxvQkFEYyxFQUVkRyxzQkFGYyxFQUdkQyx1QkFIYyxDQUZoQjtBQUFBLElBT0FFLGNBUEEsR0FPaUIsQ0FDZkwsb0JBRGUsRUFFZkMscUJBRmUsQ0FQakI7OztBQVlOLFNBQVNLLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1Q0MsYUFBdkMsRUFBc0Q7QUFDcERELFFBQU1FLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0JDLDBCQUFzQkQsSUFBdEIsRUFBNEJGLGFBQTVCO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNJLGtCQUFULENBQTRCRixJQUE1QixFQUFrQztBQUNoQyxNQUFJRyxtQkFBbUIsS0FBdkI7O0FBRUEsTUFBTUMsbUJBQW1CSixLQUFLSyxjQUFMLEVBQXpCO0FBQUEsTUFDTUMsc0JBQXNCLENBQUNGLGdCQUQ3Qjs7QUFHQSxNQUFJRSxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxrQkFBa0JQLElBQXhCO0FBQUEsUUFBK0I7QUFDekJRLFdBQU9ELGdCQUFnQkUsT0FBaEIsRUFEYjtBQUFBLFFBRU1DLHVCQUF3QkYsU0FBU3BCLGdCQUZ2QztBQUFBLFFBR011Qiw4QkFBOEJELG9CQUhwQyxDQUR1QixDQUlvQzs7QUFFM0RQLHVCQUFtQlEsMkJBQW5CLENBTnVCLENBTTBCO0FBQ2xEOztBQUVELFNBQU9SLGdCQUFQO0FBQ0Q7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpCLGdEQURlO0FBRWZNO0FBRmUsQ0FBakI7O0FBS0EsU0FBU0QscUJBQVQsQ0FBK0JELElBQS9CLEVBQXFDRixhQUFyQyxFQUFvRDtBQUNsRCxNQUFNSyxtQkFBbUJELG1CQUFtQkYsSUFBbkIsQ0FBekI7O0FBRUEsTUFBSUcsZ0JBQUosRUFBc0I7QUFDcEIsUUFBTVcsZUFBZWQsSUFBckI7QUFBQSxRQUNNZSx1QkFBdUJELGFBQWFFLFdBQWIsRUFEN0I7QUFBQSxRQUVNQyxXQUFXRixvQkFGakIsQ0FEb0IsQ0FHb0I7O0FBRXhDakIsa0JBQWNvQixJQUFkLENBQW1CRCxRQUFuQjtBQUNELEdBTkQsTUFNTztBQUNMLFFBQU1iLG1CQUFtQkosS0FBS0ssY0FBTCxFQUF6QjtBQUFBLFFBQ01DLHNCQUFzQixDQUFDRixnQkFEN0I7O0FBR0EsUUFBSUUsbUJBQUosRUFBeUI7QUFDdkIsVUFBTUMsa0JBQWtCUCxJQUF4QjtBQUFBLFVBQThCO0FBQ3hCUSxhQUFPRCxnQkFBZ0JFLE9BQWhCLEVBRGI7QUFBQSxVQUVNVSxtQkFBbUJ6QixjQUFjMEIsUUFBZCxDQUF1QlosSUFBdkIsQ0FGekI7QUFBQSxVQUdNYSxvQkFBb0IxQixlQUFleUIsUUFBZixDQUF3QlosSUFBeEIsQ0FIMUI7O0FBS0EsVUFBSSxLQUFKLEVBQVc7QUFDVDtBQUNELE9BRkQsTUFFTyxJQUFJVyxnQkFBSixFQUFzQjtBQUMzQixZQUFNRyxXQUFXZixlQUFqQjtBQUFBLFlBQWtDO0FBQzVCUCxnQkFBT3NCLFNBQVNDLE9BQVQsRUFEYjs7QUFHQXRCLDhCQUFzQkQsS0FBdEIsRUFBNEJGLGFBQTVCO0FBQ0QsT0FMTSxNQUtBLElBQUl1QixpQkFBSixFQUF1QjtBQUM1QixZQUFNRyxZQUFZakIsZUFBbEI7QUFBQSxZQUFtQztBQUM3QlYsZ0JBQVEyQixVQUFVQyxRQUFWLEVBRGQ7O0FBR0E3QiwrQkFBdUJDLEtBQXZCLEVBQThCQyxhQUE5QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IHsgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlLCBPcHRpb25hbFBhcnRQYXJ0VHlwZSwgR3JvdXBPZlBhcnRzUGFydFR5cGUsIENob2ljZU9mUGFydHNQYXJ0VHlwZSwgT25lT3JNb3JlUGFydHNQYXJ0VHlwZSwgWmVyb09yTW9yZVBhcnRzUGFydFR5cGUgfSA9IHBhcnRUeXBlcyxcbiAgICAgIHBhcnRQYXJ0VHlwZXMgPSBbXG4gICAgICAgIE9wdGlvbmFsUGFydFBhcnRUeXBlLFxuICAgICAgICBPbmVPck1vcmVQYXJ0c1BhcnRUeXBlLFxuICAgICAgICBaZXJvT3JNb3JlUGFydHNQYXJ0VHlwZVxuICAgICAgXSxcbiAgICAgIHBhcnRzUGFydFR5cGVzID0gW1xuICAgICAgICBHcm91cE9mUGFydHNQYXJ0VHlwZSxcbiAgICAgICAgQ2hvaWNlT2ZQYXJ0c1BhcnRUeXBlXG4gICAgICBdO1xuXG5mdW5jdGlvbiBwYXJ0UnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzLCBwYXJ0UnVsZU5hbWVzKSB7XG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xuICAgIHBhcnRSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBwYXJ0UnVsZU5hbWVzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzUGFydFJ1bGVOYW1lUGFydChwYXJ0KSB7XG4gIGxldCBwYXJ0UnVsZU5hbWVQYXJ0ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydFRlcm1pbmFsUGFydCA9IHBhcnQuaXNUZXJtaW5hbFBhcnQoKSxcbiAgICAgICAgcGFydE5vblRlcm1pbmFsUGFydCA9ICFwYXJ0VGVybWluYWxQYXJ0O1xuXG4gIGlmIChwYXJ0Tm9uVGVybWluYWxQYXJ0KSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxQYXJ0ID0gcGFydCwgIC8vL1xuICAgICAgICAgIHR5cGUgPSBub25UZXJtaW5hbFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICAgIHR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKHR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICAgIG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCA9IHR5cGVSdWxlTmFtZVBhcnRUeXBlOyAgLy8vXG5cbiAgICBwYXJ0UnVsZU5hbWVQYXJ0ID0gbm9uVGVybWluYWxQYXJ0UnVsZU5hbWVQYXJ0OyAgLy8vXG4gIH1cblxuICByZXR1cm4gcGFydFJ1bGVOYW1lUGFydDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnRSdWxlTmFtZXNGcm9tUGFydHMsXG4gIGlzUGFydFJ1bGVOYW1lUGFydFxufTtcblxuZnVuY3Rpb24gcGFydFJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHBhcnRSdWxlTmFtZXMpIHtcbiAgY29uc3QgcGFydFJ1bGVOYW1lUGFydCA9IGlzUGFydFJ1bGVOYW1lUGFydChwYXJ0KTtcblxuICBpZiAocGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHBhcnQsXG4gICAgICAgICAgcnVsZU5hbWVQYXJ0UnVsZU5hbWUgPSBydWxlTmFtZVBhcnQuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBydWxlTmFtZSA9IHJ1bGVOYW1lUGFydFJ1bGVOYW1lOyAgLy8vXG5cbiAgICBwYXJ0UnVsZU5hbWVzLnB1c2gocnVsZU5hbWUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBhcnRUZXJtaW5hbFBhcnQgPSBwYXJ0LmlzVGVybWluYWxQYXJ0KCksXG4gICAgICAgICAgcGFydE5vblRlcm1pbmFsUGFydCA9ICFwYXJ0VGVybWluYWxQYXJ0O1xuXG4gICAgaWYgKHBhcnROb25UZXJtaW5hbFBhcnQpIHtcbiAgICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IHBhcnQsIC8vL1xuICAgICAgICAgICAgdHlwZSA9IG5vblRlcm1pbmFsUGFydC5nZXRUeXBlKCksXG4gICAgICAgICAgICB0eXBlUGFydFBhcnRUeXBlID0gcGFydFBhcnRUeXBlcy5pbmNsdWRlcyh0eXBlKSxcbiAgICAgICAgICAgIHR5cGVQYXJ0c1BhcnRUeXBlID0gcGFydHNQYXJ0VHlwZXMuaW5jbHVkZXModHlwZSk7XG5cbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAvLy9cbiAgICAgIH0gZWxzZSBpZiAodHlwZVBhcnRQYXJ0VHlwZSkge1xuICAgICAgICBjb25zdCBwYXJ0UGFydCA9IG5vblRlcm1pbmFsUGFydCwgLy8vXG4gICAgICAgICAgICAgIHBhcnQgPSBwYXJ0UGFydC5nZXRQYXJ0KCk7XG5cbiAgICAgICAgcGFydFJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHBhcnRSdWxlTmFtZXMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlUGFydHNQYXJ0VHlwZSkge1xuICAgICAgICBjb25zdCBwYXJ0c1BhcnQgPSBub25UZXJtaW5hbFBhcnQsIC8vL1xuICAgICAgICAgICAgICBwYXJ0cyA9IHBhcnRzUGFydC5nZXRQYXJ0cygpO1xuXG4gICAgICAgIHBhcnRSdWxlTmFtZXNGcm9tUGFydHMocGFydHMsIHBhcnRSdWxlTmFtZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19