'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;
var Parts = parsers.Parts,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    OptionalPartPartType = partTypes.OptionalPartPartType,
    GroupOfPartsPartType = partTypes.GroupOfPartsPartType,
    ChoiceOfPartsPartType = partTypes.ChoiceOfPartsPartType,
    OneOrMorePartsPartType = partTypes.OneOrMorePartsPartType,
    ZeroOrMorePartsPartType = partTypes.ZeroOrMorePartsPartType,
    RuleNamePart = Parts.RuleNamePart,
    OptionalPartPart = Parts.OptionalPartPart;


function isPartRecursive(part) {
  var recursiveRuleNames = recursiveRuleNamesFromPart(part),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      partRecursive = recursiveRuleNamesLength > 0;

  return partRecursive;
}

function isPartLeftRecursive(part) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part),
      partLeftRecursive = leftRecursiveRuleName !== null;

  return partLeftRecursive;
}

function recursiveRuleNamesFromPart(part) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var partRecursive = false;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName(),
            recursiveRuleNamesIncludesRuleName = recursiveRuleNames.includes(ruleName);

        if (!recursiveRuleNamesIncludesRuleName) {
          recursiveRuleNames.push(ruleName);
        }
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        recursiveRuleNamesFromPart(part, recursiveRuleNames);
        break;

      case GroupOfPartsPartType:
      case ChoiceOfPartsPartType:
        {
          var parts = part.getParts();

          partRecursive = parts.some(function (part) {
            recursiveRuleNamesFromPart(part, ruleNames);
          });
        }
        break;
    }
  }

  return partRecursive;
}

function leftRecursiveRuleNameFromPart(part) {
  var leftRecursiveRuleName = null;

  var partNonTerminalPart = part.isNonTerminalPart();

  if (partNonTerminalPart) {
    var type = part.getType();

    switch (type) {
      case RuleNamePartType:
        var ruleNamePart = part,
            ///
        ruleName = ruleNamePart.getRuleName();

        leftRecursiveRuleName = ruleName; ///
        break;

      case OptionalPartPartType:
      case OneOrMorePartsPartType:
      case ZeroOrMorePartsPartType:
        part = part.getPart(); ///

        leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);
        break;

      case GroupOfPartsPartType:
        {
          var parts = _part.getParts(),
              firstPart = first(parts),
              _part = firstPart; ///

          leftRecursiveRuleName = leftRecursiveRuleNameFromPart(_part);
        }
        break;

      case ChoiceOfPartsPartType:
        {
          var _parts = part.getParts();

          _parts.some(function (part) {
            leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

            if (leftRecursiveRuleName !== null) {
              return true;
            }
          });
        }
        break;
    }
  }

  return leftRecursiveRuleName;
}

function ruleNamePartFromRuleName(ruleName) {
  var noWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var lookAhead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var ruleNamePart = new RuleNamePart(ruleName, noWhitespace, lookAhead);

  return ruleNamePart;
}

function optionalRuleNamePartPartFromRuleName(ruleName) {
  var ruleNamePart = ruleNamePartFromRuleName(ruleName),
      optionalRuleNamePartPart = new OptionalPartPart(ruleNamePart);

  return optionalRuleNamePartPart;
}

module.exports = {
  isPartRecursive: isPartRecursive,
  isPartLeftRecursive: isPartLeftRecursive,
  recursiveRuleNamesFromPart: recursiveRuleNamesFromPart,
  leftRecursiveRuleNameFromPart: leftRecursiveRuleNameFromPart,
  ruleNamePartFromRuleName: ruleNamePartFromRuleName,
  optionalRuleNamePartPartFromRuleName: optionalRuleNamePartPartFromRuleName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,