'use strict';

var parsers = require('occam-parsers');

var typeUtilities = require('../utilities/type');

var Parts = parsers.Parts,
    typeFromPart = typeUtilities.typeFromPart,
    typesFromParts = typeUtilities.typesFromParts,
    ChoiceOfPartsPart = Parts.ChoiceOfPartsPart,
    GroupOfPartsPart = Parts.GroupOfPartsPart,
    OneOrMorePartsPart = Parts.OneOrMorePartsPart,
    OptionalPartPart = Parts.OptionalPartPart,
    ZeroOrMorePartsPart = Parts.ZeroOrMorePartsPart,
    RuleNamePart = Parts.RuleNamePart,
    partTypes = typesFromParts([OptionalPartPart, OneOrMorePartsPart, ZeroOrMorePartsPart]),
    partsTypes = typesFromParts([GroupOfPartsPart, ChoiceOfPartsPart]),
    ruleNamePartType = typeFromPart(RuleNamePart);


function partRuleNamesFromParts(parts, partRuleNames) {
  parts.forEach(function (part) {
    partRuleNamesFromPart(part, partRuleNames);
  });
}

function isPartRuleNamePart(part) {
  var partRuleNamePart = false;

  var partTerminalPart = part.isTerminalPart(),
      partNonTerminalPart = !partTerminalPart;

  if (partNonTerminalPart) {
    var nonTerminalPart = part,
        ///
    type = nonTerminalPart.getType(),
        typeRuleNamePartType = type === ruleNamePartType,
        nonTerminalPartRuleNamePart = typeRuleNamePartType; ///

    partRuleNamePart = nonTerminalPartRuleNamePart; ///
  }

  return partRuleNamePart;
}

module.exports = {
  partRuleNamesFromParts: partRuleNamesFromParts,
  isPartRuleNamePart: isPartRuleNamePart
};

function partRuleNamesFromPart(part, partRuleNames) {
  var partRuleNamePart = isPartRuleNamePart(part);

  if (partRuleNamePart) {
    var ruleNamePart = part,
        ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleName = ruleNamePartRuleName; ///

    partRuleNames.push(ruleName);
  } else {
    var partTerminalPart = part.isTerminalPart(),
        partNonTerminalPart = !partTerminalPart;

    if (partNonTerminalPart) {
      var nonTerminalPart = part,
          ///
      type = nonTerminalPart.getType(),
          typePartType = partTypes.includes(type),
          typePartsType = partsTypes.includes(type);

      if (false) {} else if (typePartType) {
        var partPart = nonTerminalPart,
            ///
        _part = partPart.getPart();

        partRuleNamesFromPart(_part, partRuleNames);
      } else if (typePartsType) {
        var partsPart = nonTerminalPart,
            ///
        parts = partsPart.getParts();

        partRuleNamesFromParts(parts, partRuleNames);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFydC5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsInR5cGVVdGlsaXRpZXMiLCJQYXJ0cyIsInR5cGVGcm9tUGFydCIsInR5cGVzRnJvbVBhcnRzIiwiQ2hvaWNlT2ZQYXJ0c1BhcnQiLCJHcm91cE9mUGFydHNQYXJ0IiwiT25lT3JNb3JlUGFydHNQYXJ0IiwiT3B0aW9uYWxQYXJ0UGFydCIsIlplcm9Pck1vcmVQYXJ0c1BhcnQiLCJSdWxlTmFtZVBhcnQiLCJwYXJ0VHlwZXMiLCJwYXJ0c1R5cGVzIiwicnVsZU5hbWVQYXJ0VHlwZSIsInBhcnRSdWxlTmFtZXNGcm9tUGFydHMiLCJwYXJ0cyIsInBhcnRSdWxlTmFtZXMiLCJmb3JFYWNoIiwicGFydCIsInBhcnRSdWxlTmFtZXNGcm9tUGFydCIsImlzUGFydFJ1bGVOYW1lUGFydCIsInBhcnRSdWxlTmFtZVBhcnQiLCJwYXJ0VGVybWluYWxQYXJ0IiwiaXNUZXJtaW5hbFBhcnQiLCJwYXJ0Tm9uVGVybWluYWxQYXJ0Iiwibm9uVGVybWluYWxQYXJ0IiwidHlwZSIsImdldFR5cGUiLCJ0eXBlUnVsZU5hbWVQYXJ0VHlwZSIsIm5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlTmFtZVBhcnQiLCJydWxlTmFtZVBhcnRSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicnVsZU5hbWUiLCJwdXNoIiwidHlwZVBhcnRUeXBlIiwiaW5jbHVkZXMiLCJ0eXBlUGFydHNUeXBlIiwicGFydFBhcnQiLCJnZXRQYXJ0IiwicGFydHNQYXJ0IiwiZ2V0UGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsZUFBUixDQUFoQjs7QUFFQSxJQUFNQyxnQkFBZ0JELFFBQVEsbUJBQVIsQ0FBdEI7O0FBRU0sSUFBRUUsS0FBRixHQUFZSCxPQUFaLENBQUVHLEtBQUY7QUFBQSxJQUNFQyxZQURGLEdBQ21D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QSxZQUFtQztBQUM3QlYsZ0JBQVEyQixVQUFVQyxRQUFWLEVBRGQ7O0FBR0E3QiwrQkFBdUJDLEtBQXZCLEVBQThCQyxhQUE5QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IHR5cGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdHlwZScpO1xuXG5jb25zdCB7IFBhcnRzIH0gPSBwYXJzZXJzLFxuICAgICAgeyB0eXBlRnJvbVBhcnQsIHR5cGVzRnJvbVBhcnRzIH0gPSB0eXBlVXRpbGl0aWVzLFxuICAgICAgeyBDaG9pY2VPZlBhcnRzUGFydCwgR3JvdXBPZlBhcnRzUGFydCwgT25lT3JNb3JlUGFydHNQYXJ0LCBPcHRpb25hbFBhcnRQYXJ0LCBaZXJvT3JNb3JlUGFydHNQYXJ0LCBSdWxlTmFtZVBhcnQgfSA9IFBhcnRzLFxuICAgICAgcGFydFR5cGVzID0gdHlwZXNGcm9tUGFydHMoWyBPcHRpb25hbFBhcnRQYXJ0LCBPbmVPck1vcmVQYXJ0c1BhcnQsIFplcm9Pck1vcmVQYXJ0c1BhcnQgXSksXG4gICAgICBwYXJ0c1R5cGVzID0gdHlwZXNGcm9tUGFydHMoWyBHcm91cE9mUGFydHNQYXJ0LCBDaG9pY2VPZlBhcnRzUGFydCBdKSxcbiAgICAgIHJ1bGVOYW1lUGFydFR5cGUgPSB0eXBlRnJvbVBhcnQoUnVsZU5hbWVQYXJ0KTtcblxuZnVuY3Rpb24gcGFydFJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcGFydFJ1bGVOYW1lcykge1xuICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICBwYXJ0UnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcGFydFJ1bGVOYW1lcyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCkge1xuICBsZXQgcGFydFJ1bGVOYW1lUGFydCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRUZXJtaW5hbFBhcnQgPSBwYXJ0LmlzVGVybWluYWxQYXJ0KCksXG4gICAgICAgIHBhcnROb25UZXJtaW5hbFBhcnQgPSAhcGFydFRlcm1pbmFsUGFydDtcblxuICBpZiAocGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IHBhcnQsICAvLy9cbiAgICAgICAgICB0eXBlID0gbm9uVGVybWluYWxQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgICB0eXBlUnVsZU5hbWVQYXJ0VHlwZSA9ICh0eXBlID09PSBydWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgICBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQgPSB0eXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gICAgcGFydFJ1bGVOYW1lUGFydCA9IG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhcnRSdWxlTmFtZVBhcnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJ0UnVsZU5hbWVzRnJvbVBhcnRzLFxuICBpc1BhcnRSdWxlTmFtZVBhcnRcbn07XG5cbmZ1bmN0aW9uIHBhcnRSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBwYXJ0UnVsZU5hbWVzKSB7XG4gIGNvbnN0IHBhcnRSdWxlTmFtZVBhcnQgPSBpc1BhcnRSdWxlTmFtZVBhcnQocGFydCk7XG5cbiAgaWYgKHBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBwYXJ0LFxuICAgICAgICAgIHJ1bGVOYW1lUGFydFJ1bGVOYW1lID0gcnVsZU5hbWVQYXJ0LmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcnVsZU5hbWUgPSBydWxlTmFtZVBhcnRSdWxlTmFtZTsgIC8vL1xuXG4gICAgcGFydFJ1bGVOYW1lcy5wdXNoKHJ1bGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXJ0VGVybWluYWxQYXJ0ID0gcGFydC5pc1Rlcm1pbmFsUGFydCgpLFxuICAgICAgICAgIHBhcnROb25UZXJtaW5hbFBhcnQgPSAhcGFydFRlcm1pbmFsUGFydDtcblxuICAgIGlmIChwYXJ0Tm9uVGVybWluYWxQYXJ0KSB7XG4gICAgICBjb25zdCBub25UZXJtaW5hbFBhcnQgPSBwYXJ0LCAvLy9cbiAgICAgICAgICAgIHR5cGUgPSBub25UZXJtaW5hbFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICAgICAgdHlwZVBhcnRUeXBlID0gcGFydFR5cGVzLmluY2x1ZGVzKHR5cGUpLFxuICAgICAgICAgICAgdHlwZVBhcnRzVHlwZSA9IHBhcnRzVHlwZXMuaW5jbHVkZXModHlwZSk7XG5cbiAgICAgIGlmIChmYWxzZSkge1xuXG4gICAgICB9IGVsc2UgaWYgKHR5cGVQYXJ0VHlwZSkge1xuICAgICAgICBjb25zdCBwYXJ0UGFydCA9IG5vblRlcm1pbmFsUGFydCwgLy8vXG4gICAgICAgICAgICAgIHBhcnQgPSBwYXJ0UGFydC5nZXRQYXJ0KCk7XG5cbiAgICAgICAgcGFydFJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHBhcnRSdWxlTmFtZXMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlUGFydHNUeXBlKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzUGFydCA9IG5vblRlcm1pbmFsUGFydCwgLy8vXG4gICAgICAgICAgICAgIHBhcnRzID0gcGFydHNQYXJ0LmdldFBhcnRzKCk7XG5cbiAgICAgICAgcGFydFJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcGFydFJ1bGVOYW1lcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=