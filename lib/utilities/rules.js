"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
exports.startRuleFromRulesAndStartRuleName = startRuleFromRulesAndStartRuleName;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _necessary = require("necessary");
var _occamParsers = require("occam-parsers");
var filter = _necessary.arrayUtilities.filter, rulesAsString = _occamParsers.rulesUtilities.rulesAsString, ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}
function startRuleFromRulesAndStartRuleName(rules, startRuleName) {
    var startRule = rules.find(function(rule) {
        var ruleName = rule.getName();
        if (ruleName === startRuleName) {
            return true;
        }
    }) || null; ///
    if (startRule === null) {
        startRule = startRuleFromRules(rules);
    }
    return startRule;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    rulesAsString: rulesAsString,
    ruleMapFromRules: ruleMapFromRules,
    startRuleFromRules: startRuleFromRules,
    rulesFromStartRuleAndRuleMap: rulesFromStartRuleAndRuleMap,
    startRuleFromRulesAndStartRuleName: startRuleFromRulesAndStartRuleName
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJORkxleGVyIH0gZnJvbSBcIm9jY2FtLWxleGVyc1wiO1xuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5pbXBvcnQgeyBCTkZQYXJzZXIsIHJ1bGVzVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuY29uc3QgeyBmaWx0ZXIgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBydWxlc0FzU3RyaW5nLCBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKHJ1bGVzLCBzdGFydFJ1bGVOYW1lKSB7XG4gIGxldCBzdGFydFJ1bGUgPSBydWxlcy5maW5kKChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIGlmIChydWxlTmFtZSA9PT0gc3RhcnRSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KSB8fCBudWxsOyAvLy9cblxuICBpZiAoc3RhcnRSdWxlID09PSBudWxsKSB7XG4gICAgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcbiAgfVxuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcnVsZXNGcm9tQk5GLFxuICBydWxlc0FzU3RyaW5nLFxuICBydWxlTWFwRnJvbVJ1bGVzLFxuICBzdGFydFJ1bGVGcm9tUnVsZXMsXG4gIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAsXG4gIHN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWVcbn07XG4iXSwibmFtZXMiOlsicnVsZXNGcm9tQk5GIiwicnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsInN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUiLCJmaWx0ZXIiLCJhcnJheVV0aWxpdGllcyIsInJ1bGVzQXNTdHJpbmciLCJydWxlc1V0aWxpdGllcyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJibmZMZXhlciIsIkJORkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJCTkZQYXJzZXIiLCJibmYiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJzdGFydFJ1bGUiLCJydWxlTWFwIiwiT2JqZWN0IiwidmFsdWVzIiwic3RhcnRSdWxlTmFtZSIsImdldE5hbWUiLCJydWxlIiwicnVsZU5hbWUiLCJ1bnNoaWZ0IiwiZmluZCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBWUdBLFlBQVksR0FBWkEsWUFBWTtRQU9aQyw0QkFBNEIsR0FBNUJBLDRCQUE0QjtRQWlCNUJDLGtDQUFrQyxHQUFsQ0Esa0NBQWtDOztBQWxDekIsSUFBQSxZQUFjLFdBQWQsY0FBYyxDQUFBO0FBQ1IsSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBQ0EsSUFBQSxhQUFlLFdBQWYsZUFBZSxDQUFBO0FBRXpELElBQU0sQUFBRUMsTUFBTSxHQUFLQyxVQUFjLGVBQUEsQ0FBekJELE1BQU0sQUFBbUIsRUFDekJFLGFBQWEsR0FBMkNDLGFBQWMsZUFBQSxDQUF0RUQsYUFBYSxFQUFFRSxnQkFBZ0IsR0FBeUJELGFBQWMsZUFBQSxDQUF2REMsZ0JBQWdCLEVBQUVDLGtCQUFrQixHQUFLRixhQUFjLGVBQUEsQ0FBckNFLGtCQUFrQixBQUFvQjtBQUUvRSxJQUFNQyxRQUFRLEdBQUdDLFlBQVEsU0FBQSxDQUFDQyxXQUFXLEVBQUUsRUFDakNDLFNBQVMsR0FBR0MsYUFBUyxVQUFBLENBQUNGLFdBQVcsRUFBRSxBQUFDO0FBRW5DLFNBQVNYLFlBQVksQ0FBQ2MsR0FBRyxFQUFFO0lBQ2hDLElBQU1DLE1BQU0sR0FBR04sUUFBUSxDQUFDTyxhQUFhLENBQUNGLEdBQUcsQ0FBQyxFQUNwQ0csS0FBSyxHQUFHTCxTQUFTLENBQUNNLGVBQWUsQ0FBQ0gsTUFBTSxDQUFDLEFBQUM7SUFFaEQsT0FBT0UsS0FBSyxDQUFDO0NBQ2Q7QUFFTSxTQUFTaEIsNEJBQTRCLENBQUNrQixTQUFTLEVBQUVDLE9BQU8sRUFBRTtJQUMvRCxJQUFNSCxLQUFLLEdBQUdJLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRixPQUFPLENBQUMsRUFDOUJHLGFBQWEsR0FBR0osU0FBUyxDQUFDSyxPQUFPLEVBQUUsQUFBQztJQUUxQ3JCLE1BQU0sQ0FBQ2MsS0FBSyxFQUFFLFNBQUNRLElBQUksRUFBSztRQUN0QixJQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0QsT0FBTyxFQUFFLEFBQUM7UUFFaEMsSUFBSUUsUUFBUSxLQUFLSCxhQUFhLEVBQUU7WUFDOUIsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVITixLQUFLLENBQUNVLE9BQU8sQ0FBQ1IsU0FBUyxDQUFDLENBQUM7SUFFekIsT0FBT0YsS0FBSyxDQUFDO0NBQ2Q7QUFFTSxTQUFTZixrQ0FBa0MsQ0FBQ2UsS0FBSyxFQUFFTSxhQUFhLEVBQUU7SUFDdkUsSUFBSUosU0FBUyxHQUFHRixLQUFLLENBQUNXLElBQUksQ0FBQyxTQUFDSCxJQUFJLEVBQUs7UUFDbkMsSUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNELE9BQU8sRUFBRSxBQUFDO1FBRWhDLElBQUlFLFFBQVEsS0FBS0gsYUFBYSxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRixDQUFDLElBQUksSUFBSSxBQUFDLEVBQUMsR0FBRztJQUVmLElBQUlKLFNBQVMsS0FBSyxJQUFJLEVBQUU7UUFDdEJBLFNBQVMsR0FBR1gsa0JBQWtCLENBQUNTLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsT0FBT0UsU0FBUyxDQUFDO0NBQ2xCO2VBRWM7SUFDYm5CLFlBQVksRUFBWkEsWUFBWTtJQUNaSyxhQUFhLEVBQWJBLGFBQWE7SUFDYkUsZ0JBQWdCLEVBQWhCQSxnQkFBZ0I7SUFDaEJDLGtCQUFrQixFQUFsQkEsa0JBQWtCO0lBQ2xCUCw0QkFBNEIsRUFBNUJBLDRCQUE0QjtJQUM1QkMsa0NBQWtDLEVBQWxDQSxrQ0FBa0M7Q0FDbkMifQ==