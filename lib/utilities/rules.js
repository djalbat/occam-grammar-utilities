"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap = {};
    rules.forEach(function(rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzQXNTdHJpbmcocnVsZXMsIG11bHRpTGluZSkge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBNYXRoLm1heChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJldHVybiBtYXhpbXVtUnVsZU5hbWVMZW5ndGg7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBydWxlc1N0cmluZyA9IHJ1bGVzLnJlZHVjZSgocnVsZXNTdHJpbmcsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlU3RyaW5nID0gcnVsZS5hc1N0cmluZyhtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIG11bHRpTGluZSk7XG5cbiAgICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpLnJlcGxhY2UoL15cXG5cXG4vLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHt9O1xuXG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuICB9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsicnVsZXNBc1N0cmluZyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImZpbHRlciIsInJ1bGVzIiwibXVsdGlMaW5lIiwibWF4aW11bVJ1bGVOYW1lTGVuZ3RoIiwicmVkdWNlIiwicnVsZSIsInJ1bGVOYW1lIiwiZ2V0TmFtZSIsInJ1bGVOYW1lTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsInJ1bGVzU3RyaW5nIiwicnVsZVN0cmluZyIsImFzU3RyaW5nIiwiRU1QVFlfU1RSSU5HIiwicmVwbGFjZSIsInJ1bGVNYXAiLCJmb3JFYWNoIiwiZmlyc3RSdWxlIiwic3RhcnRSdWxlIiwiT2JqZWN0IiwidmFsdWVzIiwic3RhcnRSdWxlTmFtZSIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDOzs7RTtRQVNHQSxhQUFhLEdBQWJBLGFBQWEsQTtRQW9CYkMsZ0JBQWdCLEdBQWhCQSxnQkFBZ0IsQTtRQVloQkMsa0JBQWtCLEdBQWxCQSxrQkFBa0IsQTtRQU9sQkMsNEJBQTRCLEdBQTVCQSw0QkFBNEIsQTtBQTlDYixHQUFXLENBQVgsVUFBVztBQUViLEdBQWMsQ0FBZCxVQUFjO0FBRTNDLEdBQUssQ0FBR0MsS0FBSyxHQUFhQyxVQUFjLGdCQUFoQ0QsS0FBSyxFQUFFRSxNQUFNLEdBQUtELFVBQWMsZ0JBQXpCQyxNQUFNO1NBR0xOLGFBQWEsQ0FBQ08sS0FBSyxFQUFFQyxTQUFTLEVBQUUsQ0FBQztJQUMvQyxHQUFLLENBQUNDLHNCQUFxQixHQUFHRixLQUFLLENBQUNHLE1BQU0sQ0FBQyxRQUFRLENBQVBELHFCQUFxQixFQUFFRSxJQUFJLEVBQUssQ0FBQztRQUNyRSxHQUFLLENBQUNDLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxPQUFPLElBQ3ZCQyxjQUFjLEdBQUdGLFFBQVEsQ0FBQ0csTUFBTTtRQUV0Q04scUJBQXFCLEdBQUdPLElBQUksQ0FBQ0MsR0FBRyxDQUFDUixxQkFBcUIsRUFBRUssY0FBYyxDQUFDLENBQUM7UUFFeEUsTUFBTSxDQUFDTCxxQkFBcUI7SUFDOUIsQ0FBQyxFQUFFLENBQUMsR0FDSlMsWUFBVyxHQUFHWCxLQUFLLENBQUNHLE1BQU0sQ0FBQyxRQUFRLENBQVBRLFdBQVcsRUFBRVAsSUFBSSxFQUFLLENBQUM7UUFDakQsR0FBSyxDQUFDUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBUSxDQUFDWCxzQkFBcUIsRUFBRUQsU0FBUztRQUVqRVUsV0FBVyxJQUFJQyxVQUFVLENBQUM7UUFFMUIsTUFBTSxDQUFDRCxXQUFXO0lBQ3BCLENBQUMsRUFBRUcsVUFBWSxlQUFFQyxPQUFPLFVBQVVELFVBQVk7SUFFcEQsTUFBTSxDQUFDSCxZQUFXO0FBQ3BCLENBQUM7U0FFZWpCLGdCQUFnQixDQUFDTSxLQUFLLEVBQUUsQ0FBQztJQUN2QyxHQUFLLENBQUNnQixPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRWxCaEIsS0FBSyxDQUFDaUIsT0FBTyxDQUFDLFFBQVEsQ0FBUGIsSUFBSSxFQUFLLENBQUM7UUFDdkIsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QlUsT0FBTyxDQUFDWCxRQUFRLElBQUlELElBQUksQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQ1ksT0FBTztBQUNoQixDQUFDO1NBRWVyQixrQkFBa0IsQ0FBQ0ssS0FBSyxFQUFFLENBQUM7SUFDekMsR0FBSyxDQUFDa0IsU0FBUyxHQUFHckIsS0FBSyxDQUFDRyxLQUFLLEdBQ3ZCbUIsU0FBUyxHQUFHRCxTQUFTLEVBQUcsRUFBRyxBQUFILENBQUc7SUFFakMsTUFBTSxDQUFDQyxTQUFTO0FBQ2xCLENBQUM7U0FFZXZCLDRCQUE0QixDQUFDdUIsU0FBUyxFQUFFSCxPQUFPLEVBQUUsQ0FBQztJQUNoRSxHQUFLLENBQUNoQixLQUFLLEdBQUdvQixNQUFNLENBQUNDLE1BQU0sQ0FBQ0wsT0FBTyxHQUM3Qk0sYUFBYSxHQUFHSCxTQUFTLENBQUNiLE9BQU87SUFFdkNQLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLFFBQVEsQ0FBUEksSUFBSSxFQUFLLENBQUM7UUFDdkIsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QixFQUFFLEVBQUVELFFBQVEsS0FBS2lCLGFBQWEsRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJO1FBQ2IsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUh0QixLQUFLLENBQUN1QixPQUFPLENBQUNKLFNBQVMsQ0FBQyxDQUFDO0lBRXpCLE1BQU0sQ0FBQ25CLEtBQUs7QUFDZCxDQUFDIn0=