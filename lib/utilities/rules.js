"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString;
}
function ruleMapFromRules(rules) {
    var ruleMap = rules.reduce(function(ruleMap, rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
        return ruleMap;
    }, {
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lTGVuZ3RoID0gcnVsZU5hbWUubGVuZ3RoO1xuXG4gICAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgICByZXR1cm4gbWF4aW11bVJ1bGVOYW1lTGVuZ3RoO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBtdWx0aUxpbmUpO1xuXG4gICAgICAgICAgcnVsZXNTdHJpbmcgKz0gcnVsZVN0cmluZztcblxuICAgICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKS5yZXBsYWNlKC9eXFxuXFxuLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlcy5yZWR1Y2UoKHJ1bGVNYXAsIHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuXG4gICAgcmV0dXJuIHJ1bGVNYXA7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsicnVsZXNBc1N0cmluZyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwiZmlyc3QiLCJmaWx0ZXIiLCJydWxlcyIsIm11bHRpTGluZSIsIm1heGltdW1SdWxlTmFtZUxlbmd0aCIsInJlZHVjZSIsInJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZUxlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJydWxlc1N0cmluZyIsInJ1bGVTdHJpbmciLCJhc1N0cmluZyIsInJlcGxhY2UiLCJydWxlTWFwIiwiZmlyc3RSdWxlIiwic3RhcnRSdWxlIiwiT2JqZWN0IiwidmFsdWVzIiwic3RhcnRSdWxlTmFtZSIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFRSUEsYUFBYSxHQUFiQSxhQUFhO1FBb0JiQyxnQkFBZ0IsR0FBaEJBLGdCQUFnQjtRQVloQkMsa0JBQWtCLEdBQWxCQSxrQkFBa0I7UUFPbEJDLDRCQUE0QixHQUE1QkEsNEJBQTRCO0FBN0NiLEdBQVcsQ0FBWCxVQUFXO0FBRWIsR0FBYyxDQUFkLFVBQWM7QUFFM0MsR0FBSyxDQUFHQyxLQUFLLEdBSmtCLFVBQVcsZ0JBSWxDQSxLQUFLLEVBQUVDLE1BQU0sR0FKVSxVQUFXLGdCQUkzQkEsTUFBTTtTQUVMTCxhQUFhLENBQUNNLEtBQUssRUFBRUMsU0FBUyxFQUFFLENBQUM7SUFDL0MsR0FBSyxDQUFDQyxxQkFBcUIsR0FBR0YsS0FBSyxDQUFDRyxNQUFNLENBQUMsUUFBUSxDQUFQRCxxQkFBcUIsRUFBRUUsSUFBSSxFQUFLLENBQUM7UUFDckUsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTyxJQUN2QkMsY0FBYyxHQUFHRixRQUFRLENBQUNHLE1BQU07UUFFdENOLHFCQUFxQixHQUFHTyxJQUFJLENBQUNDLEdBQUcsQ0FBQ1IscUJBQXFCLEVBQUVLLGNBQWM7UUFFdEUsTUFBTSxDQUFDTCxxQkFBcUI7SUFDOUIsQ0FBQyxFQUFFLENBQUMsR0FDSlMsV0FBVyxHQUFHWCxLQUFLLENBQUNHLE1BQU0sQ0FBQyxRQUFRLENBQVBRLFdBQVcsRUFBRVAsSUFBSSxFQUFLLENBQUM7UUFDakQsR0FBSyxDQUFDUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBUSxDQUFDWCxxQkFBcUIsRUFBRUQsU0FBUztRQUVqRVUsV0FBVyxJQUFJQyxVQUFVO1FBRXpCLE1BQU0sQ0FBQ0QsV0FBVztJQUNwQixDQUFDLEVBbkJvQixVQUFjLGVBbUJsQkcsT0FBTyxVQW5CSCxVQUFjO0lBcUJ6QyxNQUFNLENBQUNILFdBQVc7QUFDcEIsQ0FBQztTQUVlaEIsZ0JBQWdCLENBQUNLLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLEdBQUssQ0FBQ2UsT0FBTyxHQUFHZixLQUFLLENBQUNHLE1BQU0sQ0FBQyxRQUFRLENBQVBZLE9BQU8sRUFBRVgsSUFBSSxFQUFLLENBQUM7UUFDL0MsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QlMsT0FBTyxDQUFDVixRQUFRLElBQUlELElBQUk7UUFFeEIsTUFBTSxDQUFDVyxPQUFPO0lBQ2hCLENBQUMsRUFBRSxDQUFDO0lBQUEsQ0FBQztJQUVMLE1BQU0sQ0FBQ0EsT0FBTztBQUNoQixDQUFDO1NBRWVuQixrQkFBa0IsQ0FBQ0ksS0FBSyxFQUFFLENBQUM7SUFDekMsR0FBSyxDQUFDZ0IsU0FBUyxHQUFHbEIsS0FBSyxDQUFDRSxLQUFLLEdBQ3ZCaUIsU0FBUyxHQUFHRCxTQUFTLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRWpDLE1BQU0sQ0FBQ0MsU0FBUztBQUNsQixDQUFDO1NBRWVwQiw0QkFBNEIsQ0FBQ29CLFNBQVMsRUFBRUYsT0FBTyxFQUFFLENBQUM7SUFDaEUsR0FBSyxDQUFDZixLQUFLLEdBQUdrQixNQUFNLENBQUNDLE1BQU0sQ0FBQ0osT0FBTyxHQUM3QkssYUFBYSxHQUFHSCxTQUFTLENBQUNYLE9BQU87SUFFdkNQLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLFFBQVEsQ0FBUEksSUFBSSxFQUFLLENBQUM7UUFDdkIsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QixFQUFFLEVBQUVELFFBQVEsS0FBS2UsYUFBYSxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUk7UUFDYixDQUFDO0lBQ0gsQ0FBQztJQUVEcEIsS0FBSyxDQUFDcUIsT0FBTyxDQUFDSixTQUFTO0lBRXZCLE1BQU0sQ0FBQ2pCLEtBQUs7QUFDZCxDQUFDIn0=