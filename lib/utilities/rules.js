"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;

var _necessary = require("necessary");

var filter = _necessary.arrayUtilities.filter;

function rulesAsString(rules, multiLine) {
  var maximumRuleNameLength = rules.reduce(function (maximumRuleNameLength, rule) {
    var ruleName = rule.getName(),
        ruleNameLength = ruleName.length;
    maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
    return maximumRuleNameLength;
  }, 0),
      rulesString = rules.reduce(function (rulesString, rule) {
    var ruleString = rule.asString(maximumRuleNameLength, multiLine);
    rulesString += ruleString;
    return rulesString;
  }, "").replace(/^\n\n/, "");
  return rulesString;
}

function ruleMapFromRules(rules) {
  var ruleMap = rules.reduce(function (ruleMap, rule) {
    var ruleName = rule.getName();
    ruleMap[ruleName] = rule;
    return ruleMap;
  }, {});
  return ruleMap;
}

function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
  var rules = Object.values(ruleMap),
      startRuleName = startRule.getName();
  filter(rules, function (rule) {
    var ruleName = rule.getName();

    if (ruleName !== startRuleName) {
      return true;
    }
  });
  rules.unshift(startRule);
  return rules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzLmpzIl0sIm5hbWVzIjpbImZpbHRlciIsImFycmF5VXRpbGl0aWVzIiwicnVsZXNBc1N0cmluZyIsInJ1bGVzIiwibXVsdGlMaW5lIiwibWF4aW11bVJ1bGVOYW1lTGVuZ3RoIiwicmVkdWNlIiwicnVsZSIsInJ1bGVOYW1lIiwiZ2V0TmFtZSIsInJ1bGVOYW1lTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsInJ1bGVzU3RyaW5nIiwicnVsZVN0cmluZyIsImFzU3RyaW5nIiwicmVwbGFjZSIsInJ1bGVNYXBGcm9tUnVsZXMiLCJydWxlTWFwIiwicnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsInN0YXJ0UnVsZSIsIk9iamVjdCIsInZhbHVlcyIsInN0YXJ0UnVsZU5hbWUiLCJ1bnNoaWZ0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7O0lBRVFBLE0sR0FBV0MseUIsQ0FBWEQsTTs7QUFFRCxTQUFTRSxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsU0FBOUIsRUFBeUM7QUFDOUMsTUFBTUMscUJBQXFCLEdBQUdGLEtBQUssQ0FBQ0csTUFBTixDQUFhLFVBQUNELHFCQUFELEVBQXdCRSxJQUF4QixFQUFpQztBQUNwRSxRQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTCxFQUFqQjtBQUFBLFFBQ01DLGNBQWMsR0FBR0YsUUFBUSxDQUFDRyxNQURoQztBQUdBTixJQUFBQSxxQkFBcUIsR0FBR08sSUFBSSxDQUFDQyxHQUFMLENBQVNSLHFCQUFULEVBQWdDSyxjQUFoQyxDQUF4QjtBQUVBLFdBQU9MLHFCQUFQO0FBQ0QsR0FQdUIsRUFPckIsQ0FQcUIsQ0FBOUI7QUFBQSxNQVFNUyxXQUFXLEdBQUdYLEtBQUssQ0FBQ0csTUFBTixDQUFhLFVBQUNRLFdBQUQsRUFBY1AsSUFBZCxFQUF1QjtBQUNoRCxRQUFNUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBTCxDQUFjWCxxQkFBZCxFQUFxQ0QsU0FBckMsQ0FBbkI7QUFFQVUsSUFBQUEsV0FBVyxJQUFJQyxVQUFmO0FBRUEsV0FBT0QsV0FBUDtBQUNELEdBTmEsRUFNWCxFQU5XLEVBTVBHLE9BTk8sQ0FNQyxPQU5ELEVBTVUsRUFOVixDQVJwQjtBQWdCQSxTQUFPSCxXQUFQO0FBQ0Q7O0FBRU0sU0FBU0ksZ0JBQVQsQ0FBMEJmLEtBQTFCLEVBQWlDO0FBQ3RDLE1BQU1nQixPQUFPLEdBQUdoQixLQUFLLENBQUNHLE1BQU4sQ0FBYSxVQUFDYSxPQUFELEVBQVVaLElBQVYsRUFBbUI7QUFDOUMsUUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQUwsRUFBakI7QUFFQVUsSUFBQUEsT0FBTyxDQUFDWCxRQUFELENBQVAsR0FBb0JELElBQXBCO0FBRUEsV0FBT1ksT0FBUDtBQUNELEdBTmUsRUFNYixFQU5hLENBQWhCO0FBUUEsU0FBT0EsT0FBUDtBQUNEOztBQUVNLFNBQVNDLDRCQUFULENBQXNDQyxTQUF0QyxFQUFpREYsT0FBakQsRUFBMEQ7QUFDL0QsTUFBTWhCLEtBQUssR0FBR21CLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixPQUFkLENBQWQ7QUFBQSxNQUNNSyxhQUFhLEdBQUdILFNBQVMsQ0FBQ1osT0FBVixFQUR0QjtBQUdBVCxFQUFBQSxNQUFNLENBQUNHLEtBQUQsRUFBUSxVQUFDSSxJQUFELEVBQVU7QUFDdEIsUUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQUwsRUFBakI7O0FBRUEsUUFBSUQsUUFBUSxLQUFLZ0IsYUFBakIsRUFBZ0M7QUFDOUIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5LLENBQU47QUFRQXJCLEVBQUFBLEtBQUssQ0FBQ3NCLE9BQU4sQ0FBY0osU0FBZDtBQUVBLFNBQU9sQixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzQXNTdHJpbmcocnVsZXMsIG11bHRpTGluZSkge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBNYXRoLm1heChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJldHVybiBtYXhpbXVtUnVsZU5hbWVMZW5ndGg7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBydWxlc1N0cmluZyA9IHJ1bGVzLnJlZHVjZSgocnVsZXNTdHJpbmcsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlU3RyaW5nID0gcnVsZS5hc1N0cmluZyhtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIG11bHRpTGluZSk7XG5cbiAgICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xuICAgICAgICB9LCBcIlwiKS5yZXBsYWNlKC9eXFxuXFxuLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU1hcEZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBydWxlTWFwID0gcnVsZXMucmVkdWNlKChydWxlTWFwLCBydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIHJ1bGVNYXBbcnVsZU5hbWVdID0gcnVsZTtcblxuICAgIHJldHVybiBydWxlTWFwO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHJ1bGVNYXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXX0=