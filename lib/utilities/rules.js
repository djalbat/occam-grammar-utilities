"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.startRuleFromRulesAndStartRuleName = startRuleFromRulesAndStartRuleName;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap = {};
    rules.forEach(function(rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function startRuleFromRulesAndStartRuleName(rules, startRuleName) {
    var startRule = rules.find(function(rule) {
        var ruleName = rule.getName();
        if (ruleName === startRuleName) {
            return true;
        }
    }) || null; ///
    if (startRule === null) {
        startRule = startRuleFromRules(rules);
    }
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzQXNTdHJpbmcocnVsZXMsIG11bHRpTGluZSkge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBNYXRoLm1heChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJldHVybiBtYXhpbXVtUnVsZU5hbWVMZW5ndGg7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBydWxlc1N0cmluZyA9IHJ1bGVzLnJlZHVjZSgocnVsZXNTdHJpbmcsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlU3RyaW5nID0gcnVsZS5hc1N0cmluZyhtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIG11bHRpTGluZSk7XG5cbiAgICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpLnJlcGxhY2UoL15cXG5cXG4vLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHt9O1xuXG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuICB9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lKHJ1bGVzLCBzdGFydFJ1bGVOYW1lKSB7XG4gIGxldCBzdGFydFJ1bGUgPSBydWxlcy5maW5kKChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIGlmIChydWxlTmFtZSA9PT0gc3RhcnRSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KSB8fCBudWxsOyAvLy9cblxuICBpZiAoc3RhcnRSdWxlID09PSBudWxsKSB7XG4gICAgc3RhcnRSdWxlID0gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKTtcbiAgfVxuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsicnVsZXNBc1N0cmluZyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXNBbmRTdGFydFJ1bGVOYW1lIiwicnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJmaWx0ZXIiLCJydWxlcyIsIm11bHRpTGluZSIsIm1heGltdW1SdWxlTmFtZUxlbmd0aCIsInJlZHVjZSIsInJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZUxlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJydWxlc1N0cmluZyIsInJ1bGVTdHJpbmciLCJhc1N0cmluZyIsIkVNUFRZX1NUUklORyIsInJlcGxhY2UiLCJydWxlTWFwIiwiZm9yRWFjaCIsImZpcnN0UnVsZSIsInN0YXJ0UnVsZSIsInN0YXJ0UnVsZU5hbWUiLCJmaW5kIiwiT2JqZWN0IiwidmFsdWVzIiwidW5zaGlmdCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBU0dBLGFBQWEsR0FBYkEsYUFBYTtRQW9CYkMsZ0JBQWdCLEdBQWhCQSxnQkFBZ0I7UUFZaEJDLGtCQUFrQixHQUFsQkEsa0JBQWtCO1FBT2xCQyxrQ0FBa0MsR0FBbENBLGtDQUFrQztRQWdCbENDLDRCQUE0QixHQUE1QkEsNEJBQTRCO0FBOURiLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUViLElBQUEsVUFBYyxXQUFkLGNBQWMsQ0FBQTtBQUUzQyxJQUFRQyxLQUFLLEdBQWFDLFVBQWMsZUFBQSxDQUFoQ0QsS0FBSyxFQUFFRSxNQUFNLEdBQUtE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