"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.retrieveLeftRecursiveRules = retrieveLeftRecursiveRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
exports.startRuleFromRulesAndStartRuleName = startRuleFromRulesAndStartRuleName;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _necessary = require("necessary");
var _occamParsers = require("occam-parsers");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
var filter = _necessary.arrayUtilities.filter, rulesAsString = _occamParsers.rulesUtilities.rulesAsString, ruleMapFromRules = _occamParsers.rulesUtilities.ruleMapFromRules, startRuleFromRules = _occamParsers.rulesUtilities.startRuleFromRules;
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens);
    return rules;
}
function retrieveLeftRecursiveRules(leftRecursiveDefinitions, LeftRecursiveDefinition, ruleMap) {
    var leftRecursiveRules = [];
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        if (_instanceof(leftRecursiveDefinition, LeftRecursiveDefinition)) {
            var ruleName = leftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], leftRecursiveRulesIncludesRule = leftRecursiveRules.includes(rule);
            if (!leftRecursiveRulesIncludesRule) {
                var leftRecursiveRule = rule; ///
                leftRecursiveRules.push(leftRecursiveRule);
            }
        }
    });
    return leftRecursiveRules;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}
function startRuleFromRulesAndStartRuleName(rules, startRuleName) {
    var startRule = rules.find(function(rule) {
        var ruleName = rule.getName();
        if (ruleName === startRuleName) {
            return true;
        }
    }) || null; ///
    if (startRule === null) {
        startRule = startRuleFromRules(rules);
    }
    return startRule;
}
var _default = {
    rulesFromBNF: rulesFromBNF,
    rulesAsString: rulesAsString,
    ruleMapFromRules: ruleMapFromRules,
    startRuleFromRules: startRuleFromRules,
    retrieveLeftRecursiveRules: retrieveLeftRecursiveRules,
    rulesFromStartRuleAndRuleMap: rulesFromStartRuleAndRuleMap,
    startRuleFromRulesAndStartRuleName: startRuleFromRulesAndStartRuleName
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJORkxleGVyIH0gZnJvbSBcIm9jY2FtLWxleGVyc1wiO1xuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5pbXBvcnQgeyBCTkZQYXJzZXIsIHJ1bGVzVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuY29uc3QgeyBmaWx0ZXIgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBydWxlc0FzU3RyaW5nLCBydWxlTWFwRnJvbVJ1bGVzLCBzdGFydFJ1bGVGcm9tUnVsZXMgfSA9IHJ1bGVzVXRpbGl0aWVzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXRyaWV2ZUxlZnRSZWN1cnNpdmVSdWxlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIExlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBydWxlTWFwKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlcyA9IFtdO1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5mb3JFYWNoKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIExlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICBjb25zdCBydWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZXNJbmNsdWRlc1J1bGUgPSBsZWZ0UmVjdXJzaXZlUnVsZXMuaW5jbHVkZXMocnVsZSk7XG5cbiAgICAgIGlmICghbGVmdFJlY3Vyc2l2ZVJ1bGVzSW5jbHVkZXNSdWxlKSB7XG4gICAgICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlID0gcnVsZTsgLy8vXG5cbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVzLnB1c2gobGVmdFJlY3Vyc2l2ZVJ1bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAoc3RhcnRSdWxlLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGVzID0gT2JqZWN0LnZhbHVlcyhydWxlTWFwKSxcbiAgICAgICAgc3RhcnRSdWxlTmFtZSA9IHN0YXJ0UnVsZS5nZXROYW1lKCk7XG5cbiAgZmlsdGVyKHJ1bGVzLCAocnVsZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICBpZiAocnVsZU5hbWUgIT09IHN0YXJ0UnVsZU5hbWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcnVsZXMudW5zaGlmdChzdGFydFJ1bGUpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWUocnVsZXMsIHN0YXJ0UnVsZU5hbWUpIHtcbiAgbGV0IHN0YXJ0UnVsZSA9IHJ1bGVzLmZpbmQoKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lID09PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pIHx8IG51bGw7IC8vL1xuXG4gIGlmIChzdGFydFJ1bGUgPT09IG51bGwpIHtcbiAgICBzdGFydFJ1bGUgPSBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXJ0UnVsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlc0Zyb21CTkYsXG4gIHJ1bGVzQXNTdHJpbmcsXG4gIHJ1bGVNYXBGcm9tUnVsZXMsXG4gIHN0YXJ0UnVsZUZyb21SdWxlcyxcbiAgcmV0cmlldmVMZWZ0UmVjdXJzaXZlUnVsZXMsXG4gIHJ1bGVzRnJvbVN0YXJ0UnVsZUFuZFJ1bGVNYXAsXG4gIHN0YXJ0UnVsZUZyb21SdWxlc0FuZFN0YXJ0UnVsZU5hbWVcbn07XG4iXSwibmFtZXMiOlsicnVsZXNGcm9tQk5GIiwicmV0cmlldmVMZWZ0UmVjdXJzaXZlUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwic3RhcnRSdWxlRnJvbVJ1bGVzQW5kU3RhcnRSdWxlTmFtZSIsImZpbHRlciIsImFycmF5VXRpbGl0aWVzIiwicnVsZXNBc1N0cmluZyIsInJ1bGVzVXRpbGl0aWVzIiwicnVsZU1hcEZyb21SdWxlcyIsInN0YXJ0UnVsZUZyb21SdWxlcyIsImJuZkxleGVyIiwiQk5GTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsIkJORlBhcnNlciIsImJuZiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlcyIsInJ1bGVzRnJvbVRva2VucyIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsIkxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicnVsZU1hcCIsImxlZnRSZWN1cnNpdmVSdWxlcyIsImZvckVhY2giLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJydWxlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVzSW5jbHVkZXNSdWxlIiwiaW5jbHVkZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZSIsInB1c2giLCJzdGFydFJ1bGUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzdGFydFJ1bGVOYW1lIiwiZ2V0TmFtZSIsInVuc2hpZnQiLCJmaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFZR0EsWUFBWSxHQUFaQSxZQUFZO1FBT1pDLDBCQUEwQixHQUExQkEsMEJBQTBCO1FBb0IxQkMsNEJBQTRCLEdBQTVCQSw0QkFBNEI7UUFpQjVCQyxrQ0FBa0MsR0FBbENBLGtDQUFrQzs7QUF0RHpCLElBQUEsWUFBYyxXQUFkLGNBQWMsQ0FBQTtBQUNSLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUNBLElBQUEsYUFBZSxXQUFmLGVBQWUsQ0FBQTs7Ozs7Ozs7QUFFekQsSUFBTSxBQUFFQyxNQUFNLEdBQUtDLFVBQWMsZUFBQSxDQUF6QkQsTUFBTSxBQUFtQixFQUN6QkUsYUFBYSxHQUEyQ0MsYUFBYyxlQUFBLENBQXRFRCxhQUFhLEVBQUVFLGdCQUFnQixHQUF5QkQsYUFBYyxlQUFBLENBQXZEQyxnQkFBZ0IsRUFBRUMsa0JBQWtCLEdBQUtGLGFBQWMsZUFBQSxDQUFyQ0Usa0JBQWtCLEFBQW9CO0FBRS9FLElBQU1DLFFBQVEsR0FBR0MsWUFBUSxTQUFBLENBQUNDLFdBQVcsRUFBRSxFQUNqQ0MsU0FBUyxHQUFHQyxhQUFTLFVBQUEsQ0FBQ0YsV0FBVyxFQUFFLEFBQUM7QUFFbkMsU0FBU1osWUFBWSxDQUFDZSxHQUFHLEVBQUU7SUFDaEMsSUFBTUMsTUFBTSxHQUFHTixRQUFRLENBQUNPLGFBQWEsQ0FBQ0YsR0FBRyxDQUFDLEVBQ3BDRyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ00sZUFBZSxDQUFDSCxNQUFNLENBQUMsQUFBQztJQUVoRCxPQUFPRSxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNqQiwwQkFBMEIsQ0FBQ21CLHdCQUF3QixFQUFFQyx1QkFBdUIsRUFBRUMsT0FBTyxFQUFFO0lBQ3JHLElBQU1DLGtCQUFrQixHQUFHLEVBQUUsQUFBQztJQUU5Qkgsd0JBQXdCLENBQUNJLE9BQU8sQ0FBQyxTQUFDQyx1QkFBdUIsRUFBSztRQUM1RCxJQUFJQSxBQUF1QixXQUFZSixDQUFuQ0ksdUJBQXVCLEVBQVlKLHVCQUF1QixDQUFBLEVBQUU7WUFDOUQsSUFBTUssUUFBUSxHQUFHRCx1QkFBdUIsQ0FBQ0UsV0FBVyxFQUFFLEVBQ2hEQyxJQUFJLEdBQUdOLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLEVBQ3hCRyw4QkFBOEIsR0FBR04sa0JBQWtCLENBQUNPLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDLEFBQUM7WUFFekUsSUFBSSxDQUFDQyw4QkFBOEIsRUFBRTtnQkFDbkMsSUFBTUUsaUJBQWlCLEdBQUdILElBQUksQUFBQyxFQUFDLEdBQUc7Z0JBRW5DTCxrQkFBa0IsQ0FBQ1MsSUFBSSxDQUFDRCxpQkFBaUIsQ0FBQyxDQUFDO2FBQzVDO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFFSCxPQUFPUixrQkFBa0IsQ0FBQztDQUMzQjtBQUVNLFNBQVNyQiw0QkFBNEIsQ0FBQytCLFNBQVMsRUFBRVgsT0FBTyxFQUFFO0lBQy9ELElBQU1KLEtBQUssR0FBR2dCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDYixPQUFPLENBQUMsRUFDOUJjLGFBQWEsR0FBR0gsU0FBUyxDQUFDSSxPQUFPLEVBQUUsQUFBQztJQUUxQ2pDLE1BQU0sQ0FBQ2MsS0FBSyxFQUFFLFNBQUNVLElBQUksRUFBSztRQUN0QixJQUFNRixRQUFRLEdBQUdFLElBQUksQ0FBQ1MsT0FBTyxFQUFFLEFBQUM7UUFFaEMsSUFBSVgsUUFBUSxLQUFLVSxhQUFhLEVBQUU7WUFDOUIsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVIbEIsS0FBSyxDQUFDb0IsT0FBTyxDQUFDTCxTQUFTLENBQUMsQ0FBQztJQUV6QixPQUFPZixLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNmLGtDQUFrQyxDQUFDZSxLQUFLLEVBQUVrQixhQUFhLEVBQUU7SUFDdkUsSUFBSUgsU0FBUyxHQUFHZixLQUFLLENBQUNxQixJQUFJLENBQUMsU0FBQ1gsSUFBSSxFQUFLO1FBQ25DLElBQU1GLFFBQVEsR0FBR0UsSUFBSSxDQUFDUyxPQUFPLEVBQUUsQUFBQztRQUVoQyxJQUFJWCxRQUFRLEtBQUtVLGFBQWEsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0YsQ0FBQyxJQUFJLElBQUksQUFBQyxFQUFDLEdBQUc7SUFFZixJQUFJSCxTQUFTLEtBQUssSUFBSSxFQUFFO1FBQ3RCQSxTQUFTLEdBQUd4QixrQkFBa0IsQ0FBQ1MsS0FBSyxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPZSxTQUFTLENBQUM7Q0FDbEI7ZUFFYztJQUNiakMsWUFBWSxFQUFaQSxZQUFZO0lBQ1pNLGFBQWEsRUFBYkEsYUFBYTtJQUNiRSxnQkFBZ0IsRUFBaEJBLGdCQUFnQjtJQUNoQkMsa0JBQWtCLEVBQWxCQSxrQkFBa0I7SUFDbEJSLDBCQUEwQixFQUExQkEsMEJBQTBCO0lBQzFCQyw0QkFBNEIsRUFBNUJBLDRCQUE0QjtJQUM1QkMsa0NBQWtDLEVBQWxDQSxrQ0FBa0M7Q0FDbkMifQ==