"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap = {
    };
    rules.forEach(function(rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lTGVuZ3RoID0gcnVsZU5hbWUubGVuZ3RoO1xuXG4gICAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgICByZXR1cm4gbWF4aW11bVJ1bGVOYW1lTGVuZ3RoO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBtdWx0aUxpbmUpO1xuXG4gICAgICAgICAgcnVsZXNTdHJpbmcgKz0gcnVsZVN0cmluZztcblxuICAgICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKS5yZXBsYWNlKC9eXFxuXFxuLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSB7fTtcblxuICBydWxlcy5mb3JFYWNoKChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIHJ1bGVNYXBbcnVsZU5hbWVdID0gcnVsZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVNYXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJ1bGVGcm9tUnVsZXMocnVsZXMpIHtcbiAgY29uc3QgZmlyc3RSdWxlID0gZmlyc3QocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBmaXJzdFJ1bGU7ICAvLy9cblxuICByZXR1cm4gc3RhcnRSdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcChzdGFydFJ1bGUsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZXMgPSBPYmplY3QudmFsdWVzKHJ1bGVNYXApLFxuICAgICAgICBzdGFydFJ1bGVOYW1lID0gc3RhcnRSdWxlLmdldE5hbWUoKTtcblxuICBmaWx0ZXIocnVsZXMsIChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIGlmIChydWxlTmFtZSAhPT0gc3RhcnRSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBydWxlcy51bnNoaWZ0KHN0YXJ0UnVsZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl0sIm5hbWVzIjpbInJ1bGVzQXNTdHJpbmciLCJydWxlTWFwRnJvbVJ1bGVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwicnVsZXNGcm9tU3RhcnRSdWxlQW5kUnVsZU1hcCIsImZpcnN0IiwiZmlsdGVyIiwicnVsZXMiLCJtdWx0aUxpbmUiLCJtYXhpbXVtUnVsZU5hbWVMZW5ndGgiLCJyZWR1Y2UiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJyZXBsYWNlIiwicnVsZU1hcCIsImZvckVhY2giLCJmaXJzdFJ1bGUiLCJzdGFydFJ1bGUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzdGFydFJ1bGVOYW1lIiwidW5zaGlmdCJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQVFJQSxhQUFhLEdBQWJBLGFBQWE7UUFvQmJDLGdCQUFnQixHQUFoQkEsZ0JBQWdCO1FBWWhCQyxrQkFBa0IsR0FBbEJBLGtCQUFrQjtRQU9sQkMsNEJBQTRCLEdBQTVCQSw0QkFBNEI7QUE3Q2IsR0FBVyxDQUFYLFVBQVc7QUFFYixHQUFjLENBQWQsVUFBYztBQUUzQyxHQUFLLENBQUdDLEtBQUssR0FKa0IsVUFBVyxnQkFJbENBLEtBQUssRUFBRUMsTUFBTSxHQUpVLFVBQVcsZ0JBSTNCQSxNQUFNO1NBRUxMLGFBQWEsQ0FBQ00sS0FBSyxFQUFFQyxTQUFTLEVBQUUsQ0FBQztJQUMvQyxHQUFLLENBQUNDLHNCQUFxQixHQUFHRixLQUFLLENBQUNHLE1BQU0sQ0FBQyxRQUFRLENBQVBELHFCQUFxQixFQUFFRSxJQUFJLEVBQUssQ0FBQztRQUNyRSxHQUFLLENBQUNDLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxPQUFPLElBQ3ZCQyxjQUFjLEdBQUdGLFFBQVEsQ0FBQ0csTUFBTTtRQUV0Q04scUJBQXFCLEdBQUdPLElBQUksQ0FBQ0MsR0FBRyxDQUFDUixxQkFBcUIsRUFBRUssY0FBYztRQUV0RSxNQUFNLENBQUNMLHFCQUFxQjtJQUM5QixDQUFDLEVBQUUsQ0FBQyxHQUNKUyxZQUFXLEdBQUdYLEtBQUssQ0FBQ0csTUFBTSxDQUFDLFFBQVEsQ0FBUFEsV0FBVyxFQUFFUCxJQUFJLEVBQUssQ0FBQztRQUNqRCxHQUFLLENBQUNRLFVBQVUsR0FBR1IsSUFBSSxDQUFDUyxRQUFRLENBQUNYLHNCQUFxQixFQUFFRCxTQUFTO1FBRWpFVSxXQUFXLElBQUlDLFVBQVU7UUFFekIsTUFBTSxDQUFDRCxXQUFXO0lBQ3BCLENBQUMsRUFuQm9CLFVBQWMsZUFtQmxCRyxPQUFPLFVBbkJILFVBQWM7SUFxQnpDLE1BQU0sQ0FBQ0gsWUFBVztBQUNwQixDQUFDO1NBRWVoQixnQkFBZ0IsQ0FBQ0ssS0FBSyxFQUFFLENBQUM7SUFDdkMsR0FBSyxDQUFDZSxPQUFPLEdBQUcsQ0FBQztJQUFBLENBQUM7SUFFbEJmLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQyxRQUFRLENBQVBaLElBQUksRUFBSyxDQUFDO1FBQ3ZCLEdBQUssQ0FBQ0MsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU87UUFFN0JTLE9BQU8sQ0FBQ1YsUUFBUSxJQUFJRCxJQUFJO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUNXLE9BQU87QUFDaEIsQ0FBQztTQUVlbkIsa0JBQWtCLENBQUNJLEtBQUssRUFBRSxDQUFDO0lBQ3pDLEdBQUssQ0FBQ2lCLFNBQVMsR0FBR25CLEtBQUssQ0FBQ0UsS0FBSyxHQUN2QmtCLFNBQVMsR0FBR0QsU0FBUyxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUVqQyxNQUFNLENBQUNDLFNBQVM7QUFDbEIsQ0FBQztTQUVlckIsNEJBQTRCLENBQUNxQixTQUFTLEVBQUVILE9BQU8sRUFBRSxDQUFDO0lBQ2hFLEdBQUssQ0FBQ2YsS0FBSyxHQUFHbUIsTUFBTSxDQUFDQyxNQUFNLENBQUNMLE9BQU8sR0FDN0JNLGFBQWEsR0FBR0gsU0FBUyxDQUFDWixPQUFPO0lBRXZDUCxNQUFNLENBQUNDLEtBQUssRUFBRSxRQUFRLENBQVBJLElBQUksRUFBSyxDQUFDO1FBQ3ZCLEdBQUssQ0FBQ0MsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU87UUFFN0IsRUFBRSxFQUFFRCxRQUFRLEtBQUtnQixhQUFhLEVBQUUsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSTtRQUNiLENBQUM7SUFDSCxDQUFDO0lBRURyQixLQUFLLENBQUNzQixPQUFPLENBQUNKLFNBQVM7SUFFdkIsTUFBTSxDQUFDbEIsS0FBSztBQUNkLENBQUMifQ==