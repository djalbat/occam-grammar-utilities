"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength = rules.reduce(function(maximumRuleNameLength1, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength1 = Math.max(maximumRuleNameLength1, ruleNameLength);
        return maximumRuleNameLength1;
    }, 0), rulesString = rules.reduce(function(rulesString1, rule) {
        var ruleString = rule.asString(maximumRuleNameLength, multiLine);
        rulesString1 += ruleString;
        return rulesString1;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString;
}
function ruleMapFromRules(rules) {
    var ruleMap = rules.reduce(function(ruleMap1, rule) {
        var ruleName = rule.getName();
        ruleMap1[ruleName] = rule;
        return ruleMap1;
    }, {
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lTGVuZ3RoID0gcnVsZU5hbWUubGVuZ3RoO1xuXG4gICAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgICByZXR1cm4gbWF4aW11bVJ1bGVOYW1lTGVuZ3RoO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBtdWx0aUxpbmUpO1xuXG4gICAgICAgICAgcnVsZXNTdHJpbmcgKz0gcnVsZVN0cmluZztcblxuICAgICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKS5yZXBsYWNlKC9eXFxuXFxuLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlcy5yZWR1Y2UoKHJ1bGVNYXAsIHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuXG4gICAgcmV0dXJuIHJ1bGVNYXA7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQVFJLGFBQWEsR0FBYixhQUFhO1FBb0JiLGdCQUFnQixHQUFoQixnQkFBZ0I7UUFZaEIsa0JBQWtCLEdBQWxCLGtCQUFrQjtRQU9sQiw0QkFBNEIsR0FBNUIsNEJBQTRCO0FBN0NiLEdBQVcsQ0FBWCxVQUFXO0FBRWIsR0FBYyxDQUFkLFVBQWM7QUFFM0MsR0FBSyxDQUFHLEtBQUssR0FKa0IsVUFBVyxnQkFJbEMsS0FBSyxFQUFFLE1BQU0sR0FKVSxVQUFXLGdCQUkzQixNQUFNO1NBRUwsYUFBYSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUMvQyxHQUFLLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLE1BQU0sVUFBRSxzQkFBcUIsRUFBRSxJQUFJLEVBQUssQ0FBQztRQUNyRSxHQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQ3ZCLGNBQWMsR0FBRyxRQUFRLENBQUMsTUFBTTtRQUV0QyxzQkFBcUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFxQixFQUFFLGNBQWM7ZUFFL0Qsc0JBQXFCO0lBQzlCLENBQUMsRUFBRSxDQUFDLEdBQ0osV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLFVBQUUsWUFBVyxFQUFFLElBQUksRUFBSyxDQUFDO1FBQ2pELEdBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxTQUFTO1FBRWpFLFlBQVcsSUFBSSxVQUFVO2VBRWxCLFlBQVc7SUFDcEIsQ0FBQyxFQW5Cb0IsVUFBYyxlQW1CbEIsT0FBTyxVQW5CSCxVQUFjO1dBcUJsQyxXQUFXO0FBQ3BCLENBQUM7U0FFZSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QyxHQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLFVBQUUsUUFBTyxFQUFFLElBQUksRUFBSyxDQUFDO1FBQy9DLEdBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU87UUFFN0IsUUFBTyxDQUFDLFFBQVEsSUFBSSxJQUFJO2VBRWpCLFFBQU87SUFDaEIsQ0FBQzs7V0FFTSxPQUFPO0FBQ2hCLENBQUM7U0FFZSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QyxHQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQ3ZCLFNBQVMsR0FBRyxTQUFTLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1dBRTFCLFNBQVM7QUFDbEIsQ0FBQztTQUVlLDRCQUE0QixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNoRSxHQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUM3QixhQUFhLEdBQUcsU0FBUyxDQUFDLE9BQU87SUFFdkMsTUFBTSxDQUFDLEtBQUssV0FBRyxJQUFJLEVBQUssQ0FBQztRQUN2QixHQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPO1FBRTdCLEVBQUUsRUFBRSxRQUFRLEtBQUssYUFBYSxFQUFFLENBQUM7bUJBQ3hCLElBQUk7UUFDYixDQUFDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUztXQUVoQixLQUFLO0FBQ2QsQ0FBQyJ9