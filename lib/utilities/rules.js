"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.rulesFromStartRuleAndRuleMap = rulesFromStartRuleAndRuleMap;
var _necessary = require("necessary");
var _constants = require("../constants");
var first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap = {
    };
    rules.forEach(function(rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = first(rules), startRule = firstRule; ///
    return startRule;
}
function rulesFromStartRuleAndRuleMap(startRule, ruleMap) {
    var rules = Object.values(ruleMap), startRuleName = startRule.getName();
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzQXNTdHJpbmcocnVsZXMsIG11bHRpTGluZSkge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBNYXRoLm1heChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJldHVybiBtYXhpbXVtUnVsZU5hbWVMZW5ndGg7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBydWxlc1N0cmluZyA9IHJ1bGVzLnJlZHVjZSgocnVsZXNTdHJpbmcsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlU3RyaW5nID0gcnVsZS5hc1N0cmluZyhtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIG11bHRpTGluZSk7XG5cbiAgICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpLnJlcGxhY2UoL15cXG5cXG4vLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHt9O1xuXG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuICB9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UnVsZUZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwKHN0YXJ0UnVsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlcyA9IE9iamVjdC52YWx1ZXMocnVsZU1hcCksXG4gICAgICAgIHN0YXJ0UnVsZU5hbWUgPSBzdGFydFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIGZpbHRlcihydWxlcywgKHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgaWYgKHJ1bGVOYW1lICE9PSBzdGFydFJ1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG4iXSwibmFtZXMiOlsicnVsZXNBc1N0cmluZyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGVGcm9tUnVsZXMiLCJydWxlc0Zyb21TdGFydFJ1bGVBbmRSdWxlTWFwIiwiZmlyc3QiLCJmaWx0ZXIiLCJydWxlcyIsIm11bHRpTGluZSIsIm1heGltdW1SdWxlTmFtZUxlbmd0aCIsInJlZHVjZSIsInJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZUxlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJydWxlc1N0cmluZyIsInJ1bGVTdHJpbmciLCJhc1N0cmluZyIsInJlcGxhY2UiLCJydWxlTWFwIiwiZm9yRWFjaCIsImZpcnN0UnVsZSIsInN0YXJ0UnVsZSIsIk9iamVjdCIsInZhbHVlcyIsInN0YXJ0UnVsZU5hbWUiLCJ1bnNoaWZ0Il0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBU0lBLGFBQWEsR0FBYkEsYUFBYTtRQW9CYkMsZ0JBQWdCLEdBQWhCQSxnQkFBZ0I7UUFZaEJDLGtCQUFrQixHQUFsQkEsa0JBQWtCO1FBT2xCQyw0QkFBNEIsR0FBNUJBLDRCQUE0QjtBQTlDYixHQUFXLENBQVgsVUFBVztBQUViLEdBQWMsQ0FBZCxVQUFjO0FBRTNDLEdBQUssQ0FBR0MsS0FBSyxHQUprQixVQUFXLGdCQUlsQ0EsS0FBSyxFQUFFQyxNQUFNLEdBSlUsVUFBVyxnQkFJM0JBLE1BQU07U0FHTEwsYUFBYSxDQUFDTSxLQUFLLEVBQUVDLFNBQVMsRUFBRSxDQUFDO0lBQy9DLEdBQUssQ0FBQ0Msc0JBQXFCLEdBQUdGLEtBQUssQ0FBQ0csTUFBTSxDQUFDLFFBQVEsQ0FBUEQscUJBQXFCLEVBQUVFLElBQUksRUFBSyxDQUFDO1FBQ3JFLEdBQUssQ0FBQ0MsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU8sSUFDdkJDLGNBQWMsR0FBR0YsUUFBUSxDQUFDRyxNQUFNO1FBRXRDTixxQkFBcUIsR0FBR08sSUFBSSxDQUFDQyxHQUFHLENBQUNSLHFCQUFxQixFQUFFSyxjQUFjO1FBRXRFLE1BQU0sQ0FBQ0wscUJBQXFCO0lBQzlCLENBQUMsRUFBRSxDQUFDLEdBQ0pTLFlBQVcsR0FBR1gsS0FBSyxDQUFDRyxNQUFNLENBQUMsUUFBUSxDQUFQUSxXQUFXLEVBQUVQLElBQUksRUFBSyxDQUFDO1FBQ2pELEdBQUssQ0FBQ1EsVUFBVSxHQUFHUixJQUFJLENBQUNTLFFBQVEsQ0FBQ1gsc0JBQXFCLEVBQUVELFNBQVM7UUFFakVVLFdBQVcsSUFBSUMsVUFBVTtRQUV6QixNQUFNLENBQUNELFdBQVc7SUFDcEIsQ0FBQyxFQXBCb0IsVUFBYyxlQW9CbEJHLE9BQU8sVUFwQkgsVUFBYztJQXNCekMsTUFBTSxDQUFDSCxZQUFXO0FBQ3BCLENBQUM7U0FFZWhCLGdCQUFnQixDQUFDSyxLQUFLLEVBQUUsQ0FBQztJQUN2QyxHQUFLLENBQUNlLE9BQU8sR0FBRyxDQUFDO0lBQUEsQ0FBQztJQUVsQmYsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDLFFBQVEsQ0FBUFosSUFBSSxFQUFLLENBQUM7UUFDdkIsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QlMsT0FBTyxDQUFDVixRQUFRLElBQUlELElBQUk7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQ1csT0FBTztBQUNoQixDQUFDO1NBRWVuQixrQkFBa0IsQ0FBQ0ksS0FBSyxFQUFFLENBQUM7SUFDekMsR0FBSyxDQUFDaUIsU0FBUyxHQUFHbkIsS0FBSyxDQUFDRSxLQUFLLEdBQ3ZCa0IsU0FBUyxHQUFHRCxTQUFTLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRWpDLE1BQU0sQ0FBQ0MsU0FBUztBQUNsQixDQUFDO1NBRWVyQiw0QkFBNEIsQ0FBQ3FCLFNBQVMsRUFBRUgsT0FBTyxFQUFFLENBQUM7SUFDaEUsR0FBSyxDQUFDZixLQUFLLEdBQUdtQixNQUFNLENBQUNDLE1BQU0sQ0FBQ0wsT0FBTyxHQUM3Qk0sYUFBYSxHQUFHSCxTQUFTLENBQUNaLE9BQU87SUFFdkNQLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLFFBQVEsQ0FBUEksSUFBSSxFQUFLLENBQUM7UUFDdkIsR0FBSyxDQUFDQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTztRQUU3QixFQUFFLEVBQUVELFFBQVEsS0FBS2dCLGFBQWEsRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJO1FBQ2IsQ0FBQztJQUNILENBQUM7SUFFRHJCLEtBQUssQ0FBQ3NCLE9BQU8sQ0FBQ0osU0FBUztJQUV2QixNQUFNLENBQUNsQixLQUFLO0FBQ2QsQ0FBQyJ9