"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    },
    directlyReducedRuleNameFromRuleName: function() {
        return directlyReducedRuleNameFromRuleName;
    },
    directlyRepeatedRuleNameFromRuleName: function() {
        return directlyRepeatedRuleNameFromRuleName;
    },
    indirectlyReducedRuleNameFromRuleName: function() {
        return indirectlyReducedRuleNameFromRuleName;
    },
    ruleNameFromImplicitlyReducedRuleName: function() {
        return ruleNameFromImplicitlyReducedRuleName;
    },
    implicitlyReducedRuleNameFromRuleNameAndLeftRecursiveRuleName: function() {
        return implicitlyReducedRuleNameFromRuleNameAndLeftRecursiveRuleName;
    },
    indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName: function() {
        return indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName;
    }
});
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/(__|_)$/g, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/~[^~]+~|~$/, "");
    return ruleName;
}
function directlyReducedRuleNameFromRuleName(ruleName) {
    var directlyReducedRuleName = "".concat(ruleName, "_");
    return directlyReducedRuleName;
}
function directlyRepeatedRuleNameFromRuleName(ruleName) {
    var directlyRepeatedRuleName = "".concat(ruleName, "~");
    return directlyRepeatedRuleName;
}
function indirectlyReducedRuleNameFromRuleName(ruleName) {
    var indirectlyReducedRuleName = "".concat(ruleName, "__");
    return indirectlyReducedRuleName;
}
function ruleNameFromImplicitlyReducedRuleName(implicitlyReducedRuleName) {
    var ruleName = implicitlyReducedRuleName.replace(/_.+/, "");
    return ruleName;
}
function implicitlyReducedRuleNameFromRuleNameAndLeftRecursiveRuleName(ruleName, leftRecursiveRuleName) {
    var implicitlyReducedRuleName = "".concat(leftRecursiveRuleName, "_").concat(ruleName, "_");
    return implicitlyReducedRuleName;
}
function indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName(ruleName, leftRecursiveRuleName) {
    var indirectlyRepeatedRuleName = "".concat(ruleName, "~").concat(leftRecursiveRuleName, "~");
    return indirectlyRepeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lLnJlcGxhY2UoLyhfX3xfKSQvZywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZS5yZXBsYWNlKC9+W15+XSt+fH4kLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBgJHtydWxlTmFtZX1fYDtcblxuICByZXR1cm4gZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfV9fYDtcblxuICByZXR1cm4gaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbUltcGxpY2l0bHlSZWR1Y2VkUnVsZU5hbWUoaW1wbGljaXRseVJlZHVjZWRSdWxlTmFtZSkge1xuICBjb25zdCBydWxlTmFtZSA9IGltcGxpY2l0bHlSZWR1Y2VkUnVsZU5hbWUucmVwbGFjZSgvXy4rLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW1wbGljaXRseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZShydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gIGNvbnN0IGltcGxpY2l0bHlSZWR1Y2VkUnVsZU5hbWUgPSBgJHtsZWZ0UmVjdXJzaXZlUnVsZU5hbWV9XyR7cnVsZU5hbWV9X2A7XG5cbiAgcmV0dXJuIGltcGxpY2l0bHlSZWR1Y2VkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZShydWxlTmFtZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fiR7bGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lfX5gO1xuXG4gIHJldHVybiBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUiLCJydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tSW1wbGljaXRseVJlZHVjZWRSdWxlTmFtZSIsImltcGxpY2l0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZSIsInJ1bGVOYW1lIiwicmVwbGFjZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJpbXBsaWNpdGx5UmVkdWNlZFJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQUVnQkEsMkJBQTJCO2VBQTNCQTs7SUFNQUMsNEJBQTRCO2VBQTVCQTs7SUFNQUMsbUNBQW1DO2VBQW5DQTs7SUFNQUMsb0NBQW9DO2VBQXBDQTs7SUFNQUMscUNBQXFDO2VBQXJDQTs7SUFNQUMscUNBQXFDO2VBQXJDQTs7SUFNQUMsNkRBQTZEO2VBQTdEQTs7SUFNQUMsOERBQThEO2VBQTlEQTs7O0FBMUNULFNBQVNQLDRCQUE0QlEsZUFBZSxFQUFFO0lBQzNELElBQU1DLFdBQVdELGdCQUFnQkUsT0FBTyxDQUFDLFlBQVk7SUFFckQsT0FBT0Q7QUFDVDtBQUVPLFNBQVNSLDZCQUE2QlUsZ0JBQWdCLEVBQUU7SUFDN0QsSUFBTUYsV0FBV0UsaUJBQWlCRCxPQUFPLENBQUMsY0FBYztJQUV4RCxPQUFPRDtBQUNUO0FBRU8sU0FBU1Asb0NBQW9DTyxRQUFRLEVBQUU7SUFDNUQsSUFBTUcsMEJBQTBCLEFBQUMsR0FBVyxPQUFUSCxVQUFTO0lBRTVDLE9BQU9HO0FBQ1Q7QUFFTyxTQUFTVCxxQ0FBcUNNLFFBQVEsRUFBRTtJQUM3RCxJQUFNSSwyQkFBMkIsQUFBQyxHQUFXLE9BQVRKLFVBQVM7SUFFN0MsT0FBT0k7QUFDVDtBQUVPLFNBQVNULHNDQUFzQ0ssUUFBUSxFQUFFO0lBQzlELElBQU1LLDRCQUE0QixBQUFDLEdBQVcsT0FBVEwsVUFBUztJQUU5QyxPQUFPSztBQUNUO0FBRU8sU0FBU1Qsc0NBQXNDVSx5QkFBeUIsRUFBRTtJQUMvRSxJQUFNTixXQUFXTSwwQkFBMEJMLE9BQU8sQ0FBQyxPQUFPO0lBRTFELE9BQU9EO0FBQ1Q7QUFFTyxTQUFTSCw4REFBOERHLFFBQVEsRUFBRU8scUJBQXFCLEVBQUU7SUFDN0csSUFBTUQsNEJBQTRCLEFBQUMsR0FBMkJOLE9BQXpCTyx1QkFBc0IsS0FBWSxPQUFUUCxVQUFTO0lBRXZFLE9BQU9NO0FBQ1Q7QUFFTyxTQUFTUiwrREFBK0RFLFFBQVEsRUFBRU8scUJBQXFCLEVBQUU7SUFDOUcsSUFBTUMsNkJBQTZCLEFBQUMsR0FBY0QsT0FBWlAsVUFBUyxLQUF5QixPQUF0Qk8sdUJBQXNCO0lBRXhFLE9BQU9DO0FBQ1QifQ==