"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        get: all[name],
        enumerable: true
    });
}
_export(exports, {
    doesReducedRuleNameMatchRuleName: function() {
        return doesReducedRuleNameMatchRuleName;
    },
    reducedRuleNameFromRuleName: function() {
        return reducedRuleNameFromRuleName;
    },
    repeatedRuleNameFromRuleName: function() {
        return repeatedRuleNameFromRuleName;
    },
    repeatedRuleNameFromRuleNameAndIndex: function() {
        return repeatedRuleNameFromRuleNameAndIndex;
    },
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    }
});
function reducedRuleNameFromRuleName(ruleName) {
    var reducedRuleName = "".concat(ruleName, "_");
    return reducedRuleName;
}
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/_$/, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/(?:\.\d+)?~$/, "");
    return ruleName;
}
function repeatedRuleNameFromRuleName(ruleName) {
    var repeatedRuleName = "".concat(ruleName, "~");
    return repeatedRuleName;
}
function doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName) {
    var ruleNameA = ruleName; ///
    ruleName = ruleNameFromReducedRuleName(reducedRuleName);
    var ruleNameB = ruleName; ///
    var reducedRuleNameMatchesRuleName = ruleNameA === ruleNameB; ///
    return reducedRuleNameMatchesRuleName;
}
function repeatedRuleNameFromRuleNameAndIndex(ruleName, index) {
    var repeatedRuleName = index === 0 ? "".concat(ruleName, "~") : "".concat(ruleName, ".").concat(index, "~");
    return repeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9X2A7XG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWUucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lLnJlcGxhY2UoLyg/OlxcLlxcZCspP34kLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCByZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb2VzUmVkdWNlZFJ1bGVOYW1lTWF0Y2hSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lQSA9IHJ1bGVOYW1lOyAvLy9cblxuICBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpO1xuXG4gIGNvbnN0IHJ1bGVOYW1lQiA9IHJ1bGVOYW1lOyAvLy9cblxuICBjb25zdCByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSAocnVsZU5hbWVBID09PSBydWxlTmFtZUIpOyAgLy8vXG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRJbmRleChydWxlTmFtZSxpbmRleCkge1xuICBjb25zdCByZXBlYXRlZFJ1bGVOYW1lID0gKGluZGV4ID09PSAwKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cnVsZU5hbWV9fmAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cnVsZU5hbWV9LiR7aW5kZXh9fmA7XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZU5hbWU7XG59XG4iXSwibmFtZXMiOlsiZG9lc1JlZHVjZWRSdWxlTmFtZU1hdGNoUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZEluZGV4IiwicnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lIiwicmVwbGFjZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJydWxlTmFtZUEiLCJydWxlTmFtZUIiLCJyZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUiLCJpbmRleCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQTBCR0EsZ0NBQWdDO2VBQWhDQSxnQ0FBZ0M7O0lBeEJoQ0MsMkJBQTJCO2VBQTNCQSwyQkFBMkI7O0lBa0IzQkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7O0lBa0I1QkMsb0NBQW9DO2VBQXBDQSxvQ0FBb0M7O0lBOUJwQ0MsMkJBQTJCO2VBQTNCQSwyQkFBMkI7O0lBTTNCQyw0QkFBNEI7ZUFBNUJBLDRCQUE0Qjs7O0FBWnJDLFNBQVNKLDJCQUEyQixDQUFDSyxRQUFRLEVBQUU7SUFDcEQsSUFBTUMsZUFBZSxHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVkQsUUFBUSxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRXZDLE9BQU9DLGVBQWUsQ0FBQztDQUN4QjtBQUVNLFNBQVNILDJCQUEyQixDQUFDRyxlQUFlLEVBQUU7SUFDM0QsSUFBTUQsUUFBUSxHQUFHQyxlQUFlLENBQUNDLE9BQU8sT0FBTyxFQUFFLENBQUMsQUFBQztJQUVuRCxPQUFPRixRQUFRLENBQUM7Q0FDakI7QUFFTSxTQUFTRCw0QkFBNEIsQ0FBQ0ksZ0JBQWdCLEVBQUU7SUFDN0QsSUFBTUgsUUFBUSxHQUFHRyxnQkFBZ0IsQ0FBQ0QsT0FBTyxpQkFBaUIsRUFBRSxDQUFDLEFBQUM7SUFFOUQsT0FBT0YsUUFBUSxDQUFDO0NBQ2pCO0FBRU0sU0FBU0osNEJBQTRCLENBQUNJLFFBQVEsRUFBRTtJQUNyRCxJQUFNRyxnQkFBZ0IsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZILFFBQVEsRUFBQyxHQUFDLENBQUMsQUFBQztJQUV4QyxPQUFPRyxnQkFBZ0IsQ0FBQztDQUN6QjtBQUVNLFNBQVNULGdDQUFnQyxDQUFDTyxlQUFlLEVBQUVELFFBQVEsRUFBRTtJQUMxRSxJQUFNSSxTQUFTLEdBQUdKLFFBQVEsQUFBQyxFQUFDLEdBQUc7SUFFL0JBLFFBQVEsR0FBR0YsMkJBQTJCLENBQUNHLGVBQWUsQ0FBQyxDQUFDO0lBRXhELElBQU1JLFNBQVMsR0FBR0wsUUFBUSxBQUFDLEVBQUMsR0FBRztJQUUvQixJQUFNTSw4QkFBOEIsR0FBSUYsU0FBUyxLQUFLQyxTQUFTLEFBQUMsQUFBQyxFQUFFLEdBQUc7SUFFdEUsT0FBT0MsOEJBQThCLENBQUM7Q0FDdkM7QUFFTSxTQUFTVCxvQ0FBb0MsQ0FBQ0csUUFBUSxFQUFDTyxLQUFLLEVBQUU7SUFDbkUsSUFBTUosZ0JBQWdCLEdBQUcsQUFBQ0ksS0FBSyxLQUFLLENBQUMsR0FDWCxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZQLFFBQVEsRUFBQyxHQUFDLENBQUMsR0FDWixBQUFDLEVBQUEsQ0FBY08sTUFBSyxDQUFqQlAsUUFBUSxFQUFDLEdBQUMsQ0FBUSxDQUFBLE1BQUMsQ0FBUE8sS0FBSyxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRXBELE9BQU9KLGdCQUFnQixDQUFDO0NBQ3pCIn0=