"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    reducedRuleNameFromRuleName: function() {
        return reducedRuleNameFromRuleName;
    },
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    },
    repeatedRuleNameFromRuleName: function() {
        return repeatedRuleNameFromRuleName;
    },
    doesReducedRuleNameMatchRuleName: function() {
        return doesReducedRuleNameMatchRuleName;
    },
    reducedRuleNameFromRepeatedRuleName: function() {
        return reducedRuleNameFromRepeatedRuleName;
    },
    repeatedRuleNameFromRuleNameAndIndex: function() {
        return repeatedRuleNameFromRuleNameAndIndex;
    }
});
function reducedRuleNameFromRuleName(ruleName) {
    var reducedRuleName = "".concat(ruleName, "_");
    return reducedRuleName;
}
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/_$/, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/(?:\.\d+)?~$/, "");
    return ruleName;
}
function repeatedRuleNameFromRuleName(ruleName) {
    var repeatedRuleName = "".concat(ruleName, "~");
    return repeatedRuleName;
}
function doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName) {
    var ruleNameA = ruleName; ///
    ruleName = ruleNameFromReducedRuleName(reducedRuleName);
    var ruleNameB = ruleName; ///
    var reducedRuleNameMatchesRuleName = ruleNameA === ruleNameB; ///
    return reducedRuleNameMatchesRuleName;
}
function reducedRuleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = ruleNameFromRepeatedRuleName(repeatedRuleName), reducedRuleName = reducedRuleNameFromRuleName(ruleName);
    return reducedRuleName;
}
function repeatedRuleNameFromRuleNameAndIndex(ruleName, index) {
    var repeatedRuleName = index === 0 ? "".concat(ruleName, "~") : "".concat(ruleName, ".").concat(index, "~");
    return repeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9X2A7XG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWUucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lLnJlcGxhY2UoLyg/OlxcLlxcZCspP34kLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCByZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb2VzUmVkdWNlZFJ1bGVOYW1lTWF0Y2hSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lQSA9IHJ1bGVOYW1lOyAvLy9cblxuICBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpO1xuXG4gIGNvbnN0IHJ1bGVOYW1lQiA9IHJ1bGVOYW1lOyAvLy9cblxuICBjb25zdCByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSAocnVsZU5hbWVBID09PSBydWxlTmFtZUIpOyAgLy8vXG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZWRSdWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpLFxuICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gIHJldHVybiByZWR1Y2VkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kSW5kZXgocnVsZU5hbWUsaW5kZXgpIHtcbiAgY29uc3QgcmVwZWF0ZWRSdWxlTmFtZSA9IChpbmRleCA9PT0gMCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfX5gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfS4ke2luZGV4fX5gO1xuXG4gIHJldHVybiByZXBlYXRlZFJ1bGVOYW1lO1xufVxuXG4iXSwibmFtZXMiOlsicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZSIsInJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJkb2VzUmVkdWNlZFJ1bGVOYW1lTWF0Y2hSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZEluZGV4IiwicnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZXBsYWNlIiwicmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lQSIsInJ1bGVOYW1lQiIsInJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsImluZGV4Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBRUdBLDJCQUEyQjtlQUEzQkEsMkJBQTJCOztJQU0zQkMsMkJBQTJCO2VBQTNCQSwyQkFBMkI7O0lBTTNCQyw0QkFBNEI7ZUFBNUJBLDRCQUE0Qjs7SUFNNUJDLDRCQUE0QjtlQUE1QkEsNEJBQTRCOztJQU01QkMsZ0NBQWdDO2VBQWhDQSxnQ0FBZ0M7O0lBWWhDQyxtQ0FBbUM7ZUFBbkNBLG1DQUFtQzs7SUFPbkNDLG9DQUFvQztlQUFwQ0Esb0NBQW9DOzs7QUEzQzdDLFNBQVNOLDJCQUEyQixDQUFDTyxRQUFRLEVBQUU7SUFDcEQsSUFBTUMsZUFBZSxHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVkQsUUFBUSxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRXZDLE9BQU9DLGVBQWUsQ0FBQztDQUN4QjtBQUVNLFNBQVNQLDJCQUEyQixDQUFDTyxlQUFlLEVBQUU7SUFDM0QsSUFBTUQsUUFBUSxHQUFHQyxlQUFlLENBQUNDLE9BQU8sT0FBTyxFQUFFLENBQUMsQUFBQztJQUVuRCxPQUFPRixRQUFRLENBQUM7Q0FDakI7QUFFTSxTQUFTTCw0QkFBNEIsQ0FBQ1EsZ0JBQWdCLEVBQUU7SUFDN0QsSUFBTUgsUUFBUSxHQUFHRyxnQkFBZ0IsQ0FBQ0QsT0FBTyxpQkFBaUIsRUFBRSxDQUFDLEFBQUM7SUFFOUQsT0FBT0YsUUFBUSxDQUFDO0NBQ2pCO0FBRU0sU0FBU0osNEJBQTRCLENBQUNJLFFBQVEsRUFBRTtJQUNyRCxJQUFNRyxnQkFBZ0IsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZILFFBQVEsRUFBQyxHQUFDLENBQUMsQUFBQztJQUV4QyxPQUFPRyxnQkFBZ0IsQ0FBQztDQUN6QjtBQUVNLFNBQVNOLGdDQUFnQyxDQUFDSSxlQUFlLEVBQUVELFFBQVEsRUFBRTtJQUMxRSxJQUFNSSxTQUFTLEdBQUdKLFFBQVEsQUFBQyxFQUFDLEdBQUc7SUFFL0JBLFFBQVEsR0FBR04sMkJBQTJCLENBQUNPLGVBQWUsQ0FBQyxDQUFDO0lBRXhELElBQU1JLFNBQVMsR0FBR0wsUUFBUSxBQUFDLEVBQUMsR0FBRztJQUUvQixJQUFNTSw4QkFBOEIsR0FBSUYsU0FBUyxLQUFLQyxTQUFTLEFBQUMsQUFBQyxFQUFFLEdBQUc7SUFFdEUsT0FBT0MsOEJBQThCLENBQUM7Q0FDdkM7QUFFTSxTQUFTUixtQ0FBbUMsQ0FBQ0ssZ0JBQWdCLEVBQUU7SUFDcEUsSUFBTUgsUUFBUSxHQUFHTCw0QkFBNEIsQ0FBQ1EsZ0JBQWdCLENBQUMsRUFDekRGLGVBQWUsR0FBR1IsMkJBQTJCLENBQUNPLFFBQVEsQ0FBQyxBQUFDO0lBRTlELE9BQU9DLGVBQWUsQ0FBQztDQUN4QjtBQUVNLFNBQVNGLG9DQUFvQyxDQUFDQyxRQUFRLEVBQUNPLEtBQUssRUFBRTtJQUNuRSxJQUFNSixnQkFBZ0IsR0FBRyxBQUFDSSxLQUFLLEtBQUssQ0FBQyxHQUNYLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVlAsUUFBUSxFQUFDLEdBQUMsQ0FBQyxHQUNaLEFBQUMsRUFBQSxDQUFjTyxNQUFLLENBQWpCUCxRQUFRLEVBQUMsR0FBQyxDQUFRLENBQUEsTUFBQyxDQUFQTyxLQUFLLEVBQUMsR0FBQyxDQUFDLEFBQUM7SUFFcEQsT0FBT0osZ0JBQWdCLENBQUM7Q0FDekIifQ==