"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    },
    repeatedRuleNameFromRuleName: function() {
        return repeatedRuleNameFromRuleName;
    },
    doesReducedRuleNameMatchRuleName: function() {
        return doesReducedRuleNameMatchRuleName;
    },
    directlyReducedRuleNameFromRuleName: function() {
        return directlyReducedRuleNameFromRuleName;
    },
    indirectlyReducedRuleNameFromRuleName: function() {
        return indirectlyReducedRuleNameFromRuleName;
    }
});
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/(__|_)$/g, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/~$/, "");
    return ruleName;
}
function repeatedRuleNameFromRuleName(ruleName) {
    var repeatedRuleName = "".concat(ruleName, "~");
    return repeatedRuleName;
}
function doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName) {
    var ruleNameA = ruleName; ///
    ruleName = ruleNameFromReducedRuleName(reducedRuleName);
    var ruleNameB = ruleName; ///
    var reducedRuleNameMatchesRuleName = ruleNameA === ruleNameB; ///
    return reducedRuleNameMatchesRuleName;
}
function directlyReducedRuleNameFromRuleName(ruleName) {
    var directlyReducedRuleName = "".concat(ruleName, "_");
    return directlyReducedRuleName;
}
function indirectlyReducedRuleNameFromRuleName(ruleName) {
    var indirectlyReducedRuleName = "".concat(ruleName, "__");
    return indirectlyReducedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lLnJlcGxhY2UoLyhfX3xfKSQvZywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZS5yZXBsYWNlKC9+JC8sIFwiXCIpO1xuXG4gIHJldHVybiBydWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVwZWF0ZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfX5gO1xuXG4gIHJldHVybiByZXBlYXRlZFJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9lc1JlZHVjZWRSdWxlTmFtZU1hdGNoUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lLCBydWxlTmFtZSkge1xuICBjb25zdCBydWxlTmFtZUEgPSBydWxlTmFtZTsgLy8vXG5cbiAgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKTtcblxuICBjb25zdCBydWxlTmFtZUIgPSBydWxlTmFtZTsgLy8vXG5cbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lID0gKHJ1bGVOYW1lQSA9PT0gcnVsZU5hbWVCKTsgIC8vL1xuXG4gIHJldHVybiByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfV9gO1xuXG4gIHJldHVybiBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfV9fYDtcblxuICByZXR1cm4gaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUiLCJydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImRvZXNSZWR1Y2VkUnVsZU5hbWVNYXRjaFJ1bGVOYW1lIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lIiwicnVsZU5hbWUiLCJyZXBsYWNlIiwicmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lQSIsInJ1bGVOYW1lQiIsInJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsImRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQUVHQSwyQkFBMkI7ZUFBM0JBLDJCQUEyQjs7SUFNM0JDLDRCQUE0QjtlQUE1QkEsNEJBQTRCOztJQU01QkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7O0lBTTVCQyxnQ0FBZ0M7ZUFBaENBLGdDQUFnQzs7SUFZaENDLG1DQUFtQztlQUFuQ0EsbUNBQW1DOztJQU1uQ0MscUNBQXFDO2VBQXJDQSxxQ0FBcUM7OztBQXBDOUMsU0FBU0wsMkJBQTJCLENBQUNNLGVBQWUsRUFBRTtJQUMzRCxJQUFNQyxRQUFRLEdBQUdELGVBQWUsQ0FBQ0UsT0FBTyxhQUFhLEVBQUUsQ0FBQyxBQUFDO0lBRXpELE9BQU9ELFFBQVEsQ0FBQztDQUNqQjtBQUVNLFNBQVNOLDRCQUE0QixDQUFDUSxnQkFBZ0IsRUFBRTtJQUM3RCxJQUFNRixRQUFRLEdBQUdFLGdCQUFnQixDQUFDRCxPQUFPLE9BQU8sRUFBRSxDQUFDLEFBQUM7SUFFcEQsT0FBT0QsUUFBUSxDQUFDO0NBQ2pCO0FBRU0sU0FBU0wsNEJBQTRCLENBQUNLLFFBQVEsRUFBRTtJQUNyRCxJQUFNRSxnQkFBZ0IsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZGLFFBQVEsRUFBQyxHQUFDLENBQUMsQUFBQztJQUV4QyxPQUFPRSxnQkFBZ0IsQ0FBQztDQUN6QjtBQUVNLFNBQVNOLGdDQUFnQyxDQUFDRyxlQUFlLEVBQUVDLFFBQVEsRUFBRTtJQUMxRSxJQUFNRyxTQUFTLEdBQUdILFFBQVEsQUFBQyxFQUFDLEdBQUc7SUFFL0JBLFFBQVEsR0FBR1AsMkJBQTJCLENBQUNNLGVBQWUsQ0FBQyxDQUFDO0lBRXhELElBQU1LLFNBQVMsR0FBR0osUUFBUSxBQUFDLEVBQUMsR0FBRztJQUUvQixJQUFNSyw4QkFBOEIsR0FBSUYsU0FBUyxLQUFLQyxTQUFTLEFBQUMsQUFBQyxFQUFFLEdBQUc7SUFFdEUsT0FBT0MsOEJBQThCLENBQUM7Q0FDdkM7QUFFTSxTQUFTUixtQ0FBbUMsQ0FBQ0csUUFBUSxFQUFFO0lBQzVELElBQU1NLHVCQUF1QixHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVk4sUUFBUSxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRS9DLE9BQU9NLHVCQUF1QixDQUFDO0NBQ2hDO0FBRU0sU0FBU1IscUNBQXFDLENBQUNFLFFBQVEsRUFBRTtJQUM5RCxJQUFNTyx5QkFBeUIsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFFLENBQVhQLFFBQVEsRUFBQyxJQUFFLENBQUMsQUFBQztJQUVsRCxPQUFPTyx5QkFBeUIsQ0FBQztDQUNsQyJ9