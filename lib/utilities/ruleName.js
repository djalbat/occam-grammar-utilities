"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        get: all[name],
        enumerable: true
    });
}
_export(exports, {
    doesReducedRuleNameMatchRuleName: function() {
        return doesReducedRuleNameMatchRuleName;
    },
    reducedRuleNameFromRuleName: function() {
        return reducedRuleNameFromRuleName;
    },
    repeatedRuleNameFromRuleNameAndIndex: function() {
        return repeatedRuleNameFromRuleNameAndIndex;
    },
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    }
});
function reducedRuleNameFromRuleName(ruleName) {
    var reducedRuleName = "".concat(ruleName, "_");
    return reducedRuleName;
}
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/_$/, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/(?:\.\d+)?~$/, "");
    return ruleName;
}
function doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName) {
    var ruleNameA = ruleName; ///
    ruleName = ruleNameFromReducedRuleName(reducedRuleName);
    var ruleNameB = ruleName; ///
    var reducedRuleNameMatchesRuleName = ruleNameA === ruleNameB; ///
    return reducedRuleNameMatchesRuleName;
}
function repeatedRuleNameFromRuleNameAndIndex(ruleName, index) {
    var repeatedRuleName = index === 0 ? "".concat(ruleName, "~") : "".concat(ruleName, ".").concat(index, "~");
    return repeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9X2A7XG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWUucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lLnJlcGxhY2UoLyg/OlxcLlxcZCspP34kLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9lc1JlZHVjZWRSdWxlTmFtZU1hdGNoUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lLCBydWxlTmFtZSkge1xuICBjb25zdCBydWxlTmFtZUEgPSBydWxlTmFtZTsgLy8vXG5cbiAgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKTtcblxuICBjb25zdCBydWxlTmFtZUIgPSBydWxlTmFtZTsgLy8vXG5cbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lID0gKHJ1bGVOYW1lQSA9PT0gcnVsZU5hbWVCKTsgIC8vL1xuXG4gIHJldHVybiByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kSW5kZXgocnVsZU5hbWUsaW5kZXgpIHtcbiAgY29uc3QgcmVwZWF0ZWRSdWxlTmFtZSA9IChpbmRleCA9PT0gMCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfX5gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfS4ke2luZGV4fX5gO1xuXG4gIHJldHVybiByZXBlYXRlZFJ1bGVOYW1lO1xufVxuIl0sIm5hbWVzIjpbImRvZXNSZWR1Y2VkUnVsZU5hbWVNYXRjaFJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZUFuZEluZGV4IiwicnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVOYW1lIiwicmVwbGFjZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJydWxlTmFtZUEiLCJydWxlTmFtZUIiLCJyZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUiLCJpbmRleCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7OztJQW9CR0EsZ0NBQWdDO2VBQWhDQSxnQ0FBZ0M7O0lBbEJoQ0MsMkJBQTJCO2VBQTNCQSwyQkFBMkI7O0lBOEIzQkMsb0NBQW9DO2VBQXBDQSxvQ0FBb0M7O0lBeEJwQ0MsMkJBQTJCO2VBQTNCQSwyQkFBMkI7O0lBTTNCQyw0QkFBNEI7ZUFBNUJBLDRCQUE0Qjs7O0FBWnJDLFNBQVNILDJCQUEyQixDQUFDSSxRQUFRLEVBQUU7SUFDcEQsSUFBTUMsZUFBZSxHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVkQsUUFBUSxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRXZDLE9BQU9DLGVBQWUsQ0FBQztDQUN4QjtBQUVNLFNBQVNILDJCQUEyQixDQUFDRyxlQUFlLEVBQUU7SUFDM0QsSUFBTUQsUUFBUSxHQUFHQyxlQUFlLENBQUNDLE9BQU8sT0FBTyxFQUFFLENBQUMsQUFBQztJQUVuRCxPQUFPRixRQUFRLENBQUM7Q0FDakI7QUFFTSxTQUFTRCw0QkFBNEIsQ0FBQ0ksZ0JBQWdCLEVBQUU7SUFDN0QsSUFBTUgsUUFBUSxHQUFHRyxnQkFBZ0IsQ0FBQ0QsT0FBTyxpQkFBaUIsRUFBRSxDQUFDLEFBQUM7SUFFOUQsT0FBT0YsUUFBUSxDQUFDO0NBQ2pCO0FBRU0sU0FBU0wsZ0NBQWdDLENBQUNNLGVBQWUsRUFBRUQsUUFBUSxFQUFFO0lBQzFFLElBQU1JLFNBQVMsR0FBR0osUUFBUSxBQUFDLEVBQUMsR0FBRztJQUUvQkEsUUFBUSxHQUFHRiwyQkFBMkIsQ0FBQ0csZUFBZSxDQUFDLENBQUM7SUFFeEQsSUFBTUksU0FBUyxHQUFHTCxRQUFRLEFBQUMsRUFBQyxHQUFHO0lBRS9CLElBQU1NLDhCQUE4QixHQUFJRixTQUFTLEtBQUtDLFNBQVMsQUFBQyxBQUFDLEVBQUUsR0FBRztJQUV0RSxPQUFPQyw4QkFBOEIsQ0FBQztDQUN2QztBQUVNLFNBQVNULG9DQUFvQyxDQUFDRyxRQUFRLEVBQUNPLEtBQUssRUFBRTtJQUNuRSxJQUFNSixnQkFBZ0IsR0FBRyxBQUFDSSxLQUFLLEtBQUssQ0FBQyxHQUNYLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVlAsUUFBUSxFQUFDLEdBQUMsQ0FBQyxHQUNaLEFBQUMsRUFBQSxDQUFjTyxNQUFLLENBQWpCUCxRQUFRLEVBQUMsR0FBQyxDQUFRLENBQUEsTUFBQyxDQUFQTyxLQUFLLEVBQUMsR0FBQyxDQUFDLEFBQUM7SUFFcEQsT0FBT0osZ0JBQWdCLENBQUM7Q0FDekIifQ==