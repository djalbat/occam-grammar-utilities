"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    reducedRuleNameFromRuleName: function() {
        return reducedRuleNameFromRuleName;
    },
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    directlyRepeatedRuleNameFromRuleName: function() {
        return directlyRepeatedRuleNameFromRuleName;
    },
    ruleNameFromIndirectlyRepeatedRuleName: function() {
        return ruleNameFromIndirectlyRepeatedRuleName;
    },
    leftRecursiveRuleNameFromIndirectlyRepeatedRuleName: function() {
        return leftRecursiveRuleNameFromIndirectlyRepeatedRuleName;
    },
    indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName: function() {
        return indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName;
    }
});
var _constants = require("../constants");
function reducedRuleNameFromRuleName(ruleName) {
    var reducedRuleName = "".concat(ruleName, "_");
    return reducedRuleName;
}
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/_$/g, _constants.EMPTY_STRING);
    return ruleName;
}
function directlyRepeatedRuleNameFromRuleName(ruleName) {
    var directlyRepeatedRuleName = "".concat(ruleName, "~");
    return directlyRepeatedRuleName;
}
function ruleNameFromIndirectlyRepeatedRuleName(indirectlyRepeatedRuleName) {
    var ruleName = indirectlyRepeatedRuleName.replace(/~.+$/g, _constants.EMPTY_STRING);
    return ruleName;
}
function leftRecursiveRuleNameFromIndirectlyRepeatedRuleName(indirectlyRepeatedRuleName) {
    var leftRecursiveRuleName = indirectlyRepeatedRuleName.replace(/^[^~]+~/g, _constants.EMPTY_STRING);
    return leftRecursiveRuleName;
}
function indirectlyRepeatedRuleNameFromRuleNameAndLeftRecursiveRuleName(ruleName, leftRecursiveRuleName) {
    var indirectlyRepeatedRuleName = "".concat(ruleName, "~").concat(leftRecursiveRuleName);
    return indirectlyRepeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCByZWR1Y2VkUnVsZU5hbWUgPSBgJHtydWxlTmFtZX1fYDtcblxuICByZXR1cm4gcmVkdWNlZFJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUmVkdWNlZFJ1bGVOYW1lKHJlZHVjZWRSdWxlTmFtZSkge1xuICBjb25zdCBydWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZS5yZXBsYWNlKC9fJC9nLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBydWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBgJHtydWxlTmFtZX1+YDtcblxuICByZXR1cm4gZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tSW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUoaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZS5yZXBsYWNlKC9+LiskL2csIEVNUFRZX1NUUklORyk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbUluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lKGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lLnJlcGxhY2UoL15bXn5dK34vZywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWVBbmRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUocnVsZU5hbWUsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSkge1xuICBjb25zdCBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfX4ke2xlZnRSZWN1cnNpdmVSdWxlTmFtZX1gO1xuXG4gIHJldHVybiBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJydWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21JbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZXBsYWNlIiwiRU1QVFlfU1RSSU5HIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQUlnQkEsMkJBQTJCO2VBQTNCQTs7SUFNQUMsMkJBQTJCO2VBQTNCQTs7SUFNQUMsb0NBQW9DO2VBQXBDQTs7SUFNQUMsc0NBQXNDO2VBQXRDQTs7SUFNQUMsbURBQW1EO2VBQW5EQTs7SUFNQUMsOERBQThEO2VBQTlEQTs7O3lCQWhDYTtBQUV0QixTQUFTTCw0QkFBNEJNLFFBQVE7SUFDbEQsSUFBTUMsa0JBQWtCLEFBQUMsR0FBVyxPQUFURCxVQUFTO0lBRXBDLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTTiw0QkFBNEJNLGVBQWU7SUFDekQsSUFBTUQsV0FBV0MsZ0JBQWdCQyxPQUFPLENBQUMsT0FBT0MsdUJBQVk7SUFFNUQsT0FBT0g7QUFDVDtBQUVPLFNBQVNKLHFDQUFxQ0ksUUFBUTtJQUMzRCxJQUFNSSwyQkFBMkIsQUFBQyxHQUFXLE9BQVRKLFVBQVM7SUFFN0MsT0FBT0k7QUFDVDtBQUVPLFNBQVNQLHVDQUF1Q1EsMEJBQTBCO0lBQy9FLElBQU1MLFdBQVdLLDJCQUEyQkgsT0FBTyxDQUFDLFNBQVNDLHVCQUFZO0lBRXpFLE9BQU9IO0FBQ1Q7QUFFTyxTQUFTRixvREFBb0RPLDBCQUEwQjtJQUM1RixJQUFNQyx3QkFBd0JELDJCQUEyQkgsT0FBTyxDQUFDLFlBQVlDLHVCQUFZO0lBRXpGLE9BQU9HO0FBQ1Q7QUFFTyxTQUFTUCwrREFBK0RDLFFBQVEsRUFBRU0scUJBQXFCO0lBQzVHLElBQU1ELDZCQUE2QixBQUFDLEdBQWNDLE9BQVpOLFVBQVMsS0FBeUIsT0FBdEJNO0lBRWxELE9BQU9EO0FBQ1QifQ==