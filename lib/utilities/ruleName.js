"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        get: all[name],
        enumerable: true
    });
}
_export(exports, {
    doesReducedRuleNameMatchRuleName: function() {
        return doesReducedRuleNameMatchRuleName;
    },
    reducedRuleNameFromRepeatedRuleName: function() {
        return reducedRuleNameFromRepeatedRuleName;
    },
    reducedRuleNameFromRuleName: function() {
        return reducedRuleNameFromRuleName;
    },
    repeatedRuleNameFromRuleName: function() {
        return repeatedRuleNameFromRuleName;
    },
    repeatedRuleNameFromRuleNameAndIndex: function() {
        return repeatedRuleNameFromRuleNameAndIndex;
    },
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    }
});
function reducedRuleNameFromRuleName(ruleName) {
    var reducedRuleName = "".concat(ruleName, "_");
    return reducedRuleName;
}
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/_$/, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/(?:\.\d+)?~$/, "");
    return ruleName;
}
function repeatedRuleNameFromRuleName(ruleName) {
    var repeatedRuleName = "".concat(ruleName, "~");
    return repeatedRuleName;
}
function doesReducedRuleNameMatchRuleName(reducedRuleName, ruleName) {
    var ruleNameA = ruleName; ///
    ruleName = ruleNameFromReducedRuleName(reducedRuleName);
    var ruleNameB = ruleName; ///
    var reducedRuleNameMatchesRuleName = ruleNameA === ruleNameB; ///
    return reducedRuleNameMatchesRuleName;
}
function reducedRuleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = ruleNameFromRepeatedRuleName(repeatedRuleName), reducedRuleName = reducedRuleNameFromRuleName(ruleName);
    return reducedRuleName;
}
function repeatedRuleNameFromRuleNameAndIndex(ruleName, index) {
    var repeatedRuleName = index === 0 ? "".concat(ruleName, "~") : "".concat(ruleName, ".").concat(index, "~");
    return repeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9X2A7XG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWUucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSByZXBlYXRlZFJ1bGVOYW1lLnJlcGxhY2UoLyg/OlxcLlxcZCspP34kLywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCByZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIHJlcGVhdGVkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb2VzUmVkdWNlZFJ1bGVOYW1lTWF0Y2hSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lQSA9IHJ1bGVOYW1lOyAvLy9cblxuICBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpO1xuXG4gIGNvbnN0IHJ1bGVOYW1lQiA9IHJ1bGVOYW1lOyAvLy9cblxuICBjb25zdCByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSAocnVsZU5hbWVBID09PSBydWxlTmFtZUIpOyAgLy8vXG5cbiAgcmV0dXJuIHJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZWRSdWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lKHJlcGVhdGVkUnVsZU5hbWUpLFxuICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gIHJldHVybiByZWR1Y2VkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kSW5kZXgocnVsZU5hbWUsaW5kZXgpIHtcbiAgY29uc3QgcmVwZWF0ZWRSdWxlTmFtZSA9IChpbmRleCA9PT0gMCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfX5gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3J1bGVOYW1lfS4ke2luZGV4fX5gO1xuXG4gIHJldHVybiByZXBlYXRlZFJ1bGVOYW1lO1xufVxuXG4iXSwibmFtZXMiOlsiZG9lc1JlZHVjZWRSdWxlTmFtZU1hdGNoUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lQW5kSW5kZXgiLCJydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUiLCJydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lIiwicnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZXBsYWNlIiwicmVwZWF0ZWRSdWxlTmFtZSIsInJ1bGVOYW1lQSIsInJ1bGVOYW1lQiIsInJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsImluZGV4Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBMEJHQSxnQ0FBZ0M7ZUFBaENBLGdDQUFnQzs7SUFZaENDLG1DQUFtQztlQUFuQ0EsbUNBQW1DOztJQXBDbkNDLDJCQUEyQjtlQUEzQkEsMkJBQTJCOztJQWtCM0JDLDRCQUE0QjtlQUE1QkEsNEJBQTRCOztJQXlCNUJDLG9DQUFvQztlQUFwQ0Esb0NBQW9DOztJQXJDcENDLDJCQUEyQjtlQUEzQkEsMkJBQTJCOztJQU0zQkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7OztBQVpyQyxTQUFTSiwyQkFBMkIsQ0FBQ0ssUUFBUSxFQUFFO0lBQ3BELElBQU1DLGVBQWUsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZELFFBQVEsRUFBQyxHQUFDLENBQUMsQUFBQztJQUV2QyxPQUFPQyxlQUFlLENBQUM7Q0FDeEI7QUFFTSxTQUFTSCwyQkFBMkIsQ0FBQ0csZUFBZSxFQUFFO0lBQzNELElBQU1ELFFBQVEsR0FBR0MsZUFBZSxDQUFDQyxPQUFPLE9BQU8sRUFBRSxDQUFDLEFBQUM7SUFFbkQsT0FBT0YsUUFBUSxDQUFDO0NBQ2pCO0FBRU0sU0FBU0QsNEJBQTRCLENBQUNJLGdCQUFnQixFQUFFO0lBQzdELElBQU1ILFFBQVEsR0FBR0csZ0JBQWdCLENBQUNELE9BQU8saUJBQWlCLEVBQUUsQ0FBQyxBQUFDO0lBRTlELE9BQU9GLFFBQVEsQ0FBQztDQUNqQjtBQUVNLFNBQVNKLDRCQUE0QixDQUFDSSxRQUFRLEVBQUU7SUFDckQsSUFBTUcsZ0JBQWdCLEdBQUcsQUFBQyxFQUFBLENBQVcsTUFBQyxDQUFWSCxRQUFRLEVBQUMsR0FBQyxDQUFDLEFBQUM7SUFFeEMsT0FBT0csZ0JBQWdCLENBQUM7Q0FDekI7QUFFTSxTQUFTVixnQ0FBZ0MsQ0FBQ1EsZUFBZSxFQUFFRCxRQUFRLEVBQUU7SUFDMUUsSUFBTUksU0FBUyxHQUFHSixRQUFRLEFBQUMsRUFBQyxHQUFHO0lBRS9CQSxRQUFRLEdBQUdGLDJCQUEyQixDQUFDRyxlQUFlLENBQUMsQ0FBQztJQUV4RCxJQUFNSSxTQUFTLEdBQUdMLFFBQVEsQUFBQyxFQUFDLEdBQUc7SUFFL0IsSUFBTU0sOEJBQThCLEdBQUlGLFNBQVMsS0FBS0MsU0FBUyxBQUFDLEFBQUMsRUFBRSxHQUFHO0lBRXRFLE9BQU9DLDhCQUE4QixDQUFDO0NBQ3ZDO0FBRU0sU0FBU1osbUNBQW1DLENBQUNTLGdCQUFnQixFQUFFO0lBQ3BFLElBQU1ILFFBQVEsR0FBR0QsNEJBQTRCLENBQUNJLGdCQUFnQixDQUFDLEVBQ3pERixlQUFlLEdBQUdOLDJCQUEyQixDQUFDSyxRQUFRLENBQUMsQUFBQztJQUU5RCxPQUFPQyxlQUFlLENBQUM7Q0FDeEI7QUFFTSxTQUFTSixvQ0FBb0MsQ0FBQ0csUUFBUSxFQUFDTyxLQUFLLEVBQUU7SUFDbkUsSUFBTUosZ0JBQWdCLEdBQUcsQUFBQ0ksS0FBSyxLQUFLLENBQUMsR0FDWCxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZQLFFBQVEsRUFBQyxHQUFDLENBQUMsR0FDWixBQUFDLEVBQUEsQ0FBY08sTUFBSyxDQUFqQlAsUUFBUSxFQUFDLEdBQUMsQ0FBUSxDQUFBLE1BQUMsQ0FBUE8sS0FBSyxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRXBELE9BQU9KLGdCQUFnQixDQUFDO0NBQ3pCIn0=