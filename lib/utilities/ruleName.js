"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ruleNameFromReducedRuleName: function() {
        return ruleNameFromReducedRuleName;
    },
    ruleNameFromRepeatedRuleName: function() {
        return ruleNameFromRepeatedRuleName;
    },
    epsilonRepeatedRuleNameFromRuleName: function() {
        return epsilonRepeatedRuleNameFromRuleName;
    },
    directlyReducedRuleNameFromRuleName: function() {
        return directlyReducedRuleNameFromRuleName;
    },
    directlyRepeatedRuleNameFromRuleName: function() {
        return directlyRepeatedRuleNameFromRuleName;
    },
    indirectlyReducedRuleNameFromRuleName: function() {
        return indirectlyReducedRuleNameFromRuleName;
    },
    indirectlyRepeatedRuleNameFromRuleName: function() {
        return indirectlyRepeatedRuleNameFromRuleName;
    }
});
function ruleNameFromReducedRuleName(reducedRuleName) {
    var ruleName = reducedRuleName.replace(/(__|_)$/g, "");
    return ruleName;
}
function ruleNameFromRepeatedRuleName(repeatedRuleName) {
    var ruleName = repeatedRuleName.replace(/~~~|~~|~$/, "");
    return ruleName;
}
function epsilonRepeatedRuleNameFromRuleName(ruleName) {
    var epsilonRepeatedRuleName = "".concat(ruleName, "~~~");
    return epsilonRepeatedRuleName;
}
function directlyReducedRuleNameFromRuleName(ruleName) {
    var directlyReducedRuleName = "".concat(ruleName, "_");
    return directlyReducedRuleName;
}
function directlyRepeatedRuleNameFromRuleName(ruleName) {
    var directlyRepeatedRuleName = "".concat(ruleName, "~");
    return directlyRepeatedRuleName;
}
function indirectlyReducedRuleNameFromRuleName(ruleName) {
    var indirectlyReducedRuleName = "".concat(ruleName, "__");
    return indirectlyReducedRuleName;
}
function indirectlyRepeatedRuleNameFromRuleName(ruleName) {
    var indirectlyRepeatedRuleName = "".concat(ruleName, "~~");
    return indirectlyRepeatedRuleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lLnJlcGxhY2UoLyhfX3xfKSQvZywgXCJcIik7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUmVwZWF0ZWRSdWxlTmFtZShyZXBlYXRlZFJ1bGVOYW1lKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gcmVwZWF0ZWRSdWxlTmFtZS5yZXBsYWNlKC9+fn58fn58fiQvLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcHNpbG9uUmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCBlcHNpbG9uUmVwZWF0ZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfX5+fmA7XG5cbiAgcmV0dXJuIGVwc2lsb25SZXBlYXRlZFJ1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUgPSBgJHtydWxlTmFtZX1fYDtcblxuICByZXR1cm4gZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIGRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGAke3J1bGVOYW1lfV9fYDtcblxuICByZXR1cm4gaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gYCR7cnVsZU5hbWV9fn5gO1xuXG4gIHJldHVybiBpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUiLCJydWxlTmFtZUZyb21SZXBlYXRlZFJ1bGVOYW1lIiwiZXBzaWxvblJlcGVhdGVkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJkaXJlY3RseVJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsImluZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJpbmRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlZHVjZWRSdWxlTmFtZSIsInJ1bGVOYW1lIiwicmVwbGFjZSIsInJlcGVhdGVkUnVsZU5hbWUiLCJlcHNpbG9uUmVwZWF0ZWRSdWxlTmFtZSIsImRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiaW5kaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImluZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBRUdBLDJCQUEyQjtlQUEzQkEsMkJBQTJCOztJQU0zQkMsNEJBQTRCO2VBQTVCQSw0QkFBNEI7O0lBTTVCQyxtQ0FBbUM7ZUFBbkNBLG1DQUFtQzs7SUFNbkNDLG1DQUFtQztlQUFuQ0EsbUNBQW1DOztJQU1uQ0Msb0NBQW9DO2VBQXBDQSxvQ0FBb0M7O0lBTXBDQyxxQ0FBcUM7ZUFBckNBLHFDQUFxQzs7SUFNckNDLHNDQUFzQztlQUF0Q0Esc0NBQXNDOzs7QUFwQy9DLFNBQVNOLDJCQUEyQixDQUFDTyxlQUFlLEVBQUU7SUFDM0QsSUFBTUMsUUFBUSxHQUFHRCxlQUFlLENBQUNFLE9BQU8sYUFBYSxFQUFFLENBQUMsQUFBQztJQUV6RCxPQUFPRCxRQUFRLENBQUM7Q0FDakI7QUFFTSxTQUFTUCw0QkFBNEIsQ0FBQ1MsZ0JBQWdCLEVBQUU7SUFDN0QsSUFBTUYsUUFBUSxHQUFHRSxnQkFBZ0IsQ0FBQ0QsT0FBTyxjQUFjLEVBQUUsQ0FBQyxBQUFDO0lBRTNELE9BQU9ELFFBQVEsQ0FBQztDQUNqQjtBQUVNLFNBQVNOLG1DQUFtQyxDQUFDTSxRQUFRLEVBQUU7SUFDNUQsSUFBTUcsdUJBQXVCLEdBQUcsQUFBQyxFQUFBLENBQVcsTUFBRyxDQUFaSCxRQUFRLEVBQUMsS0FBRyxDQUFDLEFBQUM7SUFFakQsT0FBT0csdUJBQXVCLENBQUM7Q0FDaEM7QUFFTSxTQUFTUixtQ0FBbUMsQ0FBQ0ssUUFBUSxFQUFFO0lBQzVELElBQU1JLHVCQUF1QixHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUMsQ0FBVkosUUFBUSxFQUFDLEdBQUMsQ0FBQyxBQUFDO0lBRS9DLE9BQU9JLHVCQUF1QixDQUFDO0NBQ2hDO0FBRU0sU0FBU1Isb0NBQW9DLENBQUNJLFFBQVEsRUFBRTtJQUM3RCxJQUFNSyx3QkFBd0IsR0FBRyxBQUFDLEVBQUEsQ0FBVyxNQUFDLENBQVZMLFFBQVEsRUFBQyxHQUFDLENBQUMsQUFBQztJQUVoRCxPQUFPSyx3QkFBd0IsQ0FBQztDQUNqQztBQUVNLFNBQVNSLHFDQUFxQyxDQUFDRyxRQUFRLEVBQUU7SUFDOUQsSUFBTU0seUJBQXlCLEdBQUcsQUFBQyxFQUFBLENBQVcsTUFBRSxDQUFYTixRQUFRLEVBQUMsSUFBRSxDQUFDLEFBQUM7SUFFbEQsT0FBT00seUJBQXlCLENBQUM7Q0FDbEM7QUFFTSxTQUFTUixzQ0FBc0MsQ0FBQ0UsUUFBUSxFQUFFO0lBQy9ELElBQU1PLDBCQUEwQixHQUFHLEFBQUMsRUFBQSxDQUFXLE1BQUUsQ0FBWFAsUUFBUSxFQUFDLElBQUUsQ0FBQyxBQUFDO0lBRW5ELE9BQU9PLDBCQUEwQixDQUFDO0NBQ25DIn0=