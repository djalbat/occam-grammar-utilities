'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;


function findImplicitlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveRuleNames) {
  var implicitlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveRuleNames);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle);

    implicitlyLeftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return implicitlyLeftRecursiveDefinition;
}

module.exports = {
  findImplicitlyLeftRecursiveDefinition: findImplicitlyLeftRecursiveDefinition
};

function findRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveRuleNames) {
  var recursiveDefinitionsCycle = null;

  var leftRecursiveDefinitionRuleName = leftRecursiveDefinition.getRuleName();

  recursiveRuleNames.some(function (recursiveRuleName, index) {
    var leftRecursiveDefinitionRuleNameRecursiveRuleName = leftRecursiveDefinitionRuleName === recursiveRuleName;

    if (leftRecursiveDefinitionRuleNameRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveRuleNames.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveRuleNames) {
  var leftRecursiveDefinitionsCycle = null;

  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveRuleNames);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcmVjdXJzaXZlRGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJmaXJzdCIsImZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSIsInJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJzb21lIiwicmVjdXJzaXZlUnVsZU5hbWUiLCJpbmRleCIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVSZWN1cnNpdmVSdWxlTmFtZSIsInNsaWNlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUiLCJpc1JlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlIiwiZXZlcnkiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwicmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJpc0xlZnRSZWN1cnNpdmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxvQkFBUixDQUF2Qjs7SUFFUUMsSyxHQUFVRixjLENBQVZFLEs7OztBQUVSLFNBQVNDLHFDQUFULENBQStDQyx1QkFBL0MsRUFBd0VDLGtCQUF4RSxFQUE0RjtBQUMxRixNQUFJQyxvQ0FBb0MsSUFBeEM7O0FBRUEsTUFBTUMsZ0NBQWdDQyxrQ0FBa0NKLHVCQUFsQyxFQUEyREMsa0JBQTNELENBQXRDOztBQUVBLE1BQUlFLGtDQUFrQyxJQUF0QyxFQUE0QztBQUMxQyxRQUFNRSwrQkFBK0JQLE1BQU1LLDZCQUFOLENBQXJDOztBQUVBRCx3Q0FBb0NHLDRCQUFwQyxDQUgwQyxDQUd5QjtBQUNwRTs7QUFFRCxTQUFPSCxpQ0FBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZSO0FBRGUsQ0FBakI7O0FBSUEsU0FBU1MsNkJBQVQsQ0FBdUNSLHVCQUF2QyxFQUFnRUMsa0JBQWhFLEVBQW9GO0FBQ2xGLE1BQUlRLDRCQUE0QixJQUFoQzs7QUFFQSxNQUFNQyxrQ0FBa0NWLHdCQUF3QlcsV0FBeEIsRUFBeEM7O0FBRUFWLHFCQUFtQlcsSUFBbkIsQ0FBd0IsVUFBQ0MsaUJBQUQsRUFBb0JDLEtBQXBCLEVBQThCO0FBQ3BELFFBQU1DLG1EQUFvREwsb0NBQW9DRyxpQkFBOUY7O0FBRUEsUUFBSUUsZ0RBQUosRUFBc0Q7QUFDcEROLGtDQUE0QlIsbUJBQW1CZSxLQUFuQixDQUF5QkYsS0FBekIsQ0FBNUI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVJEOztBQVVBLFNBQU9MLHlCQUFQO0FBQ0Q7O0FBRUQsU0FBU0wsaUNBQVQsQ0FBMkNKLHVCQUEzQyxFQUFvRUMsa0JBQXBFLEVBQXdGO0FBQ3RGLE1BQUlFLGdDQUFnQyxJQUFwQzs7QUFFQSxNQUFNYyx3QkFBd0JqQix3QkFBd0JrQix3QkFBeEIsRUFBOUI7QUFBQSxNQUNNTCxvQkFBb0JJLHFCQUQxQjtBQUFBLE1BQ2tEO0FBQzVDUiw4QkFBNEJELDhCQUE4QkssaUJBQTlCLEVBQWlEWixrQkFBakQsQ0FGbEM7O0FBSUEsTUFBSVEsOEJBQThCLElBQWxDLEVBQXdDO0FBQ3RDLFFBQU1VLHlDQUF5Q0MseUNBQXlDWCx5QkFBekMsQ0FBL0M7O0FBRUEsUUFBSVUsc0NBQUosRUFBNEM7QUFDMUNoQixzQ0FBZ0NNLHlCQUFoQyxDQUQwQyxDQUNrQjtBQUM3RDtBQUNGOztBQUVELFNBQU9OLDZCQUFQO0FBQ0Q7O0FBRUQsU0FBU2lCLHdDQUFULENBQWtEWCx5QkFBbEQsRUFBNkU7QUFDM0UsTUFBTVUseUNBQXlDViwwQkFBMEJZLEtBQTFCLENBQWdDLFVBQUNDLG1CQUFELEVBQXlCO0FBQ3RHLFFBQU1DLG1DQUFtQ0Qsb0JBQW9CRSxlQUFwQixFQUF6Qzs7QUFFQSxRQUFJRCxnQ0FBSixFQUFzQztBQUNwQyxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTjhDLENBQS9DOztBQVFBLFNBQU9KLHNDQUFQO0FBQ0QiLCJmaWxlIjoicmVjdXJzaXZlRGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcykge1xuICBsZXQgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IGZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3QobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUpO1xuXG4gICAgaW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25cbn07XG5cbmZ1bmN0aW9uIGZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVSdWxlTmFtZXMpIHtcbiAgbGV0IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSBudWxsO1xuXG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpO1xuXG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lcy5zb21lKChyZWN1cnNpdmVSdWxlTmFtZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lUmVjdXJzaXZlUnVsZU5hbWUgPSAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9PT0gcmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVSZWN1cnNpdmVSdWxlTmFtZSkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IHJlY3Vyc2l2ZVJ1bGVOYW1lcy5zbGljZShpbmRleCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGU7XG59XG5cbmZ1bmN0aW9uIGZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcmVjdXJzaXZlUnVsZU5hbWVzKSB7XG4gIGxldCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IG51bGw7XG5cbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSBmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShyZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlID0gaXNSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZShyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlO1xufVxuXG5mdW5jdGlvbiBpc1JlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlKHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUpIHtcbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUgPSByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlLmV2ZXJ5KChyZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSByZWN1cnNpdmVEZWZpbml0aW9uLmlzTGVmdFJlY3Vyc2l2ZSgpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZTtcbn1cbiJdfQ==