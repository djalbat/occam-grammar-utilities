'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;


function findImplicitlyLeftRecursiveDefinition(leftRecursiveRuleName, recursiveDefinitions) {
  var implicitlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveRuleName, recursiveDefinitions);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle);

    implicitlyLeftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return implicitlyLeftRecursiveDefinition;
}

module.exports = {
  findImplicitlyLeftRecursiveDefinition: findImplicitlyLeftRecursiveDefinition
};

function findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsCycle = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinitionsCycle = null;

  var recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcmVjdXJzaXZlRGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJmaXJzdCIsImZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9ucyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSIsInNvbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiaW5kZXgiLCJyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsInJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInNsaWNlIiwicmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUiLCJpc1JlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlIiwiZXZlcnkiLCJyZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImlzTGVmdFJlY3Vyc2l2ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXZCOztJQUVRQyxLLEdBQVVGLGMsQ0FBVkUsSzs7O0FBRVIsU0FBU0MscUNBQVQsQ0FBK0NDLHFCQUEvQyxFQUFzRUMsb0JBQXRFLEVBQTRGO0FBQzFGLE1BQUlDLG9DQUFvQyxJQUF4Qzs7QUFFQSxNQUFNQyxnQ0FBZ0NDLGtDQUFrQ0oscUJBQWxDLEVBQXlEQyxvQkFBekQsQ0FBdEM7O0FBRUEsTUFBSUUsa0NBQWtDLElBQXRDLEVBQTRDO0FBQzFDLFFBQU1FLCtCQUErQlAsTUFBTUssNkJBQU4sQ0FBckM7O0FBRUFELHdDQUFvQ0csNEJBQXBDLENBSDBDLENBR3lCO0FBQ3BFOztBQUVELFNBQU9ILGlDQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlI7QUFEZSxDQUFqQjs7QUFJQSxTQUFTUyw2QkFBVCxDQUF1Q0MsaUJBQXZDLEVBQTBEUixvQkFBMUQsRUFBZ0Y7QUFDOUUsTUFBSVMsNEJBQTRCLElBQWhDOztBQUVBVCx1QkFBcUJVLElBQXJCLENBQTBCLFVBQUNDLG1CQUFELEVBQXNCQyxLQUF0QixFQUFnQztBQUN4RCxRQUFNQyw4QkFBOEJGLG9CQUFvQkcsV0FBcEIsRUFBcEM7QUFBQSxRQUNNQyxtREFBb0RGLGdDQUFnQ0wsaUJBRDFGOztBQUdBLFFBQUlPLGdEQUFKLEVBQXNEO0FBQ3BETixrQ0FBNEJULHFCQUFxQmdCLEtBQXJCLENBQTJCSixLQUEzQixDQUE1Qjs7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBVEQ7O0FBV0EsU0FBT0gseUJBQVA7QUFDRDs7QUFFRCxTQUFTTixpQ0FBVCxDQUEyQ0oscUJBQTNDLEVBQWtFQyxvQkFBbEUsRUFBd0Y7QUFDdEYsTUFBSUUsZ0NBQWdDLElBQXBDOztBQUVBLE1BQU1NLG9CQUFvQlQscUJBQTFCO0FBQUEsTUFBa0Q7QUFDNUNVLDhCQUE0QkYsOEJBQThCQyxpQkFBOUIsRUFBaURSLG9CQUFqRCxDQURsQzs7QUFHQSxNQUFJUyw4QkFBOEIsSUFBbEMsRUFBd0M7QUFDdEMsUUFBTVEseUNBQXlDQyx5Q0FBeUNULHlCQUF6QyxDQUEvQzs7QUFFQSxRQUFJUSxzQ0FBSixFQUE0QztBQUMxQ2Ysc0NBQWdDTyx5QkFBaEMsQ0FEMEMsQ0FDa0I7QUFDN0Q7QUFDRjs7QUFFRCxTQUFPUCw2QkFBUDtBQUNEOztBQUVELFNBQVNnQix3Q0FBVCxDQUFrRFQseUJBQWxELEVBQTZFO0FBQzNFLE1BQU1RLHlDQUF5Q1IsMEJBQTBCVSxLQUExQixDQUFnQyxVQUFDUixtQkFBRCxFQUF5QjtBQUN0RyxRQUFNUyxtQ0FBbUNULG9CQUFvQlUsZUFBcEIsRUFBekM7O0FBRUEsUUFBSUQsZ0NBQUosRUFBc0M7QUFDcEMsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU44QyxDQUEvQzs7QUFRQSxTQUFPSCxzQ0FBUDtBQUNEIiwiZmlsZSI6InJlY3Vyc2l2ZURlZmluaXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBmaW5kSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKTtcblxuICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247ICAvLy9cbiAgfVxuXG4gIHJldHVybiBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kSW1wbGljaXRseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uXG59O1xuXG5mdW5jdGlvbiBmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShyZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSBudWxsO1xuXG4gIHJlY3Vyc2l2ZURlZmluaXRpb25zLnNvbWUoKHJlY3Vyc2l2ZURlZmluaXRpb24sIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IChyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUgPT09IHJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSByZWN1cnNpdmVEZWZpbml0aW9ucy5zbGljZShpbmRleCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGU7XG59XG5cbmZ1bmN0aW9uIGZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IG51bGw7XG5cbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsICAvLy9cbiAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IGZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKHJlY3Vyc2l2ZVJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgIT09IG51bGwpIHtcbiAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSA9IGlzUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUocmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSk7XG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZTsgIC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZTtcbn1cblxuZnVuY3Rpb24gaXNSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZShyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlID0gcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZS5ldmVyeSgocmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcmVjdXJzaXZlRGVmaW5pdGlvbi5pc0xlZnRSZWN1cnNpdmUoKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmU7XG59Il19