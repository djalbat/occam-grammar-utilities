'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first;


function findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions) {
  var indirectlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle);

    indirectlyLeftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return indirectlyLeftRecursiveDefinition;
}

module.exports = {
  findIndirectlyLeftRecursiveDefinition: findIndirectlyLeftRecursiveDefinition
};

function findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsCycle = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions) {
  var leftRecursiveDefinitionsCycle = null;

  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcmVjdXJzaXZlRGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJmaXJzdCIsImZpbmRJbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZURlZmluaXRpb25zIiwiaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUiLCJmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUiLCJmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwicmVjdXJzaXZlUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwic29tZSIsInJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRleCIsInJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwic2xpY2UiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJnZXRMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSIsImlzUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUiLCJldmVyeSIsInJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNMZWZ0UmVjdXJzaXZlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7O0lBRVFDLEssR0FBVUYsYyxDQUFWRSxLOzs7QUFFUixTQUFTQyxxQ0FBVCxDQUErQ0MsdUJBQS9DLEVBQXdFQyxvQkFBeEUsRUFBOEY7QUFDNUYsTUFBSUMsb0NBQW9DLElBQXhDOztBQUVBLE1BQU1DLGdDQUFnQ0Msa0NBQWtDSix1QkFBbEMsRUFBMkRDLG9CQUEzRCxDQUF0Qzs7QUFFQSxNQUFJRSxrQ0FBa0MsSUFBdEMsRUFBNEM7QUFDMUMsUUFBTUUsK0JBQStCUCxNQUFNSyw2QkFBTixDQUFyQzs7QUFFQUQsd0NBQW9DRyw0QkFBcEMsQ0FIMEMsQ0FHeUI7QUFDcEU7O0FBRUQsU0FBT0gsaUNBQVA7QUFDRDs7QUFFREksT0FBT0MsT0FBUCxHQUFpQjtBQUNmUjtBQURlLENBQWpCOztBQUlBLFNBQVNTLDZCQUFULENBQXVDQyxpQkFBdkMsRUFBMERSLG9CQUExRCxFQUFnRjtBQUM5RSxNQUFJUyw0QkFBNEIsSUFBaEM7O0FBRUFULHVCQUFxQlUsSUFBckIsQ0FBMEIsVUFBQ0MsbUJBQUQsRUFBc0JDLEtBQXRCLEVBQWdDO0FBQ3hELFFBQU1DLDhCQUE4QkYsb0JBQW9CRyxXQUFwQixFQUFwQztBQUFBLFFBQ01DLG1EQUFvREYsZ0NBQWdDTCxpQkFEMUY7O0FBR0EsUUFBSU8sZ0RBQUosRUFBc0Q7QUFDcEROLGtDQUE0QlQscUJBQXFCZ0IsS0FBckIsQ0FBMkJKLEtBQTNCLENBQTVCOztBQUVBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FURDs7QUFXQSxTQUFPSCx5QkFBUDtBQUNEOztBQUVELFNBQVNOLGlDQUFULENBQTJDSix1QkFBM0MsRUFBb0VDLG9CQUFwRSxFQUEwRjtBQUN4RixNQUFJRSxnQ0FBZ0MsSUFBcEM7O0FBRUEsTUFBTWUsd0JBQXdCbEIsd0JBQXdCbUIsd0JBQXhCLEVBQTlCO0FBQUEsTUFDTVYsb0JBQW9CUyxxQkFEMUI7QUFBQSxNQUNrRDtBQUM1Q1IsOEJBQTRCRiw4QkFBOEJDLGlCQUE5QixFQUFpRFIsb0JBQWpELENBRmxDOztBQUlBLE1BQUlTLDhCQUE4QixJQUFsQyxFQUF3QztBQUN0QyxRQUFNVSx5Q0FBeUNDLHlDQUF5Q1gseUJBQXpDLENBQS9DOztBQUVBLFFBQUlVLHNDQUFKLEVBQTRDO0FBQzFDakIsc0NBQWdDTyx5QkFBaEMsQ0FEMEMsQ0FDa0I7QUFDN0Q7QUFDRjs7QUFFRCxTQUFPUCw2QkFBUDtBQUNEOztBQUVELFNBQVNrQix3Q0FBVCxDQUFrRFgseUJBQWxELEVBQTZFO0FBQzNFLE1BQU1VLHlDQUF5Q1YsMEJBQTBCWSxLQUExQixDQUFnQyxVQUFDVixtQkFBRCxFQUF5QjtBQUN0RyxRQUFNVyxtQ0FBbUNYLG9CQUFvQlksZUFBcEIsRUFBekM7O0FBRUEsUUFBSUQsZ0NBQUosRUFBc0M7QUFDcEMsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU44QyxDQUEvQzs7QUFRQSxTQUFPSCxzQ0FBUDtBQUNEIiwiZmlsZSI6InJlY3Vyc2l2ZURlZmluaXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBmaW5kSW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCByZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBsZXQgaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbnVsbDtcblxuICBjb25zdCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IGZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSk7XG5cbiAgICBpbmRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG4gIH1cblxuICByZXR1cm4gaW5kaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZEluZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblxufTtcblxuZnVuY3Rpb24gZmluZFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUocmVjdXJzaXZlUnVsZU5hbWUsIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gbnVsbDtcblxuICByZWN1cnNpdmVEZWZpbml0aW9ucy5zb21lKChyZWN1cnNpdmVEZWZpbml0aW9uLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9IHJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICByZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWVMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSAocmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lID09PSByZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gICAgICByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gcmVjdXJzaXZlRGVmaW5pdGlvbnMuc2xpY2UoaW5kZXgpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlO1xufVxuXG5mdW5jdGlvbiBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IG51bGw7XG5cbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSBmaW5kUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZShyZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUgPSBpc1JlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlKHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlKSB7XG4gICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGU7ICAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGU7XG59XG5cbmZ1bmN0aW9uIGlzUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUocmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSkge1xuICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUuZXZlcnkoKHJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IHJlY3Vyc2l2ZURlZmluaXRpb24uaXNMZWZ0UmVjdXJzaXZlKCk7XG5cbiAgICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlO1xufVxuIl19