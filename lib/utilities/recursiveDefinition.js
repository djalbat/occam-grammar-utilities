'use strict';

var arrayUtilities = require('../utilities/array'),
    ImplicitlyLeftRecursiveDefinition = require('../definition/leftRecursive/implicitly');

var first = arrayUtilities.first;


function findImplicitlyLeftRecursiveDefinition(leftRecursiveRuleName, recursiveDefinitions) {
  var implicitlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveRuleName, recursiveDefinitions);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle),
        leftRecursiveDefinition = firstLeftRecursiveDefinition; ///

    implicitlyLeftRecursiveDefinition = ImplicitlyLeftRecursiveDefinition.fromLeftRecursiveDefinition(leftRecursiveDefinition);
  }

  return implicitlyLeftRecursiveDefinition;
}

module.exports = {
  findImplicitlyLeftRecursiveDefinition: findImplicitlyLeftRecursiveDefinition
};

function findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsCycle = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveRuleName, recursiveDefinitions) {
  var leftRecursiveDefinitionsCycle = null;

  var recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcmVjdXJzaXZlRGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmaXJzdCIsImZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9ucyIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwiZmlyc3RMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZnJvbUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwicmVjdXJzaXZlUnVsZU5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlIiwic29tZSIsInJlY3Vyc2l2ZURlZmluaXRpb24iLCJpbmRleCIsInJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwic2xpY2UiLCJyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSIsImlzUmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUiLCJldmVyeSIsInJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNMZWZ0UmVjdXJzaXZlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7QUFBQSxJQUNNQyxvQ0FBb0NELFFBQVEsd0NBQVIsQ0FEMUM7O0lBR1FFLEssR0FBVUgsYyxDQUFWRyxLOzs7QUFFUixTQUFTQyxxQ0FBVCxDQUErQ0MscUJBQS9DLEVBQXNFQyxvQkFBdEUsRUFBNEY7QUFDMUYsTUFBSUMsb0NBQW9DLElBQXhDOztBQUVBLE1BQU1DLGdDQUFnQ0Msa0NBQWtDSixxQkFBbEMsRUFBeURDLG9CQUF6RCxDQUF0Qzs7QUFFQSxNQUFJRSxrQ0FBa0MsSUFBdEMsRUFBNEM7QUFDMUMsUUFBTUUsK0JBQStCUCxNQUFNSyw2QkFBTixDQUFyQztBQUFBLFFBQ01HLDBCQUEwQkQsNEJBRGhDLENBRDBDLENBRW9COztBQUU5REgsd0NBQW9DTCxrQ0FBa0NVLDJCQUFsQyxDQUE4REQsdUJBQTlELENBQXBDO0FBQ0Q7O0FBRUQsU0FBT0osaUNBQVA7QUFDRDs7QUFFRE0sT0FBT0MsT0FBUCxHQUFpQjtBQUNmVjtBQURlLENBQWpCOztBQUlBLFNBQVNXLDZCQUFULENBQXVDQyxpQkFBdkMsRUFBMERWLG9CQUExRCxFQUFnRjtBQUM5RSxNQUFJVyw0QkFBNEIsSUFBaEM7O0FBRUFYLHVCQUFxQlksSUFBckIsQ0FBMEIsVUFBQ0MsbUJBQUQsRUFBc0JDLEtBQXRCLEVBQWdDO0FBQ3hELFFBQU1DLDhCQUE4QkYsb0JBQW9CRyxXQUFwQixFQUFwQztBQUFBLFFBQ01DLG1EQUFvREYsZ0NBQWdDTCxpQkFEMUY7O0FBR0EsUUFBSU8sZ0RBQUosRUFBc0Q7QUFDcEROLGtDQUE0QlgscUJBQXFCa0IsS0FBckIsQ0FBMkJKLEtBQTNCLENBQTVCOztBQUVBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FURDs7QUFXQSxTQUFPSCx5QkFBUDtBQUNEOztBQUVELFNBQVNSLGlDQUFULENBQTJDSixxQkFBM0MsRUFBa0VDLG9CQUFsRSxFQUF3RjtBQUN0RixNQUFJRSxnQ0FBZ0MsSUFBcEM7O0FBRUEsTUFBTVEsb0JBQW9CWCxxQkFBMUI7QUFBQSxNQUFrRDtBQUM1Q1ksOEJBQTRCRiw4QkFBOEJDLGlCQUE5QixFQUFpRFYsb0JBQWpELENBRGxDOztBQUdBLE1BQUlXLDhCQUE4QixJQUFsQyxFQUF3QztBQUN0QyxRQUFNUSx5Q0FBeUNDLHlDQUF5Q1QseUJBQXpDLENBQS9DOztBQUVBLFFBQUlRLHNDQUFKLEVBQTRDO0FBQzFDakIsc0NBQWdDUyx5QkFBaEMsQ0FEMEMsQ0FDa0I7QUFDN0Q7QUFDRjs7QUFFRCxTQUFPVCw2QkFBUDtBQUNEOztBQUVELFNBQVNrQix3Q0FBVCxDQUFrRFQseUJBQWxELEVBQTZFO0FBQzNFLE1BQU1RLHlDQUF5Q1IsMEJBQTBCVSxLQUExQixDQUFnQyxVQUFDUixtQkFBRCxFQUF5QjtBQUN0RyxRQUFNUyxtQ0FBbUNULG9CQUFvQlUsZUFBcEIsRUFBekM7O0FBRUEsUUFBSUQsZ0NBQUosRUFBc0M7QUFDcEMsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU44QyxDQUEvQzs7QUFRQSxTQUFPSCxzQ0FBUDtBQUNEIiwiZmlsZSI6InJlY3Vyc2l2ZURlZmluaXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL2xlZnRSZWN1cnNpdmUvaW1wbGljaXRseScpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gZmluZEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIHJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGxldCBpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xuXG4gIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGZpcnN0TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSksXG4gICAgICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdExlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAvLy9cblxuICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbmRJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25cbn07XG5cbmZ1bmN0aW9uIGZpbmRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKHJlY3Vyc2l2ZVJ1bGVOYW1lLCByZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBsZXQgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IG51bGw7XG5cbiAgcmVjdXJzaXZlRGVmaW5pdGlvbnMuc29tZSgocmVjdXJzaXZlRGVmaW5pdGlvbiwgaW5kZXgpID0+IHtcbiAgICBjb25zdCByZWN1cnNpdmVEZWZpbml0aW9uUnVsZU5hbWUgPSByZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvblJ1bGVOYW1lTGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gKHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZSA9PT0gcmVjdXJzaXZlUnVsZU5hbWUpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25SdWxlTmFtZUxlZnRSZWN1cnNpdmVSdWxlTmFtZSkge1xuICAgICAgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSA9IHJlY3Vyc2l2ZURlZmluaXRpb25zLnNsaWNlKGluZGV4KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZTtcbn1cblxuZnVuY3Rpb24gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgcmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gbnVsbDtcblxuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgIC8vL1xuICAgICAgICByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlID0gZmluZFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUocmVjdXJzaXZlUnVsZU5hbWUsIHJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICBpZiAocmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlID0gaXNSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZShyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlKTtcblxuICAgIGlmIChyZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUgPSByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlO1xufVxuXG5mdW5jdGlvbiBpc1JlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGVMZWZ0UmVjdXJzaXZlKHJlY3Vyc2l2ZURlZmluaXRpb25zQ3ljbGUpIHtcbiAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbnNDeWNsZUxlZnRSZWN1cnNpdmUgPSByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlLmV2ZXJ5KChyZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVjdXJzaXZlRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSByZWN1cnNpdmVEZWZpbml0aW9uLmlzTGVmdFJlY3Vyc2l2ZSgpO1xuXG4gICAgaWYgKHJlY3Vyc2l2ZURlZmluaXRpb25MZWZ0UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVEZWZpbml0aW9uc0N5Y2xlTGVmdFJlY3Vyc2l2ZTtcbn0iXX0=