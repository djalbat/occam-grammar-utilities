"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    rewriteIndirectlyRepeatedNodes: function() {
        return rewriteIndirectlyRepeatedNodes;
    },
    rewriteDirectlyRepeatedNodes: function() {
        return rewriteDirectlyRepeatedNodes;
    },
    rewriteReducedNodes: function() {
        return rewriteReducedNodes;
    }
});
var _necessary = require("necessary");
var _occamparsers = require("occam-parsers");
var _reduced = /*#__PURE__*/ _interop_require_default(require("../node/reduced"));
var _rewritten = /*#__PURE__*/ _interop_require_default(require("../node/rewritten"));
var _directly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/directly"));
var _indirectly = /*#__PURE__*/ _interop_require_default(require("../node/repeated/indirectly"));
var _ruleName = require("../utilities/ruleName");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var front = _necessary.arrayUtilities.front, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push, clear = _necessary.arrayUtilities.clear, filter = _necessary.arrayUtilities.filter, backwardsSome = _necessary.arrayUtilities.backwardsSome;
function rewriteIndirectlyRepeatedNodes(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes(), indirectlyRepeatedNodes = findIndirectlyRepeatedNodes(childNodes);
    backwardsSome(indirectlyRepeatedNodes, function(indirectlyRepeatedNode) {
        var parentNode = nonTerminalNode, rewrittenNode = rewrittenNodeFromNonTerminalNodeAndIndirectlyRepeatedNode(nonTerminalNode, indirectlyRepeatedNode), replacementChildNodes = replacementChildNodesFromRewrittenNodeAndIndirectlyRepeatedNode(rewrittenNode, indirectlyRepeatedNode);
        var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
        if (nonTerminalNodeRuleName === ruleName) {
            var precedence = indirectlyRepeatedNode.getPrecedence();
            nonTerminalNode.rewritePrecedence(precedence);
        }
        if (leftRecursiveRuleName === nonTerminalNodeRuleName) {
            var precedence1 = nonTerminalNode.getPrecedence();
            rewrittenNode.rewritePrecedence(precedence1);
        }
        replaceAllChildNodes(parentNode, replacementChildNodes);
        nonTerminalNode = rewrittenNode; ///
    });
    var parentNode = nonTerminalNode; ///
    return parentNode;
}
function rewriteDirectlyRepeatedNodes(nonTerminalNode) {
    var _loop = function() {
        var replacementChildNodes = [], replacedChildNodes = directlyRepeatedNodes, parentNode = nonTerminalNode; ///
        directlyRepeatedNodes.forEach(function(directlyRepeatedNode) {
            var directlyRepeatedNodesChildNodes = directlyRepeatedNode.getChildNodes();
            push(replacementChildNodes, directlyRepeatedNodesChildNodes);
        });
        replaceChildNodes(parentNode, replacedChildNodes, replacementChildNodes);
        directlyRepeatedNodes = findDirectlyRepeatedNodes(childNodes);
        directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    };
    var childNodes = nonTerminalNode.getChildNodes();
    var directlyRepeatedNodes, directlyRepeatedNodesLength;
    directlyRepeatedNodes = findDirectlyRepeatedNodes(childNodes);
    directlyRepeatedNodesLength = directlyRepeatedNodes.length;
    while(directlyRepeatedNodesLength > 0)_loop();
}
function rewriteReducedNodes(nonTerminalNode) {
    var childNodes = nonTerminalNode.getChildNodes();
    var firstChildNode = first(childNodes), firstChildNodeReducedNode = _instanceof(firstChildNode, _reduced.default);
    if (firstChildNodeReducedNode) {
        var parentNode = nonTerminalNode, reducedNode = firstChildNode, replacedChildNode = reducedNode, reducedNodeRuleName = reducedNode.getRuleName(), parentNodeRuleName = parentNode.getRuleName(), reducedRuleName = reducedNodeRuleName, parentRuleName = parentNodeRuleName, ruleName = (0, _ruleName.ruleNameFromReducedRuleName)(reducedRuleName), replacementChildNodes = []; ///
        if (ruleName === parentRuleName) {
            var reducedNodeChildNodes = reducedNode.getChildNodes();
            push(replacementChildNodes, reducedNodeChildNodes);
        } else {
            var childNodes1 = reducedNode.getChildNodes(), precedence = reducedNode.getPrecedence(), _$nonTerminalNode = _occamparsers.NonTerminalNode.fromRuleNameChildNodesAndPrecedence(ruleName, childNodes1, precedence), replacementChildNode = _$nonTerminalNode; ///
            replacementChildNodes.push(replacementChildNode);
        }
        replaceChildNode(parentNode, replacedChildNode, replacementChildNodes);
    }
}
function replaceChildNode(parentNode, replacedChildNode, replacementChildNodes) {
    var _childNodes;
    var childNodes = parentNode.getChildNodes(), index = childNodes.indexOf(replacedChildNode), start = index, deleteCount = 1;
    (_childNodes = childNodes).splice.apply(_childNodes, [
        start,
        deleteCount
    ].concat(_to_consumable_array(replacementChildNodes)));
}
function replaceChildNodes(parentNode, replacedChildNodes, replacementChildNodes) {
    var _childNodes;
    var replacedChildNodesLength = replacedChildNodes.length;
    if (replacedChildNodesLength === 0) {
        return;
    }
    var firstReplacedChildNode = first(replacedChildNodes), childNodes = parentNode.getChildNodes(), firstIndex = childNodes.indexOf(firstReplacedChildNode), start = firstIndex, deleteCount = replacedChildNodesLength; ///
    (_childNodes = childNodes).splice.apply(_childNodes, [
        start,
        deleteCount
    ].concat(_to_consumable_array(replacementChildNodes)));
}
function replaceAllChildNodes(parentNode, replacementChildNodes) {
    var childNodes = parentNode.getChildNodes();
    clear(childNodes);
    push(childNodes, replacementChildNodes);
}
function findDirectlyRepeatedNodes(childNodes) {
    var directlyRepeatedNodes = findRepeatedNonTerminalNodes(childNodes, function(childNode) {
        var childNodeDirectlyRepeatedNode = _instanceof(childNode, _directly.default);
        if (childNodeDirectlyRepeatedNode) {
            return true;
        }
    });
    return directlyRepeatedNodes;
}
function findIndirectlyRepeatedNodes(childNodes) {
    var indirectlyRepeatedNodes = findRepeatedNonTerminalNodes(childNodes, function(childNode) {
        var childNodeIndirectlyRepeatedNode = _instanceof(childNode, _indirectly.default);
        if (childNodeIndirectlyRepeatedNode) {
            return true;
        }
    });
    return indirectlyRepeatedNodes;
}
function findRepeatedNonTerminalNodes(childNodes, callback) {
    var repeatedNonTerminalNodes = [], lastIndex = childNodes.findLastIndex(callback);
    if (lastIndex !== null) {
        for(var index = lastIndex; index >= 0; index--){
            var childNode = childNodes[index], childNodeRepeatedNonTerminalNode = callback(childNode);
            if (!childNodeRepeatedNonTerminalNode) {
                break;
            }
            var repeatedNonTerminalNode = childNode; ///
            repeatedNonTerminalNodes.unshift(repeatedNonTerminalNode);
        }
    }
    return repeatedNonTerminalNodes;
}
function rewrittenNodeFromNonTerminalNodeAndIndirectlyRepeatedNode(nonTerminalNode, indirectlyRepeatedNode) {
    var ruleName, childNodes;
    childNodes = nonTerminalNode.getChildNodes();
    var indirectlyRepeatedNodeRuleName = indirectlyRepeatedNode.getRuleName(), indirectlyRepeatedRuleName = indirectlyRepeatedNodeRuleName, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), leftRecursiveRuleName = (0, _ruleName.leftRecursiveRuleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName), frontChildNodes = front(childNodes);
    ruleName = (0, _ruleName.ruleNameFromIndirectlyRepeatedRuleName)(indirectlyRepeatedRuleName);
    if (nonTerminalNodeRuleName === ruleName) {
        var precedence = indirectlyRepeatedNode.getPrecedence();
        nonTerminalNode.rewritePrecedence(precedence);
    }
    ruleName = leftRecursiveRuleName; ///
    childNodes = frontChildNodes; ///
    var rewrittenNode = _rewritten.default.fromRuleNameAndChildNodes(ruleName, childNodes);
    return rewrittenNode;
}
function replacementChildNodesFromRewrittenNodeAndIndirectlyRepeatedNode(rewrittenNode, indirectlyRepeatedNode) {
    var indirectlyRepeatedNodeChildNodes = indirectlyRepeatedNode.getChildNodes(), replacementChildNodes = [
        rewrittenNode
    ].concat(_to_consumable_array(indirectlyRepeatedNodeChildNodes));
    filter(replacementChildNodes, function(replacementChildNode) {
        var replacementChildNodeEpsilonNode = _instanceof(replacementChildNode, _occamparsers.EpsilonNode);
        if (!replacementChildNodeEpsilonNode) {
            return true;
        }
    });
    return replacementChildNodes;
}

//# sourceMappingURL=data:application/json;base64,