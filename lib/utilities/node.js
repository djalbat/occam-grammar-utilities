'use strict';

var NonRecursiveNode = require('../node/nonRecursive'),
    ruleNameUtilities = require('../utilities/ruleName'),
    RightRecursiveNode = require('../node/rightRecursive');

var ruleNameFromNonRecursiveRuleName = ruleNameUtilities.ruleNameFromNonRecursiveRuleName,
    checkNonRecursiveRuleNameMatchesRuleName = ruleNameUtilities.checkNonRecursiveRuleNameMatchesRuleName;


function removeIntermediateNodes(node) {
  removeRightRecursiveNodes(node);

  removeOrRenameNonRecursiveNodes(node);
}

module.exports = {
  removeIntermediateNodes: removeIntermediateNodes
};

function removeOrRenameNonRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeOrRenameNonRecursiveChildNodes(childNodes, ruleName);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameNonRecursiveChildNodes(childNodes, ruleName) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeNonRecursiveNode = childNode instanceof NonRecursiveNode;

    if (childNodeNonRecursiveNode) {
      var nonRecursiveNode = childNode,
          ///
      nonRecursiveNodeRuleName = nonRecursiveNode.getRuleName(),
          nonRecursiveRuleName = nonRecursiveNodeRuleName,
          nonRecursiveRuleNameMatchesRuleName = checkNonRecursiveRuleNameMatchesRuleName(nonRecursiveRuleName, ruleName);

      if (nonRecursiveRuleNameMatchesRuleName) {
        var childNodeChildNodes = childNode.getChildNodes();

        childNodeChildNodes = removeOrRenameNonRecursiveChildNodes(childNodeChildNodes);

        childNodes = childNodes.concat(childNodeChildNodes);
      } else {
        var _ruleName = ruleNameFromNonRecursiveRuleName(nonRecursiveRuleName);

        childNode.setRuleName(_ruleName);

        removeOrRenameNonRecursiveNodes(childNode);

        childNodes.push(childNode);
      }
    } else {
      removeOrRenameNonRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}

function removeRightRecursiveNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeRightRecursiveChildNodes(childNodes);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRightRecursiveChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRightRecursiveNode = childNode instanceof RightRecursiveNode;

    if (childNodeRightRecursiveNode) {
      var childNodeChildNodes = childNode.getChildNodes();

      childNodeChildNodes = removeRightRecursiveChildNodes(childNodeChildNodes);

      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRightRecursiveNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbm9kZS5qcyJdLCJuYW1lcyI6WyJOb25SZWN1cnNpdmVOb2RlIiwicmVxdWlyZSIsInJ1bGVOYW1lVXRpbGl0aWVzIiwiUmlnaHRSZWN1cnNpdmVOb2RlIiwicnVsZU5hbWVGcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWUiLCJjaGVja05vblJlY3Vyc2l2ZVJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lIiwicmVtb3ZlSW50ZXJtZWRpYXRlTm9kZXMiLCJub2RlIiwicmVtb3ZlUmlnaHRSZWN1cnNpdmVOb2RlcyIsInJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlTm9kZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwicmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzIiwic2V0Q2hpbGROb2RlcyIsInJlZHVjZSIsImNoaWxkTm9kZSIsImNoaWxkTm9kZU5vblJlY3Vyc2l2ZU5vZGUiLCJub25SZWN1cnNpdmVOb2RlIiwibm9uUmVjdXJzaXZlTm9kZVJ1bGVOYW1lIiwibm9uUmVjdXJzaXZlUnVsZU5hbWUiLCJub25SZWN1cnNpdmVSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsImNoaWxkTm9kZUNoaWxkTm9kZXMiLCJjb25jYXQiLCJzZXRSdWxlTmFtZSIsInB1c2giLCJyZW1vdmVSaWdodFJlY3Vyc2l2ZUNoaWxkTm9kZXMiLCJjaGlsZE5vZGVSaWdodFJlY3Vyc2l2ZU5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLG1CQUFtQkMsUUFBUSxzQkFBUixDQUF6QjtBQUFBLElBQ01DLG9CQUFvQkQsUUFBUSx1QkFBUixDQUQxQjtBQUFBLElBRU1FLHFCQUFxQkYsUUFBUSx3QkFBUixDQUYzQjs7SUFJUUcs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LElBQVgsQ0FBZ0JULFNBQWhCO0FBQ0Q7O0FBRUQsV0FBT0wsVUFBUDtBQUNELEdBaEJZLEVBZ0JWLEVBaEJVLENBQWI7O0FBa0JBLFNBQU9BLFVBQVA7QUFDRCIsImZpbGUiOiJub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOb25SZWN1cnNpdmVOb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9ub25SZWN1cnNpdmUnKSxcbiAgICAgIHJ1bGVOYW1lVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGVOYW1lJyksXG4gICAgICBSaWdodFJlY3Vyc2l2ZU5vZGUgPSByZXF1aXJlKCcuLi9ub2RlL3JpZ2h0UmVjdXJzaXZlJyk7XG5cbmNvbnN0IHsgcnVsZU5hbWVGcm9tTm9uUmVjdXJzaXZlUnVsZU5hbWUsIGNoZWNrTm9uUmVjdXJzaXZlUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgfSA9IHJ1bGVOYW1lVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiByZW1vdmVJbnRlcm1lZGlhdGVOb2Rlcyhub2RlKSB7XG4gIHJlbW92ZVJpZ2h0UmVjdXJzaXZlTm9kZXMobm9kZSk7XG5cbiAgcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVOb2Rlcyhub2RlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbW92ZUludGVybWVkaWF0ZU5vZGVzXG59O1xuXG5mdW5jdGlvbiByZW1vdmVPclJlbmFtZU5vblJlY3Vyc2l2ZU5vZGVzKG5vZGUpIHtcbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgICBsZXQgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICBjaGlsZE5vZGVzID0gcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZS5zZXRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKSB7XG4gIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLnJlZHVjZSgoY2hpbGROb2RlcywgY2hpbGROb2RlKSA9PiB7XG4gICAgY29uc3QgY2hpbGROb2RlTm9uUmVjdXJzaXZlTm9kZSA9IChjaGlsZE5vZGUgaW5zdGFuY2VvZiBOb25SZWN1cnNpdmVOb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVOb25SZWN1cnNpdmVOb2RlKSB7XG4gICAgICBjb25zdCBub25SZWN1cnNpdmVOb2RlID0gY2hpbGROb2RlLCAvLy9cbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZU5vZGVSdWxlTmFtZSA9IG5vblJlY3Vyc2l2ZU5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICAgIG5vblJlY3Vyc2l2ZVJ1bGVOYW1lID0gbm9uUmVjdXJzaXZlTm9kZVJ1bGVOYW1lLFxuICAgICAgICAgICAgbm9uUmVjdXJzaXZlUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSBjaGVja05vblJlY3Vyc2l2ZVJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lLCBydWxlTmFtZSk7XG5cbiAgICAgIGlmIChub25SZWN1cnNpdmVSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSkge1xuICAgICAgICBsZXQgY2hpbGROb2RlQ2hpbGROb2RlcyA9IGNoaWxkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgICAgY2hpbGROb2RlQ2hpbGROb2RlcyA9IHJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlQ2hpbGROb2RlcyhjaGlsZE5vZGVDaGlsZE5vZGVzKTtcblxuICAgICAgICBjaGlsZE5vZGVzID0gY2hpbGROb2Rlcy5jb25jYXQoY2hpbGROb2RlQ2hpbGROb2Rlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbU5vblJlY3Vyc2l2ZVJ1bGVOYW1lKG5vblJlY3Vyc2l2ZVJ1bGVOYW1lKTtcblxuICAgICAgICBjaGlsZE5vZGUuc2V0UnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgICAgIHJlbW92ZU9yUmVuYW1lTm9uUmVjdXJzaXZlTm9kZXMoY2hpbGROb2RlKTtcblxuICAgICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlT3JSZW5hbWVOb25SZWN1cnNpdmVOb2RlcyhjaGlsZE5vZGUpO1xuXG4gICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGROb2RlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBjaGlsZE5vZGVzO1xuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJpZ2h0UmVjdXJzaXZlTm9kZXMobm9kZSkge1xuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZTsgLy8vXG5cbiAgICBsZXQgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICBjaGlsZE5vZGVzID0gcmVtb3ZlUmlnaHRSZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZXMpO1xuXG4gICAgbm9uVGVybWluYWxOb2RlLnNldENoaWxkTm9kZXMoY2hpbGROb2RlcylcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVSaWdodFJlY3Vyc2l2ZUNoaWxkTm9kZXMoY2hpbGROb2Rlcykge1xuICBjaGlsZE5vZGVzID0gY2hpbGROb2Rlcy5yZWR1Y2UoKGNoaWxkTm9kZXMsIGNoaWxkTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkTm9kZVJpZ2h0UmVjdXJzaXZlTm9kZSA9IChjaGlsZE5vZGUgaW5zdGFuY2VvZiBSaWdodFJlY3Vyc2l2ZU5vZGUpO1xuXG4gICAgaWYgKGNoaWxkTm9kZVJpZ2h0UmVjdXJzaXZlTm9kZSkge1xuICAgICAgbGV0IGNoaWxkTm9kZUNoaWxkTm9kZXMgPSBjaGlsZE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgICBjaGlsZE5vZGVDaGlsZE5vZGVzID0gcmVtb3ZlUmlnaHRSZWN1cnNpdmVDaGlsZE5vZGVzKGNoaWxkTm9kZUNoaWxkTm9kZXMpO1xuXG4gICAgICBjaGlsZE5vZGVzID0gY2hpbGROb2Rlcy5jb25jYXQoY2hpbGROb2RlQ2hpbGROb2Rlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZVJpZ2h0UmVjdXJzaXZlTm9kZXMoY2hpbGROb2RlKTtcblxuICAgICAgY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkTm9kZXM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gY2hpbGROb2Rlcztcbn1cbiJdfQ==