'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    NonRecursiveRule = require('../rule/nonRecursive'),
    RightRecursiveRule = require('../rule/rightRecursive'),
    definitionUtilities = require('../utilities/definition'),
    NonRecursiveDefinition = require('../definition/nonRecursive'),
    RecursiveRuleNameDefinition = require('../definition/recursiveRuleName');

var first = arrayUtilities.first,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    push = arrayUtilities.push,
    iterateWithDelete = arrayUtilities.iterateWithDelete,
    findRuleByName = ruleUtilities.findRuleByName,
    deleteRuleByName = ruleUtilities.deleteRuleByName,
    leftRecursiveRuleNameFromLeftRecursiveDefinition = definitionUtilities.leftRecursiveRuleNameFromLeftRecursiveDefinition;


function eliminateLeftRecursionFromRule(rule, rules) {
  var ruleName = rule.getName(),
      ruleLeftRecursive = isRuleLeftRecursive(rule, rules, ruleName);

  if (!ruleLeftRecursive) {
    return;
  }

  var definitions = rule.getDefinitions(),
      nonTerminalNode = rule.getNonTerminalNode(),
      rightRecursiveRules = [];

  iterateWithDelete(definitions, function (definition, count) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, rules, ruleName);

    if (definitionLeftRecursive) {
      var leftRecursiveDefinition = definition,
          ///
      leftRecursiveRuleName = leftRecursiveRuleNameFromLeftRecursiveDefinition(leftRecursiveDefinition),
          leftRecursiveRule = findRuleByName(leftRecursiveRuleName, rules),
          rightRecursiveRule = RightRecursiveRule.fromLeftRecursiveRuleAndNonTerminalNode(leftRecursiveRule, nonTerminalNode, count);

      rightRecursiveRules.push(rightRecursiveRule);

      return true;
    }
  });

  var nonRecursiveRule = NonRecursiveRule.fromRule(rule),
      nonRecursiveDefinition = NonRecursiveDefinition.fromNonRecursiveRule(nonRecursiveRule),
      rightRecursiveRuleNameDefinitions = rightRecursiveRules.map(function (rightRecursiveRule) {
    var rightRecursiveRuleNameDefinition = RecursiveRuleNameDefinition.fromNonRecursiveRuleAndRecursiveRule(nonRecursiveRule, rightRecursiveRule);

    return rightRecursiveRuleNameDefinition;
  });

  rule.setDefinitions([].concat(_toConsumableArray(rightRecursiveRuleNameDefinitions), [nonRecursiveDefinition]));

  rules.push(nonRecursiveRule);

  push(rules, rightRecursiveRules);

  rightRecursiveRules.forEach(function (rightRecursiveRule) {
    var leftRecursiveRuleName = rightRecursiveRule.getLeftRecursiveRuleName();

    deleteRuleByName(leftRecursiveRuleName, rules);
  });
}

module.exports = {
  eliminateLeftRecursionFromRule: eliminateLeftRecursionFromRule
};

function isRuleLeftRecursive(rule, rules, ruleName) {
  var definitions = rule.getDefinitions(),
      ruleLeftRecursive = definitions.some(function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, rules, ruleName);

    if (definitionLeftRecursive) {
      return true;
    }
  });

  return ruleLeftRecursive;
}

function isDefinitionLeftRecursive(definition, rules, ruleName) {
  var definitionLeftRecursive = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartRuleNamePart = isPartRuleNamePart(firstPart);

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart,
        ///
    ruleNamePartRuleName = ruleNamePart.getRuleName(),
        ruleNamePartRuleNameRuleName = ruleNamePartRuleName === ruleName;

    if (ruleNamePartRuleNameRuleName) {
      definitionLeftRecursive = true;
    } else {
      var name = ruleNamePartRuleName,
          ///
      rule = findRuleByName(name, rules),
          ruleLeftRecursive = isRuleLeftRecursive(rule, rules, ruleName);

      definitionLeftRecursive = ruleLeftRecursive; ///
    }
  }

  return definitionLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,