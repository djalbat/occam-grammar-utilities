'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first;


function areElementsEqual(elements) {
  var elementsEqual = true;

  var elementsLength = elements.length;

  if (elementsLength > 0) {
    var firstElement = first(elements);

    elementsEqual = elements.every(function (element) {
      if (element === firstElement) {
        return true;
      }
    });
  }

  return elementsEqual;
}

function forEachWithRemove(elements, callback) {
  var elementsLength = elements.length;

  for (var index = 0; index < elementsLength; index++) {
    var element = elements[index],
        remove = callback(element, index);

    if (remove) {
      var start = index,
          ///
      deleteCount = 1;

      elements.splice(start, deleteCount);

      elementsLength--;

      index--;
    }
  }
}

function forEachWithReplace(elements, callback) {
  var elementsLength = elements.length;

  for (var index = 0; index < elementsLength; index++) {
    var element = elements[index];

    element = callback(element, index);

    if (element) {
      var start = index,
          ///
      deleteCount = 1;

      elements.splice(start, deleteCount, element);
    }
  }
}

module.exports = Object.assign(arrayUtilities, {
  areElementsEqual: areElementsEqual,
  forEachWithRemove: forEachWithRemove,
  forEachWithReplace: forEachWithReplace
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJhcmVFbGVtZW50c0VxdWFsIiwiZWxlbWVudHMiLCJlbGVtZW50c0VxdWFsIiwiZWxlbWVudHNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdEVsZW1lbnQiLCJldmVyeSIsImVsZW1lbnQiLCJmb3JFYWNoV2l0aFJlbW92ZSIsImNhbGxiYWNrIiwiaW5kZXgiLCJyZW1vdmUiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwiZm9yRWFjaFdpdGhSZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjs7O0FBR04sU0FBU0MsZ0JBQVQsQ0FBMEJDLFFBQTFCLEVBQW9DO0FBQ2xDLE1BQUlDLGdCQUFnQixJQUFwQjs7QUFFQSxNQUFNQyxpQkFBaUJGLFNBQVNHLE1BQWhDOztBQUVBLE1BQUlELGlCQUFpQixDQUFyQixFQUF3QjtBQUN0QixRQUFNRSxlQUFlTixNQUFNRSxRQUFOLENBQXJCOztBQUVBQyxvQkFBZ0JELFNBQVNLLEtBQVQsQ0FBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUMsVUFBSUEsWUFBWUYsWUFBaEIsRUFBOEI7QUFDNUIsZUFBTyxJQUFQO0FBQ0Q7QUFDRixLQUplLENBQWhCO0FBS0Q7O0FBRUQsU0FBT0gsYUFBUDtBQUNEOztBQUVELFNBQVNNLGlCQUFULENBQTJCUCxRQUEzQixFQUFxQ1EsUUFBckMsRUFBK0M7QUFDN0MsTUFBSU4saUJBQWlCRixTQUFTRyxNQUE5Qjs7QUFFQSxPQUFLLElBQUlNLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFQLGNBQTVCLEVBQTRDTyxPQUE1QyxFQUFxRDtBQUNuRCxRQUFNSCxVQUFVTixTQUFTUyxLQUFULENBQWhCO0FBQUEsUUFDTUMsU0FBU0YsU0FBU0YsT0FBVCxFQUFrQkcsS0FBbEIsQ0FEZjs7QUFHQSxRQUFJQyxNQUFKLEVBQVk7QUFDVixVQUFNQyxRQUFRRixLQUFkO0FBQUEsVUFBc0I7QUFDaEJHLG9CQUFjLENBRHBCOztBQUdBWixlQUFTYSxNQUFULENBQWdCRixLQUFoQixFQUF1QkMsV0FBdkI7O0FBRUFWOztBQUVBTztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTSyxrQkFBVCxDQUE0QmQsUUFBNUIsRUFBc0NRLFFBQXRDLEVBQWdEO0FBQzlDLE1BQU1OLGlCQUFpQkYsU0FBU0csTUFBaEM7O0FBRUEsT0FBSyxJQUFJTSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRUCxjQUE1QixFQUE0Q08sT0FBNUMsRUFBcUQ7QUFDbkQsUUFBSUgsVUFBVU4sU0FBU1MsS0FBVCxDQUFkOztBQUVBSCxjQUFVRSxTQUFTRixPQUFULEVBQWtCRyxLQUFsQixDQUFWOztBQUVBLFFBQUlILE9BQUosRUFBYTtBQUNYLFVBQU1LLFFBQVFGLEtBQWQ7QUFBQSxVQUFzQjtBQUNoQkcsb0JBQWMsQ0FEcEI7O0FBR0FaLGVBQVNhLE1BQVQsQ0FBZ0JGLEtBQWhCLEVBQXVCQyxXQUF2QixFQUFvQ04sT0FBcEM7QUFDRDtBQUNGO0FBQ0Y7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUJDLE9BQU9DLE1BQVAsQ0FBY3JCLGNBQWQsRUFBOEI7QUFDN0NFLG9DQUQ2QztBQUU3Q1Esc0NBRjZDO0FBRzdDTztBQUg2QyxDQUE5QixDQUFqQiIsImZpbGUiOiJhcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBhcmVFbGVtZW50c0VxdWFsKGVsZW1lbnRzKSB7XG4gIGxldCBlbGVtZW50c0VxdWFsID0gdHJ1ZTtcblxuICBjb25zdCBlbGVtZW50c0xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICBpZiAoZWxlbWVudHNMZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZmlyc3RFbGVtZW50ID0gZmlyc3QoZWxlbWVudHMpO1xuXG4gICAgZWxlbWVudHNFcXVhbCA9IGVsZW1lbnRzLmV2ZXJ5KChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudCA9PT0gZmlyc3RFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzRXF1YWw7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hXaXRoUmVtb3ZlKGVsZW1lbnRzLCBjYWxsYmFjaykge1xuICBsZXQgZWxlbWVudHNMZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVsZW1lbnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2luZGV4XSxcbiAgICAgICAgICByZW1vdmUgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocmVtb3ZlKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGVsZW1lbnRzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gICAgICBlbGVtZW50c0xlbmd0aC0tO1xuXG4gICAgICBpbmRleC0tO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoV2l0aFJlcGxhY2UoZWxlbWVudHMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGVsZW1lbnRzTGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBlbGVtZW50c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBlbGVtZW50ID0gZWxlbWVudHNbaW5kZXhdO1xuXG4gICAgZWxlbWVudCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGVsZW1lbnRzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oYXJyYXlVdGlsaXRpZXMsIHtcbiAgYXJlRWxlbWVudHNFcXVhbCxcbiAgZm9yRWFjaFdpdGhSZW1vdmUsXG4gIGZvckVhY2hXaXRoUmVwbGFjZVxufSk7XG4iXX0=