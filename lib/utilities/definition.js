"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IGFyZVBhcnRzUmVjdXJzaXZlLCBhcmVQYXJ0c0xlZnRSZWN1cnNpdmUsIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydHNcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNSZWN1cnNpdmUgPSBhcmVQYXJ0c1JlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSBwYXJ0c1JlY3Vyc2l2ZTsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcGFydHNMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25SZWN1cnNpdmUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicGFydHNSZWN1cnNpdmUiLCJhcmVQYXJ0c1JlY3Vyc2l2ZSIsImRlZmluaXRpb25SZWN1cnNpdmUiLCJwYXJ0c0xlZnRSZWN1cnNpdmUiLCJhcmVQYXJ0c0xlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBU0dBLG1CQUFtQjtlQUFuQkEsbUJBQW1COztJQVNuQkMscUJBQXFCO2VBQXJCQSxxQkFBcUI7O0lBUXJCQyx5QkFBeUI7ZUFBekJBLHlCQUF5Qjs7SUFRekJDLGdDQUFnQztlQUFoQ0EsZ0NBQWdDOztJQU9oQ0Msb0NBQW9DO2VBQXBDQSxvQ0FBb0M7Ozt5QkF2Q3JCLFdBQVc7b0JBRVosbUJBQW1CO3FCQUNzRSxvQkFBb0I7QUFFM0ksSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixBQUFDO0FBRTFCLFNBQVNMLG1CQUFtQixDQUFDTyxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3QkMsU0FBUyxHQUFHTCxLQUFLLENBQUNHLEtBQUssQ0FBQyxFQUN4QkcsZ0JBQWdCLEdBQUdDLElBQUFBLEtBQWEsY0FBQSxFQUFDRixTQUFTLENBQUMsRUFDM0NHLGlCQUFpQixHQUFHRixnQkFBZ0IsQUFBQyxFQUFDLEdBQUc7SUFFL0MsT0FBT0UsaUJBQWlCLENBQUM7Q0FDMUI7QUFFTSxTQUFTWixxQkFBcUIsQ0FBQ00sVUFBVSxFQUFFO0lBQ2hELElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JLLGNBQWMsR0FBR0MsSUFBQUEsTUFBaUIsa0JBQUEsRUFBQ1AsS0FBSyxDQUFDLEVBQ3pDUSxtQkFBbUIsR0FBR0YsY0FBYyxBQUFDLEVBQUMsR0FBRztJQUUvQyxPQUFPRSxtQkFBbUIsQ0FBQztDQUM1QjtBQUVNLFNBQVNkLHlCQUF5QixDQUFDSyxVQUFVLEVBQUU7SUFDcEQsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3QlEsa0JBQWtCLEdBQUdDLElBQUFBLE1BQXFCLHNCQUFBLEVBQUNWLEtBQUssQ0FBQyxFQUNqRFcsdUJBQXVCLEdBQUdGLGtCQUFrQixBQUFDLEVBQUMsR0FBRztJQUV2RCxPQUFPRSx1QkFBdUIsQ0FBQztDQUNoQztBQUVNLFNBQVNoQixnQ0FBZ0MsQ0FBQ0ksVUFBVSxFQUFFO0lBQzNELElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JXLGtCQUFrQixHQUFHQyxJQUFBQSxNQUEyQiw0QkFBQSxFQUFDYixLQUFLLENBQUMsQUFBQztJQUU5RCxPQUFPWSxrQkFBa0IsQ0FBQztDQUMzQjtBQUVNLFNBQVNoQixvQ0FBb0MsQ0FBQ0csVUFBVSxFQUFFO0lBQy9ELElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JhLHNCQUFzQixHQUFHQyxJQUFBQSxNQUErQixnQ0FBQSxFQUFDZixLQUFLLENBQUMsQUFBQztJQUV0RSxPQUFPYyxzQkFBc0IsQ0FBQztDQUMvQiJ9