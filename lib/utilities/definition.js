"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.recursiveRuleNamesFromParts)(parts, recursiveRuleNames);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.leftRecursiveRuleNamesFromParts)(parts, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSwgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNnQkEsbUJBQW1CO2VBQW5CQTs7SUFTQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsZ0NBQWdDO2VBQWhDQTs7SUFRQUMsb0NBQW9DO2VBQXBDQTs7O3lCQWhDZTtvQkFFRDtxQkFDc0U7QUFFcEcsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQ7QUFFRCxTQUFTSixvQkFBb0JNLFVBQVUsRUFBRTtJQUM5QyxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCQyxZQUFZTCxNQUFNRyxRQUNsQkcsbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDRixZQUNqQ0csb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU1gsMEJBQTBCSyxVQUFVLEVBQUU7SUFDcEQsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQksscUJBQXFCQyxJQUFBQSw0QkFBcUIsRUFBQ1AsUUFDM0NRLDBCQUEwQkYsb0JBQW9CLEdBQUc7SUFFdkQsT0FBT0U7QUFDVDtBQUVPLFNBQVNiLGlDQUFpQ0ksVUFBVSxFQUEyQjtRQUF6QlUscUJBQUFBLGlFQUFxQixFQUFFO0lBQ2xGLElBQU1ULFFBQVFELFdBQVdFLFFBQVE7SUFFakNTLElBQUFBLGtDQUEyQixFQUFDVixPQUFPUztJQUVuQyxPQUFPQTtBQUNUO0FBRU8sU0FBU2IscUNBQXFDRyxVQUFVLEVBQStCO1FBQTdCWSx5QkFBQUEsaUVBQXlCLEVBQUU7SUFDMUYsSUFBTVgsUUFBUUQsV0FBV0UsUUFBUTtJQUVqQ1csSUFBQUEsc0NBQStCLEVBQUNaLE9BQU9XO0lBRXZDLE9BQU9BO0FBQ1QifQ==