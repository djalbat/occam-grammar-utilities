"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    isDefinitionDirectlyLeftRecursive: function() {
        return isDefinitionDirectlyLeftRecursive;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.recursiveRuleNamesFromParts)(parts, recursiveRuleNames);
    return recursiveRuleNames;
}
function isDefinitionDirectlyLeftRecursive(definition, leftRecursiveRuleName) {
    var parts = definition.getParts(), partsDirectlyLeftRecursive = (0, _parts.arePartsDirectlyLeftRecursive)(parts, leftRecursiveRuleName), definitionDirectlyLeftRecursive = partsDirectlyLeftRecursive; ///
    return definitionDirectlyLeftRecursive;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.leftRecursiveRuleNamesFromParts)(parts, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRDb21wbGV4IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0XCI7XG5pbXBvcnQgeyBhcmVQYXJ0c1JlY3Vyc2l2ZSxcbiAgICAgICAgIGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSxcbiAgICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyxcbiAgICAgICAgIGFyZVBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlLFxuICAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUgPSBhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZShwYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSxcbiAgICAgICAgZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSA9IHBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3QiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicGFydHNSZWN1cnNpdmUiLCJhcmVQYXJ0c1JlY3Vyc2l2ZSIsImRlZmluaXRpb25SZWN1cnNpdmUiLCJwYXJ0c0xlZnRSZWN1cnNpdmUiLCJhcmVQYXJ0c0xlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwiYXJlUGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVVnQkEsbUJBQW1CO2VBQW5CQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFRQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsZ0NBQWdDO2VBQWhDQTs7SUFRQUMsaUNBQWlDO2VBQWpDQTs7SUFRQUMsb0NBQW9DO2VBQXBDQTs7O3FCQWpETTtvQkFDUTtxQkFLa0I7QUFFekMsU0FBU0wsb0JBQW9CTSxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQkMsWUFBWUMsSUFBQUEsWUFBSyxFQUFDSCxRQUNsQkksbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDSCxZQUNqQ0ksb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU1osc0JBQXNCSyxVQUFVLEVBQUU7SUFDaEQsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQk0saUJBQWlCQyxJQUFBQSx3QkFBaUIsRUFBQ1IsUUFDbkNTLHNCQUFzQkYsZ0JBQWdCLEdBQUc7SUFFL0MsT0FBT0U7QUFDVDtBQUVPLFNBQVNkLDBCQUEwQkksVUFBVSxFQUFFO0lBQ3BELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JTLHFCQUFxQkMsSUFBQUEsNEJBQXFCLEVBQUNYLFFBQzNDWSwwQkFBMEJGLG9CQUFvQixHQUFHO0lBRXZELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTaEIsaUNBQWlDRyxVQUFVLEVBQTJCO1FBQXpCYyxxQkFBQUEsaUVBQXFCLEVBQUU7SUFDbEYsSUFBTWIsUUFBUUQsV0FBV0UsUUFBUTtJQUVqQ2EsSUFBQUEsa0NBQTJCLEVBQUNkLE9BQU9hO0lBRW5DLE9BQU9BO0FBQ1Q7QUFFTyxTQUFTaEIsa0NBQWtDRSxVQUFVLEVBQUVnQixxQkFBcUIsRUFBRTtJQUNuRixJQUFNZixRQUFRRCxXQUFXRSxRQUFRLElBQzNCZSw2QkFBNkJDLElBQUFBLG9DQUE2QixFQUFDakIsT0FBT2Usd0JBQ2xFRyxrQ0FBa0NGLDRCQUE0QixHQUFHO0lBRXZFLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTcEIscUNBQXFDQyxVQUFVLEVBQStCO1FBQTdCb0IseUJBQUFBLGlFQUF5QixFQUFFO0lBQzFGLElBQU1uQixRQUFRRCxXQUFXRSxRQUFRO0lBRWpDbUIsSUFBQUEsc0NBQStCLEVBQUNwQixPQUFPbUI7SUFFdkMsT0FBT0E7QUFDVCJ9