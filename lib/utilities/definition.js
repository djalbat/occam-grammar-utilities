"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    isDefinitionEffectivelyUnary: function() {
        return isDefinitionEffectivelyUnary;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function isDefinitionEffectivelyUnary(definition, context) {
    var definitionEffectivelyUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionEffectivelyUnary = partUnary; ///
    } else {
        var partsTail = (0, _array.tail)(parts), ruleNames = [], partsTailEffectivelyOptional = (0, _parts.arePartsEffectivelyOptional)(partsTail, ruleNames, context);
        definitionEffectivelyUnary = partsTailEffectivelyOptional;
    }
    return definitionEffectivelyUnary;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdGFpbCwgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRVbmFyeSwgaXNQYXJ0Q29tcGxleCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgYXJlUGFydHNSZWN1cnNpdmUsIGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSwgYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsLCByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNSZWN1cnNpdmUgPSBhcmVQYXJ0c1JlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSBwYXJ0c1JlY3Vyc2l2ZTsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcGFydHNMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5KGRlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgbGV0IGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBwYXJ0VW5hcnkgPSBpc1BhcnRVbmFyeShwYXJ0KTtcblxuICAgIGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gcGFydFVuYXJ5OyAgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydHNUYWlsID0gdGFpbChwYXJ0cyksXG4gICAgICAgICAgcnVsZU5hbWVzID0gW10sXG4gICAgICAgICAgcGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCA9IGFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbChwYXJ0c1RhaWwsIHJ1bGVOYW1lcywgY29udGV4dCk7XG5cbiAgICBkZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSA9IHBhcnRzVGFpbEVmZmVjdGl2ZWx5T3B0aW9uYWw7XG4gIH1cblxuICByZXR1cm4gZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25SZWN1cnNpdmUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdCIsImZpcnN0UGFydENvbXBsZXgiLCJpc1BhcnRDb21wbGV4IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJwYXJ0c1JlY3Vyc2l2ZSIsImFyZVBhcnRzUmVjdXJzaXZlIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiY29udGV4dCIsImRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5IiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJwYXJ0IiwicGFydFVuYXJ5IiwiaXNQYXJ0VW5hcnkiLCJwYXJ0c1RhaWwiLCJ0YWlsIiwicnVsZU5hbWVzIiwicGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCIsImFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFNZ0JBLG1CQUFtQjtlQUFuQkE7O0lBU0FDLHFCQUFxQjtlQUFyQkE7O0lBUUFDLHlCQUF5QjtlQUF6QkE7O0lBUUFDLDRCQUE0QjtlQUE1QkE7O0lBdUJBQyxnQ0FBZ0M7ZUFBaENBOztJQU9BQyxvQ0FBb0M7ZUFBcENBOzs7cUJBM0RZO29CQUNlO3FCQUN5RztBQUU3SSxTQUFTTCxvQkFBb0JNLFVBQVUsRUFBRTtJQUM5QyxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCQyxZQUFZQyxJQUFBQSxZQUFLLEVBQUNILFFBQ2xCSSxtQkFBbUJDLElBQUFBLG1CQUFhLEVBQUNILFlBQ2pDSSxvQkFBb0JGLGtCQUFrQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTWixzQkFBc0JLLFVBQVUsRUFBRTtJQUNoRCxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCTSxpQkFBaUJDLElBQUFBLHdCQUFpQixFQUFDUixRQUNuQ1Msc0JBQXNCRixnQkFBZ0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU2QsMEJBQTBCSSxVQUFVLEVBQUU7SUFDcEQsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQlMscUJBQXFCQyxJQUFBQSw0QkFBcUIsRUFBQ1gsUUFDM0NZLDBCQUEwQkYsb0JBQW9CLEdBQUc7SUFFdkQsT0FBT0U7QUFDVDtBQUVPLFNBQVNoQiw2QkFBNkJHLFVBQVUsRUFBRWMsT0FBTyxFQUFFO0lBQ2hFLElBQUlDLDZCQUE2QixLQUFLO0lBRXRDLElBQU1kLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JjLGNBQWNmLE1BQU1nQixNQUFNO0lBRWhDLElBQUlELGdCQUFnQixHQUFHO1FBQ3JCLElBQU1iLFlBQVlDLElBQUFBLFlBQUssRUFBQ0gsUUFDbEJpQixPQUFPZixXQUNQZ0IsWUFBWUMsSUFBQUEsaUJBQVcsRUFBQ0Y7UUFFOUJILDZCQUE2QkksV0FBWSxHQUFHO0lBQzlDLE9BQU87UUFDTCxJQUFNRSxZQUFZQyxJQUFBQSxXQUFJLEVBQUNyQixRQUNqQnNCLFlBQVksRUFBRSxFQUNkQywrQkFBK0JDLElBQUFBLGtDQUEyQixFQUFDSixXQUFXRSxXQUFXVDtRQUV2RkMsNkJBQTZCUztJQUMvQixDQUFDO0lBRUQsT0FBT1Q7QUFDVDtBQUVPLFNBQVNqQixpQ0FBaUNFLFVBQVUsRUFBRTtJQUMzRCxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCd0IscUJBQXFCQyxJQUFBQSxrQ0FBMkIsRUFBQzFCO0lBRXZELE9BQU95QjtBQUNUO0FBRU8sU0FBUzNCLHFDQUFxQ0MsVUFBVSxFQUFFO0lBQy9ELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0IwQix5QkFBeUJDLElBQUFBLHNDQUErQixFQUFDNUI7SUFFL0QsT0FBTzJCO0FBQ1QifQ==