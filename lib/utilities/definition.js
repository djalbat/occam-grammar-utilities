"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionRecursive = isDefinitionRecursive;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.definitionPartsFromDefinition = definitionPartsFromDefinition;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _necessary = require("necessary");
var _parts = require("../utilities/parts");
var _part = require("../utilities/part");
var first = _necessary.arrayUtilities.first;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part).isPartComplex(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition), recursiveRuleNamesLength = recursiveRuleNames.length, definitionRecursive = recursiveRuleNamesLength > 0;
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function definitionPartsFromDefinition(definition) {
    var definitionParts = definition.getParts();
    definitionParts = (0, _parts).cloneParts(definitionParts); //
    return definitionParts;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts).recursiveRuleNamesFromParts(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts).leftRecursiveRuleNamesFromParts(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGNsb25lUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5pbXBvcnQgeyBpc1BhcnRDb21wbGV4IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0XCI7XG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uVW5hcnkoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGgsXG4gICAgICAgIGRlZmluaXRpb25VbmFyeSA9IChwYXJ0c0xlbmd0aCA9PT0gMSk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25VbmFyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSByZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uUmVjdXJzaXZlID0gKHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBkZWZpbml0aW9uUmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluaXRpb25QYXJ0c0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgbGV0IGRlZmluaXRpb25QYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBkZWZpbml0aW9uUGFydHMgPSBjbG9uZVBhcnRzKGRlZmluaXRpb25QYXJ0cyk7ICAvL1xuXG4gIHJldHVybiBkZWZpbml0aW9uUGFydHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvblVuYXJ5IiwiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uUGFydHMiLCJjbG9uZVBhcnRzIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBh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