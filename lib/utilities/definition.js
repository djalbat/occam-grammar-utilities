"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionUnary: function() {
        return isDefinitionUnary;
    },
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionUnary(definition, context) {
    var definitionUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionUnary = partUnary; ///
    } else {
        var partsTail = (0, _array.tail)(parts), ruleNames = [], partsTailEffectivelyOptional = (0, _parts.arePartsEffectivelyOptional)(partsTail, ruleNames, context);
        definitionUnary = partsTailEffectivelyOptional;
    }
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdGFpbCwgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRVbmFyeSwgaXNQYXJ0Q29tcGxleCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgYXJlUGFydHNSZWN1cnNpdmUsIGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSwgYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsLCByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGxldCBkZWZpbml0aW9uVW5hcnkgPSBmYWxzZTtcblxuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKHBhcnRzTGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICAgIHBhcnQgPSBmaXJzdFBhcnQsIC8vL1xuICAgICAgICAgIHBhcnRVbmFyeSA9IGlzUGFydFVuYXJ5KHBhcnQpO1xuXG4gICAgZGVmaW5pdGlvblVuYXJ5ID0gcGFydFVuYXJ5OyAgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydHNUYWlsID0gdGFpbChwYXJ0cyksXG4gICAgICAgICAgcnVsZU5hbWVzID0gW10sXG4gICAgICAgICAgcGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCA9IGFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbChwYXJ0c1RhaWwsIHJ1bGVOYW1lcywgY29udGV4dCk7XG5cbiAgICBkZWZpbml0aW9uVW5hcnkgPSBwYXJ0c1RhaWxFZmZlY3RpdmVseU9wdGlvbmFsO1xuICB9XG5cbiAgcmV0dXJuIGRlZmluaXRpb25VbmFyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsImNvbnRleHQiLCJkZWZpbml0aW9uVW5hcnkiLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdFBhcnQiLCJmaXJzdCIsInBhcnQiLCJwYXJ0VW5hcnkiLCJpc1BhcnRVbmFyeSIsInBhcnRzVGFpbCIsInRhaWwiLCJydWxlTmFtZXMiLCJwYXJ0c1RhaWxFZmZlY3RpdmVseU9wdGlvbmFsIiwiYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsIiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsInBhcnRzUmVjdXJzaXZlIiwiYXJlUGFydHNSZWN1cnNpdmUiLCJkZWZpbml0aW9uUmVjdXJzaXZlIiwicGFydHNMZWZ0UmVjdXJzaXZlIiwiYXJlUGFydHNMZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBTWdCQSxpQkFBaUI7ZUFBakJBOztJQXVCQUMsbUJBQW1CO2VBQW5CQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFRQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsZ0NBQWdDO2VBQWhDQTs7SUFPQUMsb0NBQW9DO2VBQXBDQTs7O3FCQTNEWTtvQkFDZTtxQkFDeUc7QUFFN0ksU0FBU0wsa0JBQWtCTSxVQUFVLEVBQUVDLE9BQU8sRUFBRTtJQUNyRCxJQUFJQyxrQkFBa0IsS0FBSztJQUUzQixJQUFNQyxRQUFRSCxXQUFXSSxRQUFRLElBQzNCQyxjQUFjRixNQUFNRyxNQUFNO0lBRWhDLElBQUlELGdCQUFnQixHQUFHO1FBQ3JCLElBQU1FLFlBQVlDLElBQUFBLFlBQUssRUFBQ0wsUUFDbEJNLE9BQU9GLFdBQ1BHLFlBQVlDLElBQUFBLGlCQUFXLEVBQUNGO1FBRTlCUCxrQkFBa0JRLFdBQVksR0FBRztJQUNuQyxPQUFPO1FBQ0wsSUFBTUUsWUFBWUMsSUFBQUEsV0FBSSxFQUFDVixRQUNqQlcsWUFBWSxFQUFFLEVBQ2RDLCtCQUErQkMsSUFBQUEsa0NBQTJCLEVBQUNKLFdBQVdFLFdBQVdiO1FBRXZGQyxrQkFBa0JhO0lBQ3BCLENBQUM7SUFFRCxPQUFPYjtBQUNUO0FBRU8sU0FBU1Asb0JBQW9CSyxVQUFVLEVBQUU7SUFDOUMsSUFBTUcsUUFBUUgsV0FBV0ksUUFBUSxJQUMzQkcsWUFBWUMsSUFBQUEsWUFBSyxFQUFDTCxRQUNsQmMsbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDWCxZQUNqQ1ksb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU3ZCLHNCQUFzQkksVUFBVSxFQUFFO0lBQ2hELElBQU1HLFFBQVFILFdBQVdJLFFBQVEsSUFDM0JnQixpQkFBaUJDLElBQUFBLHdCQUFpQixFQUFDbEIsUUFDbkNtQixzQkFBc0JGLGdCQUFnQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTekIsMEJBQTBCRyxVQUFVLEVBQUU7SUFDcEQsSUFBTUcsUUFBUUgsV0FBV0ksUUFBUSxJQUMzQm1CLHFCQUFxQkMsSUFBQUEsNEJBQXFCLEVBQUNyQixRQUMzQ3NCLDBCQUEwQkYsb0JBQW9CLEdBQUc7SUFFdkQsT0FBT0U7QUFDVDtBQUVPLFNBQVMzQixpQ0FBaUNFLFVBQVUsRUFBRTtJQUMzRCxJQUFNRyxRQUFRSCxXQUFXSSxRQUFRLElBQzNCc0IscUJBQXFCQyxJQUFBQSxrQ0FBMkIsRUFBQ3hCO0lBRXZELE9BQU91QjtBQUNUO0FBRU8sU0FBUzNCLHFDQUFxQ0MsVUFBVSxFQUFFO0lBQy9ELElBQU1HLFFBQVFILFdBQVdJLFFBQVEsSUFDM0J3Qix5QkFBeUJDLElBQUFBLHNDQUErQixFQUFDMUI7SUFFL0QsT0FBT3lCO0FBQ1QifQ==