"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    isDefinitionDirectlyLeftRecursive: function() {
        return isDefinitionDirectlyLeftRecursive;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.recursiveRuleNamesFromParts)(parts, recursiveRuleNames);
    return recursiveRuleNames;
}
function isDefinitionDirectlyLeftRecursive(definition, leftRecursiveRuleName) {
    var parts = definition.getParts(), partsDirectlyLeftRecursive = (0, _parts.arePartsDirectlyLeftRecursive)(parts, leftRecursiveRuleName), definitionDirectlyLeftRecursive = partsDirectlyLeftRecursive; ///
    return definitionDirectlyLeftRecursive;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.leftRecursiveRuleNamesFromParts)(parts, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IGFyZVBhcnRzUmVjdXJzaXZlLFxuICAgICAgICAgYXJlUGFydHNMZWZ0UmVjdXJzaXZlLFxuICAgICAgICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzLFxuICAgICAgICAgYXJlUGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUsXG4gICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgcmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUgPSBhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZShwYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSxcbiAgICAgICAgZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSA9IHBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJkZWZpbml0aW9uIiwicGFydHMiLCJnZXRQYXJ0cyIsImZpcnN0UGFydCIsImZpcnN0UGFydENvbXBsZXgiLCJpc1BhcnRDb21wbGV4IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJwYXJ0c1JlY3Vyc2l2ZSIsImFyZVBhcnRzUmVjdXJzaXZlIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwicGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBYWdCQSxtQkFBbUI7ZUFBbkJBOztJQVNBQyxxQkFBcUI7ZUFBckJBOztJQVFBQyx5QkFBeUI7ZUFBekJBOztJQVFBQyxnQ0FBZ0M7ZUFBaENBOztJQVFBQyxpQ0FBaUM7ZUFBakNBOztJQVFBQyxvQ0FBb0M7ZUFBcENBOzs7eUJBcERlO29CQUVEO3FCQUtrQjtBQUVoRCxJQUFNLEFBQUVDLFFBQVVDLHlCQUFjLENBQXhCRDtBQUVELFNBQVNOLG9CQUFvQlEsVUFBVSxFQUFFO0lBQzlDLElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JDLFlBQVlMLE1BQU1HLFFBQ2xCRyxtQkFBbUJDLElBQUFBLG1CQUFhLEVBQUNGLFlBQ2pDRyxvQkFBb0JGLGtCQUFrQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTYixzQkFBc0JPLFVBQVUsRUFBRTtJQUNoRCxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCSyxpQkFBaUJDLElBQUFBLHdCQUFpQixFQUFDUCxRQUNuQ1Esc0JBQXNCRixnQkFBZ0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU2YsMEJBQTBCTSxVQUFVLEVBQUU7SUFDcEQsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQlEscUJBQXFCQyxJQUFBQSw0QkFBcUIsRUFBQ1YsUUFDM0NXLDBCQUEwQkYsb0JBQW9CLEdBQUc7SUFFdkQsT0FBT0U7QUFDVDtBQUVPLFNBQVNqQixpQ0FBaUNLLFVBQVUsRUFBMkI7UUFBekJhLHFCQUFBQSxpRUFBcUIsRUFBRTtJQUNsRixJQUFNWixRQUFRRCxXQUFXRSxRQUFRO0lBRWpDWSxJQUFBQSxrQ0FBMkIsRUFBQ2IsT0FBT1k7SUFFbkMsT0FBT0E7QUFDVDtBQUVPLFNBQVNqQixrQ0FBa0NJLFVBQVUsRUFBRWUscUJBQXFCLEVBQUU7SUFDbkYsSUFBTWQsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQmMsNkJBQTZCQyxJQUFBQSxvQ0FBNkIsRUFBQ2hCLE9BQU9jLHdCQUNsRUcsa0NBQWtDRiw0QkFBNEIsR0FBRztJQUV2RSxPQUFPRTtBQUNUO0FBRU8sU0FBU3JCLHFDQUFxQ0csVUFBVSxFQUErQjtRQUE3Qm1CLHlCQUFBQSxpRUFBeUIsRUFBRTtJQUMxRixJQUFNbEIsUUFBUUQsV0FBV0UsUUFBUTtJQUVqQ2tCLElBQUFBLHNDQUErQixFQUFDbkIsT0FBT2tCO0lBRXZDLE9BQU9BO0FBQ1QifQ==