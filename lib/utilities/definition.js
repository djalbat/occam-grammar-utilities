'use strict';

var partUtilities = require('../utilities/part'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    ruleNamesFromPart = partUtilities.ruleNamesFromPart,
    leftRecursiveRuleNameFromPart = partUtilities.leftRecursiveRuleNameFromPart;


function isDefinitionRecursive(definition) {
  var ruleNames = ruleNamesFromDefinition(definition),
      ruleNamesLength = ruleNames.length,
      definitionRecursive = ruleNamesLength > 0;

  return definitionRecursive;
}

function ruleNamesFromDefinition(definition) {
  var ruleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var parts = definition.getParts();

  parts.forEach(function (part) {
    ruleNamesFromPart(part, ruleNames);
  });

  return ruleNames;
}

function isDefinitionLeftRecursive(definition) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromDefinition(definition),
      definitionLeftRecursive = leftRecursiveRuleName !== null;

  return definitionLeftRecursive;
}

function leftRecursiveRuleNameFromDefinition(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart,
      ///
  leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

  return leftRecursiveRuleName;
}

module.exports = {
  isDefinitionRecursive: isDefinitionRecursive,
  ruleNamesFromDefinition: ruleNamesFromDefinition,
  isDefinitionLeftRecursive: isDefinitionLeftRecursive,
  leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJ0VXRpbGl0aWVzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJydWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiZGVmaW5pdGlvbiIsInJ1bGVOYW1lcyIsInJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwicnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsInBhcnRzIiwiZ2V0UGFydHMiLCJmb3JFYWNoIiwicGFydCIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZmlyc3RQYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLG1CQUFSLENBQXRCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBRHZCOztBQUdNLElBQUVFLEtBQUYsR0FBWUQsY0FBWixDQUFFQyxLQUFGO0FBQUEsSUFDRUMsaUJBREYsR0FDdURKLGFBRHZELENBQ0VJLGlCQURGO0FBQUEsSUFDcUJDLDZCQURyQixHQUN1REwsYUFEdkQsQ0FDcUJLLDZCQURyQjs7O0FBR04sU0FBU0MscUJBQVQsQ0FBK0JDLFVBQS9CLEVBQTJDO0FBQ3pDLE1BQU1DLFlBQVlDLHdCQUF3QkYsVUFBeEIsQ0FBbEI7QUFBQSxNQUNNRyxrQkFBa0JGLFVBQVVHLE1BRGxDO0FBQUEsTUFFTUMsc0JBQXVCRixrQkFBa0IsQ0FGL0M7O0FBSUEsU0FBT0UsbUJBQVA7QUFDRDs7QUFFRCxTQUFTSCx1QkFBVCxDQUFpQ0YsVUFBakMsRUFBNkQ7QUFBQSxNQUFoQkMsU0FBZ0IsdUVBQUosRUFBSTs7QUFDM0QsTUFBTUssUUFBUU4sV0FBV08sUUFBWCxFQUFkOztBQUVBRCxRQUFNRSxPQUFOLENBQWMsVUFBQ0MsSUFBRCxFQUFVO0FBQ3RCWixzQkFBa0JZLElBQWxCLEVBQXdCUixTQUF4QjtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsU0FBUDtBQUNEOztBQUVELFNBQVNTLHlCQUFULENBQW1DVixVQUFuQyxFQUErQztBQUM3QyxNQUFNVyx3QkFBd0JDLG9DQUFvQ1osVUFBcEMsQ0FBOUI7QUFBQSxNQUNNYSwwQkFBMkJGLDBCQUEwQixJQUQzRDs7QUFHQSxTQUFPRSx1QkFBUDtBQUNEOztBQUVELFNBQVNELG1DQUFULENBQTZDWixVQUE3QyxFQUF5RDtBQUN2RCxNQUFNTSxRQUFRTixXQUFXTyxRQUFYLEVBQWQ7QUFBQSxNQUNNTyxZQUFZbEIsTUFBTVUsS0FBTixDQURsQjtBQUFBLE1BRU1HLE9BQU9LLFNBRmI7QUFBQSxNQUV3QjtBQUNsQkgsMEJBQXdCYiw4QkFBOEJXLElBQTlCLENBSDlCOztBQUtBLFNBQU9FLHFCQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpCLDhDQURlO0FBRWZHLGtEQUZlO0FBR2ZRLHNEQUhlO0FBSWZFO0FBSmUsQ0FBakIiLCJmaWxlIjoiZGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9wYXJ0JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0IH0gPSBwYXJ0VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBydWxlTmFtZXMgPSBydWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgcnVsZU5hbWVzTGVuZ3RoID0gcnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IChydWxlTmFtZXNMZW5ndGggPiAwKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZVxufVxuXG5mdW5jdGlvbiBydWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlTmFtZXMgPSBbXSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgcnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcnVsZU5hbWVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lcztcbn1cblxuZnVuY3Rpb24gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgIT09IG51bGwpO1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQocGFydCk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZSxcbiAgcnVsZU5hbWVzRnJvbURlZmluaXRpb24sXG4gIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUsXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21EZWZpbml0aW9uXG59O1xuIl19