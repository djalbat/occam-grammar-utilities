'use strict';

var parsers = require('occam-parsers'),
    necessary = require('necessary');

var recursivePartUtilities = require('../utilities/recursivePart');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNamesFromPart = recursivePartUtilities.leftRecursiveRuleNamesFromPart;


function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;

  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;

  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);

  return leftRecursiveRuleNames;
}

module.exports = {
  isDefinitionUnary: isDefinitionUnary,
  isDefinitionComplex: isDefinitionComplex,
  isDefinitionLookAhead: isDefinitionLookAhead,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNamesFromDefinition: leftRecursiveRuleNamesFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIm5lY2Vzc2FyeSIsInJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0IiwicGFydFR5cGVzIiwiUnVsZU5hbWVQYXJ0VHlwZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IiwiaXNEZWZpbml0aW9uVW5hcnkiLCJkZWZpbml0aW9uIiwicGFydHMiLCJnZXRQYXJ0cyIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblVuYXJ5IiwiaXNEZWZpbml0aW9uQ29tcGxleCIsImZpcnN0UGFydCIsImZpcnN0UGFydFR5cGUiLCJnZXRUeXBlIiwiZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJkZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvbkxvb2tBaGVhZCIsImxvb2tBaGVhZCIsInJ1bGVOYW1lUGFydCIsImlzTG9va0FoZWFkIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJmb3JFYWNoIiwicGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLFdBQVIsQ0FEbEI7O0FBR0EsSUFBTUUseUJBQXlCRixRQUFRLDRCQUFSLENBQS9COztBQUVNLElBQUVHLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjtBQUFBLElBRUVDLFNBRkYsR0FFZ0JOLE9BRmhCLENBRUVNLFNBRkY7QUFBQSxJQUdFQyxnQkFIRixHQUd1QkQsU0FIdkIsQ0FHRUMsZ0JBSEY7QUFBQSxJQUlFQywwQkFKRixHQUlpRUwsc0JBSmpFLENBSUVLLDBCQUpGO0FBQUEsSUFJOEJDLDhCQUo5QixHQUlpRU4sc0JBSmpFLENBSThCTSw4QkFKOUI7OztBQU1OLFNBQVNDLGlCQUFULENBQTJCQyxVQUEzQixFQUF1QztBQUNyQyxNQUFNQyxRQUFRRCxXQUFXRSxRQUFYLEVBQWQ7QUFBQSxNQUNNQyxjQUFjRixNQUFNRyxNQUQxQjtBQUFBLE1BRU1DLGtCQUFtQkYsZ0JBQWdCLENBRnpDOztBQUlBLFNBQU9FLGVBQVA7QUFDRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2Qk4sVUFBN0IsRUFBeUM7QUFDdkMsTUFBTUMsUUFBUUQsV0FBV0UsUUFBWCxFQUFkO0FBQUEsTUFDTUssWUFBWWIsTUFBTU8sS0FBTixDQURsQjtBQUFBLE1BRU1PLGdCQUFnQkQsVUFBVUUsT0FBVixFQUZ0QjtBQUFBLE1BR01DLGdDQUFpQ0Ysa0JBQWtCWixnQkFIekQ7QUFBQSxNQUlNZSx3QkFBd0JELDZCQUo5QjtBQUFBLE1BS01FLG9CQUFvQixDQUFDRCxxQkFMM0I7O0FBT0EsU0FBT0MsaUJBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmIsVUFBL0IsRUFBMkM7QUFDekMsTUFBSWMsWUFBWSxLQUFoQjs7QUFFQSxNQUFNYixRQUFRRCxXQUFXRSxRQUFYLEVBQWQ7QUFBQSxNQUNNSyxZQUFZYixNQUFNTyxLQUFOLENBRGxCO0FBQUEsTUFFTU8sZ0JBQWdCRCxVQUFVRSxPQUFWLEVBRnRCO0FBQUEsTUFHTUMsZ0NBQWlDRixrQkFBa0JaLGdCQUh6RDtBQUFBLE1BSU1lLHdCQUF3QkQsNkJBSjlCLENBSHlDLENBT3FCOztBQUU5RCxNQUFJQyxxQkFBSixFQUEyQjtBQUN6QixRQUFNSSxlQUFlUixTQUFyQixDQUR5QixDQUNPOztBQUVoQ08sZ0JBQVlDLGFBQWFDLFdBQWIsRUFBWjtBQUNEOztBQUVELFNBQU9GLFNBQVA7QUFDRDs7QUFFRCxTQUFTRyxnQ0FBVCxDQUEwQ2pCLFVBQTFDLEVBQXNEO0FBQ3BELE1BQU1rQixxQkFBcUIsRUFBM0I7QUFBQSxNQUNNakIsUUFBUUQsV0FBV0UsUUFBWCxFQURkOztBQUdBRCxRQUFNa0IsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBVTtBQUN0QnZCLCtCQUEyQnVCLElBQTNCLEVBQWlDRixrQkFBakM7QUFDRCxHQUZEOztBQUlBLFNBQU9BLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU0csb0NBQVQsQ0FBOENyQixVQUE5QyxFQUEwRDtBQUN4RCxNQUFNc0IseUJBQXlCLEVBQS9CO0FBQUEsTUFDTXJCLFFBQVFELFdBQVdFLFFBQVgsRUFEZDtBQUFBLE1BRU1LLFlBQVliLE1BQU1PLEtBQU4sQ0FGbEI7QUFBQSxNQUdNbUIsT0FBT2IsU0FIYixDQUR3RCxDQUloQzs7QUFFeEJULGlDQUErQnNCLElBQS9CLEVBQXFDRSxzQkFBckM7O0FBRUEsU0FBT0Esc0JBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmekIsc0NBRGU7QUFFZk8sMENBRmU7QUFHZk8sOENBSGU7QUFJZkksb0VBSmU7QUFLZkk7QUFMZSxDQUFqQiIsImZpbGUiOiJkZWZpbml0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcmVjdXJzaXZlUGFydCcpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXMsXG4gICAgICB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQgfSA9IHJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvblVuYXJ5KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uVW5hcnkgPSAocGFydHNMZW5ndGggPT09IDEpO1xuXG4gIHJldHVybiBkZWZpbml0aW9uVW5hcnk7XG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlID0gZmlyc3RQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUgPSAoZmlyc3RQYXJ0VHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgIGZpcnN0UGFydFJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9ICFmaXJzdFBhcnRSdWxlTmFtZVBhcnQ7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25Db21wbGV4O1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0RlZmluaXRpb25VbmFyeSxcbiAgaXNEZWZpbml0aW9uQ29tcGxleCxcbiAgaXNEZWZpbml0aW9uTG9va0FoZWFkLFxuICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbixcbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uXG59O1xuIl19