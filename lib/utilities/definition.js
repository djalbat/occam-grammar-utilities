'use strict';

var parsers = require('occam-parsers');

var parts = parsers.parts,
    RuleNamePart = parts.RuleNamePart,
    type = RuleNamePart.type,
    ruleNamePartType = type; ///

function isFirstPartRuleNamePart(rule) {
      var firstPartRuleNamePart = void 0;

      var firstPart = rule.getFirstPart(),
          firstPartTerminalPart = firstPart.isTerminalPart(),
          firstPartNonTerminalPart = !firstPartTerminalPart;

      if (firstPartNonTerminalPart) {
            var nonTerminalPart = firstPart,
                ///
            nonTerminalPartType = nonTerminalPart.getType(),
                nonTerminalPartTypeRuleNamePartType = nonTerminalPartType === ruleNamePartType,
                nonTerminalPartRuleNamePart = nonTerminalPartTypeRuleNamePartType; ///

            firstPartRuleNamePart = nonTerminalPartRuleNamePart; ///
      }

      return firstPartRuleNamePart;
}

module.exports = {
      isFirstPartRuleNamePart: isFirstPartRuleNamePart
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsInBhcnRzIiwiUnVsZU5hbWVQYXJ0IiwidHlwZSIsInJ1bGVOYW1lUGFydFR5cGUiLCJpc0ZpcnN0UGFydFJ1bGVOYW1lUGFydCIsInJ1bGUiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJmaXJzdFBhcnQiLCJnZXRGaXJzdFBhcnQiLCJmaXJzdFBhcnRUZXJtaW5hbFBhcnQiLCJpc1Rlcm1pbmFsUGFydCIsImZpcnN0UGFydE5vblRlcm1pbmFsUGFydCIsIm5vblRlcm1pbmFsUGFydCIsIm5vblRlcm1pbmFsUGFydFR5cGUiLCJnZXRUeXBlIiwibm9uVGVybWluYWxQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUiLCJub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRU0sSUFBRUMsS0FBRixHQUFZRixPQUFaLENBQUVFLEtBQUY7QUFBQSxJQUNFQyxZQURGLEdBQ21CRCxLQURuQixDQUNFQyxZQURGO0FBQUEsSUFFRUMsSUFGRixHQUVXRCxZQUZYLENBRUVDLElBRkY7QUFBQSxJQUdBQyxnQkFIQSxHQUdtQkQsSUFIbkIsQyxDQUcwQjs7QUFFaEMsU0FBU0UsdUJBQVQsQ0FBaUNDLElBQWpDLEVBQXVDO0FBQ3JDLFVBQUlDLDhCQUFKOztBQUVBLFVBQU1DLFlBQVlGLEtBQUtHLFlBQUwsRUFBbEI7QUFBQSxVQUNNQyx3QkFBd0JGLFVBQVVHLGNBQVYsRUFEOUI7QUFBQSxVQUVNQywyQkFBMkIsQ0FBQ0YscUJBRmxDOztBQUlBLFVBQUlFLHdCQUFKLEVBQThCO0FBQzVCLGdCQUFNQyxrQkFBa0JMLFNBQXhCO0FBQUEsZ0JBQW9DO0FBQzlCTSxrQ0FBc0JELGdCQUFnQkUsT0FBaEIsRUFENUI7QUFBQSxnQkFFTUMsc0NBQXVDRix3QkFBd0JWLGdCQUZyRTtBQUFBLGdCQUdNYSw4QkFBOEJELG1DQUhwQyxDQUQ0QixDQUk4Qzs7QUFFMUVULG9DQUF3QlUsMkJBQXhCLENBTjRCLENBTTBCO0FBQ3ZEOztBQUVELGFBQU9WLHFCQUFQO0FBQ0Q7O0FBRURXLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmQ7QUFEZSxDQUFqQiIsImZpbGUiOiJkZWZpbml0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpO1xuXG5jb25zdCB7IHBhcnRzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnQgfSA9IHBhcnRzLFxuICAgICAgeyB0eXBlIH0gPSBSdWxlTmFtZVBhcnQsXG4gICAgICBydWxlTmFtZVBhcnRUeXBlID0gdHlwZTsgIC8vL1xuXG5mdW5jdGlvbiBpc0ZpcnN0UGFydFJ1bGVOYW1lUGFydChydWxlKSB7XG4gIGxldCBmaXJzdFBhcnRSdWxlTmFtZVBhcnQ7XG5cbiAgY29uc3QgZmlyc3RQYXJ0ID0gcnVsZS5nZXRGaXJzdFBhcnQoKSxcbiAgICAgICAgZmlyc3RQYXJ0VGVybWluYWxQYXJ0ID0gZmlyc3RQYXJ0LmlzVGVybWluYWxQYXJ0KCksXG4gICAgICAgIGZpcnN0UGFydE5vblRlcm1pbmFsUGFydCA9ICFmaXJzdFBhcnRUZXJtaW5hbFBhcnQ7XG5cbiAgaWYgKGZpcnN0UGFydE5vblRlcm1pbmFsUGFydCkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsUGFydCA9IGZpcnN0UGFydCwgIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsUGFydFR5cGUgPSBub25UZXJtaW5hbFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICAgIG5vblRlcm1pbmFsUGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKG5vblRlcm1pbmFsUGFydFR5cGUgPT09IHJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICAgIG5vblRlcm1pbmFsUGFydFJ1bGVOYW1lUGFydCA9IG5vblRlcm1pbmFsUGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlOyAgLy8vXG5cbiAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBub25UZXJtaW5hbFBhcnRSdWxlTmFtZVBhcnQ7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBmaXJzdFBhcnRSdWxlTmFtZVBhcnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0ZpcnN0UGFydFJ1bGVOYW1lUGFydFxufTtcbiJdfQ==