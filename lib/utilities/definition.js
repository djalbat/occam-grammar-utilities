"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _recursivePart = require("../utilities/recursivePart");
var first = _necessary.arrayUtilities.first, RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType, definitionComplex = !firstPartRuleNamePart;
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var lookAhead = false;
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///
    if (firstPartRuleNamePart) {
        var ruleNamePart = firstPart; ///
        lookAhead = ruleNamePart.isLookAhead();
    }
    return lookAhead;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        (0, _recursivePart).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _recursivePart).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFydFR5cGVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0XCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUsXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gIWZpcnN0UGFydFJ1bGVOYW1lUGFydDtcblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJSdWxlTmFtZVBhcnRUeXBlIiwicGFydFR5cGVzIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25VbmFyeSIsImZpcnN0UGFydCIsImZpcnN0UGFydFR5cGUiLCJnZXRUeXBlIiwiZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJkZWZpbml0aW9uQ29tcGxleCIsImxvb2tBaGVhZCIsInJ1bGVOYW1lUGFydCIsImlzTG9va0FoZWFkIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDOzs7RTtRQVVHQSxpQkFBaUIs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