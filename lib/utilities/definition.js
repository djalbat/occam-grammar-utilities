"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    isDefinitionEffectivelyUnary: function() {
        return isDefinitionEffectivelyUnary;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    isDefinitionDirectlyLeftRecursive: function() {
        return isDefinitionDirectlyLeftRecursive;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function isDefinitionEffectivelyUnary(definition, context) {
    var definitionEffectivelyUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionEffectivelyUnary = partUnary; ///
    } else {
        var partsTail = (0, _array.tail)(parts), ruleNames = [], partsTailEffectivelyOptional = (0, _parts.arePartsEffectivelyOptional)(partsTail, ruleNames, context);
        definitionEffectivelyUnary = partsTailEffectivelyOptional;
    }
    return definitionEffectivelyUnary;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.recursiveRuleNamesFromParts)(parts, recursiveRuleNames);
    return recursiveRuleNames;
}
function isDefinitionDirectlyLeftRecursive(definition, leftRecursiveRuleName) {
    var parts = definition.getParts(), partsDirectlyLeftRecursive = (0, _parts.arePartsDirectlyLeftRecursive)(parts, leftRecursiveRuleName), definitionDirectlyLeftRecursive = partsDirectlyLeftRecursive; ///
    return definitionDirectlyLeftRecursive;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.leftRecursiveRuleNamesFromParts)(parts, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdGFpbCwgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRVbmFyeSwgaXNQYXJ0Q29tcGxleCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgYXJlUGFydHNSZWN1cnNpdmUsXG4gICAgICAgICBhcmVQYXJ0c0xlZnRSZWN1cnNpdmUsXG4gICAgICAgICBhcmVQYXJ0c0VmZmVjdGl2ZWx5T3B0aW9uYWwsXG4gICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsXG4gICAgICAgICBhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSxcbiAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNSZWN1cnNpdmUgPSBhcmVQYXJ0c1JlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSBwYXJ0c1JlY3Vyc2l2ZTsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcGFydHNMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5KGRlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgbGV0IGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBwYXJ0VW5hcnkgPSBpc1BhcnRVbmFyeShwYXJ0KTtcblxuICAgIGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gcGFydFVuYXJ5OyAgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydHNUYWlsID0gdGFpbChwYXJ0cyksXG4gICAgICAgICAgcnVsZU5hbWVzID0gW10sXG4gICAgICAgICAgcGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCA9IGFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbChwYXJ0c1RhaWwsIHJ1bGVOYW1lcywgY29udGV4dCk7XG5cbiAgICBkZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSA9IHBhcnRzVGFpbEVmZmVjdGl2ZWx5T3B0aW9uYWw7XG4gIH1cblxuICByZXR1cm4gZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUocGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSksXG4gICAgICAgIGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmUgPSBwYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZTsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25SZWN1cnNpdmUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiaXNEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdCIsImZpcnN0UGFydENvbXBsZXgiLCJpc1BhcnRDb21wbGV4IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJwYXJ0c1JlY3Vyc2l2ZSIsImFyZVBhcnRzUmVjdXJzaXZlIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiY29udGV4dCIsImRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5IiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJwYXJ0IiwicGFydFVuYXJ5IiwiaXNQYXJ0VW5hcnkiLCJwYXJ0c1RhaWwiLCJ0YWlsIiwicnVsZU5hbWVzIiwicGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCIsImFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsInBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwiYXJlUGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVdnQkEsbUJBQW1CO2VBQW5CQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFRQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsNEJBQTRCO2VBQTVCQTs7SUF1QkFDLGdDQUFnQztlQUFoQ0E7O0lBUUFDLGlDQUFpQztlQUFqQ0E7O0lBUUFDLG9DQUFvQztlQUFwQ0E7OztxQkF6RVk7b0JBQ2U7cUJBTUs7QUFFekMsU0FBU04sb0JBQW9CTyxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQkMsWUFBWUMsSUFBQUEsWUFBSyxFQUFDSCxRQUNsQkksbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDSCxZQUNqQ0ksb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU2Isc0JBQXNCTSxVQUFVLEVBQUU7SUFDaEQsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQk0saUJBQWlCQyxJQUFBQSx3QkFBaUIsRUFBQ1IsUUFDbkNTLHNCQUFzQkYsZ0JBQWdCLEdBQUc7SUFFL0MsT0FBT0U7QUFDVDtBQUVPLFNBQVNmLDBCQUEwQkssVUFBVSxFQUFFO0lBQ3BELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JTLHFCQUFxQkMsSUFBQUEsNEJBQXFCLEVBQUNYLFFBQzNDWSwwQkFBMEJGLG9CQUFvQixHQUFHO0lBRXZELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTakIsNkJBQTZCSSxVQUFVLEVBQUVjLE9BQU8sRUFBRTtJQUNoRSxJQUFJQyw2QkFBNkIsS0FBSztJQUV0QyxJQUFNZCxRQUFRRCxXQUFXRSxRQUFRLElBQzNCYyxjQUFjZixNQUFNZ0IsTUFBTTtJQUVoQyxJQUFJRCxnQkFBZ0IsR0FBRztRQUNyQixJQUFNYixZQUFZQyxJQUFBQSxZQUFLLEVBQUNILFFBQ2xCaUIsT0FBT2YsV0FDUGdCLFlBQVlDLElBQUFBLGlCQUFXLEVBQUNGO1FBRTlCSCw2QkFBNkJJLFdBQVksR0FBRztJQUM5QyxPQUFPO1FBQ0wsSUFBTUUsWUFBWUMsSUFBQUEsV0FBSSxFQUFDckIsUUFDakJzQixZQUFZLEVBQUUsRUFDZEMsK0JBQStCQyxJQUFBQSxrQ0FBMkIsRUFBQ0osV0FBV0UsV0FBV1Q7UUFFdkZDLDZCQUE2QlM7SUFDL0IsQ0FBQztJQUVELE9BQU9UO0FBQ1Q7QUFFTyxTQUFTbEIsaUNBQWlDRyxVQUFVLEVBQTJCO1FBQXpCMEIscUJBQUFBLGlFQUFxQixFQUFFO0lBQ2xGLElBQU16QixRQUFRRCxXQUFXRSxRQUFRO0lBRWpDeUIsSUFBQUEsa0NBQTJCLEVBQUMxQixPQUFPeUI7SUFFbkMsT0FBT0E7QUFDVDtBQUVPLFNBQVM1QixrQ0FBa0NFLFVBQVUsRUFBRTRCLHFCQUFxQixFQUFFO0lBQ25GLElBQU0zQixRQUFRRCxXQUFXRSxRQUFRLElBQzNCMkIsNkJBQTZCQyxJQUFBQSxvQ0FBNkIsRUFBQzdCLE9BQU8yQix3QkFDbEVHLGtDQUFrQ0YsNEJBQTRCLEdBQUc7SUFFdkUsT0FBT0U7QUFDVDtBQUVPLFNBQVNoQyxxQ0FBcUNDLFVBQVUsRUFBK0I7UUFBN0JnQyx5QkFBQUEsaUVBQXlCLEVBQUU7SUFDMUYsSUFBTS9CLFFBQVFELFdBQVdFLFFBQVE7SUFFakMrQixJQUFBQSxzQ0FBK0IsRUFBQ2hDLE9BQU8rQjtJQUV2QyxPQUFPQTtBQUNUIn0=