"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionRecursive = isDefinitionRecursive;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.definitionPartsFromDefinition = definitionPartsFromDefinition;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _necessary = require("necessary");
var _parts = require("../utilities/parts");
var _part = require("../utilities/part");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part).isPartComplex(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition), recursiveRuleNamesLength = recursiveRuleNames.length, definitionRecursive = recursiveRuleNamesLength > 0;
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function definitionPartsFromDefinition(definition) {
    var definitionParts = definition.getParts();
    definitionParts = (0, _parts).cloneParts(definitionParts); //
    return definitionParts;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts).recursiveRuleNamesFromParts(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts).leftRecursiveRuleNamesFromParts(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGNsb25lUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5pbXBvcnQgeyBpc1BhcnRDb21wbGV4IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0XCI7XG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydENvbXBsZXggPSBpc1BhcnRDb21wbGV4KGZpcnN0UGFydCksXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gZmlyc3RQYXJ0Q29tcGxleDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25Db21wbGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uUmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IHJlY3Vyc2l2ZVJ1bGVOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSAocmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5pdGlvblBhcnRzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBsZXQgZGVmaW5pdGlvblBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIGRlZmluaXRpb25QYXJ0cyA9IGNsb25lUGFydHMoZGVmaW5pdGlvblBhcnRzKTsgIC8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25QYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uUGFydHNGcm9tRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25SZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvblBhcnRzIiwiY2xvbmVQYXJ0cyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVVHQSxtQkFBbUIsR0FBbkJBLG1CQUFtQjtRQVNuQkMscUJBQXFCLEdBQXJCQSxxQkFBcUI7UUFRckJDLHlCQUF5QixHQUF6QkEseUJBQXlCO1FBUXpCQyw2QkFBNkIsR0FBN0JBLDZCQUE2QjtRQVE3QkMsZ0NBQWdDLEdBQWhDQSxnQ0FBZ0M7UUFPaENDLG9DQUFvQyxHQUFwQ0Esb0NBQW9DO0FBaERyQixJQUFBLFVBQVcsV0FBWCxXQUFXLENBQUE7QUFFZixJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBQ2pCLElBQUEsS0FBbUIsV0FBbkIsbUJBQW1CLENBQUE7QUFHakQsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixBQUFDO0FBRTFCLFNBQVNOLG1CQUFtQixDQUFDUSxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3QkMsU0FBUyxHQUFHTCxLQUFLLENBQUNHLEtBQUssQ0FBQyxFQUN4QkcsZ0JBQWdCLEdBQUdDLENBQUFBLEdBQUFBLEtBQWEsQUFBVyxDQUFBLGNBQVgsQ0FBQ0YsU0FBUyxDQUFDLEVBQzNDRyxpQkFBaUIsR0FBR0YsZ0JBQWdCLEFBQUMsRUFBQyxHQUFHO0lBRS9DLE9BQU9FLGlCQUFpQixDQUFDO0NBQzFCO0FBRU0sU0FBU2IscUJBQXFCLENBQUNPLFVBQVUsRUFBRTtJQUNoRCxJQUFNTyxrQkFBa0IsR0FBR1gsZ0NBQWdDLENBQUNJLFVBQVUsQ0FBQyxFQUNqRVEsd0JBQXdCLEdBQUdELGtCQUFrQixDQUFDRSxNQUFNLEVBQ3BEQyxtQkFBbUIsR0FBSUYsd0JBQXdCLEdBQUcsQ0FBQyxBQUFDLEFBQUM7SUFFM0QsT0FBT0UsbUJBQW1CLENBQUM7Q0FDNUI7QUFFTSxTQUFTaEIseUJBQXlCLENBQUNNLFVBQVUsRUFBRTtJQUNwRCxJQUFNVyxzQkFBc0IsR0FBR2Qsb0NBQW9DLENBQUNHLFVBQVUsQ0FBQyxFQUN6RVksNEJBQTRCLEdBQUdELHNCQUFzQixDQUFDRixNQUFNLEVBQzVESSx1QkFBdUIsR0FBSUQsNEJBQTRCLEdBQUcsQ0FBQyxBQUFDLEFBQUM7SUFFbkUsT0FBT0MsdUJBQXVCLENBQUM7Q0FDaEM7QUFFTSxTQUFTbEIsNkJBQTZCLENBQUNLLFVBQVUsRUFBRTtJQUN4RCxJQUFJYyxlQUFlLEdBQUdkLFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEFBQUM7SUFFNUNZLGVBQWUsR0FBR0MsQ0FBQUEsR0FBQUEsTUFBVSxBQUFpQixDQUFBLFdBQWpCLENBQUNELGVBQWUsQ0FBQyxDQUFDLENBQUUsRUFBRTtJQUVsRCxPQUFPQSxlQUFlLENBQUM7Q0FDeEI7QUFFTSxTQUFTbEIsZ0NBQWdDLENBQUNJLFVBQVUsRUFBRTtJQUMzRCxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCSyxrQkFBa0IsR0FBR1MsQ0FBQUEsR0FBQUEsTUFBMkIsQUFBTyxDQUFBLDRCQUFQLENBQUNmLEtBQUssQ0FBQyxBQUFDO0lBRTlELE9BQU9NLGtCQUFrQixDQUFDO0NBQzNCO0FBRU0sU0FBU1Ysb0NBQW9DLENBQUNHLFVBQVUsRUFBRTtJQUMvRCxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCUyxzQkFBc0IsR0FBR00sQ0FBQUEsR0FBQUEsTUFBK0IsQUFBTyxDQUFBLGdDQUFQLENBQUNoQixLQUFLLENBQUMsQUFBQztJQUV0RSxPQUFPVSxzQkFBc0IsQ0FBQztDQUMvQiJ9