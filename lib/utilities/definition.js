'use strict';

var arrayUtilities = require('../utilities/array'),
    recursivePartUtilities = require('../utilities/recursivePart');

var first = arrayUtilities.first,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNameFromPart = recursivePartUtilities.leftRecursiveRuleNameFromPart;


function isDefinitionRecursive(definition) {
  var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      definitionRecursive = recursiveRuleNamesLength > 0;

  return definitionRecursive;
}

function isDefinitionLeftRecursive(definition) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromDefinition(definition),
      definitionLeftRecursive = leftRecursiveRuleName !== null;

  return definitionLeftRecursive;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNameFromDefinition(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart,
      ///
  leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

  return leftRecursiveRuleName;
}

module.exports = {
  isDefinitionRecursive: isDefinitionRecursive,
  isDefinitionLeftRecursive: isDefinitionLeftRecursive,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJyZWN1cnNpdmVQYXJ0VXRpbGl0aWVzIiwiZmlyc3QiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiZGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicGFydHMiLCJnZXRQYXJ0cyIsImZvckVhY2giLCJwYXJ0IiwiZmlyc3RQYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXZCO0FBQUEsSUFDTUMseUJBQXlCRCxRQUFRLDRCQUFSLENBRC9COztBQUdNLElBQUVFLEtBQUYsR0FBWUgsY0FBWixDQUFFRyxLQUFGO0FBQUEsSUFDRUMsMEJBREYsR0FDZ0VGLHNCQURoRSxDQUNFRSwwQkFERjtBQUFBLElBQzhCQyw2QkFEOUIsR0FDZ0VILHNCQURoRSxDQUM4QkcsNkJBRDlCOzs7QUFHTixTQUFTQyxxQkFBVCxDQUErQkMsVUFBL0IsRUFBMkM7QUFDekMsTUFBTUMscUJBQXFCQyxpQ0FBaUNGLFVBQWpDLENBQTNCO0FBQUEsTUFDTUcsMkJBQTJCRixtQkFBbUJHLE1BRHBEO0FBQUEsTUFFTUMsc0JBQXVCRiwyQkFBMkIsQ0FGeEQ7O0FBSUEsU0FBT0UsbUJBQVA7QUFDRDs7QUFFRCxTQUFTQyx5QkFBVCxDQUFtQ04sVUFBbkMsRUFBK0M7QUFDN0MsTUFBTU8sd0JBQXdCQyxvQ0FBb0NSLFVBQXBDLENBQTlCO0FBQUEsTUFDTVMsMEJBQTJCRiwwQkFBMEIsSUFEM0Q7O0FBR0EsU0FBT0UsdUJBQVA7QUFDRDs7QUFFRCxTQUFTUCxnQ0FBVCxDQUEwQ0YsVUFBMUMsRUFBK0U7QUFBQSxNQUF6QkMsa0JBQXlCLHVFQUFKLEVBQUk7O0FBQzdFLE1BQU1TLFFBQVFWLFdBQVdXLFFBQVgsRUFBZDs7QUFFQUQsUUFBTUUsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBVTtBQUN0QmhCLCtCQUEyQmdCLElBQTNCLEVBQWlDWixrQkFBakM7QUFDRCxHQUZEOztBQUlBLFNBQU9BLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU08sbUNBQVQsQ0FBNkNSLFVBQTdDLEVBQXlEO0FBQ3ZELE1BQU1VLFFBQVFWLFdBQVdXLFFBQVgsRUFBZDtBQUFBLE1BQ01HLFlBQVlsQixNQUFNYyxLQUFOLENBRGxCO0FBQUEsTUFFTUcsT0FBT0MsU0FGYjtBQUFBLE1BRXdCO0FBQ2xCUCwwQkFBd0JULDhCQUE4QmUsSUFBOUIsQ0FIOUI7O0FBS0EsU0FBT04scUJBQVA7QUFDRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmakIsOENBRGU7QUFFZk8sc0RBRmU7QUFHZkosb0VBSGU7QUFJZk07QUFKZSxDQUFqQiIsImZpbGUiOiJkZWZpbml0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgcmVjdXJzaXZlUGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0Jyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQgfSA9IHJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSByZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uUmVjdXJzaXZlID0gKHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBkZWZpbml0aW9uUmVjdXJzaXZlXG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lICE9PSBudWxsKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24sIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCByZWN1cnNpdmVSdWxlTmFtZXMpO1xuICB9KTtcblxuICByZXR1cm4gcmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5mdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQsIC8vL1xuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUGFydChwYXJ0KTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWZpbml0aW9uUmVjdXJzaXZlLFxuICBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlLFxuICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbixcbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbURlZmluaXRpb25cbn07XG4iXX0=