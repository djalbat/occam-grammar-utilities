"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cloneDefinition: function() {
        return cloneDefinition;
    },
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    isDefinitionEffectivelyUnary: function() {
        return isDefinitionEffectivelyUnary;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    isDefinitionDirectlyLeftRecursive: function() {
        return isDefinitionDirectlyLeftRecursive;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _occamParsers = require("occam-parsers");
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function cloneDefinition(definition) {
    var parts = definitinon.getParts();
    parts = cloenParts(parts); ///
    definition = new _occamParsers.Definition(parts);
    return definition;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function isDefinitionEffectivelyUnary(definition, context) {
    var definitionEffectivelyUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionEffectivelyUnary = partUnary; ///
    } else {
        var partsTail = (0, _array.tail)(parts), ruleNames = [], partsTailEffectivelyOptional = (0, _parts.arePartsEffectivelyOptional)(partsTail, ruleNames, context);
        definitionEffectivelyUnary = partsTailEffectivelyOptional;
    }
    return definitionEffectivelyUnary;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function isDefinitionDirectlyLeftRecursive(definition, ruleName) {
    var parts = definition.getParts(), partsDirectlyLeftRecursive = (0, _parts.arePartsDirectlyLeftRecursive)(parts, ruleName), definitionDirectlyLeftRecursive = partsDirectlyLeftRecursive; ///
    return definitionDirectlyLeftRecursive;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRGVmaW5pdGlvbiB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5cbmltcG9ydCB7IHRhaWwsIGZpcnN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgaXNQYXJ0VW5hcnksIGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IGFyZVBhcnRzUmVjdXJzaXZlLFxuICAgICAgICAgYXJlUGFydHNMZWZ0UmVjdXJzaXZlLFxuICAgICAgICAgYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsLFxuICAgICAgICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzLFxuICAgICAgICAgYXJlUGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUsXG4gICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVEZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgbGV0IHBhcnRzID0gZGVmaW5pdGlub24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cyA9IGNsb2VuUGFydHMocGFydHMpOyAgLy8vXG5cbiAgZGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKHBhcnRzKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkoZGVmaW5pdGlvbiwgY29udGV4dCkge1xuICBsZXQgZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkgPSBmYWxzZTtcblxuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKHBhcnRzTGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICAgIHBhcnQgPSBmaXJzdFBhcnQsIC8vL1xuICAgICAgICAgIHBhcnRVbmFyeSA9IGlzUGFydFVuYXJ5KHBhcnQpO1xuXG4gICAgZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkgPSBwYXJ0VW5hcnk7ICAvLy9cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXJ0c1RhaWwgPSB0YWlsKHBhcnRzKSxcbiAgICAgICAgICBydWxlTmFtZXMgPSBbXSxcbiAgICAgICAgICBwYXJ0c1RhaWxFZmZlY3RpdmVseU9wdGlvbmFsID0gYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsKHBhcnRzVGFpbCwgcnVsZU5hbWVzLCBjb250ZXh0KTtcblxuICAgIGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gcGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbDtcbiAgfVxuXG4gIHJldHVybiBkZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBydWxlTmFtZSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmUgPSBhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZShwYXJ0cywgcnVsZU5hbWUpLFxuICAgICAgICBkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlID0gcGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJjbG9uZURlZmluaXRpb24iLCJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb24iLCJwYXJ0cyIsImRlZmluaXRpbm9uIiwiZ2V0UGFydHMiLCJjbG9lblBhcnRzIiwiRGVmaW5pdGlvbiIsImZpcnN0UGFydCIsImZpcnN0IiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsInBhcnRzUmVjdXJzaXZlIiwiYXJlUGFydHNSZWN1cnNpdmUiLCJkZWZpbml0aW9uUmVjdXJzaXZlIiwicGFydHNMZWZ0UmVjdXJzaXZlIiwiYXJlUGFydHNMZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJjb250ZXh0IiwiZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsInBhcnQiLCJwYXJ0VW5hcnkiLCJpc1BhcnRVbmFyeSIsInBhcnRzVGFpbCIsInRhaWwiLCJydWxlTmFtZXMiLCJwYXJ0c1RhaWxFZmZlY3RpdmVseU9wdGlvbmFsIiwiYXJlUGFydHNFZmZlY3RpdmVseU9wdGlvbmFsIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwicnVsZU5hbWUiLCJwYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFhZ0JBLGVBQWU7ZUFBZkE7O0lBVUFDLG1CQUFtQjtlQUFuQkE7O0lBU0FDLHFCQUFxQjtlQUFyQkE7O0lBUUFDLHlCQUF5QjtlQUF6QkE7O0lBUUFDLDRCQUE0QjtlQUE1QkE7O0lBdUJBQyxnQ0FBZ0M7ZUFBaENBOztJQU9BQyxpQ0FBaUM7ZUFBakNBOztJQVFBQyxvQ0FBb0M7ZUFBcENBOzs7NEJBcEZXO3FCQUVDO29CQUNlO3FCQU1LO0FBRXpDLFNBQVNQLGdCQUFnQlEsVUFBVSxFQUFFO0lBQzFDLElBQUlDLFFBQVFDLFlBQVlDLFFBQVE7SUFFaENGLFFBQVFHLFdBQVdILFFBQVMsR0FBRztJQUUvQkQsYUFBYSxJQUFJSyx3QkFBVSxDQUFDSjtJQUU1QixPQUFPRDtBQUNUO0FBRU8sU0FBU1Asb0JBQW9CTyxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsUUFBUUQsV0FBV0csUUFBUSxJQUMzQkcsWUFBWUMsSUFBQUEsWUFBSyxFQUFDTixRQUNsQk8sbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDSCxZQUNqQ0ksb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU2hCLHNCQUFzQk0sVUFBVSxFQUFFO0lBQ2hELElBQU1DLFFBQVFELFdBQVdHLFFBQVEsSUFDM0JRLGlCQUFpQkMsSUFBQUEsd0JBQWlCLEVBQUNYLFFBQ25DWSxzQkFBc0JGLGdCQUFnQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTbEIsMEJBQTBCSyxVQUFVLEVBQUU7SUFDcEQsSUFBTUMsUUFBUUQsV0FBV0csUUFBUSxJQUMzQlcscUJBQXFCQyxJQUFBQSw0QkFBcUIsRUFBQ2QsUUFDM0NlLDBCQUEwQkYsb0JBQW9CLEdBQUc7SUFFdkQsT0FBT0U7QUFDVDtBQUVPLFNBQVNwQiw2QkFBNkJJLFVBQVUsRUFBRWlCLE9BQU8sRUFBRTtJQUNoRSxJQUFJQyw2QkFBNkIsS0FBSztJQUV0QyxJQUFNakIsUUFBUUQsV0FBV0csUUFBUSxJQUMzQmdCLGNBQWNsQixNQUFNbUIsTUFBTTtJQUVoQyxJQUFJRCxnQkFBZ0IsR0FBRztRQUNyQixJQUFNYixZQUFZQyxJQUFBQSxZQUFLLEVBQUNOLFFBQ2xCb0IsT0FBT2YsV0FDUGdCLFlBQVlDLElBQUFBLGlCQUFXLEVBQUNGO1FBRTlCSCw2QkFBNkJJLFdBQVksR0FBRztJQUM5QyxPQUFPO1FBQ0wsSUFBTUUsWUFBWUMsSUFBQUEsV0FBSSxFQUFDeEIsUUFDakJ5QixZQUFZLEVBQUUsRUFDZEMsK0JBQStCQyxJQUFBQSxrQ0FBMkIsRUFBQ0osV0FBV0UsV0FBV1Q7UUFFdkZDLDZCQUE2QlM7SUFDL0IsQ0FBQztJQUVELE9BQU9UO0FBQ1Q7QUFFTyxTQUFTckIsaUNBQWlDRyxVQUFVLEVBQUU7SUFDM0QsSUFBTUMsUUFBUUQsV0FBV0csUUFBUSxJQUMzQjBCLHFCQUFxQkMsSUFBQUEsa0NBQTJCLEVBQUM3QjtJQUV2RCxPQUFPNEI7QUFDVDtBQUVPLFNBQVMvQixrQ0FBa0NFLFVBQVUsRUFBRStCLFFBQVEsRUFBRTtJQUN0RSxJQUFNOUIsUUFBUUQsV0FBV0csUUFBUSxJQUMzQjZCLDZCQUE2QkMsSUFBQUEsb0NBQTZCLEVBQUNoQyxPQUFPOEIsV0FDbEVHLGtDQUFrQ0YsNEJBQTRCLEdBQUc7SUFFdkUsT0FBT0U7QUFDVDtBQUVPLFNBQVNuQyxxQ0FBcUNDLFVBQVUsRUFBRTtJQUMvRCxJQUFNQyxRQUFRRCxXQUFXRyxRQUFRLElBQzNCZ0MseUJBQXlCQyxJQUFBQSxzQ0FBK0IsRUFBQ25DO0lBRS9ELE9BQU9rQztBQUNUIn0=