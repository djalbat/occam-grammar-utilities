'use strict';

var parsers = require('occam-parsers'),
    necessary = require('necessary');

var recursivePartUtilities = require('../utilities/recursivePart');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNamesFromPart = recursivePartUtilities.leftRecursiveRuleNamesFromPart;

function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;
  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;
  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();
  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });
  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
  return leftRecursiveRuleNames;
}

module.exports = {
  isDefinitionUnary: isDefinitionUnary,
  isDefinitionComplex: isDefinitionComplex,
  isDefinitionLookAhead: isDefinitionLookAhead,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNamesFromDefinition: leftRecursiveRuleNamesFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmluaXRpb24uanMiXSwibmFtZXMiOlsicGFyc2VycyIsInJlcXVpcmUiLCJuZWNlc3NhcnkiLCJyZWN1cnNpdmVQYXJ0VXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsInBhcnRUeXBlcyIsIlJ1bGVOYW1lUGFydFR5cGUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImlzRGVmaW5pdGlvblVuYXJ5IiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRUeXBlIiwiZ2V0VHlwZSIsImZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlIiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJsb29rQWhlYWQiLCJydWxlTmFtZVBhcnQiLCJpc0xvb2tBaGVhZCIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUF2QjtBQUFBLElBQ01DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FEekI7O0FBR0EsSUFBTUUsc0JBQXNCLEdBQUdGLE9BQU8sQ0FBQyw0QkFBRCxDQUF0Qzs7QUFFTSxJQUFFRyxjQUFGLEdBQXFCRixTQUFyQixDQUFFRSxjQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZRCxjQURaLENBQ0VD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ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKSxcbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCByZWN1cnNpdmVQYXJ0VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3JlY3Vyc2l2ZVBhcnQnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHBhcnRUeXBlcyB9ID0gcGFyc2VycyxcbiAgICAgIHsgUnVsZU5hbWVQYXJ0VHlwZSB9ID0gcGFydFR5cGVzLFxuICAgICAgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gPSByZWN1cnNpdmVQYXJ0VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSAhZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0O1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZnVuY3Rpb24gaXNEZWZpbml0aW9uTG9va0FoZWFkKGRlZmluaXRpb24pIHtcbiAgbGV0IGxvb2tBaGVhZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICBpZiAoZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0KSB7XG4gICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgIGxvb2tBaGVhZCA9IHJ1bGVOYW1lUGFydC5pc0xvb2tBaGVhZCgpO1xuICB9XG5cbiAgcmV0dXJuIGxvb2tBaGVhZDtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWZpbml0aW9uVW5hcnksXG4gIGlzRGVmaW5pdGlvbkNvbXBsZXgsXG4gIGlzRGVmaW5pdGlvbkxvb2tBaGVhZCxcbiAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24sXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvblxufTtcbiJdfQ==