"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    isDefinitionEffectivelyUnary: function() {
        return isDefinitionEffectivelyUnary;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    isDefinitionDirectlyLeftRecursive: function() {
        return isDefinitionDirectlyLeftRecursive;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function isDefinitionEffectivelyUnary(definition, context) {
    var definitionEffectivelyUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionEffectivelyUnary = partUnary; ///
    } else {
        var partsTail = (0, _array.tail)(parts), ruleNames = [], partsTailEffectivelyOptional = (0, _parts.arePartsEffectivelyOptional)(partsTail, ruleNames, context);
        definitionEffectivelyUnary = partsTailEffectivelyOptional;
    }
    return definitionEffectivelyUnary;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function isDefinitionDirectlyLeftRecursive(definition, leftRecursiveRuleName) {
    var parts = definition.getParts(), partsDirectlyLeftRecursive = (0, _parts.arePartsDirectlyLeftRecursive)(parts, leftRecursiveRuleName), definitionDirectlyLeftRecursive = partsDirectlyLeftRecursive; ///
    return definitionDirectlyLeftRecursive;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdGFpbCwgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRVbmFyeSwgaXNQYXJ0Q29tcGxleCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgYXJlUGFydHNSZWN1cnNpdmUsXG4gICAgICAgICBhcmVQYXJ0c0xlZnRSZWN1cnNpdmUsXG4gICAgICAgICBhcmVQYXJ0c0VmZmVjdGl2ZWx5T3B0aW9uYWwsXG4gICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsXG4gICAgICAgICBhcmVQYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSxcbiAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNSZWN1cnNpdmUgPSBhcmVQYXJ0c1JlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSBwYXJ0c1JlY3Vyc2l2ZTsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcGFydHNMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5KGRlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgbGV0IGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBwYXJ0VW5hcnkgPSBpc1BhcnRVbmFyeShwYXJ0KTtcblxuICAgIGRlZmluaXRpb25FZmZlY3RpdmVseVVuYXJ5ID0gcGFydFVuYXJ5OyAgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydHNUYWlsID0gdGFpbChwYXJ0cyksXG4gICAgICAgICAgcnVsZU5hbWVzID0gW10sXG4gICAgICAgICAgcGFydHNUYWlsRWZmZWN0aXZlbHlPcHRpb25hbCA9IGFyZVBhcnRzRWZmZWN0aXZlbHlPcHRpb25hbChwYXJ0c1RhaWwsIHJ1bGVOYW1lcywgY29udGV4dCk7XG5cbiAgICBkZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSA9IHBhcnRzVGFpbEVmZmVjdGl2ZWx5T3B0aW9uYWw7XG4gIH1cblxuICByZXR1cm4gZGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlKHBhcnRzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpLFxuICAgICAgICBkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlID0gcGFydHNEaXJlY3RseUxlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzKHBhcnRzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkVmZmVjdGl2ZWx5VW5hcnkiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImlzRGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwiZmlyc3RQYXJ0IiwiZmlyc3QiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicGFydHNSZWN1cnNpdmUiLCJhcmVQYXJ0c1JlY3Vyc2l2ZSIsImRlZmluaXRpb25SZWN1cnNpdmUiLCJwYXJ0c0xlZnRSZWN1cnNpdmUiLCJhcmVQYXJ0c0xlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsImNvbnRleHQiLCJkZWZpbml0aW9uRWZmZWN0aXZlbHlVbmFyeSIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwicGFydCIsInBhcnRVbmFyeSIsImlzUGFydFVuYXJ5IiwicGFydHNUYWlsIiwidGFpbCIsInJ1bGVOYW1lcyIsInBhcnRzVGFpbEVmZmVjdGl2ZWx5T3B0aW9uYWwiLCJhcmVQYXJ0c0VmZmVjdGl2ZWx5T3B0aW9uYWwiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJwYXJ0c0RpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzRGlyZWN0bHlMZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvbkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFXZ0JBLG1CQUFtQjtlQUFuQkE7O0lBU0FDLHFCQUFxQjtlQUFyQkE7O0lBUUFDLHlCQUF5QjtlQUF6QkE7O0lBUUFDLDRCQUE0QjtlQUE1QkE7O0lBdUJBQyxnQ0FBZ0M7ZUFBaENBOztJQU9BQyxpQ0FBaUM7ZUFBakNBOztJQVFBQyxvQ0FBb0M7ZUFBcENBOzs7cUJBeEVZO29CQUNlO3FCQU1LO0FBRXpDLFNBQVNOLG9CQUFvQk8sVUFBVSxFQUFFO0lBQzlDLElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JDLFlBQVlDLElBQUFBLFlBQUssRUFBQ0gsUUFDbEJJLG1CQUFtQkMsSUFBQUEsbUJBQWEsRUFBQ0gsWUFDakNJLG9CQUFvQkYsa0JBQWtCLEdBQUc7SUFFL0MsT0FBT0U7QUFDVDtBQUVPLFNBQVNiLHNCQUFzQk0sVUFBVSxFQUFFO0lBQ2hELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JNLGlCQUFpQkMsSUFBQUEsd0JBQWlCLEVBQUNSLFFBQ25DUyxzQkFBc0JGLGdCQUFnQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZiwwQkFBMEJLLFVBQVUsRUFBRTtJQUNwRCxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCUyxxQkFBcUJDLElBQUFBLDRCQUFxQixFQUFDWCxRQUMzQ1ksMEJBQTBCRixvQkFBb0IsR0FBRztJQUV2RCxPQUFPRTtBQUNUO0FBRU8sU0FBU2pCLDZCQUE2QkksVUFBVSxFQUFFYyxPQUFPLEVBQUU7SUFDaEUsSUFBSUMsNkJBQTZCLEtBQUs7SUFFdEMsSUFBTWQsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQmMsY0FBY2YsTUFBTWdCLE1BQU07SUFFaEMsSUFBSUQsZ0JBQWdCLEdBQUc7UUFDckIsSUFBTWIsWUFBWUMsSUFBQUEsWUFBSyxFQUFDSCxRQUNsQmlCLE9BQU9mLFdBQ1BnQixZQUFZQyxJQUFBQSxpQkFBVyxFQUFDRjtRQUU5QkgsNkJBQTZCSSxXQUFZLEdBQUc7SUFDOUMsT0FBTztRQUNMLElBQU1FLFlBQVlDLElBQUFBLFdBQUksRUFBQ3JCLFFBQ2pCc0IsWUFBWSxFQUFFLEVBQ2RDLCtCQUErQkMsSUFBQUEsa0NBQTJCLEVBQUNKLFdBQVdFLFdBQVdUO1FBRXZGQyw2QkFBNkJTO0lBQy9CLENBQUM7SUFFRCxPQUFPVDtBQUNUO0FBRU8sU0FBU2xCLGlDQUFpQ0csVUFBVSxFQUFFO0lBQzNELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0J3QixxQkFBcUJDLElBQUFBLGtDQUEyQixFQUFDMUI7SUFFdkQsT0FBT3lCO0FBQ1Q7QUFFTyxTQUFTNUIsa0NBQWtDRSxVQUFVLEVBQUU0QixxQkFBcUIsRUFBRTtJQUNuRixJQUFNM0IsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQjJCLDZCQUE2QkMsSUFBQUEsb0NBQTZCLEVBQUM3QixPQUFPMkIsd0JBQ2xFRyxrQ0FBa0NGLDRCQUE0QixHQUFHO0lBRXZFLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTaEMscUNBQXFDQyxVQUFVLEVBQUU7SUFDL0QsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQjhCLHlCQUF5QkMsSUFBQUEsc0NBQStCLEVBQUNoQztJQUUvRCxPQUFPK0I7QUFDVCJ9