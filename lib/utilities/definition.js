"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionUnary: function() {
        return isDefinitionUnary;
    },
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionUnary(definition) {
    var definitionUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = first(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionUnary = partUnary; ///
    }
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydFVuYXJ5LCBpc1BhcnRDb21wbGV4IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0XCI7XG5pbXBvcnQgeyBhcmVQYXJ0c1JlY3Vyc2l2ZSwgYXJlUGFydHNMZWZ0UmVjdXJzaXZlLCByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRzXCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uVW5hcnkoZGVmaW5pdGlvbikge1xuICBsZXQgZGVmaW5pdGlvblVuYXJ5ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBwYXJ0VW5hcnkgPSBpc1BhcnRVbmFyeShwYXJ0KTtcblxuICAgIGRlZmluaXRpb25VbmFyeSA9IHBhcnRVbmFyeTsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIGRlZmluaXRpb25VbmFyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImRlZmluaXRpb24iLCJkZWZpbml0aW9uVW5hcnkiLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdFBhcnQiLCJwYXJ0IiwicGFydFVuYXJ5IiwiaXNQYXJ0VW5hcnkiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicGFydHNSZWN1cnNpdmUiLCJhcmVQYXJ0c1JlY3Vyc2l2ZSIsImRlZmluaXRpb25SZWN1cnNpdmUiLCJwYXJ0c0xlZnRSZWN1cnNpdmUiLCJhcmVQYXJ0c0xlZnRSZWN1cnNpdmUiLCJkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBU0dBLGlCQUFpQjtlQUFqQkEsaUJBQWlCOztJQWlCakJDLG1CQUFtQjtlQUFuQkEsbUJBQW1COztJQVNuQkMscUJBQXFCO2VBQXJC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