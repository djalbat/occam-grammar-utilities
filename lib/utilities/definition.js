'use strict';

var arrayUtilities = require('../utilities/array'),
    recursivePartUtilities = require('../utilities/recursivePart');

var first = arrayUtilities.first,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNamesFromPart = recursivePartUtilities.leftRecursiveRuleNamesFromPart;


function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNameFromDefinition(definition) {
  var leftRecursiveRuleName = null;

  var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition),
      leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length;

  if (leftRecursiveRuleNamesLength > 0) {
    var firstLeftRecursiveRuleName = first(leftRecursiveRuleNames);

    leftRecursiveRuleName = firstLeftRecursiveRuleName; ///
  }

  return leftRecursiveRuleName;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);

  return leftRecursiveRuleNames;
}

module.exports = {
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJyZWN1cnNpdmVQYXJ0VXRpbGl0aWVzIiwiZmlyc3QiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInBhcnRzIiwiZ2V0UGFydHMiLCJmb3JFYWNoIiwicGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImZpcnN0UGFydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxvQkFBUixDQUF2QjtBQUFBLElBQ01DLHlCQUF5QkQsUUFBUSw0QkFBUixDQUQvQjs7QUFHTSxJQUFFRSxLQUFGLEdBQVlILGNBQVosQ0FBRUcsS0FBRjtBQUFBLElBQ0VDLDBCQURGLEdBQ2lFRixzQkFEakUsQ0FDRUUsMEJBREY7QUFBQSxJQUM4QkMsOEJBRDlCLEdBQ2lFSCxzQkFEakUsQ0FDOEJHLDhCQUQ5Qjs7O0FBR04sU0FBU0MsZ0NBQVQsQ0FBMENDLFVBQTFDLEVBQXNEO0FBQ3BELE1BQU1DLHFCQUFxQixFQUEzQjtBQUFBLE1BQ01DLFFBQVFGLFdBQVdHLFFBQVgsRUFEZDs7QUFHQUQsUUFBTUUsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBVTtBQUN0QlIsK0JBQTJCUSxJQUEzQixFQUFpQ0osa0JBQWpDO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxrQkFBUDtBQUNEOztBQUVELFNBQVNLLG1DQUFULENBQTZDTixVQUE3QyxFQUF5RDtBQUN2RCxNQUFJTyx3QkFBd0IsSUFBNUI7O0FBRUEsTUFBTUMseUJBQXlCQyxxQ0FBcUNULFVBQXJDLENBQS9CO0FBQUEsTUFDTVUsK0JBQStCRix1QkFBdUJHLE1BRDVEOztBQUdBLE1BQUlELCtCQUErQixDQUFuQyxFQUFzQztBQUNwQyxRQUFNRSw2QkFBNkJoQixNQUFNWSxzQkFBTixDQUFuQzs7QUFFQUQsNEJBQXdCSywwQkFBeEIsQ0FIb0MsQ0FHZ0I7QUFDckQ7O0FBRUQsU0FBT0wscUJBQVA7QUFDRDs7QUFFRCxTQUFTRSxvQ0FBVCxDQUE4Q1QsVUFBOUMsRUFBMEQ7QUFDeEQsTUFBTVEseUJBQXlCLEVBQS9CO0FBQUEsTUFDTU4sUUFBUUYsV0FBV0csUUFBWCxFQURkO0FBQUEsTUFFTVUsWUFBWWpCLE1BQU1NLEtBQU4sQ0FGbEI7QUFBQSxNQUdNRyxPQUFPUSxTQUhiLENBRHdELENBSWhDOztBQUV4QmYsaUNBQStCTyxJQUEvQixFQUFxQ0csc0JBQXJDOztBQUVBLFNBQU9BLHNCQUFQO0FBQ0Q7O0FBRURNLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhCLG9FQURlO0FBRWZPO0FBRmUsQ0FBakIiLCJmaWxlIjoiZGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcmVjdXJzaXZlUGFydCcpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9ID0gcmVjdXJzaXZlUGFydFV0aWxpdGllcztcblxuZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgbGV0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IG51bGw7XG5cbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoO1xuXG4gIGlmIChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGZpcnN0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gZmlyc3QobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZTsgLy8vXG4gIH1cblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lO1xufVxuXG5mdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uLFxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvblxufTtcbiJdfQ==