"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _recursivePart = require("../utilities/recursivePart");
var first = _necessary.arrayUtilities.first, RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType, definitionComplex = !firstPartRuleNamePart;
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var lookAhead = false;
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///
    if (firstPartRuleNamePart) {
        var ruleNamePart = firstPart; ///
        lookAhead = ruleNamePart.isLookAhead();
    }
    return lookAhead;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        return (0, _recursivePart).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _recursivePart).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFydFR5cGVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0XCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUsXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gIWZpcnN0UGFydFJ1bGVOYW1lUGFydDtcblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcykpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiUnVsZU5hbWVQYXJ0VHlwZSIsInBhcnRUeXBlcyIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRUeXBlIiwiZ2V0VHlwZSIsImZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlIiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJsb29rQWhlYWQiLCJydWxlTmFtZVBhcnQiLCJpc0xvb2tBaGVhZCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJmb3JFYWNoIiwicGFydCIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFVR0EsaUJBQWlCLEdBQWpCQSxpQkFBaUI7UUFRakJDLG1CQUFtQixHQUFuQkEsbUJBQW1CO1FBV25CQyxxQkFBcUIsR0FBckJBLHFCQUFxQjtRQWtCckJDLHlCQUF5QixHQUF6QkEseUJBQXlCO1FBUXpCQyxnQ0FBZ0MsR0FBaENBLGdDQUFnQztRQVNoQ0Msb0NBQW9DLEdBQXBDQSxvQ0FBb0M7QUE5RDFCLElBQUEsYUFBZSxXQUFmLGVBQWUsQ0FBQTtBQUNWLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUVpQyxJQUFBLGNBQTRCLFdBQTVCLDRCQUE0QixDQUFBO0FBRXZHLElBQU0sQUFBRUMsS0FBSyxHQUFLQyxVQUFjLGVBQUEsQ0FBeEJELEtBQUssQUFBbUIsRUFDMUIsQUFBRUUsZ0JBQWdCLEdBQUtDLGFBQVMsVUFBQSxDQUE5QkQsZ0JBQWdCLEFBQWMsQUFBQztBQUVoQyxTQUFTUixpQkFBaUIsQ0FBQ1UsVUFBVSxFQUFFO0lBQzVDLElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JDLFdBQVcsR0FBR0YsS0FBSyxDQUFDRyxNQUFNLEVBQzFCQyxlQUFlLEdBQUlGLFdBQVcsS0FBSyxD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