'use strict';

var partUtilities = require('../utilities/part'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    findRuleByName = ruleUtilities.findRuleByName,
    isPartLeftRecursive = partUtilities.isPartLeftRecursive,
    leftRecursiveRuleNameFromPart = partUtilities.leftRecursiveRuleNameFromPart;


function ruleFromDefinition(definition, rules) {
      var rule = null;

      var parts = definition.getParts(),
          firstPart = first(parts),
          firstPartRuleName = ruleNameFromPart(firstPart);

      if (firstPartRuleName !== null) {
            var name = firstPartRuleName;

            rule = findRuleByName(name, rules);
      }

      return rule;
}

function isDefinitionLeftRecursive(definition) {
      var parts = definition.getParts(),
          firstPart = first(parts),
          firstPartLeftRecursive = isPartLeftRecursive(firstPart),
          definitionLeftRecursive = firstPartLeftRecursive; ///

      return definitionLeftRecursive;
}

function leftRecursiveRuleNameFromDefinition(definition) {
      var parts = definition.getParts(),
          firstPart = first(parts),
          part = firstPart,
          ///
      leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

      return leftRecursiveRuleName;
}

module.exports = {
      ruleFromDefinition: ruleFromDefinition,
      isDefinitionLeftRecursive: isDefinitionLeftRecursive,
      leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJ0VXRpbGl0aWVzIiwicmVxdWlyZSIsInJ1bGVVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0IiwiZmluZFJ1bGVCeU5hbWUiLCJpc1BhcnRMZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQiLCJydWxlRnJvbURlZmluaXRpb24iLCJkZWZpbml0aW9uIiwicnVsZXMiLCJydWxlIiwicGFydHMiLCJnZXRQYXJ0cyIsImZpcnN0UGFydCIsImZpcnN0UGFydFJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUGFydCIsIm5hbWUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiZmlyc3RQYXJ0TGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbURlZmluaXRpb24iLCJwYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLG1CQUFSLENBQXRCO0FBQUEsSUFDTUMsZ0JBQWdCRCxRQUFRLG1CQUFSLENBRHRCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCOztBQUlNLElBQUVHLEtBQUYsR0FBWUQsY0FBWixDQUFFQyxLQUFGO0FBQUEsSUFDRUMsY0FERixHQUNxQkgsYUFEckIsQ0FDRUcsY0FERjtBQUFBLElBRUVDLG1CQUZGLEdBRXlETixhQUZ6RCxDQUVFTSxtQkFGRjtBQUFBLElBRXVCQyw2QkFGdkIsR0FFeURQLGFBRnpELENBRXVCTyw2QkFGdkI7OztBQUlOLFNBQVNDLGtCQUFULENBQTRCQyxVQUE1QixFQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0MsVUFBSUMsT0FBTyxJQUFYOztBQUVBLFVBQU1DLFFBQVFILFdBQVdJLFFBQVgsRUFBZDtBQUFBLFVBQ01DLFlBQVlWLE1BQU1RLEtBQU4sQ0FEbEI7QUFBQSxVQUVNRyxvQkFBb0JDLGlCQUFpQkYsU0FBakIsQ0FGMUI7O0FBSUEsVUFBSUMsc0JBQXNCLElBQTFCLEVBQWdDO0FBQzlCLGdCQUFNRSxPQUFPRixpQkFBYjs7QUFFQUosbUJBQU9OLGVBQWVZLElBQWYsRUFBcUJQLEtBQXJCLENBQVA7QUFDRDs7QUFFRCxhQUFPQyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU08seUJBQVQsQ0FBbUNULFVBQW5DLEVBQStDO0FBQzdDLFVBQU1HLFFBQVFILFdBQVdJLFFBQVgsRUFBZDtBQUFBLFVBQ01DLFlBQVlWLE1BQU1RLEtBQU4sQ0FEbEI7QUFBQSxVQUVNTyx5QkFBeUJiLG9CQUFvQlEsU0FBcEIsQ0FGL0I7QUFBQSxVQUdNTSwwQkFBMEJELHNCQUhoQyxDQUQ2QyxDQUlZOztBQUV6RCxhQUFPQyx1QkFBUDtBQUNEOztBQUVELFNBQVNDLG1DQUFULENBQTZDWixVQUE3QyxFQUF5RDtBQUN2RCxVQUFNRyxRQUFRSCxXQUFXSSxRQUFYLEVBQWQ7QUFBQSxVQUNNQyxZQUFZVixNQUFNUSxLQUFOLENBRGxCO0FBQUEsVUFFTVUsT0FBT1IsU0FGYjtBQUFBLFVBRXdCO0FBQ2xCUyw4QkFBd0JoQiw4QkFBOEJlLElBQTlCLENBSDlCOztBQUtBLGFBQU9DLHFCQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpCLDRDQURlO0FBRWZVLDBEQUZlO0FBR2ZHO0FBSGUsQ0FBakIiLCJmaWxlIjoiZGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9wYXJ0JyksXG4gICAgICBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3J1bGUnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcnVsZVV0aWxpdGllcyxcbiAgICAgIHsgaXNQYXJ0TGVmdFJlY3Vyc2l2ZSwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQgfSA9IHBhcnRVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIHJ1bGVGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBydWxlcykge1xuICBsZXQgcnVsZSA9IG51bGw7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWUgPSBydWxlTmFtZUZyb21QYXJ0KGZpcnN0UGFydCk7XG5cbiAgaWYgKGZpcnN0UGFydFJ1bGVOYW1lICE9PSBudWxsKSB7XG4gICAgY29uc3QgbmFtZSA9IGZpcnN0UGFydFJ1bGVOYW1lO1xuXG4gICAgcnVsZSA9IGZpbmRSdWxlQnlOYW1lKG5hbWUsIHJ1bGVzKTtcbiAgfVxuXG4gIHJldHVybiBydWxlO1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0TGVmdFJlY3Vyc2l2ZSA9IGlzUGFydExlZnRSZWN1cnNpdmUoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBmaXJzdFBhcnRMZWZ0UmVjdXJzaXZlOyAgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuXG5mdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQsIC8vL1xuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tUGFydChwYXJ0KTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVsZUZyb21EZWZpbml0aW9uLFxuICBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlLFxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvblxufTtcbiJdfQ==