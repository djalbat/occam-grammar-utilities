'use strict';

var partUtilities = require('../utilities/part'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    recursiveRuleNamesFromPart = partUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNameFromPart = partUtilities.leftRecursiveRuleNameFromPart;


function isDefinitionRecursive(definition) {
  var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      definitionRecursive = recursiveRuleNamesLength > 0;

  return definitionRecursive;
}

function isDefinitionLeftRecursive(definition) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromDefinition(definition),
      definitionLeftRecursive = leftRecursiveRuleName !== null;

  return definitionLeftRecursive;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNameFromDefinition(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart,
      ///
  leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

  return leftRecursiveRuleName;
}

module.exports = {
  isDefinitionRecursive: isDefinitionRecursive,
  isDefinitionLeftRecursive: isDefinitionLeftRecursive,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJ0VXRpbGl0aWVzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiZGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVGcm9tRGVmaW5pdGlvbiIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicGFydHMiLCJnZXRQYXJ0cyIsImZvckVhY2giLCJwYXJ0IiwiZmlyc3RQYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLG1CQUFSLENBQXRCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBRHZCOztBQUdNLElBQUVFLEtBQUYsR0FBWUQsY0FBWixDQUFFQyxLQUFGO0FBQUEsSUFDRUMsMEJBREYsR0FDZ0VKLGFBRGhFLENBQ0VJLDBCQURGO0FBQUEsSUFDOEJDLDZCQUQ5QixHQUNnRUwsYUFEaEUsQ0FDOEJLLDZCQUQ5Qjs7O0FBR04sU0FBU0MscUJBQVQsQ0FBK0JDLFVBQS9CLEVBQTJDO0FBQ3pDLE1BQU1DLHFCQUFxQkMsaUNBQWlDRixVQUFqQyxDQUEzQjtBQUFBLE1BQ01HLDJCQUEyQkYsbUJBQW1CRyxNQURwRDtBQUFBLE1BRU1DLHNCQUF1QkYsMkJBQTJCLENBRnhEOztBQUlBLFNBQU9FLG1CQUFQO0FBQ0Q7O0FBRUQsU0FBU0MseUJBQVQsQ0FBbUNOLFVBQW5DLEVBQStDO0FBQzdDLE1BQU1PLHdCQUF3QkMsb0NBQW9DUixVQUFwQyxDQUE5QjtBQUFBLE1BQ01TLDBCQUEyQkYsMEJBQTBCLElBRDNEOztBQUdBLFNBQU9FLHVCQUFQO0FBQ0Q7O0FBRUQsU0FBU1AsZ0NBQVQsQ0FBMENGLFVBQTFDLEVBQStFO0FBQUEsTUFBekJDLGtCQUF5Qix1RUFBSixFQUFJOztBQUM3RSxNQUFNUyxRQUFRVixXQUFXVyxRQUFYLEVBQWQ7O0FBRUFELFFBQU1FLE9BQU4sQ0FBYyxVQUFDQyxJQUFELEVBQVU7QUFDdEJoQiwrQkFBMkJnQixJQUEzQixFQUFpQ1osa0JBQWpDO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxrQkFBUDtBQUNEOztBQUVELFNBQVNPLG1DQUFULENBQTZDUixVQUE3QyxFQUF5RDtBQUN2RCxNQUFNVSxRQUFRVixXQUFXVyxRQUFYLEVBQWQ7QUFBQSxNQUNNRyxZQUFZbEIsTUFBTWMsS0FBTixDQURsQjtBQUFBLE1BRU1HLE9BQU9DLFNBRmI7QUFBQSxNQUV3QjtBQUNsQlAsMEJBQXdCVCw4QkFBOEJlLElBQTlCLENBSDlCOztBQUtBLFNBQU9OLHFCQUFQO0FBQ0Q7O0FBRURRLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpCLDhDQURlO0FBRWZPLHNEQUZlO0FBR2ZKLG9FQUhlO0FBSWZNO0FBSmUsQ0FBakIiLCJmaWxlIjoiZGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFydFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9wYXJ0JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21QYXJ0IH0gPSBwYXJ0VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgcmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID0gcmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IChyZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPiAwKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZVxufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gKGxlZnRSZWN1cnNpdmVSdWxlTmFtZSAhPT0gbnVsbCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lRnJvbVBhcnQocGFydCk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZSxcbiAgaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSxcbiAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24sXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZUZyb21EZWZpbml0aW9uXG59O1xuIl19