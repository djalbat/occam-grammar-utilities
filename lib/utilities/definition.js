"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionRecursive = isDefinitionRecursive;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.reducedDefinitionFromRuleName = reducedDefinitionFromRuleName;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part).isPartComplex(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition), recursiveRuleNamesLength = recursiveRuleNames.length, definitionRecursive = recursiveRuleNamesLength > 0;
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function reducedDefinitionFromRuleName(ruleName) {
    var reducedPart = (0, _part).reducedPartFromRuleName(ruleName), parts = [
        reducedPart
    ], definition = new _occamParsers.Definition(parts), reducedDefinition = definition; ///
    return reducedDefinition;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts).recursiveRuleNamesFromParts(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts).leftRecursiveRuleNamesFromParts(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRGVmaW5pdGlvbiB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgaXNQYXJ0Q29tcGxleCwgcmVkdWNlZFBhcnRGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydHNcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydENvbXBsZXggPSBpc1BhcnRDb21wbGV4KGZpcnN0UGFydCksXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gZmlyc3RQYXJ0Q29tcGxleDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25Db21wbGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uUmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IHJlY3Vyc2l2ZVJ1bGVOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRlZmluaXRpb25SZWN1cnNpdmUgPSAocmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25SZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlZERlZmluaXRpb25Gcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgcmVkdWNlZFBhcnQgPSByZWR1Y2VkUGFydEZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgIHBhcnRzID0gW1xuICAgICAgICAgICAgcmVkdWNlZFBhcnRcbiAgICAgICAgXSxcbiAgICAgICAgZGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKHBhcnRzKSxcbiAgICAgICAgcmVkdWNlZERlZmluaXRpb24gPSBkZWZpbml0aW9uOyAvLy9cblxuICByZXR1cm4gcmVkdWNlZERlZmluaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvblVuYXJ5IiwiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvblJlY3Vyc2l2ZSIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWR1Y2VkRGVmaW5pdGlvbkZyb21SdWxlTmFtZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJydWxlTmFtZSIsInJlZHVjZWRQYXJ0IiwicmVkdWNlZFBhcnRGcm9tUnVsZU5hbWUiLCJEZWZpbml0aW9uIiwicmVkdWNlZERlZmluaXRpb24iLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFVR0EsaUJBQWlCLEdBQWpCQSxpQkFBaUI7UUFRakJDLG1CQUFtQixHQUFuQkEsbUJBQW1CO1FBU25CQyxxQkFBcUIsR0FBckJBLHFCQUFxQjtRQVFyQkMseUJBQXlCLEdBQXpCQSx5QkFBeUI7UUFRekJDLDZCQUE2QixHQUE3QkEsNkJBQTZCO1FBVzdCQyxnQ0FBZ0MsR0FBaENBLGdDQUFnQztRQU9oQ0Msb0NBQW9DLEdBQXBDQSxvQ0FBb0M7QUEzRHpCLElBQUEsYUFBZSxXQUFmLGVBQWUsQ0FBQTtBQUNYLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUVhLElBQUEsS0FBbUIsV0FBbkIsbUJBQW1CLENBQUE7QUFDRyxJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBRWpHLElBQU0sQUFBRUMsS0FBSyxHQUFLQyxVQUFjLGVBQUEsQ0FBeEJELEtBQUssQUFBbUIsQUFBQztBQUUxQixTQUFTUCxpQkFBaUIsQ0FBQ1MsVUFBVSxFQUFFO0lBQzVDLElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JDLFdBQVcsR0FBR0YsS0FBSyxDQUFDRyxNQUFNLEVBQzFCQyxlQUFlLEdBQUlGLFdBQVcsS0FBSyxDQUFDLEFBQUMsQUFBQztJQUU1QyxPQUFPRSxlQUFlLENBQUM7Q0FDeEI7QUFFTSxTQUFTYixtQkFBbUIsQ0FBQ1EsVUFBVSxFQUFFO0lBQzlDLElBQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsRUFDN0JJLFNBQVMsR0FBR1IsS0FBSyxDQUFDRyxLQUFLLENBQUMsRUFDeEJNLGdCQUFnQixHQUFHQyxDQUFBQSxHQUFBQSxLQUFhLEFBQVcsQ0FBQSxjQUFYLENBQUNGLFNBQVMsQ0FBQyxFQUMzQ0csaUJBQWlCLEdBQUdGLGdCQUFnQixBQUFDLEVBQUMsR0FBRztJQUUvQyxPQUFPRSxpQkFBaUIsQ0FBQztDQUMxQjtBQUVNLFNBQVNoQixxQkFBcUIsQ0FBQ08sVUFBVSxFQUFFO0lBQ2hELElBQU1VLGtCQUFrQixHQUFHZCxnQ0FBZ0MsQ0FBQ0ksVUFBVSxDQUFDLEVBQ2pFVyx3QkFBd0IsR0FBR0Qsa0JBQWtCLENBQUNOLE1BQU0sRUFDcERRLG1CQUFtQixHQUFJRCx3QkFBd0IsR0FBRyxDQUFDLEFBQUMsQUFBQztJQUUzRCxPQUFPQyxtQkFBbUIsQ0FBQztDQUM1QjtBQUVNLFNBQVNsQix5QkFBeUIsQ0FBQ00sVUFBVSxFQUFFO0lBQ3BELElBQU1hLHNCQUFzQixHQUFHaEIsb0NBQW9DLENBQUNHLFVBQVUsQ0FBQyxFQUN6RWMsNEJBQTRCLEdBQUdELHNCQUFzQixDQUFDVCxNQUFNLEVBQzVEVyx1QkFBdUIsR0FBSUQsNEJBQTRCLEdBQUcsQ0FBQyxBQUFDLEFBQUM7SUFFbkUsT0FBT0MsdUJBQXVCLENBQUM7Q0FDaEM7QUFFTSxTQUFTcEIsNkJBQTZCLENBQUNxQixRQUFRLEVBQUU7SUFDdEQsSUFBTUMsV0FBVyxHQUFHQyxDQUFBQSxHQUFBQSxLQUF1QixBQUFVLENBQUEsd0JBQVYsQ0FBQ0YsUUFBUSxDQUFDLEVBQy9DZixLQUFLLEdBQUc7UUFDSmdCLFdBQVc7S0FDZCxFQUNEakIsVUFBVSxHQUFHLElBQUltQixhQUFVLFdBQUEsQ0FBQ2xCLEtBQUssQ0FBQyxFQUNsQ21CLGlCQUFpQixHQUFHcEIsVUFBVSxBQUFDLEVBQUMsR0FBRztJQUV6QyxPQUFPb0IsaUJBQWlCLENBQUM7Q0FDMUI7QUFFTSxTQUFTeEIsZ0NBQWdDLENBQUNJLFVBQVUsRUFBRTtJQUMzRCxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCUSxrQkFBa0IsR0FBR1csQ0FBQUEsR0FBQUEsTUFBMkIsQUFBTyxDQUFBLDRCQUFQLENBQUNwQixLQUFLLENBQUMsQUFBQztJQUU5RCxPQUFPUyxrQkFBa0IsQ0FBQztDQUMzQjtBQUVNLFNBQVNiLG9DQUFvQyxDQUFDRyxVQUFVLEVBQUU7SUFDL0QsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3Qlcsc0JBQXNCLEdBQUdTLENBQUFBLEdBQUFBLE1BQStCLEFBQU8sQ0FBQSxnQ0FBUCxDQUFDckIsS0FBSyxDQUFDLEFBQUM7SUFFdEUsT0FBT1ksc0JBQXNCLENBQUM7Q0FDL0IifQ==