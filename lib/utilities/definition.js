'use strict';

var partUtilities = require('../utilities/part'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    recursiveRuleNamesFromPart = partUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNameFromPart = partUtilities.leftRecursiveRuleNameFromPart;


function isDefinitionRecursive(definition) {
  var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition),
      recursiveRuleNamesLength = recursiveRuleNames.length,
      definitionRecursive = recursiveRuleNamesLength > 0;

  return definitionRecursive;
}

function isDefinitionLeftRecursive(definition) {
  var leftRecursiveRuleName = leftRecursiveRuleNameFromDefinition(definition),
      definitionLeftRecursive = leftRecursiveRuleName !== null;

  return definitionLeftRecursive;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNameFromDefinition(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart,
      ///
  leftRecursiveRuleName = leftRecursiveRuleNameFromPart(part);

  return leftRecursiveRuleName;
}

function findIndirectlyLeftRecursiveDefinition(leftRecursiveDefinition, recursiveDefinitions) {
  var indirectlyLeftRecursiveDefinition = null;

  var leftRecursiveDefinitionsCycle = findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions);

  if (leftRecursiveDefinitionsCycle !== null) {
    var firstLeftRecursiveDefinition = first(leftRecursiveDefinitionsCycle);

    indirectlyLeftRecursiveDefinition = firstLeftRecursiveDefinition; ///
  }

  return indirectlyLeftRecursiveDefinition;
}

module.exports = {
  isDefinitionRecursive: isDefinitionRecursive,
  isDefinitionLeftRecursive: isDefinitionLeftRecursive,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNameFromDefinition: leftRecursiveRuleNameFromDefinition,
  findIndirectlyLeftRecursiveDefinition: findIndirectlyLeftRecursiveDefinition
};

function findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions) {
  var recursiveDefinitionsCycle = null;

  recursiveDefinitions.some(function (recursiveDefinition, index) {
    var recursiveDefinitionRuleName = recursiveDefinition.getRuleName(),
        recursiveDefinitionRuleNameLeftRecursiveRuleName = recursiveDefinitionRuleName === recursiveRuleName;

    if (recursiveDefinitionRuleNameLeftRecursiveRuleName) {
      recursiveDefinitionsCycle = recursiveDefinitions.slice(index);

      return true;
    }
  });

  return recursiveDefinitionsCycle;
}

function findLeftRecursiveDefinitionsCycle(leftRecursiveDefinition, recursiveDefinitions) {
  var leftRecursiveDefinitionsCycle = null;

  var leftRecursiveRuleName = leftRecursiveDefinition.getLeftRecursiveRuleName(),
      recursiveRuleName = leftRecursiveRuleName,
      ///
  recursiveDefinitionsCycle = findRecursiveDefinitionsCycle(recursiveRuleName, recursiveDefinitions);

  if (recursiveDefinitionsCycle !== null) {
    var recursiveDefinitionsCycleLeftRecursive = isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle);

    if (recursiveDefinitionsCycleLeftRecursive) {
      leftRecursiveDefinitionsCycle = recursiveDefinitionsCycle; ///
    }
  }

  return leftRecursiveDefinitionsCycle;
}

function isRecursiveDefinitionsCycleLeftRecursive(recursiveDefinitionsCycle) {
  var recursiveDefinitionsCycleLeftRecursive = recursiveDefinitionsCycle.every(function (recursiveDefinition) {
    var recursiveDefinitionLeftRecursive = recursiveDefinition.isLeftRecursive();

    if (recursiveDefinitionLeftRecursive) {
      return true;
    }
  });

  return recursiveDefinitionsCycleLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,