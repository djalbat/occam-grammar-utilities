"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;

var _occamParsers = require("occam-parsers");

var _necessary = require("necessary");

var _recursivePart = require("../utilities/recursivePart");

var first = _necessary.arrayUtilities.first,
    RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;

function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;
  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;
  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();
  parts.forEach(function (part) {
    (0, _recursivePart.recursiveRuleNamesFromPart)(part, recursiveRuleNames);
  });
  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  (0, _recursivePart.leftRecursiveRuleNamesFromPart)(part, leftRecursiveRuleNames);
  return leftRecursiveRuleNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmluaXRpb24uanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsIlJ1bGVOYW1lUGFydFR5cGUiLCJwYXJ0VHlwZXMiLCJpc0RlZmluaXRpb25VbmFyeSIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0VHlwZSIsImdldFR5cGUiLCJmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSIsImZpcnN0UGFydFJ1bGVOYW1lUGFydCIsImRlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uTG9va0FoZWFkIiwibG9va0FoZWFkIiwicnVsZU5hbWVQYXJ0IiwiaXNMb29rQWhlYWQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJwYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBRU0sSUFBRUEsS0FBRixHQUFZQyx5QkFBWixDQUFFRCxLQUFGO0FBQUEsSUFDRUUsZ0JBREYsR0FDdUJDLHVCQUR2QixDQUNFRCxnQkFERjs7QUFHQyxTQUFTRSxpQkFBVCxDQUEyQkMsVUFBM0IsRUFBdUM7QUFDNUMsTUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVgsRUFBZDtBQUFBLE1BQ01DLFdBQVcsR0FBR0YsS0FBSyxDQUFDRyxNQUQxQjtBQUFBLE1BRU1DLGVBQWUsR0FBSUYsV0FBVyxLQUFLLENBRnpDO0FBSUEsU0FBT0UsZUFBUDtBQUNEOztBQUVNLFNBQVNDLG1CQUFULENBQTZCTixVQUE3QixFQUF5QztBQUM5QyxNQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQUFkO0FBQUEsTUFDTUssU0FBUyxHQUFHWixLQUFLLENBQUNNLEtBQUQsQ0FEdkI7QUFBQSxNQUVNTyxhQUFhLEdBQUdELFNBQVMsQ0FBQ0UsT0FBVixFQUZ0QjtBQUFBLE1BR01DLDZCQUE2QixHQUFJRixhQUFhLEtBQUtYLGdCQUh6RDtBQUFBLE1BSU1jLHFCQUFxQixHQUFHRCw2QkFKOUI7QUFBQSxNQUtNRSxpQkFBaUIsR0FBRyxDQUFDRCxxQkFMM0I7QUFPQSxTQUFPQyxpQkFBUDtBQUNEOztBQUVNLFNBQVNDLHFCQUFULENBQStCYixVQUEvQixFQUEyQztBQUNoRCxNQUFJYyxTQUFTLEdBQUcsS0FBaEI7QUFFQSxNQUFNYixLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQUFkO0FBQUEsTUFDTUssU0FBUyxHQUFHWixLQUFLLENBQUNNLEtBQUQsQ0FEdkI7QUFBQSxNQUVNTyxhQUFhLEdBQUdELFNBQVMsQ0FBQ0UsT0FBVixFQUZ0QjtBQUFBLE1BR01DLDZCQUE2QixHQUFJRixhQUFhLEtBQUtYLGdCQUh6RDtBQUFBLE1BSU1jLHFCQUFxQixHQUFHRCw2QkFKOUIsQ0FIZ0QsQ0FPYzs7QUFFOUQsTUFBSUMscUJBQUosRUFBMkI7QUFDekIsUUFBTUksWUFBWSxHQUFHUixTQUFyQixDQUR5QixDQUNPOztBQUVoQ08sSUFBQUEsU0FBUyxHQUFHQyxZQUFZLENBQUNDLFdBQWIsRUFBWjtBQUNEOztBQUVELFNBQU9GLFNBQVA7QUFDRDs7QUFFTSxTQUFTRyxnQ0FBVCxDQUEwQ2pCLFVBQTFDLEVBQXNEO0FBQzNELE1BQU1rQixrQkFBa0IsR0FBRyxFQUEzQjtBQUFBLE1BQ01qQixLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQURkO0FBR0FELEVBQUFBLEtBQUssQ0FBQ2tCLE9BQU4sQ0FBYyxVQUFDQyxJQUFELEVBQVU7QUFDdEIsbURBQTJCQSxJQUEzQixFQUFpQ0Ysa0JBQWpDO0FBQ0QsR0FGRDtBQUlBLFNBQU9BLGtCQUFQO0FBQ0Q7O0FBRU0sU0FBU0csb0NBQVQsQ0FBOENyQixVQUE5QyxFQUEwRDtBQUMvRCxNQUFNc0Isc0JBQXNCLEdBQUcsRUFBL0I7QUFBQSxNQUNNckIsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVgsRUFEZDtBQUFBLE1BRU1LLFNBQVMsR0FBR1osS0FBSyxDQUFDTSxLQUFELENBRnZCO0FBQUEsTUFHTW1CLElBQUksR0FBR2IsU0FIYixDQUQrRCxDQUl2Qzs7QUFFeEIscURBQStCYSxJQUEvQixFQUFxQ0Usc0JBQXJDO0FBRUEsU0FBT0Esc0JBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBwYXJ0VHlwZXMgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlY3Vyc2l2ZVBhcnRcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFJ1bGVOYW1lUGFydFR5cGUgfSA9IHBhcnRUeXBlcztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblVuYXJ5KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uVW5hcnkgPSAocGFydHNMZW5ndGggPT09IDEpO1xuXG4gIHJldHVybiBkZWZpbml0aW9uVW5hcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSAhZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0O1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxvb2tBaGVhZChkZWZpbml0aW9uKSB7XG4gIGxldCBsb29rQWhlYWQgPSBmYWxzZTtcblxuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlID0gZmlyc3RQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUgPSAoZmlyc3RQYXJ0VHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgIGZpcnN0UGFydFJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlOyAgLy8vXG5cbiAgaWYgKGZpcnN0UGFydFJ1bGVOYW1lUGFydCkge1xuICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgICBsb29rQWhlYWQgPSBydWxlTmFtZVBhcnQuaXNMb29rQWhlYWQoKTtcbiAgfVxuXG4gIHJldHVybiBsb29rQWhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl19