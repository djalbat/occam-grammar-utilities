"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var recursiveRuleNames = recursiveRuleNamesFromDefinition(definition), recursiveRuleNamesLength = recursiveRuleNames.length, definitionRecursive = recursiveRuleNamesLength > 0;
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydHNcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25SZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgcmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID0gcmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IChyZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPiAwKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gKGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPiAwKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICByZWN1cnNpdmVSdWxlTmFtZXMgPSByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25SZWN1cnNpdmUiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRDb21wbGV4IiwiaXNQYXJ0Q29tcGxleCIsImRlZmluaXRpb25Db21wbGV4IiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblJlY3Vyc2l2ZSIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7O0lBU0dBLG1CQUFtQjtlQUFuQkEsbUJBQW1COztJQVNuQkMscUJBQXFCO2VBQXJCQSxxQkFBcUI7O0lBUXJCQyx5QkFBeUI7ZUFBekJBLHlCQUF5Qjs7SUFRekJDLGdDQUFnQztlQUFoQ0EsZ0NBQWdDOztJQU9oQ0Msb0NBQW9DO2VBQXBDQSxvQ0FBb0M7Ozt5QkF2Q3JCLFdBQVc7b0JBRVosbUJBQW1CO3FCQUM0QixvQkFBb0I7QUFFakcsSUFBTSxBQUFFQyxLQUFLLEdBQUtDLFVBQWMsZUFBQSxDQUF4QkQsS0FBSyxBQUFtQixBQUFDO0FBRTFCLFNBQVNMLG1CQUFtQixDQUFDTyxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3QkMsU0FBUyxHQUFHTCxLQUFLLENBQUNHLEtBQUssQ0FBQyxFQUN4QkcsZ0JBQWdCLEdBQUdDLElBQUFBLEtBQWEsY0FBQSxFQUFDRixTQUFTLENBQUMsRUFDM0NHLGlCQUFpQixHQUFHRixnQkFBZ0IsQUFBQyxFQUFDLEdBQUc7SUFFL0MsT0FBT0UsaUJBQWlCLENBQUM7Q0FDMUI7QUFFTSxTQUFTWixxQkFBcUIsQ0FBQ00sVUFBVSxFQUFFO0lBQ2hELElBQU1PLGtCQUFrQixHQUFHWCxnQ0FBZ0MsQ0FBQ0ksVUFBVSxDQUFDLEVBQ2pFUSx3QkFBd0IsR0FBR0Qsa0JBQWtCLENBQUNFLE1BQU0sRUFDcERDLG1CQUFtQixHQUFJRix3QkFBd0IsR0FBRyxDQUFDLEFBQUMsQUFBQztJQUUzRCxPQUFPRSxtQkFBbUIsQ0FBQztDQUM1QjtBQUVNLFNBQVNmLHlCQUF5QixDQUFDSyxVQUFVLEVBQUU7SUFDcEQsSUFBTVcsc0JBQXNCLEdBQUdkLG9DQUFvQyxDQUFDRyxVQUFVLENBQUMsRUFDekVZLDRCQUE0QixHQUFHRCxzQkFBc0IsQ0FBQ0YsTUFBTSxFQUM1REksdUJBQXVCLEdBQUlELDRCQUE0QixHQUFHLENBQUMsQUFBQyxBQUFDO0lBRW5FLE9BQU9DLHVCQUF1QixDQUFDO0NBQ2hDO0FBRU0sU0FBU2pCLGdDQUFnQyxDQUFDSSxVQUFVLEVBQUU7SUFDM0QsSUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3Qkssa0JBQWtCLEdBQUdPLElBQUFBLE1BQTJCLDRCQUFBLEVBQUNiLEtBQUssQ0FBQyxBQUFDO0lBRTlELE9BQU9NLGtCQUFrQixDQUFDO0NBQzNCO0FBRU0sU0FBU1Ysb0NBQW9DLENBQUNHLFVBQVUsRUFBRTtJQUMvRCxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCUyxzQkFBc0IsR0FBR0ksSUFBQUEsTUFBK0IsZ0NBQUEsRUFBQ2QsS0FBSyxDQUFDLEFBQUM7SUFFdEUsT0FBT1Usc0JBQXNCLENBQUM7Q0FDL0IifQ==