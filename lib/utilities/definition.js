"use strict";

var _occamParsers = require("occam-parsers");

var _necessary = require("necessary");

var _recursivePart = require("../utilities/recursivePart");

var first = _necessary.arrayUtilities.first,
    RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;

function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;
  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;
  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();
  parts.forEach(function (part) {
    (0, _recursivePart.recursiveRuleNamesFromPart)(part, recursiveRuleNames);
  });
  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  (0, _recursivePart.leftRecursiveRuleNamesFromPart)(part, leftRecursiveRuleNames);
  return leftRecursiveRuleNames;
}

module.exports = {
  isDefinitionUnary: isDefinitionUnary,
  isDefinitionComplex: isDefinitionComplex,
  isDefinitionLookAhead: isDefinitionLookAhead,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNamesFromDefinition: leftRecursiveRuleNamesFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmluaXRpb24uanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsIlJ1bGVOYW1lUGFydFR5cGUiLCJwYXJ0VHlwZXMiLCJpc0RlZmluaXRpb25VbmFyeSIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0VHlwZSIsImdldFR5cGUiLCJmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSIsImZpcnN0UGFydFJ1bGVOYW1lUGFydCIsImRlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uTG9va0FoZWFkIiwibG9va0FoZWFkIiwicnVsZU5hbWVQYXJ0IiwiaXNMb29rQWhlYWQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJwYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUNBOztBQUVBOztBQUVNLElBQUVBLEtBQUYsR0FBWUMseUJBQVosQ0FBRUQsS0FBRjtBQUFBLElBQ0VFLGdCQURGLEdBQ3VCQyx1QkFEdkIsQ0FDRUQsZ0JBREY7O0FBR04sU0FBU0UsaUJBQVQsQ0FBMkJDLFVBQTNCLEVBQXVDO0FBQ3JDLE1BQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFYLEVBQWQ7QUFBQSxNQUNNQyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csTUFEMUI7QUFBQSxNQUVNQyxlQUFlLEdBQUlGLFdBQVcsS0FBSyxDQUZ6QztBQUlBLFNBQU9FLGVBQVA7QUFDRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2Qk4sVUFBN0IsRUFBeUM7QUFDdkMsTUFBTUMsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVgsRUFBZDtBQUFBLE1BQ01LLFNBQVMsR0FBR1osS0FBSyxDQUFDTSxLQUFELENBRHZCO0FBQUEsTUFFTU8sYUFBYSxHQUFHRCxTQUFTLENBQUNFLE9BQVYsRUFGdEI7QUFBQSxNQUdNQyw2QkFBNkIsR0FBSUYsYUFBYSxLQUFLWCxnQkFIekQ7QUFBQSxNQUlNYyxxQkFBcUIsR0FBR0QsNkJBSjlCO0FBQUEsTUFLTUUsaUJBQWlCLEdBQUcsQ0FBQ0QscUJBTDNCO0FBT0EsU0FBT0MsaUJBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmIsVUFBL0IsRUFBMkM7QUFDekMsTUFBSWMsU0FBUyxHQUFHLEtBQWhCO0FBRUEsTUFBTWIsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVgsRUFBZDtBQUFBLE1BQ01LLFNBQVMsR0FBR1osS0FBSyxDQUFDTSxLQUFELENBRHZCO0FBQUEsTUFFTU8sYUFBYSxHQUFHRCxTQUFTLENBQUNFLE9BQVYsRUFGdEI7QUFBQSxNQUdNQyw2QkFBNkIsR0FBSUYsYUFBYSxLQUFLWCxnQkFIekQ7QUFBQSxNQUlNYyxxQkFBcUIsR0FBR0QsNkJBSjlCLENBSHlDLENBT3FCOztBQUU5RCxNQUFJQyxxQkFBSixFQUEyQjtBQUN6QixRQUFNSSxZQUFZLEdBQUdSLFNBQXJCLENBRHlCLENBQ087O0FBRWhDTyxJQUFBQSxTQUFTLEdBQUdDLFlBQVksQ0FBQ0MsV0FBYixFQUFaO0FBQ0Q7O0FBRUQsU0FBT0YsU0FBUDtBQUNEOztBQUVELFNBQVNHLGdDQUFULENBQTBDakIsVUFBMUMsRUFBc0Q7QUFDcEQsTUFBTWtCLGtCQUFrQixHQUFHLEVBQTNCO0FBQUEsTUFDTWpCLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFYLEVBRGQ7QUFHQUQsRUFBQUEsS0FBSyxDQUFDa0IsT0FBTixDQUFjLFVBQUNDLElBQUQsRUFBVTtBQUN0QixtREFBMkJBLElBQTNCLEVBQWlDRixrQkFBakM7QUFDRCxHQUZEO0FBSUEsU0FBT0Esa0JBQVA7QUFDRDs7QUFFRCxTQUFTRyxvQ0FBVCxDQUE4Q3JCLFVBQTlDLEVBQTBEO0FBQ3hELE1BQU1zQixzQkFBc0IsR0FBRyxFQUEvQjtBQUFBLE1BQ01yQixLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQURkO0FBQUEsTUFFTUssU0FBUyxHQUFHWixLQUFLLENBQUNNLEtBQUQsQ0FGdkI7QUFBQSxNQUdNbUIsSUFBSSxHQUFHYixTQUhiLENBRHdELENBSWhDOztBQUV4QixxREFBK0JhLElBQS9CLEVBQXFDRSxzQkFBckM7QUFFQSxTQUFPQSxzQkFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnpCLEVBQUFBLGlCQUFpQixFQUFqQkEsaUJBRGU7QUFFZk8sRUFBQUEsbUJBQW1CLEVBQW5CQSxtQkFGZTtBQUdmTyxFQUFBQSxxQkFBcUIsRUFBckJBLHFCQUhlO0FBSWZJLEVBQUFBLGdDQUFnQyxFQUFoQ0EsZ0NBSmU7QUFLZkksRUFBQUEsb0NBQW9DLEVBQXBDQTtBQUxlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHBhcnRUeXBlcyB9IGZyb20gXCJvY2NhbS1wYXJzZXJzXCI7XG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcmVjdXJzaXZlUGFydFwiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgUnVsZU5hbWVQYXJ0VHlwZSB9ID0gcGFydFR5cGVzO1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSAhZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0O1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZnVuY3Rpb24gaXNEZWZpbml0aW9uTG9va0FoZWFkKGRlZmluaXRpb24pIHtcbiAgbGV0IGxvb2tBaGVhZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICBpZiAoZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0KSB7XG4gICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgIGxvb2tBaGVhZCA9IHJ1bGVOYW1lUGFydC5pc0xvb2tBaGVhZCgpO1xuICB9XG5cbiAgcmV0dXJuIGxvb2tBaGVhZDtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWZpbml0aW9uVW5hcnksXG4gIGlzRGVmaW5pdGlvbkNvbXBsZXgsXG4gIGlzRGVmaW5pdGlvbkxvb2tBaGVhZCxcbiAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24sXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvblxufTtcbiJdfQ==