'use strict';

var parsers = require('occam-parsers');

var arrayUtilities = require('../utilities/array'),
    recursivePartUtilities = require('../utilities/recursivePart');

var first = arrayUtilities.first,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNamesFromPart = recursivePartUtilities.leftRecursiveRuleNamesFromPart;


function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;

  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;

  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;

  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();

  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });

  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);

  return leftRecursiveRuleNames;
}

module.exports = {
  isDefinitionUnary: isDefinitionUnary,
  isDefinitionComplex: isDefinitionComplex,
  isDefinitionLookAhead: isDefinitionLookAhead,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNamesFromDefinition: leftRecursiveRuleNamesFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwicmVjdXJzaXZlUGFydFV0aWxpdGllcyIsImZpcnN0IiwicGFydFR5cGVzIiwiUnVsZU5hbWVQYXJ0VHlwZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IiwiaXNEZWZpbml0aW9uVW5hcnkiLCJkZWZpbml0aW9uIiwicGFydHMiLCJnZXRQYXJ0cyIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblVuYXJ5IiwiaXNEZWZpbml0aW9uQ29tcGxleCIsImZpcnN0UGFydCIsImZpcnN0UGFydFR5cGUiLCJnZXRUeXBlIiwiZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJkZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvbkxvb2tBaGVhZCIsImxvb2tBaGVhZCIsInJ1bGVOYW1lUGFydCIsImlzTG9va0FoZWFkIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJmb3JFYWNoIiwicGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBQXZCO0FBQUEsSUFDTUUseUJBQXlCRixRQUFRLDRCQUFSLENBRC9COztBQUdNLElBQUVHLEtBQUYsR0FBWUYsY0FBWixDQUFFRSxLQUFGO0FBQUEsSUFDRUMsU0FERixHQUNnQkwsT0FEaEIsQ0FDRUssU0FERjtBQUFBLElBRUVDLGdCQUZGLEdBRXVCRCxTQUZ2QixDQUVFQyxnQkFGRjtBQUFBLElBR0VDLDBCQUhGLEdBR2lFSixzQkFIakUsQ0FHRUksMEJBSEY7QUFBQSxJQUc4QkMsOEJBSDlCLEdBR2lFTCxzQkFIakUsQ0FHOEJLLDhCQUg5Qjs7O0FBS04sU0FBU0MsaUJBQVQsQ0FBMkJDLFVBQTNCLEVBQXVDO0FBQ3JDLE1BQU1DLFFBQVFELFdBQVdFLFFBQVgsRUFBZDtBQUFBLE1BQ01DLGNBQWNGLE1BQU1HLE1BRDFCO0FBQUEsTUFFTUMsa0JBQW1CRixnQkFBZ0IsQ0FGekM7O0FBSUEsU0FBT0UsZUFBUDtBQUNEOztBQUVELFNBQVNDLG1CQUFULENBQTZCTixVQUE3QixFQUF5QztBQUN2QyxNQUFNQyxRQUFRRCxXQUFXRSxRQUFYLEVBQWQ7QUFBQSxNQUNNSyxZQUFZYixNQUFNTyxLQUFOLENBRGxCO0FBQUEsTUFFTU8sZ0JBQWdCRCxVQUFVRSxPQUFWLEVBRnRCO0FBQUEsTUFHTUMsZ0NBQWlDRixrQkFBa0JaLGdCQUh6RDtBQUFBLE1BSU1lLHdCQUF3QkQsNkJBSjlCO0FBQUEsTUFLTUUsb0JBQW9CLENBQUNELHFCQUwzQjs7QUFPQSxTQUFPQyxpQkFBUDtBQUNEOztBQUVELFNBQVNDLHFCQUFULENBQStCYixVQUEvQixFQUEyQztBQUN6QyxNQUFJYyxZQUFZLEtBQWhCOztBQUVBLE1BQU1iLFFBQVFELFdBQVdFLFFBQVgsRUFBZDtBQUFBLE1BQ01LLFlBQVliLE1BQU1PLEtBQU4sQ0FEbEI7QUFBQSxNQUVNTyxnQkFBZ0JELFVBQVVFLE9BQVYsRUFGdEI7QUFBQSxNQUdNQyxnQ0FBaUNGLGtCQUFrQlosZ0JBSHpEO0FBQUEsTUFJTWUsd0JBQXdCRCw2QkFKOUIsQ0FIeUMsQ0FPcUI7O0FBRTlELE1BQUlDLHFCQUFKLEVBQTJCO0FBQ3pCLFFBQU1JLGVBQWVSLFNBQXJCLENBRHlCLENBQ087O0FBRWhDTyxnQkFBWUMsYUFBYUMsV0FBYixFQUFaO0FBQ0Q7O0FBRUQsU0FBT0YsU0FBUDtBQUNEOztBQUVELFNBQVNHLGdDQUFULENBQTBDakIsVUFBMUMsRUFBc0Q7QUFDcEQsTUFBTWtCLHFCQUFxQixFQUEzQjtBQUFBLE1BQ01qQixRQUFRRCxXQUFXRSxRQUFYLEVBRGQ7O0FBR0FELFFBQU1rQixPQUFOLENBQWMsVUFBQ0MsSUFBRCxFQUFVO0FBQ3RCdkIsK0JBQTJCdUIsSUFBM0IsRUFBaUNGLGtCQUFqQztBQUNELEdBRkQ7O0FBSUEsU0FBT0Esa0JBQVA7QUFDRDs7QUFFRCxTQUFTRyxvQ0FBVCxDQUE4Q3JCLFVBQTlDLEVBQTBEO0FBQ3hELE1BQU1zQix5QkFBeUIsRUFBL0I7QUFBQSxNQUNNckIsUUFBUUQsV0FBV0UsUUFBWCxFQURkO0FBQUEsTUFFTUssWUFBWWIsTUFBTU8sS0FBTixDQUZsQjtBQUFBLE1BR01tQixPQUFPYixTQUhiLENBRHdELENBSWhDOztBQUV4QlQsaUNBQStCc0IsSUFBL0IsRUFBcUNFLHNCQUFyQzs7QUFFQSxTQUFPQSxzQkFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Z6QixzQ0FEZTtBQUVmTywwQ0FGZTtBQUdmTyw4Q0FIZTtBQUlmSSxvRUFKZTtBQUtmSTtBQUxlLENBQWpCIiwiZmlsZSI6ImRlZmluaXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICByZWN1cnNpdmVQYXJ0VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3JlY3Vyc2l2ZVBhcnQnKTtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHBhcnRUeXBlcyB9ID0gcGFyc2VycyxcbiAgICAgIHsgUnVsZU5hbWVQYXJ0VHlwZSB9ID0gcGFydFR5cGVzLFxuICAgICAgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gPSByZWN1cnNpdmVQYXJ0VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSAhZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0O1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZnVuY3Rpb24gaXNEZWZpbml0aW9uTG9va0FoZWFkKGRlZmluaXRpb24pIHtcbiAgbGV0IGxvb2tBaGVhZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGU7ICAvLy9cblxuICBpZiAoZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0KSB7XG4gICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICAgIGxvb2tBaGVhZCA9IHJ1bGVOYW1lUGFydC5pc0xvb2tBaGVhZCgpO1xuICB9XG5cbiAgcmV0dXJuIGxvb2tBaGVhZDtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWZpbml0aW9uVW5hcnksXG4gIGlzRGVmaW5pdGlvbkNvbXBsZXgsXG4gIGlzRGVmaW5pdGlvbkxvb2tBaGVhZCxcbiAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24sXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvblxufTtcbiJdfQ==