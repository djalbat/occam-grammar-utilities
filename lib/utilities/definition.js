"use strict";

var parsers = require("occam-parsers"),
    necessary = require("necessary");

var recursivePartUtilities = require("../utilities/recursivePart");

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    partTypes = parsers.partTypes,
    RuleNamePartType = partTypes.RuleNamePartType,
    recursiveRuleNamesFromPart = recursivePartUtilities.recursiveRuleNamesFromPart,
    leftRecursiveRuleNamesFromPart = recursivePartUtilities.leftRecursiveRuleNamesFromPart;

function isDefinitionUnary(definition) {
  var parts = definition.getParts(),
      partsLength = parts.length,
      definitionUnary = partsLength === 1;
  return definitionUnary;
}

function isDefinitionComplex(definition) {
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType,
      definitionComplex = !firstPartRuleNamePart;
  return definitionComplex;
}

function isDefinitionLookAhead(definition) {
  var lookAhead = false;
  var parts = definition.getParts(),
      firstPart = first(parts),
      firstPartType = firstPart.getType(),
      firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType,
      firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///

  if (firstPartRuleNamePart) {
    var ruleNamePart = firstPart; ///

    lookAhead = ruleNamePart.isLookAhead();
  }

  return lookAhead;
}

function recursiveRuleNamesFromDefinition(definition) {
  var recursiveRuleNames = [],
      parts = definition.getParts();
  parts.forEach(function (part) {
    recursiveRuleNamesFromPart(part, recursiveRuleNames);
  });
  return recursiveRuleNames;
}

function leftRecursiveRuleNamesFromDefinition(definition) {
  var leftRecursiveRuleNames = [],
      parts = definition.getParts(),
      firstPart = first(parts),
      part = firstPart; ///

  leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
  return leftRecursiveRuleNames;
}

module.exports = {
  isDefinitionUnary: isDefinitionUnary,
  isDefinitionComplex: isDefinitionComplex,
  isDefinitionLookAhead: isDefinitionLookAhead,
  recursiveRuleNamesFromDefinition: recursiveRuleNamesFromDefinition,
  leftRecursiveRuleNamesFromDefinition: leftRecursiveRuleNamesFromDefinition
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmluaXRpb24uanMiXSwibmFtZXMiOlsicGFyc2VycyIsInJlcXVpcmUiLCJuZWNlc3NhcnkiLCJyZWN1cnNpdmVQYXJ0VXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsInBhcnRUeXBlcyIsIlJ1bGVOYW1lUGFydFR5cGUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImlzRGVmaW5pdGlvblVuYXJ5IiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRUeXBlIiwiZ2V0VHlwZSIsImZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlIiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJsb29rQWhlYWQiLCJydWxlTmFtZVBhcnQiLCJpc0xvb2tBaGVhZCIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUF2QjtBQUFBLElBQ01DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FEekI7O0FBR0EsSUFBTUUsc0JBQXNCLEdBQUdGLE9BQU8sQ0FBQyw0QkFBRCxDQUF0Qzs7QUFFTSxJQUFFRyxjQUFGLEdBQXFCRixTQUFyQixDQUFFRSxjQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZRCxjQURaLENBQ0VDLEtBREY7QUFBQSxJQUVFQyxTQUZGLEdBRWdCTixPQUZoQixDQUVFTSxTQUZGO0FBQUEsSUFHRUMsZ0JBSEYsR0FHdUJELFNBSHZCLENBR0VDLGdCQUhGO0FBQUEsSUFJRUMsMEJBSkYsR0FJaUVMLHNCQUpqRSxDQUlFSywwQkFKRjtBQUFBLElBSThCQyw4QkFKOUIsR0FJaUVOLHNCQUpqRSxDQUk4Qk0sOEJBSjlCOztBQU1OLFNBQVNDLGlCQUFULENBQTJCQyxVQUEzQixFQUF1QztBQUNyQyxNQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQUFkO0FBQUEsTUFDTUMsV0FBVyxHQUFHRixLQUFLLENBQUNHLE1BRDFCO0FBQUEsTUFFTUMsZUFBZSxHQUFJRixXQUFXLEtBQUssQ0FGekM7QUFJQSxTQUFPRSxlQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsbUJBQVQsQ0FBNkJOLFVBQTdCLEVBQXlDO0FBQ3ZDLE1BQU1DLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFYLEVBQWQ7QUFBQSxNQUNNSyxTQUFTLEdBQUdiLEtBQUssQ0FBQ08sS0FBRCxDQUR2QjtBQUFBLE1BRU1PLGFBQWEsR0FBR0QsU0FBUyxDQUFDRSxPQUFWLEVBRnRCO0FBQUEsTUFHTUMsNkJBQTZCLEdBQUlGLGFBQWEsS0FBS1osZ0JBSHpEO0FBQUEsTUFJTWUscUJBQXFCLEdBQUdELDZCQUo5QjtBQUFBLE1BS01FLGlCQUFpQixHQUFHLENBQUNELHFCQUwzQjtBQU9BLFNBQU9DLGlCQUFQO0FBQ0Q7O0FBRUQsU0FBU0MscUJBQVQsQ0FBK0JiLFVBQS9CLEVBQTJDO0FBQ3pDLE1BQUljLFNBQVMsR0FBRyxLQUFoQjtBQUVBLE1BQU1iLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFYLEVBQWQ7QUFBQSxNQUNNSyxTQUFTLEdBQUdiLEtBQUssQ0FBQ08sS0FBRCxDQUR2QjtBQUFBLE1BRU1PLGFBQWEsR0FBR0QsU0FBUyxDQUFDRSxPQUFWLEVBRnRCO0FBQUEsTUFHTUMsNkJBQTZCLEdBQUlGLGFBQWEsS0FBS1osZ0JBSHpEO0FBQUEsTUFJTWUscUJBQXFCLEdBQUdELDZCQUo5QixDQUh5QyxDQU9xQjs7QUFFOUQsTUFBSUMscUJBQUosRUFBMkI7QUFDekIsUUFBTUksWUFBWSxHQUFHUixTQUFyQixDQUR5QixDQUNPOztBQUVoQ08sSUFBQUEsU0FBUyxHQUFHQyxZQUFZLENBQUNDLFdBQWIsRUFBWjtBQUNEOztBQUVELFNBQU9GLFNBQVA7QUFDRDs7QUFFRCxTQUFTRyxnQ0FBVCxDQUEwQ2pCLFVBQTFDLEVBQXNEO0FBQ3BELE1BQU1rQixrQkFBa0IsR0FBRyxFQUEzQjtBQUFBLE1BQ01qQixLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQURkO0FBR0FELEVBQUFBLEtBQUssQ0FBQ2tCLE9BQU4sQ0FBYyxVQUFDQyxJQUFELEVBQVU7QUFDdEJ2QixJQUFBQSwwQkFBMEIsQ0FBQ3VCLElBQUQsRUFBT0Ysa0JBQVAsQ0FBMUI7QUFDRCxHQUZEO0FBSUEsU0FBT0Esa0JBQVA7QUFDRDs7QUFFRCxTQUFTRyxvQ0FBVCxDQUE4Q3JCLFVBQTlDLEVBQTBEO0FBQ3hELE1BQU1zQixzQkFBc0IsR0FBRyxFQUEvQjtBQUFBLE1BQ01yQixLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBWCxFQURkO0FBQUEsTUFFTUssU0FBUyxHQUFHYixLQUFLLENBQUNPLEtBQUQsQ0FGdkI7QUFBQSxNQUdNbUIsSUFBSSxHQUFHYixTQUhiLENBRHdELENBSWhDOztBQUV4QlQsRUFBQUEsOEJBQThCLENBQUNzQixJQUFELEVBQU9FLHNCQUFQLENBQTlCO0FBRUEsU0FBT0Esc0JBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Z6QixFQUFBQSxpQkFBaUIsRUFBakJBLGlCQURlO0FBRWZPLEVBQUFBLG1CQUFtQixFQUFuQkEsbUJBRmU7QUFHZk8sRUFBQUEscUJBQXFCLEVBQXJCQSxxQkFIZTtBQUlmSSxFQUFBQSxnQ0FBZ0MsRUFBaENBLGdDQUplO0FBS2ZJLEVBQUFBLG9DQUFvQyxFQUFwQ0E7QUFMZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZShcIm9jY2FtLXBhcnNlcnNcIiksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKFwibmVjZXNzYXJ5XCIpO1xuXG5jb25zdCByZWN1cnNpdmVQYXJ0VXRpbGl0aWVzID0gcmVxdWlyZShcIi4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0XCIpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcGFydFR5cGVzIH0gPSBwYXJzZXJzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXMsXG4gICAgICB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQgfSA9IHJlY3Vyc2l2ZVBhcnRVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvblVuYXJ5KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uVW5hcnkgPSAocGFydHNMZW5ndGggPT09IDEpO1xuXG4gIHJldHVybiBkZWZpbml0aW9uVW5hcnk7XG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlID0gZmlyc3RQYXJ0LmdldFR5cGUoKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUgPSAoZmlyc3RQYXJ0VHlwZSA9PT0gUnVsZU5hbWVQYXJ0VHlwZSksXG4gICAgICAgIGZpcnN0UGFydFJ1bGVOYW1lUGFydCA9IGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9ICFmaXJzdFBhcnRSdWxlTmFtZVBhcnQ7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25Db21wbGV4O1xufVxuXG5mdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZnVuY3Rpb24gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IFtdLFxuICAgICAgICBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0OyAvLy9cblxuICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0RlZmluaXRpb25VbmFyeSxcbiAgaXNEZWZpbml0aW9uQ29tcGxleCxcbiAgaXNEZWZpbml0aW9uTG9va0FoZWFkLFxuICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbixcbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uXG59O1xuIl19