"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _recursivePart = require("../utilities/recursivePart");
var first = _necessary.arrayUtilities.first;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part).isPartComplex(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartLookAhead = (0, _part).isPartLookAhead(firstPart), definitionLookAhead = firstPartLookAhead; ///
    return definitionLookAhead;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        return (0, _recursivePart).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _recursivePart).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXgsIGlzUGFydExvb2tBaGVhZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcmVjdXJzaXZlUGFydFwiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblVuYXJ5KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uVW5hcnkgPSAocGFydHNMZW5ndGggPT09IDEpO1xuXG4gIHJldHVybiBkZWZpbml0aW9uVW5hcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRMb29rQWhlYWQgPSBpc1BhcnRMb29rQWhlYWQoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkxvb2tBaGVhZCA9IGZpcnN0UGFydExvb2tBaGVhZDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25Mb29rQWhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSxcbiAgICAgICAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA9IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMubGVuZ3RoLFxuICAgICAgICBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQocGFydCwgcmVjdXJzaXZlUnVsZU5hbWVzKSk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgcGFydCA9IGZpcnN0UGFydDsgLy8vXG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMpO1xuXG4gIHJldHVybiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzO1xufVxuIl0sIm5hbWVzIjpbImlzRGVmaW5pdGlvblVuYXJ5IiwiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvbkxvb2tBaGVhZCIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJkZWZpbml0aW9uIiwicGFydHMiLCJnZXRQYXJ0cyIsInBhcnRzTGVuZ3RoIiwibGVuZ3RoIiwiZGVmaW5pdGlvblVuYXJ5IiwiZmlyc3RQYXJ0IiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsImZpcnN0UGFydExvb2tBaGVhZCIsImlzUGFydExvb2tBaGVhZCIsImRlZmluaXRpb25Mb29rQWhlYWQiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBU0dBLGlCQUFpQixHQUFqQkEsaUJBQWlCO1FBUWpCQyxtQkFBbUIsR0FBbkJBLG1CQUFtQjtRQVNu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