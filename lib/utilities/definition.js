"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionUnary: function() {
        return isDefinitionUnary;
    },
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionRecursive: function() {
        return isDefinitionRecursive;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _array = require("../utilities/array");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
function isDefinitionUnary(definition) {
    var definitionUnary = false;
    var parts = definition.getParts(), partsLength = parts.length;
    if (partsLength === 1) {
        var firstPart = (0, _array.first)(parts), part = firstPart, partUnary = (0, _part.isPartUnary)(part);
        definitionUnary = partUnary; ///
    }
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = (0, _array.first)(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionRecursive(definition) {
    var parts = definition.getParts(), partsRecursive = (0, _parts.arePartsRecursive)(parts), definitionRecursive = partsRecursive; ///
    return definitionRecursive;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), recursiveRuleNames = (0, _parts.recursiveRuleNamesFromParts)(parts);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var parts = definition.getParts(), leftRecursiveRuleNames = (0, _parts.leftRecursiveRuleNamesFromParts)(parts);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBpc1BhcnRVbmFyeSwgaXNQYXJ0Q29tcGxleCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydFwiO1xuaW1wb3J0IHsgYXJlUGFydHNSZWN1cnNpdmUsIGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSwgcmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uVW5hcnkoZGVmaW5pdGlvbikge1xuICBsZXQgZGVmaW5pdGlvblVuYXJ5ID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuXG4gIGlmIChwYXJ0c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgICBwYXJ0ID0gZmlyc3RQYXJ0LCAvLy9cbiAgICAgICAgICBwYXJ0VW5hcnkgPSBpc1BhcnRVbmFyeShwYXJ0KTtcblxuICAgIGRlZmluaXRpb25VbmFyeSA9IHBhcnRVbmFyeTsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIGRlZmluaXRpb25VbmFyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkNvbXBsZXgoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRDb21wbGV4ID0gaXNQYXJ0Q29tcGxleChmaXJzdFBhcnQpLFxuICAgICAgICBkZWZpbml0aW9uQ29tcGxleCA9IGZpcnN0UGFydENvbXBsZXg7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uQ29tcGxleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvblJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c1JlY3Vyc2l2ZSA9IGFyZVBhcnRzUmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvblJlY3Vyc2l2ZSA9IHBhcnRzUmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvblJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgcGFydHNMZWZ0UmVjdXJzaXZlID0gYXJlUGFydHNMZWZ0UmVjdXJzaXZlKHBhcnRzKSxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSBwYXJ0c0xlZnRSZWN1cnNpdmU7IC8vL1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lcyA9IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uVW5hcnkiLCJpc0RlZmluaXRpb25Db21wbGV4IiwiaXNEZWZpbml0aW9uUmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25VbmFyeSIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImZpcnN0UGFydCIsImZpcnN0IiwicGFydCIsInBhcnRVbmFyeSIsImlzUGFydFVuYXJ5IiwiZmlyc3RQYXJ0Q29tcGxleCIsImlzUGFydENvbXBsZXgiLCJkZWZpbml0aW9uQ29tcGxleCIsInBhcnRzUmVjdXJzaXZlIiwiYXJlUGFydHNSZWN1cnNpdmUiLCJkZWZpbml0aW9uUmVjdXJzaXZlIiwicGFydHNMZWZ0UmVjdXJzaXZlIiwiYXJlUGFydHNMZWZ0UmVjdXJzaXZlIiwiZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXMiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBTWdCQSxpQkFBaUI7ZUFBakJBOztJQWlCQUMsbUJBQW1CO2VBQW5CQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFRQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsZ0NBQWdDO2VBQWhDQTs7SUFPQUMsb0NBQW9DO2VBQXBDQTs7O3FCQXJETTtvQkFDcUI7cUJBQzRFO0FBRWhILFNBQVNMLGtCQUFrQk0sVUFBVSxFQUFFO0lBQzVDLElBQUlDLGtCQUFrQixLQUFLO0lBRTNCLElBQU1DLFFBQVFGLFdBQVdHLFFBQVEsSUFDM0JDLGNBQWNGLE1BQU1HLE1BQU07SUFFaEMsSUFBSUQsZ0JBQWdCLEdBQUc7UUFDckIsSUFBTUUsWUFBWUMsSUFBQUEsWUFBSyxFQUFDTCxRQUNsQk0sT0FBT0YsV0FDUEcsWUFBWUMsSUFBQUEsaUJBQVcsRUFBQ0Y7UUFFOUJQLGtCQUFrQlEsV0FBWSxHQUFHO0lBQ25DLENBQUM7SUFFRCxPQUFPUjtBQUNUO0FBRU8sU0FBU04sb0JBQW9CSyxVQUFVLEVBQUU7SUFDOUMsSUFBTUUsUUFBUUYsV0FBV0csUUFBUSxJQUMzQkcsWUFBWUMsSUFBQUEsWUFBSyxFQUFDTCxRQUNsQlMsbUJBQW1CQyxJQUFBQSxtQkFBYSxFQUFDTixZQUNqQ08sb0JBQW9CRixrQkFBa0IsR0FBRztJQUUvQyxPQUFPRTtBQUNUO0FBRU8sU0FBU2pCLHNCQUFzQkksVUFBVSxFQUFFO0lBQ2hELElBQU1FLFFBQVFGLFdBQVdHLFFBQVEsSUFDM0JXLGlCQUFpQkMsSUFBQUEsd0JBQWlCLEVBQUNiLFFBQ25DYyxzQkFBc0JGLGdCQUFnQixHQUFHO0lBRS9DLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTbkIsMEJBQTBCRyxVQUFVLEVBQUU7SUFDcEQsSUFBTUUsUUFBUUYsV0FBV0csUUFBUSxJQUMzQmMscUJBQXFCQyxJQUFBQSw0QkFBcUIsRUFBQ2hCLFFBQzNDaUIsMEJBQTBCRixvQkFBb0IsR0FBRztJQUV2RCxPQUFPRTtBQUNUO0FBRU8sU0FBU3JCLGlDQUFpQ0UsVUFBVSxFQUFFO0lBQzNELElBQU1FLFFBQVFGLFdBQVdHLFFBQVEsSUFDM0JpQixxQkFBcUJDLElBQUFBLGtDQUEyQixFQUFDbkI7SUFFdkQsT0FBT2tCO0FBQ1Q7QUFFTyxTQUFTckIscUNBQXFDQyxVQUFVLEVBQUU7SUFDL0QsSUFBTUUsUUFBUUYsV0FBV0csUUFBUSxJQUMzQm1CLHlCQUF5QkMsSUFBQUEsc0NBQStCLEVBQUNyQjtJQUUvRCxPQUFPb0I7QUFDVCJ9