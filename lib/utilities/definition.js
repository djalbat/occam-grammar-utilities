"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isDefinitionComplex: function() {
        return isDefinitionComplex;
    },
    isDefinitionLookAhead: function() {
        return isDefinitionLookAhead;
    },
    isDefinitionQualified: function() {
        return isDefinitionQualified;
    },
    isDefinitionLeftRecursive: function() {
        return isDefinitionLeftRecursive;
    },
    recursiveRuleNamesFromDefinition: function() {
        return recursiveRuleNamesFromDefinition;
    },
    leftRecursiveRuleNamesFromDefinition: function() {
        return leftRecursiveRuleNamesFromDefinition;
    }
});
var _necessary = require("necessary");
var _part = require("../utilities/part");
var _parts = require("../utilities/parts");
var first = _necessary.arrayUtilities.first;
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part.isPartComplex)(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartLookAhead = (0, _part.isPartLookAhead)(firstPart), definitionLookAhead = firstPartLookAhead; ///
    return definitionLookAhead;
}
function isDefinitionQualified(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartQualified = (0, _part.isPartQualified)(firstPart), definitionQualified = firstPartQualified; ///
    return definitionQualified;
}
function isDefinitionLeftRecursive(definition) {
    var parts = definition.getParts(), partsLeftRecursive = (0, _parts.arePartsLeftRecursive)(parts), definitionLeftRecursive = partsLeftRecursive; ///
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.recursiveRuleNamesFromParts)(parts, recursiveRuleNames);
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var parts = definition.getParts();
    (0, _parts.leftRecursiveRuleNamesFromParts)(parts, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXgsIGlzUGFydExvb2tBaGVhZCwgaXNQYXJ0UXVhbGlmaWVkIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXJ0XCI7XG5pbXBvcnQgeyBhcmVQYXJ0c0xlZnRSZWN1cnNpdmUsIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGFydHNcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Db21wbGV4KGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0Q29tcGxleCA9IGlzUGFydENvbXBsZXgoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkNvbXBsZXggPSBmaXJzdFBhcnRDb21wbGV4OyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRMb29rQWhlYWQgPSBpc1BhcnRMb29rQWhlYWQoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvbkxvb2tBaGVhZCA9IGZpcnN0UGFydExvb2tBaGVhZDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25Mb29rQWhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25RdWFsaWZpZWQoZGVmaW5pdGlvbikge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKSxcbiAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICBmaXJzdFBhcnRRdWFsaWZpZWQgPSBpc1BhcnRRdWFsaWZpZWQoZmlyc3RQYXJ0KSxcbiAgICAgICAgZGVmaW5pdGlvblF1YWxpZmllZCA9IGZpcnN0UGFydFF1YWxpZmllZDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25RdWFsaWZpZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIHBhcnRzTGVmdFJlY3Vyc2l2ZSA9IGFyZVBhcnRzTGVmdFJlY3Vyc2l2ZShwYXJ0cyksXG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gcGFydHNMZWZ0UmVjdXJzaXZlOyAvLy9cblxuICByZXR1cm4gZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSkge1xuICBjb25zdCBwYXJ0cyA9IGRlZmluaXRpb24uZ2V0UGFydHMoKTtcblxuICByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMocGFydHMsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIHJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbihkZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10pIHtcbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0cyhwYXJ0cywgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG5cbiAgcmV0dXJuIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXM7XG59XG4iXSwibmFtZXMiOlsiaXNEZWZpbml0aW9uQ29tcGxleCIsImlzRGVmaW5pdGlvbkxvb2tBaGVhZCIsImlzRGVmaW5pdGlvblF1YWxpZmllZCIsImlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJkZWZpbml0aW9uIiwicGFydHMiLCJnZXRQYXJ0cyIsImZpcnN0UGFydCIsImZpcnN0UGFydENvbXBsZXgiLCJpc1BhcnRDb21wbGV4IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJmaXJzdFBhcnRMb29rQWhlYWQiLCJpc1BhcnRMb29rQWhlYWQiLCJkZWZpbml0aW9uTG9va0FoZWFkIiwiZmlyc3RQYXJ0UXVhbGlmaWVkIiwiaXNQYXJ0UXVhbGlmaWVkIiwiZGVmaW5pdGlvblF1YWxpZmllZCIsInBhcnRzTGVmdFJlY3Vyc2l2ZSIsImFyZVBhcnRzTGVmdFJlY3Vyc2l2ZSIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnRzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNnQkEsbUJBQW1CO2VBQW5CQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFTQUMscUJBQXFCO2VBQXJCQTs7SUFTQUMseUJBQXlCO2VBQXpCQTs7SUFRQUMsZ0NBQWdDO2VBQWhDQTs7SUFRQUMsb0NBQW9DO2VBQXBDQTs7O3lCQWxEZTtvQkFFaUM7cUJBQ29DO0FBRXBHLElBQU0sQUFBRUMsUUFBVUMseUJBQWMsQ0FBeEJEO0FBRUQsU0FBU04sb0JBQW9CUSxVQUFVLEVBQUU7SUFDOUMsSUFBTUMsUUFBUUQsV0FBV0UsUUFBUSxJQUMzQkMsWUFBWUwsTUFBTUcsUUFDbEJHLG1CQUFtQkMsSUFBQUEsbUJBQWEsRUFBQ0YsWUFDakNHLG9CQUFvQkYsa0JBQWtCLEdBQUc7SUFFL0MsT0FBT0U7QUFDVDtBQUVPLFNBQVNiLHNCQUFzQk8sVUFBVSxFQUFFO0lBQ2hELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JDLFlBQVlMLE1BQU1HLFFBQ2xCTSxxQkFBcUJDLElBQUFBLHFCQUFlLEVBQUNMLFlBQ3JDTSxzQkFBc0JGLG9CQUFvQixHQUFHO0lBRW5ELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZixzQkFBc0JNLFVBQVUsRUFBRTtJQUNoRCxJQUFNQyxRQUFRRCxXQUFXRSxRQUFRLElBQzNCQyxZQUFZTCxNQUFNRyxRQUNsQlMscUJBQXFCQyxJQUFBQSxxQkFBZSxFQUFDUixZQUNyQ1Msc0JBQXNCRixvQkFBb0IsR0FBRztJQUVuRCxPQUFPRTtBQUNUO0FBRU8sU0FBU2pCLDBCQUEwQkssVUFBVSxFQUFFO0lBQ3BELElBQU1DLFFBQVFELFdBQVdFLFFBQVEsSUFDM0JXLHFCQUFxQkMsSUFBQUEsNEJBQXFCLEVBQUNiLFFBQzNDYywwQkFBMEJGLG9CQUFvQixHQUFHO0lBRXZELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTbkIsaUNBQWlDSSxVQUFVLEVBQTJCO1FBQXpCZ0IscUJBQUFBLGlFQUFxQixFQUFFO0lBQ2xGLElBQU1mLFFBQVFELFdBQVdFLFFBQVE7SUFFakNlLElBQUFBLGtDQUEyQixFQUFDaEIsT0FBT2U7SUFFbkMsT0FBT0E7QUFDVDtBQUVPLFNBQVNuQixxQ0FBcUNHLFVBQVUsRUFBK0I7UUFBN0JrQix5QkFBQUEsaUVBQXlCLEVBQUU7SUFDMUYsSUFBTWpCLFFBQVFELFdBQVdFLFFBQVE7SUFFakNpQixJQUFBQSxzQ0FBK0IsRUFBQ2xCLE9BQU9pQjtJQUV2QyxPQUFPQTtBQUNUIn0=