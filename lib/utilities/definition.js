"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLeftRecursive = isDefinitionLeftRecursive;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _necessary = require("necessary");
var _part = require("../utilities/part");
var first = _necessary.arrayUtilities.first;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartComplex = (0, _part).isPartComplex(firstPart), definitionComplex = firstPartComplex; ///
    return definitionComplex;
}
function isDefinitionLeftRecursive(definition) {
    var leftRecursiveRuleNames = leftRecursiveRuleNamesFromDefinition(definition), leftRecursiveRuleNamesLength = leftRecursiveRuleNames.length, definitionLeftRecursive = leftRecursiveRuleNamesLength > 0;
    return definitionLeftRecursive;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        return (0, _part).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _part).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGlzUGFydENvbXBsZXggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcbmltcG9ydCB7IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhcnRcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydENvbXBsZXggPSBpc1BhcnRDb21wbGV4KGZpcnN0UGFydCksXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gZmlyc3RQYXJ0Q29tcGxleDsgLy8vXG5cbiAgcmV0dXJuIGRlZmluaXRpb25Db21wbGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNMZW5ndGggPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUgPSAobGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCA+IDApO1xuXG4gIHJldHVybiBkZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgY29uc3QgcmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpO1xuXG4gIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcykpO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24iLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25VbmFyeSIsImZpcnN0UGFydCIsImZpcnN0UGFydENvbXBsZXgiLCJpc1BhcnRDb21wbGV4IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0xlbmd0aCIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBU0dBLGlCQUFpQixHQUFqQkEsaUJBQWlCO1FBUWpCQyxtQkFBbUIsR0FBbkJBLG1CQUFtQjtRQVNuQkMseUJBQXlCLEdBQXpCQSx5QkFBeUI7UUFRekJDLGdDQUFnQyxHQUFoQ0EsZ0NBQWdDO1FBU2hDQyxvQ0FBb0MsR0FBcENBLG9DQUFvQztBQXpDckIsSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBRVosSUFBQSxLQUFtQixXQUFuQixtQkFBbUIsQ0FBQTtBQUdqRCxJQUFNLEFBQUVDLEtBQUssR0FBS0MsVUFBYyxlQUFBLENBQXhCRCxLQUFLLEFBQW1CLEFBQUM7QUFFMUIsU0FBU0wsaUJBQWlCLENBQUNPLFVBQVUsRUFBRTtJQUM1QyxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCQyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csTUFBTSxFQUMxQkMsZUFBZSxHQUFJRixXQUFXLEtBQUssQ0FBQyxBQUFDLEFBQUM7SUFFNUMsT0FBT0UsZUFBZSxDQUFDO0NBQ3hCO0FBRU0sU0FBU1gsbUJBQW1CLENBQUNNLFVBQVUsRUFBRTtJQUM5QyxJQUFNQyxLQUFLLEdBQUdELFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLEVBQzdCSSxTQUFTLEdBQUdSLEtBQUssQ0FBQ0csS0FBSyxDQUFDLEVBQ3hCTSxnQkFBZ0IsR0FBR0MsQ0FBQUEsR0FBQUEsS0FBYSxBQUFXLENBQUEsY0FBWCxDQUFDRixTQUFTLENBQUMsRUFDM0NHLGlCQUFpQixHQUFHRixnQkFBZ0IsQUFBQyxFQUFDLEdBQUc7SUFFL0MsT0FBT0UsaUJBQWlCLENBQUM7Q0FDMUI7QUFFTSxTQUFTZCx5QkFBeUIsQ0FBQ0ssVUFBVSxFQUFFO0lBQ3BELElBQU1VLHNCQUFzQixHQUFHYixvQ0FBb0MsQ0FBQ0csVUFBVSxDQUFDLEVBQ3pFVyw0QkFBNEIsR0FBR0Qsc0JBQXNCLENBQUNOLE1BQU0sRUFDNURRLHVCQUF1QixHQUFJRCw0QkFBNEIsR0FBRyxDQUFDLEFBQUMsQUFBQztJQUVuRSxPQUFPQyx1QkFBdUIsQ0FBQztDQUNoQztBQUVNLFNBQVNoQixnQ0FBZ0MsQ0FBQ0ksVUFBVSxFQUFFO0lBQzNELElBQU1hLGtCQUFrQixHQUFHLEVBQUUsRUFDdkJaLEtBQUssR0FBR0QsVUFBVSxDQUFDRSxRQUFRLEVBQUUsQUFBQztJQUVwQ0QsS0FBSyxDQUFDYSxPQUFPLENBQUMsU0FBQ0MsSUFBSTtlQUFLQyxDQUFBQSxHQUFBQSxLQUEwQixBQUEwQixDQUFBLDJCQUExQixDQUFDRCxJQUFJLEVBQUVGLGtCQUFrQixDQUFDO0tBQUEsQ0FBQyxDQUFDO0lBRTlFLE9BQU9BLGtCQUFrQixDQUFDO0NBQzNCO0FBRU0sU0FBU2hCLG9DQUFvQyxDQUFDRyxVQUFVLEVBQUU7SUFDL0QsSUFBTVUsc0JBQXNCLEdBQUcsRUFBRSxFQUMzQlQsS0FBSyxHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxFQUM3QkksU0FBUyxHQUFHUixLQUFLLENBQUNHLEtBQUssQ0FBQyxFQUN4QmMsSUFBSSxHQUFHVCxTQUFTLEFBQUMsRUFBQyxHQUFHO0lBRTNCVyxDQUFBQSxHQUFBQSxLQUE4QixBQUE4QixDQUFBLCtCQUE5QixDQUFDRixJQUFJLEVBQUVMLHNCQUFzQixDQUFDLENBQUM7SUFFN0QsT0FBT0Esc0JBQXNCLENBQUM7Q0FDL0IifQ==