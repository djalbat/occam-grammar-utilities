"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _recursivePart = require("../utilities/recursivePart");
var first = _necessary.arrayUtilities.first, RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType, definitionComplex = !firstPartRuleNamePart;
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var lookAhead = false;
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///
    if (firstPartRuleNamePart) {
        var ruleNamePart = firstPart; ///
        lookAhead = ruleNamePart.isLookAhead();
    }
    return lookAhead;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        (0, _recursivePart).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _recursivePart).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFydFR5cGVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0XCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUsXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gIWZpcnN0UGFydFJ1bGVOYW1lUGFydDtcblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiUnVsZU5hbWVQYXJ0VHlwZSIsImRlZmluaXRpb24iLCJwYXJ0cyIsImdldFBhcnRzIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJkZWZpbml0aW9uVW5hcnkiLCJmaXJzdFBhcnQiLCJmaXJzdFBhcnRUeXBlIiwiZ2V0VHlwZSIsImZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlIiwiZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0IiwiZGVmaW5pdGlvbkNvbXBsZXgiLCJsb29rQWhlYWQiLCJydWxlTmFtZVBhcnQiLCJpc0xvb2tBaGVhZCIsInJlY3Vyc2l2ZVJ1bGVOYW1lcyIsImZvckVhY2giLCJwYXJ0IiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcyJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQVVJQSxpQkFBaUIsR0FBakJBLGlCQUFpQjtRQVFqQkMsbUJBQW1CLEdBQW5CQSxtQkFBbUI7UUFXbkJDLHFCQUFxQixHQUFyQkEscUJBQXFCO1FBa0JyQkMsZ0NBQWdDLEdBQWhDQSxnQ0FBZ0M7UUFX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