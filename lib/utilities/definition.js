"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isDefinitionUnary = isDefinitionUnary;
exports.isDefinitionComplex = isDefinitionComplex;
exports.isDefinitionLookAhead = isDefinitionLookAhead;
exports.recursiveRuleNamesFromDefinition = recursiveRuleNamesFromDefinition;
exports.leftRecursiveRuleNamesFromDefinition = leftRecursiveRuleNamesFromDefinition;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _recursivePart = require("../utilities/recursivePart");
var first = _necessary.arrayUtilities.first, RuleNamePartType = _occamParsers.partTypes.RuleNamePartType;
function isDefinitionUnary(definition) {
    var parts = definition.getParts(), partsLength = parts.length, definitionUnary = partsLength === 1;
    return definitionUnary;
}
function isDefinitionComplex(definition) {
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType, definitionComplex = !firstPartRuleNamePart;
    return definitionComplex;
}
function isDefinitionLookAhead(definition) {
    var lookAhead = false;
    var parts = definition.getParts(), firstPart = first(parts), firstPartType = firstPart.getType(), firstPartTypeRuleNamePartType = firstPartType === RuleNamePartType, firstPartRuleNamePart = firstPartTypeRuleNamePartType; ///
    if (firstPartRuleNamePart) {
        var ruleNamePart = firstPart; ///
        lookAhead = ruleNamePart.isLookAhead();
    }
    return lookAhead;
}
function recursiveRuleNamesFromDefinition(definition) {
    var recursiveRuleNames = [], parts = definition.getParts();
    parts.forEach(function(part) {
        (0, _recursivePart).recursiveRuleNamesFromPart(part, recursiveRuleNames);
    });
    return recursiveRuleNames;
}
function leftRecursiveRuleNamesFromDefinition(definition) {
    var leftRecursiveRuleNames = [], parts = definition.getParts(), firstPart = first(parts), part = firstPart; ///
    (0, _recursivePart).leftRecursiveRuleNamesFromPart(part, leftRecursiveRuleNames);
    return leftRecursiveRuleNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFydFR5cGVzIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyByZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCwgbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWN1cnNpdmVQYXJ0XCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBSdWxlTmFtZVBhcnRUeXBlIH0gPSBwYXJ0VHlwZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25VbmFyeShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aCxcbiAgICAgICAgZGVmaW5pdGlvblVuYXJ5ID0gKHBhcnRzTGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gZGVmaW5pdGlvblVuYXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uQ29tcGxleChkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIGZpcnN0UGFydFR5cGUgPSBmaXJzdFBhcnQuZ2V0VHlwZSgpLFxuICAgICAgICBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZSA9IChmaXJzdFBhcnRUeXBlID09PSBSdWxlTmFtZVBhcnRUeXBlKSxcbiAgICAgICAgZmlyc3RQYXJ0UnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUsXG4gICAgICAgIGRlZmluaXRpb25Db21wbGV4ID0gIWZpcnN0UGFydFJ1bGVOYW1lUGFydDtcblxuICByZXR1cm4gZGVmaW5pdGlvbkNvbXBsZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Mb29rQWhlYWQoZGVmaW5pdGlvbikge1xuICBsZXQgbG9va0FoZWFkID0gZmFsc2U7XG5cbiAgY29uc3QgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCksXG4gICAgICAgIGZpcnN0UGFydCA9IGZpcnN0KHBhcnRzKSxcbiAgICAgICAgZmlyc3RQYXJ0VHlwZSA9IGZpcnN0UGFydC5nZXRUeXBlKCksXG4gICAgICAgIGZpcnN0UGFydFR5cGVSdWxlTmFtZVBhcnRUeXBlID0gKGZpcnN0UGFydFR5cGUgPT09IFJ1bGVOYW1lUGFydFR5cGUpLFxuICAgICAgICBmaXJzdFBhcnRSdWxlTmFtZVBhcnQgPSBmaXJzdFBhcnRUeXBlUnVsZU5hbWVQYXJ0VHlwZTsgIC8vL1xuXG4gIGlmIChmaXJzdFBhcnRSdWxlTmFtZVBhcnQpIHtcbiAgICBjb25zdCBydWxlTmFtZVBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gICAgbG9va0FoZWFkID0gcnVsZU5hbWVQYXJ0LmlzTG9va0FoZWFkKCk7XG4gIH1cblxuICByZXR1cm4gbG9va0FoZWFkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCByZWN1cnNpdmVSdWxlTmFtZXMgPSBbXSxcbiAgICAgICAgcGFydHMgPSBkZWZpbml0aW9uLmdldFBhcnRzKCk7XG5cbiAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgIHJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21QYXJ0KHBhcnQsIHJlY3Vyc2l2ZVJ1bGVOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWN1cnNpdmVSdWxlTmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzID0gW10sXG4gICAgICAgIHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdChwYXJ0cyksXG4gICAgICAgIHBhcnQgPSBmaXJzdFBhcnQ7IC8vL1xuXG4gIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydChwYXJ0LCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICByZXR1cm4gbGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lcztcbn1cbiJdLCJuYW1lcyI6WyJpc0RlZmluaXRpb25VbmFyeSIsImlzRGVmaW5pdGlvbkNvbXBsZXgiLCJpc0RlZmluaXRpb25Mb29rQWhlYWQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJSdWxlTmFtZVBhcnRUeXBlIiwicGFydFR5cGVzIiwiZGVmaW5pdGlvbiIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImxlbmd0aCIsImRlZmluaXRpb25VbmFyeSIsImZpcnN0UGFydCIsImZpcnN0UGFydFR5cGUiLCJnZXRUeXBlIiwiZmlyc3RQYXJ0VHlwZVJ1bGVOYW1lUGFydFR5cGUiLCJmaXJzdFBhcnRSdWxlTmFtZVBhcnQiLCJkZWZpbml0aW9uQ29tcGxleCIsImxvb2tBaGVhZCIsInJ1bGVOYW1lUGFydCIsImlzTG9va0FoZWFkIiwicmVjdXJzaXZlUnVsZU5hbWVzIiwiZm9yRWFjaCIsInBhcnQiLCJyZWN1cnNpdmVSdWxlTmFtZXNGcm9tUGFydCIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZXMiLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbVBhcnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVVHQSxpQkFBaUIsR0FBakJB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