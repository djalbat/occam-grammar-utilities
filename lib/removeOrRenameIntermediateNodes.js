"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = removeOrRenameIntermediateNodes;

var _reduced = _interopRequireDefault(require("./node/reduced"));

var _repeated = _interopRequireDefault(require("./node/repeated"));

var _class = require("./utilities/class");

var _ruleName3 = require("./utilities/ruleName");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function removeOrRenameIntermediateNodes(node) {
  removeOrRenameReducedNodes(node);
  removeRepeatedNodes(node);
}

function removeRepeatedNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();
    childNodes = removeRepeatedChildNodes(childNodes);
    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRepeatedChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRepeatedNode = (0, _class.isInstanceOf)(childNode, _repeated["default"]);

    if (childNodeRepeatedNode) {
      var childNodeChildNodes = childNode.getChildNodes();
      childNodeChildNodes = removeRepeatedChildNodes(childNodeChildNodes);
      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRepeatedNodes(childNode);
      childNodes.push(childNode);
    }

    return childNodes;
  }, []);
  return childNodes;
}

function removeOrRenameReducedNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();
    var childNodes = nonTerminalNode.getChildNodes();
    childNodes = removeOrRenameReducedChildNodes(childNodes, ruleName);
    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameReducedChildNodes(childNodes, ruleName) {
  var childNodesLength = childNodes.length;
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeReducedNode = (0, _class.isInstanceOf)(childNode, _reduced["default"]);

    if (childNodeReducedNode) {
      var reducedNode = childNode,
          ///
      reducedNodeRuleName = reducedNode.getRuleName(),
          reducedRuleName = reducedNodeRuleName,
          ///
      reducedRuleNameMatchesRuleName = (0, _ruleName3.checkReducedRuleNameMatchesRuleName)(reducedRuleName, ruleName);

      if (reducedRuleNameMatchesRuleName) {
        if (childNodesLength > 1) {
          var _ruleName = (0, _ruleName3.ruleNameFromReducedRuleName)(reducedRuleName);

          childNode.setRuleName(_ruleName);
          removeOrRenameReducedNodes(childNode);
          childNodes.push(childNode);
        } else {
          var childNodeChildNodes = childNode.getChildNodes();
          childNodeChildNodes = removeOrRenameReducedChildNodes(childNodeChildNodes);
          childNodes = childNodes.concat(childNodeChildNodes);
        }
      } else {
        var _ruleName2 = (0, _ruleName3.ruleNameFromReducedRuleName)(reducedRuleName);

        childNode.setRuleName(_ruleName2);
        removeOrRenameReducedNodes(childNode);
        childNodes.push(childNode);
      }
    } else {
      removeOrRenameReducedNodes(childNode);
      childNodes.push(childNode);
    }

    return childNodes;
  }, []);
  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,