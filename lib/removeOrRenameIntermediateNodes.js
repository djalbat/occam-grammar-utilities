'use strict';

var ReducedNode = require('./node/reduced'),
    RepeatedNode = require('./node/repeated'),
    ruleNameUtilities = require('./utilities/ruleName');

var ruleNameFromReducedRuleName = ruleNameUtilities.ruleNameFromReducedRuleName,
    checkReducedRuleNameMatchesRuleName = ruleNameUtilities.checkReducedRuleNameMatchesRuleName;


function removeOrRenameIntermediateNodes(node) {
  removeOrRenameReducedNodes(node);

  removeRepeatedNodes(node);
}

module.exports = removeOrRenameIntermediateNodes;

function removeRepeatedNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node; ///

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeRepeatedChildNodes(childNodes);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeRepeatedChildNodes(childNodes) {
  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeRepeatedNode = childNode instanceof RepeatedNode;

    if (childNodeRepeatedNode) {
      var childNodeChildNodes = childNode.getChildNodes();

      childNodeChildNodes = removeRepeatedChildNodes(childNodeChildNodes);

      childNodes = childNodes.concat(childNodeChildNodes);
    } else {
      removeRepeatedNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}

function removeOrRenameReducedNodes(node) {
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName();

    var childNodes = nonTerminalNode.getChildNodes();

    childNodes = removeOrRenameReducedChildNodes(childNodes, ruleName);

    nonTerminalNode.setChildNodes(childNodes);
  }
}

function removeOrRenameReducedChildNodes(childNodes, ruleName) {
  var childNodesLength = childNodes.length;

  childNodes = childNodes.reduce(function (childNodes, childNode) {
    var childNodeReducedNode = childNode instanceof ReducedNode;

    if (childNodeReducedNode) {
      var reducedNode = childNode,
          ///
      reducedNodeRuleName = reducedNode.getRuleName(),
          reducedRuleName = reducedNodeRuleName,
          ///
      reducedRuleNameMatchesRuleName = checkReducedRuleNameMatchesRuleName(reducedRuleName, ruleName);

      if (reducedRuleNameMatchesRuleName) {
        if (childNodesLength > 1) {
          var _ruleName = ruleNameFromReducedRuleName(reducedRuleName);

          childNode.setRuleName(_ruleName);

          removeOrRenameReducedNodes(childNode);

          childNodes.push(childNode);
        } else {
          var childNodeChildNodes = childNode.getChildNodes();

          childNodeChildNodes = removeOrRenameReducedChildNodes(childNodeChildNodes);

          childNodes = childNodes.concat(childNodeChildNodes);
        }
      } else {
        var _ruleName2 = ruleNameFromReducedRuleName(reducedRuleName);

        childNode.setRuleName(_ruleName2);

        removeOrRenameReducedNodes(childNode);

        childNodes.push(childNode);
      }
    } else {
      removeOrRenameReducedNodes(childNode);

      childNodes.push(childNode);
    }

    return childNodes;
  }, []);

  return childNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,