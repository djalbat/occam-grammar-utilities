"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeOrRenameIntermediateNodes;
var _reduced = _interopRequireDefault(require("./node/reduced"));
var _repeated = _interopRequireDefault(require("./node/repeated"));
var _class = require("./utilities/class");
var _ruleName = require("./utilities/ruleName");
function removeOrRenameIntermediateNodes(node) {
    removeOrRenameReducedNodes(node);
    removeRepeatedNodes(node);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function removeRepeatedNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node; ///
        var childNodes = nonTerminalNode.getChildNodes();
        childNodes = removeRepeatedChildNodes(childNodes);
        nonTerminalNode.setChildNodes(childNodes);
    }
}
function removeRepeatedChildNodes(childNodes1) {
    childNodes1 = childNodes1.reduce(function(childNodes, childNode) {
        var childNodeRepeatedNode = (0, _class).isInstanceOf(childNode, _repeated.default);
        if (childNodeRepeatedNode) {
            var childNodeChildNodes = childNode.getChildNodes();
            childNodeChildNodes = removeRepeatedChildNodes(childNodeChildNodes);
            childNodes = childNodes.concat(childNodeChildNodes);
        } else {
            removeRepeatedNodes(childNode);
            childNodes.push(childNode);
        }
        return childNodes;
    }, []);
    return childNodes1;
}
function removeOrRenameReducedNodes(node) {
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName();
        var childNodes = nonTerminalNode.getChildNodes();
        childNodes = removeOrRenameReducedChildNodes(childNodes, ruleName);
        nonTerminalNode.setChildNodes(childNodes);
    }
}
function removeOrRenameReducedChildNodes(childNodes2, ruleName) {
    var childNodesLength = childNodes2.length;
    childNodes2 = childNodes2.reduce(function(childNodes, childNode) {
        var childNodeReducedNode = (0, _class).isInstanceOf(childNode, _reduced.default);
        if (childNodeReducedNode) {
            var reducedNode = childNode, reducedNodeRuleName = reducedNode.getRuleName(), reducedRuleName = reducedNodeRuleName, reducedRuleNameMatchesRuleName = (0, _ruleName).checkReducedRuleNameMatchesRuleName(reducedRuleName, ruleName);
            if (reducedRuleNameMatchesRuleName) {
                if (childNodesLength > 1) {
                    var _$ruleName = (0, _ruleName).ruleNameFromReducedRuleName(reducedRuleName);
                    childNode.setRuleName(_$ruleName);
                    removeOrRenameReducedNodes(childNode);
                    childNodes.push(childNode);
                } else {
                    var childNodeChildNodes = childNode.getChildNodes();
                    childNodeChildNodes = removeOrRenameReducedChildNodes(childNodeChildNodes);
                    childNodes = childNodes.concat(childNodeChildNodes);
                }
            } else {
                var _$ruleName1 = (0, _ruleName).ruleNameFromReducedRuleName(reducedRuleName);
                childNode.setRuleName(_$ruleName1);
                removeOrRenameReducedNodes(childNode);
                childNodes.push(childNode);
            }
        } else {
            removeOrRenameReducedNodes(childNode);
            childNodes.push(childNode);
        }
        return childNodes;
    }, []);
    return childNodes2;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVPclJlbmFtZUludGVybWVkaWF0ZU5vZGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmVkdWNlZE5vZGUgZnJvbSBcIi4vbm9kZS9yZWR1Y2VkXCI7XG5pbXBvcnQgUmVwZWF0ZWROb2RlIGZyb20gXCIuL25vZGUvcmVwZWF0ZWRcIjtcblxuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NsYXNzXCI7XG5pbXBvcnQgeyBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUsIGNoZWNrUmVkdWNlZFJ1bGVOYW1lTWF0Y2hlc1J1bGVOYW1lIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3J1bGVOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZU9yUmVuYW1lSW50ZXJtZWRpYXRlTm9kZXMobm9kZSkge1xuICByZW1vdmVPclJlbmFtZVJlZHVjZWROb2Rlcyhub2RlKTtcblxuICByZW1vdmVSZXBlYXRlZE5vZGVzKG5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXBlYXRlZE5vZGVzKG5vZGUpIHtcbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGU7IC8vL1xuXG4gICAgbGV0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgY2hpbGROb2RlcyA9IHJlbW92ZVJlcGVhdGVkQ2hpbGROb2RlcyhjaGlsZE5vZGVzKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZS5zZXRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVwZWF0ZWRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpIHtcbiAgY2hpbGROb2RlcyA9IGNoaWxkTm9kZXMucmVkdWNlKChjaGlsZE5vZGVzLCBjaGlsZE5vZGUpID0+IHtcbiAgICBjb25zdCBjaGlsZE5vZGVSZXBlYXRlZE5vZGUgPSBpc0luc3RhbmNlT2YoY2hpbGROb2RlLCBSZXBlYXRlZE5vZGUpO1xuXG4gICAgaWYgKGNoaWxkTm9kZVJlcGVhdGVkTm9kZSkge1xuICAgICAgbGV0IGNoaWxkTm9kZUNoaWxkTm9kZXMgPSBjaGlsZE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgICBjaGlsZE5vZGVDaGlsZE5vZGVzID0gcmVtb3ZlUmVwZWF0ZWRDaGlsZE5vZGVzKGNoaWxkTm9kZUNoaWxkTm9kZXMpO1xuXG4gICAgICBjaGlsZE5vZGVzID0gY2hpbGROb2Rlcy5jb25jYXQoY2hpbGROb2RlQ2hpbGROb2Rlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZVJlcGVhdGVkTm9kZXMoY2hpbGROb2RlKTtcblxuICAgICAgY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkTm9kZXM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gY2hpbGROb2Rlcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkTm9kZXMobm9kZSkge1xuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIGxldCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgIGNoaWxkTm9kZXMgPSByZW1vdmVPclJlbmFtZVJlZHVjZWRDaGlsZE5vZGVzKGNoaWxkTm9kZXMsIHJ1bGVOYW1lKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZS5zZXRDaGlsZE5vZGVzKGNoaWxkTm9kZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkQ2hpbGROb2RlcyhjaGlsZE5vZGVzLCBydWxlTmFtZSkge1xuICBjb25zdCBjaGlsZE5vZGVzTGVuZ3RoID0gY2hpbGROb2Rlcy5sZW5ndGg7XG5cbiAgY2hpbGROb2RlcyA9IGNoaWxkTm9kZXMucmVkdWNlKChjaGlsZE5vZGVzLCBjaGlsZE5vZGUpID0+IHtcbiAgICBjb25zdCBjaGlsZE5vZGVSZWR1Y2VkTm9kZSA9IGlzSW5zdGFuY2VPZihjaGlsZE5vZGUsIFJlZHVjZWROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGVSZWR1Y2VkTm9kZSkge1xuICAgICAgY29uc3QgcmVkdWNlZE5vZGUgPSBjaGlsZE5vZGUsIC8vL1xuICAgICAgICAgICAgcmVkdWNlZE5vZGVSdWxlTmFtZSA9IHJlZHVjZWROb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgICByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkTm9kZVJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICByZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUgPSBjaGVja1JlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUsIHJ1bGVOYW1lKTtcblxuICAgICAgaWYgKHJlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSkge1xuICAgICAgICBpZiAoY2hpbGROb2Rlc0xlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZShyZWR1Y2VkUnVsZU5hbWUpO1xuXG4gICAgICAgICAgY2hpbGROb2RlLnNldFJ1bGVOYW1lKHJ1bGVOYW1lKTtcblxuICAgICAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgICAgICBjaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY2hpbGROb2RlQ2hpbGROb2RlcyA9IGNoaWxkTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgICAgICBjaGlsZE5vZGVDaGlsZE5vZGVzID0gcmVtb3ZlT3JSZW5hbWVSZWR1Y2VkQ2hpbGROb2RlcyhjaGlsZE5vZGVDaGlsZE5vZGVzKTtcblxuICAgICAgICAgIGNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLmNvbmNhdChjaGlsZE5vZGVDaGlsZE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZUZyb21SZWR1Y2VkUnVsZU5hbWUocmVkdWNlZFJ1bGVOYW1lKTtcblxuICAgICAgICBjaGlsZE5vZGUuc2V0UnVsZU5hbWUocnVsZU5hbWUpO1xuXG4gICAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgICAgY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU9yUmVuYW1lUmVkdWNlZE5vZGVzKGNoaWxkTm9kZSk7XG5cbiAgICAgIGNoaWxkTm9kZXMucHVzaChjaGlsZE5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZE5vZGVzO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGNoaWxkTm9kZXM7XG59XG4iXSwibmFtZXMiOlsicmVtb3ZlT3JSZW5hbWVJbnRlcm1lZGlhdGVOb2RlcyIsIm5vZGUiLCJyZW1vdmVPclJlbmFtZVJlZHVjZWROb2RlcyIsInJlbW92ZVJlcGVhdGVkTm9kZXMiLCJub2RlTm9uVGVybWluYWxOb2RlIiwiaXNOb25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsInJlbW92ZVJlcGVhdGVkQ2hpbGROb2RlcyIsInNldENoaWxkTm9kZXMiLCJyZWR1Y2UiLCJjaGlsZE5vZGUiLCJjaGlsZE5vZGVSZXBlYXRlZE5vZGUiLCJpc0luc3RhbmNlT2YiLCJSZXBlYXRlZE5vZGUiLCJjaGlsZE5vZGVDaGlsZE5vZGVzIiwiY29uY2F0IiwicHVzaCIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJyZW1vdmVPclJlbmFtZVJlZHVjZWRDaGlsZE5vZGVzIiwiY2hpbGROb2Rlc0xlbmd0aCIsImxlbmd0aCIsImNoaWxkTm9kZVJlZHVjZWROb2RlIiwiUmVkdWNlZE5vZGUiLCJyZWR1Y2VkTm9kZSIsInJlZHVjZWROb2RlUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZU5hbWVNYXRjaGVzUnVsZU5hbWUiLCJjaGVja1JlZHVjZWRSdWxlTmFtZU1hdGNoZXNSdWxlTmFtZSIsInJ1bGVOYW1lRnJvbVJlZHVjZWRSdWxlTmFtZSIsInNldFJ1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZLFdBQUEsQ0FBQzs7O0VBQWI7a0JBUXdCQSwrQkFBK0IsQUFSdkQ7QUFFd0IsR0FBZ0IsQ0FBaEIsUUFBZ0I7QUFDZixHQUFpQixDQUFqQixTQUFpQjtBQUViLEdBQW1CLENBQW5CLE1BQW1CO0FBQ2lDLEdBQXNCLENBQXRCLFNBQXNCO1NBRS9FQSwrQkFBK0IsQ0FBQ0MsSUFBSSxFQUFFLENBQUM7SUFDN0RDLDBCQUEwQixDQUFDRCxJQUFJLENBQUMsQ0FBQztJQUVqQ0UsbUJBQW1CLENBQUNGLElBQUksQ0FBQyxDQUFDO0FBQzVCLENBQUM7Ozs7OztTQUVRRSxtQkFBbUIsQ0FBQ0YsSUFBSSxFQUFFLENBQUM7SUFDbEMsR0FBSyxDQUFDRyxtQkFBbUIsR0FBR0gsSUFBSSxDQUFDSSxpQkFBaUI7SUFFbEQsRUFBRSxFQUFFRCxtQkFBbUIsRUFBRSxDQUFDO1FBQ3hCLEdBQUssQ0FBQ0UsZUFBZSxHQUFHTCxJQUFJLEVBQUUsRUFBRyxBQUFILENBQUc7UUFFakMsR0FBRyxDQUFDTSxVQUFVLEdBQUdELGVBQWUsQ0FBQ0UsYUFBYTtRQUU5Q0QsVUFBVSxHQUFHRSx3QkFBd0Is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