"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createReducedRules;
    }
});
var _reduced = /*#__PURE__*/ _interop_require_default(require("./rule/reduced"));
var _necessary = require("necessary");
var _rule = require("./utilities/rule");
var _ruleNames = require("./utilities/ruleNames");
var _ruleName = require("./utilities/ruleName");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var COMMAN_CHARACTER = _necessary.characters.COMMAN_CHARACTER;
function createReducedRules(ruleMap, directedGraph) {
    var cycles = directedGraph.findCycles(), ruleNames = (0, _ruleNames.ruleNamesFromCycles)(cycles);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName], reducedRule = _reduced.default.fromRule(rule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
    });
    cycles.forEach(function(cycle) {
        var cycleEmpty = isCycleEmpty(cycle, ruleMap);
        if (cycleEmpty) {
            var ruleNames = cycle, ruleNamesString = ruleNames.join(COMMAN_CHARACTER);
            throw new Error("All of the reduced rules in the '".concat(ruleNamesString, "' cycle are empty."));
        }
    });
}
function isCycleEmpty(cycle, ruleMap) {
    var ruleNames = cycle, reducedRules = ruleNames.map(function(ruleName) {
        var reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName), reducedRule = ruleMap[reducedRuleName];
        return reducedRule;
    }), reducedRulesEmpty = reducedRules.every(function(reducedRule) {
        var reducedRuleEmpty = (0, _rule.isRuleEmpty)(reducedRule);
        if (reducedRuleEmpty) {
            return true;
        }
    }), cycleEmpty = reducedRulesEmpty; ///
    return cycleEmpty;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVSZWR1Y2VkUnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWRcIjtcblxuaW1wb3J0IHsgY2hhcmFjdGVycyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgaXNSdWxlRW1wdHkgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZVwiO1xuaW1wb3J0IHsgcnVsZU5hbWVzRnJvbUN5Y2xlcyB9IGZyb20gXCIuL3V0aWxpdGllcy9ydWxlTmFtZXNcIjtcbmltcG9ydCB7IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSB9IGZyb20gXCIuL3V0aWxpdGllcy9ydWxlTmFtZVwiO1xuXG5jb25zdCB7IENPTU1BTl9DSEFSQUNURVIgfSA9IGNoYXJhY3RlcnM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZWRSdWxlcyhydWxlTWFwLCBkaXJlY3RlZEdyYXBoKSB7XG4gIGNvbnN0IGN5Y2xlcyA9IGRpcmVjdGVkR3JhcGguZmluZEN5Y2xlcygpLFxuICAgICAgICBydWxlTmFtZXMgPSBydWxlTmFtZXNGcm9tQ3ljbGVzKGN5Y2xlcyk7XG5cbiAgcnVsZU5hbWVzLmZvckVhY2goKHJ1bGVOYW1lKSA9PiB7XG4gICAgY29uc3QgcnVsZSA9IHJ1bGVNYXBbcnVsZU5hbWVdLFxuICAgICAgICAgIHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbVJ1bGUocnVsZSksXG4gICAgICAgICAgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtyZWR1Y2VkUnVsZU5hbWVdID0gcmVkdWNlZFJ1bGU7XG4gIH0pO1xuXG4gIGN5Y2xlcy5mb3JFYWNoKChjeWNsZSkgPT4ge1xuICAgIGNvbnN0IGN5Y2xlRW1wdHkgPSBpc0N5Y2xlRW1wdHkoY3ljbGUsIHJ1bGVNYXApO1xuXG4gICAgaWYgKGN5Y2xlRW1wdHkpIHtcbiAgICAgIGNvbnN0IHJ1bGVOYW1lcyA9IGN5Y2xlLFxuICAgICAgICAgICAgcnVsZU5hbWVzU3RyaW5nID0gcnVsZU5hbWVzLmpvaW4oQ09NTUFOX0NIQVJBQ1RFUik7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgQWxsIG9mIHRoZSByZWR1Y2VkIHJ1bGVzIGluIHRoZSAnJHtydWxlTmFtZXNTdHJpbmd9JyBjeWNsZSBhcmUgZW1wdHkuYCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNDeWNsZUVtcHR5KGN5Y2xlLCBydWxlTWFwKSB7XG4gIGNvbnN0IHJ1bGVOYW1lcyA9IGN5Y2xlLCAgLy8vXG4gICAgICAgIHJlZHVjZWRSdWxlcyA9IHJ1bGVOYW1lcy5tYXAoKHJ1bGVOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSxcbiAgICAgICAgICAgICAgICByZWR1Y2VkUnVsZSA9IHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXTtcblxuICAgICAgICAgIHJldHVybiByZWR1Y2VkUnVsZTtcbiAgICAgICAgfSksXG4gICAgICAgIHJlZHVjZWRSdWxlc0VtcHR5ID0gcmVkdWNlZFJ1bGVzLmV2ZXJ5KChyZWR1Y2VkUnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRSdWxlRW1wdHkgPSBpc1J1bGVFbXB0eShyZWR1Y2VkUnVsZSk7XG5cbiAgICAgICAgICBpZiAocmVkdWNlZFJ1bGVFbXB0eSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgY3ljbGVFbXB0eSA9IHJlZHVjZWRSdWxlc0VtcHR5OyAvLy9cblxuICByZXR1cm4gY3ljbGVFbXB0eTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVSZWR1Y2VkUnVsZXMiLCJDT01NQU5fQ0hBUkFDVEVSIiwiY2hhcmFjdGVycyIsInJ1bGVNYXAiLCJkaXJlY3RlZEdyYXBoIiwiY3ljbGVzIiwiZmluZEN5Y2xlcyIsInJ1bGVOYW1lcyIsInJ1bGVOYW1lc0Zyb21DeWNsZXMiLCJmb3JFYWNoIiwicnVsZU5hbWUiLCJydWxlIiwicmVkdWNlZFJ1bGUiLCJSZWR1Y2VkUnVsZSIsImZyb21SdWxlIiwicmVkdWNlZFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImN5Y2xlIiwiY3ljbGVFbXB0eSIsImlzQ3ljbGVFbXB0eSIsInJ1bGVOYW1lc1N0cmluZyIsImpvaW4iLCJFcnJvciIsInJlZHVjZWRSdWxlcyIsIm1hcCIsInJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInJlZHVjZWRSdWxlc0VtcHR5IiwiZXZlcnkiLCJyZWR1Y2VkUnVsZUVtcHR5IiwiaXNSdWxlRW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVlBOzs7ZUFBd0JBOzs7OERBVkE7eUJBRUc7b0JBRUM7eUJBQ1E7d0JBQ1E7Ozs7OztBQUU1QyxJQUFNLEFBQUVDLG1CQUFxQkMscUJBQVUsQ0FBL0JEO0FBRU8sU0FBU0QsbUJBQW1CRyxPQUFPLEVBQUVDLGFBQWEsRUFBRTtJQUNqRSxJQUFNQyxTQUFTRCxjQUFjRSxVQUFVLElBQ2pDQyxZQUFZQyxJQUFBQSw4QkFBbUIsRUFBQ0g7SUFFdENFLFVBQVVFLE9BQU8sQ0FBQyxTQUFDQyxVQUFhO1FBQzlCLElBQU1DLE9BQU9SLE9BQU8sQ0FBQ08sU0FBUyxFQUN4QkUsY0FBY0MsZ0JBQVcsQ0FBQ0MsUUFBUSxDQUFDSCxPQUNuQ0ksa0JBQWtCSCxZQUFZSSxPQUFPO1FBRTNDYixPQUFPLENBQUNZLGdCQUFnQixHQUFHSDtJQUM3QjtJQUVBUCxPQUFPSSxPQUFPLENBQUMsU0FBQ1EsT0FBVTtRQUN4QixJQUFNQyxhQUFhQyxhQUFhRixPQUFPZDtRQUV2QyxJQUFJZSxZQUFZO1lBQ2QsSUFBTVgsWUFBWVUsT0FDWkcsa0JBQWtCYixVQUFVYyxJQUFJLENBQUNwQjtZQUV2QyxNQUFNLElBQUlxQixNQUFNLEFBQUMsb0NBQW1ELE9BQWhCRixpQkFBZ0IsdUJBQXFCO1FBQzNGLENBQUM7SUFDSDtBQUNGO0FBRUEsU0FBU0QsYUFBYUYsS0FBSyxFQUFFZCxPQUFPLEVBQUU7SUFDcEMsSUFBTUksWUFBWVUsT0FDWk0sZUFBZWhCLFVBQVVpQixHQUFHLENBQUMsU0FBQ2QsVUFBYTtRQUN6QyxJQUFNSyxrQkFBa0JVLElBQUFBLHFDQUEyQixFQUFDZixXQUM5Q0UsY0FBY1QsT0FBTyxDQUFDWSxnQkFBZ0I7UUFFNUMsT0FBT0g7SUFDVCxJQUNBYyxvQkFBb0JILGFBQWFJLEtBQUssQ0FBQyxTQUFDZixhQUFnQjtRQUN0RCxJQUFNZ0IsbUJBQW1CQyxJQUFBQSxpQkFBVyxFQUFDakI7UUFFckMsSUFBSWdCLGtCQUFrQjtZQUNwQixPQUFPLElBQUk7UUFDYixDQUFDO0lBQ0gsSUFDQVYsYUFBYVEsbUJBQW1CLEdBQUc7SUFFekMsT0FBT1I7QUFDVCJ9