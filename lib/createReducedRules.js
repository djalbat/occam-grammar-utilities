"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createReducedRules;
    }
});
var _reduced = /*#__PURE__*/ _interop_require_default(require("./rule/reduced"));
var _necessary = require("necessary");
var _rule = require("./utilities/rule");
var _directedGraph = require("./utilities/directedGraph");
var _ruleName = require("./utilities/ruleName");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var COMMAN_CHARACTER = _necessary.characters.COMMAN_CHARACTER;
function createReducedRules(ruleMap, directedGraph) {
    var cycles = directedGraph.findCycles(), ruleNames = (0, _directedGraph.ruleNamesFromCycles)(cycles);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName], reducedRule = _reduced.default.fromRule(rule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
    });
    cycles.forEach(function(cycle) {
        var cycleEmpty = isCycleEmpty(cycle, ruleMap);
        if (cycleEmpty) {
            var ruleNames = cycle, ruleNamesString = ruleNames.join(COMMAN_CHARACTER);
            throw new Error("All of the reduced rules in the ".concat(ruleNamesString, " cycle are empty."));
        }
    });
}
function isCycleEmpty(cycle, ruleMap) {
    var ruleNames = cycle, reducedRules = ruleNames.map(function(ruleName) {
        var reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName), reducedRule = ruleMap[reducedRuleName];
        return reducedRule;
    }), reducedRulesEmpty = reducedRules.every(function(reducedRule) {
        var reducedRuleEmpty = (0, _rule.isRuleEmpty)(reducedRule);
        if (reducedRuleEmpty) {
            return true;
        }
    }), cycleEmpty = reducedRulesEmpty; ///
    return cycleEmpty;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVSZWR1Y2VkUnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWRcIjtcblxuaW1wb3J0IHsgY2hhcmFjdGVycyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgaXNSdWxlRW1wdHkgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZVwiO1xuaW1wb3J0IHsgcnVsZU5hbWVzRnJvbUN5Y2xlcyB9IGZyb20gXCIuL3V0aWxpdGllcy9kaXJlY3RlZEdyYXBoXCI7XG5pbXBvcnQgeyByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuY29uc3QgeyBDT01NQU5fQ0hBUkFDVEVSIH0gPSBjaGFyYWN0ZXJzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWR1Y2VkUnVsZXMocnVsZU1hcCwgZGlyZWN0ZWRHcmFwaCkge1xuICBjb25zdCBjeWNsZXMgPSBkaXJlY3RlZEdyYXBoLmZpbmRDeWNsZXMoKSxcbiAgICAgICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbUN5Y2xlcyhjeWNsZXMpO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXSxcbiAgICAgICAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpLFxuICAgICAgICAgIHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlLmdldE5hbWUoKTtcblxuICAgIHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSA9IHJlZHVjZWRSdWxlO1xuICB9KTtcblxuICBjeWNsZXMuZm9yRWFjaCgoY3ljbGUpID0+IHtcbiAgICBjb25zdCBjeWNsZUVtcHR5ID0gaXNDeWNsZUVtcHR5KGN5Y2xlLCBydWxlTWFwKTtcblxuICAgIGlmIChjeWNsZUVtcHR5KSB7XG4gICAgICBjb25zdCBydWxlTmFtZXMgPSBjeWNsZSxcbiAgICAgICAgICAgIHJ1bGVOYW1lc1N0cmluZyA9IHJ1bGVOYW1lcy5qb2luKENPTU1BTl9DSEFSQUNURVIpO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFsbCBvZiB0aGUgcmVkdWNlZCBydWxlcyBpbiB0aGUgJHtydWxlTmFtZXNTdHJpbmd9IGN5Y2xlIGFyZSBlbXB0eS5gKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc0N5Y2xlRW1wdHkoY3ljbGUsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZU5hbWVzID0gY3ljbGUsICAvLy9cbiAgICAgICAgcmVkdWNlZFJ1bGVzID0gcnVsZU5hbWVzLm1hcCgocnVsZU5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkUnVsZU5hbWUgPSByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICAgICAgICAgIHJlZHVjZWRSdWxlID0gcnVsZU1hcFtyZWR1Y2VkUnVsZU5hbWVdO1xuXG4gICAgICAgICAgcmV0dXJuIHJlZHVjZWRSdWxlO1xuICAgICAgICB9KSxcbiAgICAgICAgcmVkdWNlZFJ1bGVzRW1wdHkgPSByZWR1Y2VkUnVsZXMuZXZlcnkoKHJlZHVjZWRSdWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFJ1bGVFbXB0eSA9IGlzUnVsZUVtcHR5KHJlZHVjZWRSdWxlKTtcblxuICAgICAgICAgIGlmIChyZWR1Y2VkUnVsZUVtcHR5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBjeWNsZUVtcHR5ID0gcmVkdWNlZFJ1bGVzRW1wdHk7IC8vL1xuXG4gIHJldHVybiBjeWNsZUVtcHR5O1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZVJlZHVjZWRSdWxlcyIsIkNPTU1BTl9DSEFSQUNURVIiLCJjaGFyYWN0ZXJzIiwicnVsZU1hcCIsImRpcmVjdGVkR3JhcGgiLCJjeWNsZXMiLCJmaW5kQ3ljbGVzIiwicnVsZU5hbWVzIiwicnVsZU5hbWVzRnJvbUN5Y2xlcyIsImZvckVhY2giLCJydWxlTmFtZSIsInJ1bGUiLCJyZWR1Y2VkUnVsZSIsIlJlZHVjZWRSdWxlIiwiZnJvbVJ1bGUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJnZXROYW1lIiwiY3ljbGUiLCJjeWNsZUVtcHR5IiwiaXNDeWNsZUVtcHR5IiwicnVsZU5hbWVzU3RyaW5nIiwiam9pbiIsIkVycm9yIiwicmVkdWNlZFJ1bGVzIiwibWFwIiwicmVkdWNlZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicmVkdWNlZFJ1bGVzRW1wdHkiLCJldmVyeSIsInJlZHVjZWRSdWxlRW1wdHkiLCJpc1J1bGVFbXB0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBWUE7OztlQUF3QkE7Ozs4REFWQTt5QkFFRztvQkFFQzs2QkFDUTt3QkFDUTs7Ozs7O0FBRTVDLElBQU0sQUFBRUMsbUJBQXFCQyxxQkFBVSxDQUEvQkQ7QUFFTyxTQUFTRCxtQkFBbUJHLE9BQU8sRUFBRUMsYUFBYSxFQUFFO0lBQ2pFLElBQU1DLFNBQVNELGNBQWNFLFVBQVUsSUFDakNDLFlBQVlDLElBQUFBLGtDQUFtQixFQUFDSDtJQUV0Q0UsVUFBVUUsT0FBTyxDQUFDLFNBQUNDLFVBQWE7UUFDOUIsSUFBTUMsT0FBT1IsT0FBTyxDQUFDTyxTQUFTLEVBQ3hCRSxjQUFjQyxnQkFBVyxDQUFDQyxRQUFRLENBQUNILE9BQ25DSSxrQkFBa0JILFlBQVlJLE9BQU87UUFFM0NiLE9BQU8sQ0FBQ1ksZ0JBQWdCLEdBQUdIO0lBQzdCO0lBRUFQLE9BQU9JLE9BQU8sQ0FBQyxTQUFDUSxPQUFVO1FBQ3hCLElBQU1DLGFBQWFDLGFBQWFGLE9BQU9kO1FBRXZDLElBQUllLFlBQVk7WUFDZCxJQUFNWCxZQUFZVSxPQUNaRyxrQkFBa0JiLFVBQVVjLElBQUksQ0FBQ3BCO1lBRXZDLE1BQU0sSUFBSXFCLE1BQU0sQUFBQyxtQ0FBa0QsT0FBaEJGLGlCQUFnQixzQkFBb0I7UUFDekYsQ0FBQztJQUNIO0FBQ0Y7QUFFQSxTQUFTRCxhQUFhRixLQUFLLEVBQUVkLE9BQU8sRUFBRTtJQUNwQyxJQUFNSSxZQUFZVSxPQUNaTSxlQUFlaEIsVUFBVWlCLEdBQUcsQ0FBQyxTQUFDZCxVQUFhO1FBQ3pDLElBQU1LLGtCQUFrQlUsSUFBQUEscUNBQTJCLEVBQUNmLFdBQzlDRSxjQUFjVCxPQUFPLENBQUNZLGdCQUFnQjtRQUU1QyxPQUFPSDtJQUNULElBQ0FjLG9CQUFvQkgsYUFBYUksS0FBSyxDQUFDLFNBQUNmLGFBQWdCO1FBQ3RELElBQU1nQixtQkFBbUJDLElBQUFBLGlCQUFXLEVBQUNqQjtRQUVyQyxJQUFJZ0Isa0JBQWtCO1lBQ3BCLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSCxJQUNBVixhQUFhUSxtQkFBbUIsR0FBRztJQUV6QyxPQUFPUjtBQUNUIn0=