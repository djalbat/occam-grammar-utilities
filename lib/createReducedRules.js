"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createReducedRules;
    }
});
var _reduced = /*#__PURE__*/ _interop_require_default(require("./rule/reduced"));
var _necessary = require("necessary");
var _rule = require("./utilities/rule");
var _directedGraph = require("./utilities/directedGraph");
var _ruleName = require("./utilities/ruleName");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var COMMAN_CHARACTER = _necessary.characters.COMMAN_CHARACTER;
function createReducedRules(ruleMap, directedGraph) {
    var cycles = directedGraph.findCycles(), ruleNames = (0, _directedGraph.ruleNamesFromCycles)(cycles);
    ruleNames.forEach(function(ruleName) {
        var rule = ruleMap[ruleName], reducedRule = _reduced.default.fromRule(rule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
    });
    cycles.forEach(function(cycle) {
        var cycleEmpty = isCycleEmpty(cycle, ruleMap);
        if (cycleEmpty) {
            var ruleNames = cycle, ruleNamesString = ruleNames.join(COMMAN_CHARACTER);
            throw new Error("All of the reduced rules in the '".concat(ruleNamesString, "' cycle are empty."));
        }
    });
}
function isCycleEmpty(cycle, ruleMap) {
    var ruleNames = cycle, reducedRules = ruleNames.map(function(ruleName) {
        var reducedRuleName = (0, _ruleName.reducedRuleNameFromRuleName)(ruleName), reducedRule = ruleMap[reducedRuleName];
        return reducedRule;
    }), reducedRulesEmpty = reducedRules.every(function(reducedRule) {
        var reducedRuleEmpty = (0, _rule.isRuleEmpty)(reducedRule);
        if (reducedRuleEmpty) {
            return true;
        }
    }), cycleEmpty = reducedRulesEmpty; ///
    return cycleEmpty;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVSZWR1Y2VkUnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWRcIjtcblxuaW1wb3J0IHsgY2hhcmFjdGVycyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgaXNSdWxlRW1wdHkgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZVwiO1xuaW1wb3J0IHsgcnVsZU5hbWVzRnJvbUN5Y2xlcyB9IGZyb20gXCIuL3V0aWxpdGllcy9kaXJlY3RlZEdyYXBoXCI7XG5pbXBvcnQgeyByZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcblxuY29uc3QgeyBDT01NQU5fQ0hBUkFDVEVSIH0gPSBjaGFyYWN0ZXJzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWR1Y2VkUnVsZXMocnVsZU1hcCwgZGlyZWN0ZWRHcmFwaCkge1xuICBjb25zdCBjeWNsZXMgPSBkaXJlY3RlZEdyYXBoLmZpbmRDeWNsZXMoKSxcbiAgICAgICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzRnJvbUN5Y2xlcyhjeWNsZXMpO1xuXG4gIHJ1bGVOYW1lcy5mb3JFYWNoKChydWxlTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXSxcbiAgICAgICAgICByZWR1Y2VkUnVsZSA9IFJlZHVjZWRSdWxlLmZyb21SdWxlKHJ1bGUpLFxuICAgICAgICAgIHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlLmdldE5hbWUoKTtcblxuICAgIHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSA9IHJlZHVjZWRSdWxlO1xuICB9KTtcblxuICBjeWNsZXMuZm9yRWFjaCgoY3ljbGUpID0+IHtcbiAgICBjb25zdCBjeWNsZUVtcHR5ID0gaXNDeWNsZUVtcHR5KGN5Y2xlLCBydWxlTWFwKTtcblxuICAgIGlmIChjeWNsZUVtcHR5KSB7XG4gICAgICBjb25zdCBydWxlTmFtZXMgPSBjeWNsZSxcbiAgICAgICAgICAgIHJ1bGVOYW1lc1N0cmluZyA9IHJ1bGVOYW1lcy5qb2luKENPTU1BTl9DSEFSQUNURVIpO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFsbCBvZiB0aGUgcmVkdWNlZCBydWxlcyBpbiB0aGUgJyR7cnVsZU5hbWVzU3RyaW5nfScgY3ljbGUgYXJlIGVtcHR5LmApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzQ3ljbGVFbXB0eShjeWNsZSwgcnVsZU1hcCkge1xuICBjb25zdCBydWxlTmFtZXMgPSBjeWNsZSwgIC8vL1xuICAgICAgICByZWR1Y2VkUnVsZXMgPSBydWxlTmFtZXMubWFwKChydWxlTmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRSdWxlTmFtZSA9IHJlZHVjZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgICAgICAgICAgcmVkdWNlZFJ1bGUgPSBydWxlTWFwW3JlZHVjZWRSdWxlTmFtZV07XG5cbiAgICAgICAgICByZXR1cm4gcmVkdWNlZFJ1bGU7XG4gICAgICAgIH0pLFxuICAgICAgICByZWR1Y2VkUnVsZXNFbXB0eSA9IHJlZHVjZWRSdWxlcy5ldmVyeSgocmVkdWNlZFJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkUnVsZUVtcHR5ID0gaXNSdWxlRW1wdHkocmVkdWNlZFJ1bGUpO1xuXG4gICAgICAgICAgaWYgKHJlZHVjZWRSdWxlRW1wdHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGN5Y2xlRW1wdHkgPSByZWR1Y2VkUnVsZXNFbXB0eTsgLy8vXG5cbiAgcmV0dXJuIGN5Y2xlRW1wdHk7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlUmVkdWNlZFJ1bGVzIiwiQ09NTUFOX0NIQVJBQ1RFUiIsImNoYXJhY3RlcnMiLCJydWxlTWFwIiwiZGlyZWN0ZWRHcmFwaCIsImN5Y2xlcyIsImZpbmRDeWNsZXMiLCJydWxlTmFtZXMiLCJydWxlTmFtZXNGcm9tQ3ljbGVzIiwiZm9yRWFjaCIsInJ1bGVOYW1lIiwicnVsZSIsInJlZHVjZWRSdWxlIiwiUmVkdWNlZFJ1bGUiLCJmcm9tUnVsZSIsInJlZHVjZWRSdWxlTmFtZSIsImdldE5hbWUiLCJjeWNsZSIsImN5Y2xlRW1wdHkiLCJpc0N5Y2xlRW1wdHkiLCJydWxlTmFtZXNTdHJpbmciLCJqb2luIiwiRXJyb3IiLCJyZWR1Y2VkUnVsZXMiLCJtYXAiLCJyZWR1Y2VkUnVsZU5hbWVGcm9tUnVsZU5hbWUiLCJyZWR1Y2VkUnVsZXNFbXB0eSIsImV2ZXJ5IiwicmVkdWNlZFJ1bGVFbXB0eSIsImlzUnVsZUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFZQTs7O2VBQXdCQTs7OzhEQVZBO3lCQUVHO29CQUVDOzZCQUNRO3dCQUNROzs7Ozs7QUFFNUMsSUFBTSxBQUFFQyxtQkFBcUJDLHFCQUFVLENBQS9CRDtBQUVPLFNBQVNELG1CQUFtQkcsT0FBTyxFQUFFQyxhQUFhLEVBQUU7SUFDakUsSUFBTUMsU0FBU0QsY0FBY0UsVUFBVSxJQUNqQ0MsWUFBWUMsSUFBQUEsa0NBQW1CLEVBQUNIO0lBRXRDRSxVQUFVRSxPQUFPLENBQUMsU0FBQ0MsVUFBYTtRQUM5QixJQUFNQyxPQUFPUixPQUFPLENBQUNPLFNBQVMsRUFDeEJFLGNBQWNDLGdCQUFXLENBQUNDLFFBQVEsQ0FBQ0gsT0FDbkNJLGtCQUFrQkgsWUFBWUksT0FBTztRQUUzQ2IsT0FBTyxDQUFDWSxnQkFBZ0IsR0FBR0g7SUFDN0I7SUFFQVAsT0FBT0ksT0FBTyxDQUFDLFNBQUNRLE9BQVU7UUFDeEIsSUFBTUMsYUFBYUMsYUFBYUYsT0FBT2Q7UUFFdkMsSUFBSWUsWUFBWTtZQUNkLElBQU1YLFlBQVlVLE9BQ1pHLGtCQUFrQmIsVUFBVWMsSUFBSSxDQUFDcEI7WUFFdkMsTUFBTSxJQUFJcUIsTUFBTSxBQUFDLG9DQUFtRCxPQUFoQkYsaUJBQWdCLHVCQUFxQjtRQUMzRixDQUFDO0lBQ0g7QUFDRjtBQUVBLFNBQVNELGFBQWFGLEtBQUssRUFBRWQsT0FBTyxFQUFFO0lBQ3BDLElBQU1JLFlBQVlVLE9BQ1pNLGVBQWVoQixVQUFVaUIsR0FBRyxDQUFDLFNBQUNkLFVBQWE7UUFDekMsSUFBTUssa0JBQWtCVSxJQUFBQSxxQ0FBMkIsRUFBQ2YsV0FDOUNFLGNBQWNULE9BQU8sQ0FBQ1ksZ0JBQWdCO1FBRTVDLE9BQU9IO0lBQ1QsSUFDQWMsb0JBQW9CSCxhQUFhSSxLQUFLLENBQUMsU0FBQ2YsYUFBZ0I7UUFDdEQsSUFBTWdCLG1CQUFtQkMsSUFBQUEsaUJBQVcsRUFBQ2pCO1FBRXJDLElBQUlnQixrQkFBa0I7WUFDcEIsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNILElBQ0FWLGFBQWFRLG1CQUFtQixHQUFHO0lBRXpDLE9BQU9SO0FBQ1QifQ==