"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateDirectLeftRecursion;
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _rules = require("./utilities/rules");
var _definition = require("./utilities/definition");
var _definitions = require("./utilities/definitions");
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), replacementDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacedDefinition = first(directlyLeftRecursiveDefinitions), definitions = tail(directlyLeftRecursiveDefinitions); ///
        directlyLeftRecursiveRule.removeDefinitions(definitions);
        directlyLeftRecursiveRule.replaceDefinition(replacedDefinition, replacementDefinition);
    });
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, tail = _necessary.arrayUtilities.tail;
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = (0, _rules).retrieveLeftRecursiveRules(leftRecursiveDefinitions, _directly.default, ruleMap);
    return directlyLeftRecursiveRules;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var callback = function callback(directlyLeftRecursiveDefinition) {
        var ruleName = directlyLeftRecursiveDefinition.getRuleName(), definition = directlyLeftRecursiveDefinition, definitionParts = (0, _definition).definitionPartsFromDefinition(definition), parts = definitionParts, partsLength = parts.length;
        if (partsLength === 1) {
            var definitionString = definition.asString();
            throw new Error("The '".concat(definitionString, "' directly left recursive definition of the '").concat(ruleName, "' rule is unary and therefore cannot be rewritten."));
        }
    };
    var directlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, _directly.default, callback);
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition; ///
    return replacementDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule) {
    var directlyLeftRecursiveDefinitions = (0, _definitions).retrieveLeftRecursiveDefinitions(directlyLeftRecursiveRule, _directly.default);
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,