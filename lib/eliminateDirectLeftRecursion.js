"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _array = require("./utilities/array");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    }
}
function directlyReduceRule(rule, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, leftRecursiveDefinitions = directlyLeftRecursiveDefinitions, directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
}
function directlyRepeatRule(rule, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, directlyRepeatedRule = _directly1.default.fromRuleAndDirectlyLeftRecursiveDefinitions(rule, directlyLeftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    var rule = directlyLeftRecursiveDefinition.getRule();
    directlyReduceRule(rule, context);
    directlyRepeatRule(rule, context);
    var directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, context);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context);
}
function findDirectlyLeftRecursiveDefinition(context) {
    var directlyLeftRecursiveDefinition = null;
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, directlyLeftRecursiveDefinitionsLength = directlyLeftRecursiveDefinitions.length;
    if (directlyLeftRecursiveDefinitionsLength > 0) {
        var firstDirectlyLeftRecursiveDefinition = (0, _array.first)(directlyLeftRecursiveDefinitions);
        directlyLeftRecursiveDefinition = firstDirectlyLeftRecursiveDefinition; ///
    }
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    directlyLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions.filter(function(directlyLeftRecursiveDefinitions) {
        var directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinitions.getRule();
        if (directlyLeftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var rule = directlyLeftRecursiveDefinition.getRule(), replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
}
function removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var directlyLeftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var directlyLeftRecursiveDefinitionsA = directlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(directlyLeftRecursiveDefinitionsA, directlyLeftRecursiveDefinitionsB);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5pbXBvcnQgUmVwbGFjZW1lbnREZWZpbml0aW9uIGZyb20gXCIuL3JlcGxhY2VtZW50RGVmaW5pdGlvblwiO1xuXG5pbXBvcnQgeyBmaXJzdCwgbGVmdERpZmZlcmVuY2UgfSBmcm9tIFwiLi91dGlsaXRpZXMvYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihjb250ZXh0KSB7XG4gIGxldCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG5cbiAgd2hpbGUgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcblxuICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihjb250ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaXJlY3RseVJlZHVjZVJ1bGUocnVsZSwgY29udGV4dCkge1xuICBjb25zdCB7IHJ1bGVNYXAsIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0LFxuICAgICAgICBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgIC8vL1xuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlID0gRGlyZWN0bHlSZWR1Y2VkUnVsZS5mcm9tUnVsZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVdID0gZGlyZWN0bHlSZWR1Y2VkUnVsZTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0bHlSZXBlYXRSdWxlKHJ1bGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBydWxlTWFwLCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9ID0gY29udGV4dCxcbiAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGUgPSBEaXJlY3RseVJlcGVhdGVkUnVsZS5mcm9tUnVsZUFuZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKTtcblxuICBkaXJlY3RseVJlZHVjZVJ1bGUocnVsZSwgY29udGV4dCk7XG5cbiAgZGlyZWN0bHlSZXBlYXRSdWxlKHJ1bGUsIGNvbnRleHQpO1xuXG4gIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpO1xuXG4gIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIHJlbW92ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCkge1xuICBsZXQgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG51bGw7XG5cbiAgY29uc3QgeyBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9ID0gY29udGV4dCxcbiAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNMZW5ndGggPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5sZW5ndGg7XG5cbiAgaWYgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zTGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGZpcnN0RGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaXJzdERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247IC8vL1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCBjb250ZXh0KSB7XG4gIGxldCB7IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0O1xuXG4gIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZmlsdGVyKChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykgPT4geyAgLy8vXG4gICAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNSdWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZ2V0UnVsZSgpO1xuXG4gICAgaWYgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zUnVsZSA9PT0gcnVsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgY29uc3QgcnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpLFxuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSBSZXBsYWNlbWVudERlZmluaXRpb24uZnJvbURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgcnVsZS5yZXBsYWNlQWxsRGVmaW5pdGlvbnMocmVwbGFjZW1lbnREZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGNvbnRleHQpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNCID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7IC8vL1xuXG4gICh7IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gPSBjb250ZXh0KTtcblxuICBjb25zdCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0EgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgbGVmdERpZmZlcmVuY2UoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNBLCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0IpO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJjb250ZXh0IiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJkaXJlY3RseVJlZHVjZVJ1bGUiLCJydWxlIiwicnVsZU1hcCIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZSIsIkRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJmcm9tUnVsZUFuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lIiwiZ2V0TmFtZSIsImRpcmVjdGx5UmVwZWF0UnVsZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiRGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJmcm9tUnVsZUFuZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwiZ2V0UnVsZSIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVtb3ZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0xlbmd0aCIsImxlbmd0aCIsImZpcnN0RGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpcnN0IiwiZmlsdGVyIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNSdWxlIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwiUmVwbGFjZW1lbnREZWZpbml0aW9uIiwiZnJvbURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXBsYWNlQWxsRGVmaW5pdGlvbnMiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0IiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0EiLCJsZWZ0RGlmZmVyZW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7OytCQVFiLFNBUUM7OztlQVJ1QkEsNEJBQTRCOzs7NkRBTnBCLHlCQUF5Qjs4REFDeEIsMEJBQTBCOzBFQUN6Qix5QkFBeUI7cUJBRXJCLG1CQUFtQjs7Ozs7O0FBRTFDLFNBQVNBLDRCQUE0QixDQUFDQyxPQUFPLEVBQUU7SUFDNUQsSUFBSUMsK0JBQStCLEdBQUdDLG1DQUFtQyxDQUFDRixPQUFPLENBQUMsQUFBQztJQUVuRixNQUFPQywrQkFBK0IsS0FBSyxJQUFJLENBQUU7UUFDL0NFLDBCQUEwQixDQUFDRiwrQkFBK0IsRUFBRUQsT0FBTyxDQUFDLENBQUM7UUFFckVDLCtCQUErQixHQUFHQyxtQ0FBbUMsQ0FBQ0YsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTSSxrQkFBa0IsQ0FBQ0MsSUFBSSxFQUFFTCxPQUFPLEVBQUU7SUFDekMsSUFBUU0sT0FBTyxHQUF1Q04sT0FBTyxDQUFyRE0sT0FBTyxFQUFFQyxnQ0FBZ0MsR0FBS1AsT0FBTyxDQUE1Q08sZ0NBQWdDLEVBQzNDQyx3QkFBd0IsR0FBR0QsZ0NBQWdDLEVBQzNERSxtQkFBbUIsR0FBR0MsU0FBbUIsUUFBQSxDQUFDQyxtQ0FBbUMsQ0FBQ04sSUFBSSxFQUFFRyx3QkFBd0IsQ0FBQyxFQUM3R0ksdUJBQXVC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