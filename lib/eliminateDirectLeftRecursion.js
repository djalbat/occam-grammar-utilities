"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateDirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _rules = require("./utilities/rules");
var _definitions = require("./utilities/definitions");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, tail = _necessary.arrayUtilities.tail;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var rule = directlyLeftRecursiveRule, reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var definitions = rule.getDefinitions();
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(definitions), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), replacementDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), firstDirectlyLeftRecursiveDefinitions = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinitionsTail = tail(directlyLeftRecursiveDefinitions), replacedDefinition = firstDirectlyLeftRecursiveDefinitions; ///
        definitions = directlyLeftRecursiveDefinitionsTail; ///
        rule.removeDefinitions(definitions);
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
    });
}
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = (0, _rules.retrieveLeftRecursiveRules)(leftRecursiveDefinitions, _directly.default, ruleMap);
    return directlyLeftRecursiveRules;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
        return directlyLeftRecursiveDefinition;
    });
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition; ///
    return replacementDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(definitions) {
    var directlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,