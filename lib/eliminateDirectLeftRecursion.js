"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var find = _necessary.arrayUtilities.find, filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(context) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    }
}
function directlyReduceRule(rule, context) {
    var ruleMap = context.ruleMap, leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
}
function directlyRepeatRule(rule, context) {
    var ruleMap = context.ruleMap, leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    var rule = directlyLeftRecursiveDefinition.getRule();
    directlyReduceRule(rule, context);
    directlyRepeatRule(rule, context);
    var directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, context), removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    amendLeftRecursiveDefinitions(context, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(context, removedLeftRecursiveDefinitions) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions;
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function findDirectlyLeftRecursiveDefinition(context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var leftRecursiveDefinitions = context.leftRecursiveDefinitions, directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var rule = directlyLeftRecursiveDefinition.getRule(), replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
}

//# sourceMappingURL=data:application/json;base64,