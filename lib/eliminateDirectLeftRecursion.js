"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _directlyRepeat = /*#__PURE__*/ _interopRequireDefault(require("./ruleOperation/directlyRepeat"));
var _directlyReduce = /*#__PURE__*/ _interopRequireDefault(require("./ruleOperation/directlyReduce"));
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    var directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    }
}
function directlyReduceRule(directlyLeftRecursiveDefinition, context) {
    var disallowIsolated = true;
    _directlyReduce.default.execute(directlyLeftRecursiveDefinition, disallowIsolated, context);
}
function directlyRepeatRule(directlyLeftRecursiveDefinition, context) {
    _directlyRepeat.default.execute(directlyLeftRecursiveDefinition, context);
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    directlyReduceRule(directlyLeftRecursiveDefinition, context);
    directlyRepeatRule(directlyLeftRecursiveDefinition, context);
    var rule = directlyLeftRecursiveDefinition.getRule();
    var directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    (0, _context.removeDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, context);
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var rule = directlyLeftRecursiveDefinition.getRule(), replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmVwbGFjZW1lbnREZWZpbml0aW9uIGZyb20gXCIuL3JlcGxhY2VtZW50RGVmaW5pdGlvblwiO1xuaW1wb3J0IERpcmVjdGx5UmVwZWF0UnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9ydWxlT3BlcmF0aW9uL2RpcmVjdGx5UmVwZWF0XCI7XG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VSdWxlT3BlcmF0aW9uIGZyb20gXCIuL3J1bGVPcGVyYXRpb24vZGlyZWN0bHlSZWR1Y2VcIjtcblxuaW1wb3J0IHsgZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sXG4gICAgICAgICBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICByZW1vdmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9IGZyb20gXCIuL3V0aWxpdGllcy9jb250ZXh0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCkge1xuICBsZXQgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGNvbnRleHQpO1xuXG4gIHdoaWxlIChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlyZWN0bHlSZWR1Y2VSdWxlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgY29uc3QgZGlzYWxsb3dJc29sYXRlZCA9IHRydWU7XG5cbiAgRGlyZWN0bHlSZWR1Y2VSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgZGlzYWxsb3dJc29sYXRlZCwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdGx5UmVwZWF0UnVsZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIERpcmVjdGx5UmVwZWF0UnVsZU9wZXJhdGlvbi5leGVjdXRlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KSB7XG4gIGRpcmVjdGx5UmVkdWNlUnVsZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcblxuICBkaXJlY3RseVJlcGVhdFJ1bGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgY29uc3QgcnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpO1xuXG4gIHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIHJlbW92ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IFJlcGxhY2VtZW50RGVmaW5pdGlvbi5mcm9tRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICBydWxlLnJlcGxhY2VBbGxEZWZpbml0aW9ucyhyZXBsYWNlbWVudERlZmluaXRpb24pO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJjb250ZXh0IiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJkaXJlY3RseVJlZHVjZVJ1bGUiLCJkaXNhbGxvd0lzb2xhdGVkIiwiRGlyZWN0bHlSZWR1Y2VSdWxlT3BlcmF0aW9uIiwiZXhlY3V0ZSIsImRpcmVjdGx5UmVwZWF0UnVsZSIsIkRpcmVjdGx5UmVwZWF0UnVsZU9wZXJhdGlvbiIsInJ1bGUiLCJnZXRSdWxlIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlbW92ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwiUmVwbGFjZW1lbnREZWZpbml0aW9uIiwiZnJvbURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXBsYWNlQWxsRGVmaW5pdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OzsrQkFVYixTQVFDOzs7ZUFSdUJBLDRCQUE0Qjs7OzBFQVJsQix5QkFBeUI7bUVBQ25CLGdDQUFnQzttRUFDaEMsZ0NBQWdDO3VCQUlqQixxQkFBcUI7Ozs7OztBQUU3RCxTQUFTQSw0QkFBNEIsQ0FBQ0MsT0FBTyxFQUFFO0lBQzVELElBQUlDLCtCQUErQixHQUFHQyxJQUFBQSxRQUFtQyxvQ0FBQSxFQUFDRixPQUFPLENBQUMsQUFBQztJQUVuRixNQUFPQywrQkFBK0IsS0FBSyxJQUFJLENBQUU7UUFDL0NFLDBCQUEwQixDQUFDRiwrQkFBK0IsRUFBRUQsT0FBTyxDQUFDLENBQUM7UUFFckVDLCtCQUErQixHQUFHQyxJQUFBQSxRQUFtQyxvQ0FBQSxFQUFDRixPQUFPLENBQUMsQ0FBQztJQUNqRixDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVNJLGtCQUFrQixDQUFDSCwrQkFBK0IsRUFBRUQsT0FBTyxFQUFFO0lBQ3BFLElBQU1LLGdCQUFnQixHQUFHLElBQUksQUFBQztJQUU5QkMsZUFBMkIsUUFBQSxDQUFDQyxPQUFPLENBQUNOLCtCQUErQixFQUFFSSxnQkFBZ0IsRUFBRUwsT0FBTyxDQUFDLENBQUM7QUFDbEcsQ0FBQztBQUVELFNBQVNRLGtCQUFrQixDQUFDUCwrQkFBK0IsRUFBRUQsT0FBTyxFQUFFO0lBQ3BFUyxlQUEyQixRQUFBLENBQUNGLE9BQU8sQ0FBQ04sK0JBQStCLEVBQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFFRCxTQUFTRywwQkFBMEIsQ0FBQ0YsK0JBQStCLEVBQUVELE9BQU8sRUFBRTtJQUM1RUksa0JBQWtCLENBQUNILCtCQUErQixFQUFFRCxPQUFPLENBQUMsQ0FBQztJQUU3RFEsa0JBQWtCLENBQUNQLCtCQUErQixFQUFFRCxPQUFPLENBQUMsQ0FBQztJQUU3RCxJQUFNVSxJQUFJLEdBQUdULCtCQUErQixDQUFDVSxPQUFPLEVBQUUsQUFBQztJQUV2RCxJQUFNQyxnQ0FBZ0MsR0FBR0MsSUFBQUEsUUFBb0MscUNBQUEsRUFBQ0gsSUFBSSxFQUFFVixPQUFPLENBQUMsQUFBQztJQUU3RmMsc0NBQXNDLENBQUNiLCtCQUErQixDQUFDLENBQUM7SUFFeEVjLElBQUFBLFFBQXNDLHVDQUFBLEVBQUNILGdDQUFnQyxFQUFFWixPQUFPLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQsU0FBU2Msc0NBQXNDLENBQUNiLCtCQUErQixFQUFFO0lBQy9FLElBQU1TLElBQUksR0FBR1QsK0JBQStCLENBQUNVLE9BQU8sRUFBRSxFQUNoREsscUJBQXFCLEdBQUdDLHNCQUFxQixRQUFBLENBQUNDLG1DQUFtQyxDQUFDakIsK0JBQStCLENBQUMsQUFBQztJQUV6SFMsSUFBSSxDQUFDUyxxQkFBcUIsQ0FBQ0gscUJBQXFCLENBQUMsQ0FBQztBQUNwRCxDQUFDIn0=