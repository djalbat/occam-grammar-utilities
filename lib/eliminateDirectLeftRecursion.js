"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _array = require("./utilities/array");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(context);
    }
}
function directlyReduceRule(rule, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, leftRecursiveDefinitions = directlyLeftRecursiveDefinitions, directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
}
function directlyRepeatRule(rule, context) {
    var ruleMap = context.ruleMap, directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, leftRecursiveDefinitions = directlyLeftRecursiveDefinitions, directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    var rule = directlyLeftRecursiveDefinition.getRule();
    directlyReduceRule(rule, context);
    directlyRepeatRule(rule, context);
    var directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, context);
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context);
}
function findDirectlyLeftRecursiveDefinition(context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions, directlyLeftRecursiveDefinition = directlyLeftRecursiveDefinitions.pop() || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, context) {
    var directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    directlyLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions.filter(function(directlyLeftRecursiveDefinitions) {
        var directlyLeftRecursiveDefinitionsRule = directlyLeftRecursiveDefinitions.getRule();
        if (directlyLeftRecursiveDefinitionsRule === rule) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var rule = directlyLeftRecursiveDefinition.getRule(), replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
}
function removeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, context) {
    var directlyLeftRecursiveDefinitionsB = directlyLeftRecursiveDefinitions; ///
    directlyLeftRecursiveDefinitions = context.directlyLeftRecursiveDefinitions;
    var directlyLeftRecursiveDefinitionsA = directlyLeftRecursiveDefinitions; ///
    (0, _array.leftDifference)(directlyLeftRecursiveDefinitionsA, directlyLeftRecursiveDefinitionsB);
}

//# sourceMappingURL=data:application/json;base64,