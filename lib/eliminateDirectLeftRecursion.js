"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateDirectLeftRecursion;
var _occamParsers = require("occam-parsers");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _class = require("./utilities/class");
var _parts = require("./utilities/parts");
var _part = require("./utilities/part");
var _definitions = require("./utilities/definitions");
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), rewrittenDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
        var replacementDefinition = rewrittenDefinition, replacedDefinition = directlyLeftRecursiveDefinitions.shift(), definitions = directlyLeftRecursiveDefinitions; ///
        directlyLeftRecursiveRule.removeDefinitions(definitions);
        directlyLeftRecursiveRule.replaceDefinition(replacedDefinition, replacementDefinition);
    });
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = [];
    leftRecursiveDefinitions.forEach(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, ruleName = directlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], directlyLeftRecursiveRulesIncludesRule = directlyLeftRecursiveRules.includes(rule);
            if (!directlyLeftRecursiveRulesIncludesRule) {
                var directlyLeftRecursiveRule = rule; ///
                directlyLeftRecursiveRules.push(directlyLeftRecursiveRule);
            }
        }
    });
    return directlyLeftRecursiveRules;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, _directly.default);
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var parts = directlyLeftRecursiveDefinition.getParts();
    parts.shift();
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), reducedPart = (0, _part).reducedPartFromRuleName(ruleName), repeatedPart = (0, _parts).repeatedPartFromParts(parts);
    parts = [
        reducedPart,
        repeatedPart
    ];
    var definition = new _occamParsers.Definition(parts), rewrittenDefinition = definition; ///
    return rewrittenDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule) {
    var definitions = directlyLeftRecursiveRule.getDefinitions(), directlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = (0, _class).isInstanceOf(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,