"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    get: function() {
        return eliminateDirectLeftRecursion;
    },
    enumerable: true
});
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _definitions = require("./utilities/definitions");
var _left = _interopRequireDefault(require("./definition/recursive/left"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var tail = _necessary.arrayUtilities.tail, first = _necessary.arrayUtilities.first, filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        var ruleName = directlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName];
        reduceRule(rule, ruleMap);
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleName);
        directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions); ///
        var replacementDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), firstDirectlyLeftRecursiveDefinitions = first(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinitionsTail = tail(directlyLeftRecursiveDefinitions), replacedDefinition = firstDirectlyLeftRecursiveDefinitions, definitions = directlyLeftRecursiveDefinitionsTail; ///
        rule.removeDefinitions(definitions);
        rule.replaceDefinition(replacedDefinition, replacementDefinition);
        var removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
        amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
        directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function reduceRule(rule, ruleMap) {
    var reducedLeftRecursiveDefinition = null;
    var reducedRule = _reduced.default.fromRule(rule);
    if (reducedRule !== null) {
        var leftRecursiveDefinition = _left.default.fromReducedRule(reducedRule), reducedRuleName = reducedRule.getName(), definitions = reducedRule.getDefinitions(), definition = leftRecursiveDefinition; ///
        rule.removeDefinitions(definitions);
        ruleMap[reducedRuleName] = reducedRule;
        reducedLeftRecursiveDefinition = definition; ///
    }
    return reducedLeftRecursiveDefinition;
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
        return directlyLeftRecursiveDefinition;
    });
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition; ///
    return replacementDefinition;
}
function retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = null;
    leftRecursiveDefinitions.some(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            return true;
        }
    });
    return directlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, ruleName) {
    var directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, directlyLeftRecursiveDefinitionRuleName = directlyLeftRecursiveDefinition.getRuleName();
            if (directlyLeftRecursiveDefinitionRuleName === ruleName) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,