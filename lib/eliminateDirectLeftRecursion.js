"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _directlyReduced = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyReduced"));
var _directlyRepeated = /*#__PURE__*/ _interopRequireDefault(require("./operation/rule/directlyRepeated"));
var _directlyLeftRecursive = /*#__PURE__*/ _interopRequireDefault(require("./operation/definition/directlyLeftRecursive"));
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    return;
    var directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    var allowIsolated = false, directlyReducedRule = _directlyReduced.default.execute(directlyLeftRecursiveDefinition, allowIsolated, context), directlyRepeatedRule = _directlyRepeated.default.execute(directlyLeftRecursiveDefinition, context);
    _directlyLeftRecursive.default.execute(directlyLeftRecursiveDefinition, directlyRepeatedRule, directlyReducedRule, context);
    var rule = directlyLeftRecursiveDefinition.getRule(), directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context), removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    (0, _context.removeLeftRecursiveDefinitions)(removedLeftRecursiveDefinitions, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vcnVsZS9kaXJlY3RseVJlZHVjZWRcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vcnVsZS9kaXJlY3RseVJlcGVhdGVkXCI7XG5pbXBvcnQgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vZGVmaW5pdGlvbi9kaXJlY3RseUxlZnRSZWN1cnNpdmVcIjtcblxuaW1wb3J0IHsgcmVtb3ZlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLFxuICAgICAgICAgZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sXG4gICAgICAgICBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgfSBmcm9tIFwiLi91dGlsaXRpZXMvY29udGV4dFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuO1xuXG5cbiAgbGV0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihjb250ZXh0KTtcblxuICB3aGlsZSAoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpO1xuXG4gICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGNvbnRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGNvbnRleHQpIHtcbiAgY29uc3QgYWxsb3dJc29sYXRlZCA9IGZhbHNlLFxuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlID0gRGlyZWN0bHlSZWR1Y2VkUnVsZU9wZXJhdGlvbi5leGVjdXRlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGFsbG93SXNvbGF0ZWQsIGNvbnRleHQpLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IERpcmVjdGx5UmVwZWF0ZWRSdWxlT3BlcmF0aW9uLmV4ZWN1dGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbk9wZXJhdGlvbi5leGVjdXRlKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGRpcmVjdGx5UmVwZWF0ZWRSdWxlLCBkaXJlY3RseVJlZHVjZWRSdWxlLCBjb250ZXh0KTtcblxuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCksXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGNvbnRleHQpLFxuICAgICAgICByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7IC8vL1xuXG4gIHJlbW92ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBjb250ZXh0KTtcbn1cbiJdLCJuYW1lcyI6WyJlbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIiwiY29udGV4dCIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uIiwiYWxsb3dJc29sYXRlZCIsImRpcmVjdGx5UmVkdWNlZFJ1bGUiLCJEaXJlY3RseVJlZHVjZWRSdWxlT3BlcmF0aW9uIiwiZXhlY3V0ZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiRGlyZWN0bHlSZXBlYXRlZFJ1bGVPcGVyYXRpb24iLCJEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uT3BlcmF0aW9uIiwicnVsZSIsImdldFJ1bGUiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZW1vdmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7b0VBUmlCO3FFQUNDOzBFQUNXO3VCQUlBOzs7Ozs7QUFFdEMsU0FBU0EsNkJBQTZCQyxPQUFPLEVBQUU7SUFDNUQ7SUFHQSxJQUFJQyxrQ0FBa0NDLElBQUFBLDRDQUFtQyxFQUFDRjtJQUUxRSxNQUFPQyxvQ0FBb0MsSUFBSSxDQUFFO1FBQy9DRSwyQkFBMkJGLGlDQUFpQ0Q7UUFFNURDLGtDQUFrQ0MsSUFBQUEsNENBQW1DLEVBQUNGO0lBQ3hFO0FBQ0Y7QUFFQSxTQUFTRywyQkFBMkJGLCtCQUErQixFQUFFRCxPQUFPLEVBQUU7SUFDNUUsSUFBTUksZ0JBQWdCLEtBQUssRUFDckJDLHNCQUFzQkMsd0JBQTRCLENBQUNDLE9BQU8sQ0FBQ04saUNBQWlDRyxlQUFlSixVQUMzR1EsdUJBQXVCQyx5QkFBNkIsQ0FBQ0YsT0FBTyxDQUFDTixpQ0FBaUNEO0lBRXBHVSw4QkFBd0MsQ0FBQ0gsT0FBTyxDQUFDTixpQ0FBaUNPLHNCQUFzQkgscUJBQXFCTDtJQUU3SCxJQUFNVyxPQUFPVixnQ0FBZ0NXLE9BQU8sSUFDOUNDLG1DQUFtQ0MsSUFBQUEsNkNBQW9DLEVBQUNILE1BQU1YLFVBQzlFZSxrQ0FBa0NGLGtDQUFrQyxHQUFHO0lBRTdFRyxJQUFBQSx1Q0FBOEIsRUFBQ0QsaUNBQWlDZjtBQUNsRSJ9