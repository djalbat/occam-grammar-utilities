"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateDirectLeftRecursion;
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _recursive = _interopRequireDefault(require("./definition/recursive"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _rules = require("./utilities/rules");
var _definitions = require("./utilities/definitions");
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), replacementDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacedDefinition = first(directlyLeftRecursiveDefinitions), definitions = tail(directlyLeftRecursiveDefinitions); ///
        directlyLeftRecursiveRule.removeDefinitions(definitions);
        directlyLeftRecursiveRule.replaceDefinition(replacedDefinition, replacementDefinition);
    });
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, tail = _necessary.arrayUtilities.tail;
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = (0, _rules).retrieveLeftRecursiveRules(leftRecursiveDefinitions, _directly.default, ruleMap);
    return directlyLeftRecursiveRules;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, _directly.default);
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition; ///
    return replacementDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule) {
    var directlyLeftRecursiveDefinitions = (0, _definitions).retrieveLeftRecursiveDefinitions(directlyLeftRecursiveRule, _directly.default);
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IFJlZHVjZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVkdWNlZFwiO1xuaW1wb3J0IFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4vZGVmaW5pdGlvbi9yZWN1cnNpdmVcIjtcbmltcG9ydCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnQvZGlyZWN0bHlcIjtcblxuaW1wb3J0IHsgcmV0cmlldmVMZWZ0UmVjdXJzaXZlUnVsZXMgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZXNcIjtcbmltcG9ydCB7IG1lcmdlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZXRyaWV2ZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9IGZyb20gXCIuL3V0aWxpdGllcy9kZWZpbml0aW9uc1wiO1xuXG5jb25zdCB7IGZpcnN0LCB0YWlsIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZXMgPSByZXRyaWV2ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVzKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCk7XG5cbiAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZXMuZm9yRWFjaCgoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSkgPT4ge1xuICAgIGNvbnN0IHJlZHVjZWRSdWxlID0gUmVkdWNlZFJ1bGUuZnJvbURpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtyZWR1Y2VkUnVsZU5hbWVdID0gcmVkdWNlZFJ1bGU7XG5cbiAgICBjb25zdCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHJldHJpZXZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG1lcmdlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICAgIHJlcGxhY2VtZW50RGVmaW5pdGlvbiA9IHJld3JpdGVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICAgIHJlcGxhY2VkRGVmaW5pdGlvbiA9IGZpcnN0KGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSwgLy8vXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSB0YWlsKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTsgLy8vXG5cbiAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlLnJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKTtcblxuICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUucmVwbGFjZURlZmluaXRpb24ocmVwbGFjZWREZWZpbml0aW9uLCByZXBsYWNlbWVudERlZmluaXRpb24pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVEaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZXMgPSByZXRyaWV2ZUxlZnRSZWN1cnNpdmVSdWxlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIHJ1bGVNYXApO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlcztcbn1cblxuZnVuY3Rpb24gbWVyZ2VEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucykge1xuICBjb25zdCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gbWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSByZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG5cbiAgcmV0dXJuIHJlcGxhY2VtZW50RGVmaW5pdGlvbjtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gcmV0cmlldmVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZSwgRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTWFwIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZXMiLCJyZXRyaWV2ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVzIiwiZm9yRWFjaCIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJyZWR1Y2VkUnVsZSIsIlJlZHVjZWRSdWxlIiwiZnJvbURpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGUiLCJyZWR1Y2VkUnVsZU5hbWUiLCJnZXROYW1lIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXRyaWV2ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIm1lcmdlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXBsYWNlbWVudERlZmluaXRpb24iLCJyZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlcGxhY2VkRGVmaW5pdGlvbiIsImZpcnN0IiwiZGVmaW5pdGlvbnMiLCJ0YWlsIiwicmVtb3ZlRGVmaW5pdGlvbnMiLCJyZXBsYWNlRGVmaW5pdGlvbiIsImFycmF5VXRpbGl0aWVzIiwicmV0cmlldmVMZWZ0UmVjdXJzaXZlUnVsZXMiLCJEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwibWVyZ2VMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiUmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV0cmlldmVMZWZ0UmVjdXJzaXZl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