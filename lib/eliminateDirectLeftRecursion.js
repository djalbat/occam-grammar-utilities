"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _recursive = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _definitions = require("./utilities/definitions");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var find = _necessary.arrayUtilities.find, filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions); ///
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], directlyReducedRule = _directly.default.fromRule(rule);
    if (directlyReducedRule === null) {
        var definition = directlyLeftRecursiveDefinition, definitionString = definition.asString();
        throw new Error("The '".concat(definitionString, "' directly left recursive definition of the '").concat(ruleName, "' rule is isolated and therefore cannot be rewritten."));
    }
    var directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
    var leftRecursiveRuleName = directlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName);
    directlyLeftRecursiveDefinition = (0, _definitions.mergeDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions); ///
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition, removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    rule.replaceAllDefinitions(replacementDefinition);
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly1.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName) {
    var directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly1.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, ruleName = directlyLeftRecursiveDefinition.getRuleName();
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,