"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _directlyRepeatRule = /*#__PURE__*/ _interopRequireDefault(require("./operation/directlyRepeatRule"));
var _directlyReduceRule = /*#__PURE__*/ _interopRequireDefault(require("./operation/directlyReduceRule"));
var _context = require("./utilities/context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    var directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context);
        directlyLeftRecursiveDefinition = (0, _context.findDirectlyLeftRecursiveDefinition)(context);
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, context) {
    var disallowIsolated = true;
    _directlyReduceRule.default.execute(directlyLeftRecursiveDefinition, disallowIsolated, context);
    _directlyRepeatRule.default.execute(directlyLeftRecursiveDefinition, context);
    var rule = directlyLeftRecursiveDefinition.getRule();
    var directlyLeftRecursiveDefinitions = (0, _context.findDirectlyLeftRecursiveDefinitions)(rule, context);
    var replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
    (0, _context.removeDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmVwbGFjZW1lbnREZWZpbml0aW9uIGZyb20gXCIuL3JlcGxhY2VtZW50RGVmaW5pdGlvblwiO1xuaW1wb3J0IERpcmVjdGx5UmVwZWF0UnVsZU9wZXJhdGlvbiBmcm9tIFwiLi9vcGVyYXRpb24vZGlyZWN0bHlSZXBlYXRSdWxlXCI7XG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VSdWxlT3BlcmF0aW9uIGZyb20gXCIuL29wZXJhdGlvbi9kaXJlY3RseVJlZHVjZVJ1bGVcIjtcblxuaW1wb3J0IHsgZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sXG4gICAgICAgICBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsXG4gICAgICAgICByZW1vdmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9IGZyb20gXCIuL3V0aWxpdGllcy9jb250ZXh0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCkge1xuICBsZXQgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGNvbnRleHQpO1xuXG4gIHdoaWxlIChkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uICE9PSBudWxsKSB7XG4gICAgcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCk7XG5cbiAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oY29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgY29udGV4dCkge1xuICBjb25zdCBkaXNhbGxvd0lzb2xhdGVkID0gdHJ1ZTtcblxuICBEaXJlY3RseVJlZHVjZVJ1bGVPcGVyYXRpb24uZXhlY3V0ZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBkaXNhbGxvd0lzb2xhdGVkLCBjb250ZXh0KTtcblxuICBEaXJlY3RseVJlcGVhdFJ1bGVPcGVyYXRpb24uZXhlY3V0ZShkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBjb250ZXh0KTtcblxuICBjb25zdCBydWxlID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbi5nZXRSdWxlKCk7XG5cbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgY29udGV4dCk7XG5cbiAgY29uc3QgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gUmVwbGFjZW1lbnREZWZpbml0aW9uLmZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIHJ1bGUucmVwbGFjZUFsbERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG5cbiAgcmVtb3ZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGNvbnRleHQpO1xufVxuIl0sIm5hbWVzIjpbImVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJjb250ZXh0IiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24iLCJkaXNhbGxvd0lzb2xhdGVkIiwiRGlyZWN0bHlSZWR1Y2VSdWxlT3BlcmF0aW9uIiwiZXhlY3V0ZSIsIkRpcmVjdGx5UmVwZWF0UnVsZU9wZXJhdGlvbiIsInJ1bGUiLCJnZXRSdWxlIiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXBsYWNlbWVudERlZmluaXRpb24iLCJSZXBsYWNlbWVudERlZmluaXRpb24iLCJmcm9tRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsInJlcGxhY2VBbGxEZWZpbml0aW9ucyIsInJlbW92ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBVWIsU0FRQzs7O2VBUnVCQSw0QkFBNEI7OzswRUFSbEIseUJBQXlCO3VFQUNuQixnQ0FBZ0M7dUVBQ2hDLGdDQUFnQzt1QkFJakIscUJBQXFCOzs7Ozs7QUFFN0QsU0FBU0EsNEJBQTRCLENBQUNDLE9BQU8sRUFBRTtJQUM1RCxJQUFJQywrQkFBK0IsR0FBR0MsSUFBQUEsUUFBbUMsb0NBQUEsRUFBQ0YsT0FBTyxDQUFDLEFBQUM7SUFFbkYsTUFBT0MsK0JBQStCLEtBQUssSUFBSSxDQUFFO1FBQy9DRSwwQkFBMEIsQ0FBQ0YsK0JBQStCLEVBQUVELE9BQU8sQ0FBQyxDQUFDO1FBRXJFQywrQkFBK0IsR0FBR0MsSUFBQUEsUUFBbUMsb0NBQUEsRUFBQ0YsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTRywwQkFBMEIsQ0FBQ0YsK0JBQStCLEVBQUVELE9BQU8sRUFBRTtJQUM1RSxJQUFNSSxnQkFBZ0IsR0FBRyxJQUFJLEFBQUM7SUFFOUJDLG1CQUEyQixRQUFBLENBQUNDLE9BQU8sQ0FBQ0wsK0JBQStCLEVBQUVHLGdCQUFnQixFQUFFSixPQUFPLENBQUMsQ0FBQztJQUVoR08sbUJBQTJCLFFBQUEsQ0FBQ0QsT0FBTyxDQUFDTCwrQkFBK0IsRUFBRUQsT0FBTyxDQUFDLENBQUM7SUFFOUUsSUFBTVEsSUFBSSxHQUFHUCwrQkFBK0IsQ0FBQ1EsT0FBTyxFQUFFLEFBQUM7SUFFdkQsSUFBTUMsZ0NBQWdDLEdBQUdDLElBQUFBLFFBQW9DLHFDQUFBLEVBQUNILElBQUksRUFBRVIsT0FBTyxDQUFDLEFBQUM7SUFFN0YsSUFBTVkscUJBQXFCLEdBQUdDLHNCQUFxQixRQUFBLENBQUNDLG1DQUFtQyxDQUFDYiwrQkFBK0IsQ0FBQyxBQUFDO0lBRXpITyxJQUFJLENBQUNPLHFCQUFxQixDQUFDSCxxQkFBcUIsQ0FBQyxDQUFDO0lBRWxESSxJQUFBQSxRQUFzQyx1Q0FBQSxFQUFDTixnQ0FBZ0MsRUFBRVYsT0FBTyxDQUFDLENBQUM7QUFDcEYsQ0FBQyJ9