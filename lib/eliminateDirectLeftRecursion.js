"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _definition = /*#__PURE__*/ _interop_require_default(require("./definition"));
var _directly = /*#__PURE__*/ _interop_require_default(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interop_require_default(require("./rule/repeated/directly"));
var _array = require("./utilities/array");
var _context = require("./utilities/context");
var _definition1 = require("./utilities/definition");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function eliminateDirectLeftRecursion(context) {
    var trivialCycle = findTrivialCycle(context);
    while(trivialCycle !== null){
        var ruleNames = trivialCycle, firstRuleName = (0, _array.first)(ruleNames), directlyLeftRecursiveRuleName = firstRuleName; ///
        rewriteDirectLeftRecursion(directlyLeftRecursiveRuleName, context);
        rewriteDirectedGraph(directlyLeftRecursiveRuleName, context);
        trivialCycle = findTrivialCycle(context);
    }
}
function findTrivialCycle(context) {
    var trivialCycle = null;
    var directedGraph = context.directedGraph, trivialCycles = directedGraph.findTrivialCycles(), trivialCyclesLength = trivialCycles.length;
    if (trivialCyclesLength > 0) {
        var firstTrivialCycle = (0, _array.first)(trivialCycles);
        trivialCycle = firstTrivialCycle; ///
    }
    return trivialCycle;
}
function rewriteDirectedGraph(directlyLeftRecursiveRuleName, context) {
    var directedGraph = context.directedGraph, sourceVertex = directlyLeftRecursiveRuleName, targetVertex = directlyLeftRecursiveRuleName; ///
    directedGraph.removeEdgeBySourceVertexAndTargetVertex(sourceVertex, targetVertex);
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveRuleName, context) {
    var ruleMap = context.ruleMap;
    var ruleName = directlyLeftRecursiveRuleName, rule = ruleMap[ruleName], directlyLeftRecursiveDefinitions = (0, _context.findLeftRecursiveDefinitions)(rule, function(leftRecursiveDefinition) {
        var definition = leftRecursiveDefinition, leftRecursiveRuleNames = (0, _definition1.leftRecursiveRuleNamesFromDefinition)(definition), firstLeftRecursiveRuleName = (0, _array.first)(leftRecursiveRuleNames);
        if (firstLeftRecursiveRuleName === ruleName) {
            return true;
        }
    }, context), directlyReducedRule = _directly.default.fromRuleAndDirectlyLeftRecursiveDefinitions(rule, directlyLeftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
    var directlyRepeatedRule = _directly1.default.fromRuleAndDirectlyLeftRecursiveDefinitions(rule, directlyLeftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    rule.removeAllDefinitions();
    var firstDirectlyLeftRecursiveDefinition = (0, _array.first)(directlyLeftRecursiveDefinitions), directlyLeftRecursiveDefinition = firstDirectlyLeftRecursiveDefinition, definition = _definition.default.fromRuleNameAndDirectlyLeftRecursiveDefinitionAndDirectlyReducedRule(ruleName, directlyLeftRecursiveDefinition);
    rule.addDefinition(definition);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRGVmaW5pdGlvbiBmcm9tIFwiLi9kZWZpbml0aW9uXCI7XG5pbXBvcnQgRGlyZWN0bHlSZWR1Y2VkUnVsZSBmcm9tIFwiLi9ydWxlL3JlZHVjZWQvZGlyZWN0bHlcIjtcbmltcG9ydCBEaXJlY3RseVJlcGVhdGVkUnVsZSBmcm9tIFwiLi9ydWxlL3JlcGVhdGVkL2RpcmVjdGx5XCI7XG5cbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBmaW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NvbnRleHRcIjtcbmltcG9ydCB7IGxlZnRSZWN1cnNpdmVSdWxlTmFtZXNGcm9tRGVmaW5pdGlvbiB9IGZyb20gXCIuL3V0aWxpdGllcy9kZWZpbml0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24oY29udGV4dCkge1xuICBsZXQgdHJpdmlhbEN5Y2xlID0gZmluZFRyaXZpYWxDeWNsZShjb250ZXh0KTtcblxuICB3aGlsZSAodHJpdmlhbEN5Y2xlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcnVsZU5hbWVzID0gdHJpdmlhbEN5Y2xlLCAvLy9cbiAgICAgICAgICBmaXJzdFJ1bGVOYW1lID0gZmlyc3QocnVsZU5hbWVzKSxcbiAgICAgICAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGZpcnN0UnVsZU5hbWU7ICAvLy9cblxuICAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBjb250ZXh0KTtcblxuICAgIHJld3JpdGVEaXJlY3RlZEdyYXBoKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCBjb250ZXh0KTtcblxuICAgIHRyaXZpYWxDeWNsZSA9IGZpbmRUcml2aWFsQ3ljbGUoY29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFRyaXZpYWxDeWNsZShjb250ZXh0KSB7XG4gIGxldCB0cml2aWFsQ3ljbGUgPSBudWxsO1xuXG4gIGNvbnN0IHsgZGlyZWN0ZWRHcmFwaCB9ID0gY29udGV4dCxcbiAgICAgICAgdHJpdmlhbEN5Y2xlcyA9IGRpcmVjdGVkR3JhcGguZmluZFRyaXZpYWxDeWNsZXMoKSxcbiAgICAgICAgdHJpdmlhbEN5Y2xlc0xlbmd0aCA9IHRyaXZpYWxDeWNsZXMubGVuZ3RoO1xuXG4gIGlmICh0cml2aWFsQ3ljbGVzTGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGZpcnN0VHJpdmlhbEN5Y2xlID0gZmlyc3QodHJpdmlhbEN5Y2xlcyk7XG5cbiAgICB0cml2aWFsQ3ljbGUgPSBmaXJzdFRyaXZpYWxDeWNsZTsgLy8vXG4gIH1cblxuICByZXR1cm4gdHJpdmlhbEN5Y2xlO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0ZWRHcmFwaChkaXJlY3RseUxlZnRSZWN1cnNpdmVSdWxlTmFtZSwgY29udGV4dCkge1xuICBjb25zdCB7IGRpcmVjdGVkR3JhcGggfSA9IGNvbnRleHQsXG4gICAgICAgIHNvdXJjZVZlcnRleCA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lLCAvLy9cbiAgICAgICAgdGFyZ2V0VmVydGV4ID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWU7IC8vL1xuXG4gIGRpcmVjdGVkR3JhcGgucmVtb3ZlRWRnZUJ5U291cmNlVmVydGV4QW5kVGFyZ2V0VmVydGV4KHNvdXJjZVZlcnRleCwgdGFyZ2V0VmVydGV4KTtcbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBydWxlTWFwIH0gPSBjb250ZXh0O1xuXG4gIGNvbnN0IHJ1bGVOYW1lID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUsIC8vL1xuICAgICAgICBydWxlID0gcnVsZU1hcFtydWxlTmFtZV0sXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhydWxlLCAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gbGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIC8vL1xuICAgICAgICAgICAgICAgIGxlZnRSZWN1cnNpdmVSdWxlTmFtZXMgPSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzRnJvbURlZmluaXRpb24oZGVmaW5pdGlvbiksXG4gICAgICAgICAgICAgICAgZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBmaXJzdChsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzKTtcblxuICAgICAgICAgIGlmIChmaXJzdExlZnRSZWN1cnNpdmVSdWxlTmFtZSA9PT0gcnVsZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgIGRpcmVjdGx5UmVkdWNlZFJ1bGUgPSBEaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlQW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSA9IGRpcmVjdGx5UmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWVdID0gZGlyZWN0bHlSZWR1Y2VkUnVsZTtcblxuICBjb25zdCBkaXJlY3RseVJlcGVhdGVkUnVsZSA9IERpcmVjdGx5UmVwZWF0ZWRSdWxlLmZyb21SdWxlQW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpLFxuICAgICAgICBkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWUgPSBkaXJlY3RseVJlcGVhdGVkUnVsZS5nZXROYW1lKCk7XG5cbiAgcnVsZU1hcFtkaXJlY3RseVJlcGVhdGVkUnVsZU5hbWVdID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGU7XG5cbiAgcnVsZS5yZW1vdmVBbGxEZWZpbml0aW9ucygpO1xuXG4gIGNvbnN0IGZpcnN0RGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0KGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGZpcnN0RGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgLy8vXG4gICAgICAgIGRlZmluaXRpb24gPSBEZWZpbml0aW9uLmZyb21SdWxlTmFtZUFuZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREaXJlY3RseVJlZHVjZWRSdWxlKHJ1bGVOYW1lLCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICBydWxlLmFkZERlZmluaXRpb24oZGVmaW5pdGlvbik7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsImNvbnRleHQiLCJ0cml2aWFsQ3ljbGUiLCJmaW5kVHJpdmlhbEN5Y2xlIiwicnVsZU5hbWVzIiwiZmlyc3RSdWxlTmFtZSIsImZpcnN0IiwiZGlyZWN0bHlMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJyZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsInJld3JpdGVEaXJlY3RlZEdyYXBoIiwiZGlyZWN0ZWRHcmFwaCIsInRyaXZpYWxDeWNsZXMiLCJmaW5kVHJpdmlhbEN5Y2xlcyIsInRyaXZpYWxDeWNsZXNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdFRyaXZpYWxDeWNsZSIsInNvdXJjZVZlcnRleCIsInRhcmdldFZlcnRleCIsInJlbW92ZUVkZ2VCeVNvdXJjZVZlcnRleEFuZFRhcmdldFZlcnRleCIsInJ1bGVNYXAiLCJydWxlTmFtZSIsInJ1bGUiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImRlZmluaXRpb24iLCJsZWZ0UmVjdXJzaXZlUnVsZU5hbWVzIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lc0Zyb21EZWZpbml0aW9uIiwiZmlyc3RMZWZ0UmVjdXJzaXZlUnVsZU5hbWUiLCJkaXJlY3RseVJlZHVjZWRSdWxlIiwiRGlyZWN0bHlSZWR1Y2VkUnVsZSIsImZyb21SdWxlQW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJkaXJlY3RseVJlZHVjZWRSdWxlTmFtZSIsImdldE5hbWUiLCJkaXJlY3RseVJlcGVhdGVkUnVsZSIsIkRpcmVjdGx5UmVwZWF0ZWRSdWxlIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lIiwicmVtb3ZlQWxsRGVmaW5pdGlvbnMiLCJmaXJzdERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiRGVmaW5pdGlvbiIsImZyb21SdWxlTmFtZUFuZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbmREaXJlY3RseVJlZHVjZWRSdWxlIiwiYWRkRGVmaW5pdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OztpRUFSRDsrREFDUztnRUFDQztxQkFFWDt1QkFDdUI7MkJBQ1E7Ozs7OztBQUV0QyxTQUFTQSw2QkFBNkJDLE9BQU8sRUFBRTtJQUM1RCxJQUFJQyxlQUFlQyxpQkFBaUJGO0lBRXBDLE1BQU9DLGlCQUFpQixJQUFJLENBQUU7UUFDNUIsSUFBTUUsWUFBWUYsY0FDWkcsZ0JBQWdCQyxJQUFBQSxZQUFLLEVBQUNGLFlBQ3RCRyxnQ0FBZ0NGLGVBQWdCLEdBQUc7UUFFekRHLDJCQUEyQkQsK0JBQStCTjtRQUUxRFEscUJBQXFCRiwrQkFBK0JOO1FBRXBEQyxlQUFlQyxpQkFBaUJGO0lBQ2xDO0FBQ0Y7QUFFQSxTQUFTRSxpQkFBaUJGLE9BQU8sRUFBRTtJQUNqQyxJQUFJQyxlQUFlLElBQUk7SUFFdkIsSUFBTSxBQUFFUSxnQkFBa0JULFFBQWxCUyxlQUNGQyxnQkFBZ0JELGNBQWNFLGlCQUFpQixJQUMvQ0Msc0JBQXNCRixjQUFjRyxNQUFNO0lBRWhELElBQUlELHNCQUFzQixHQUFHO1FBQzNCLElBQU1FLG9CQUFvQlQsSUFBQUEsWUFBSyxFQUFDSztRQUVoQ1QsZUFBZWEsbUJBQW1CLEdBQUc7SUFDdkMsQ0FBQztJQUVELE9BQU9iO0FBQ1Q7QUFFQSxTQUFTTyxxQkFBcUJGLDZCQUE2QixFQUFFTixPQUFPLEVBQUU7SUFDcEUsSUFBTSxBQUFFUyxnQkFBa0JULFFBQWxCUyxlQUNGTSxlQUFlVCwrQkFDZlUsZUFBZVYsK0JBQStCLEdBQUc7SUFFdkRHLGNBQWNRLHVDQUF1QyxDQUFDRixjQUFjQztBQUN0RTtBQUVBLFNBQVNULDJCQUEyQkQsNkJBQTZCLEVBQUVOLE9BQU8sRUFBRTtJQUMxRSxJQUFNLEFBQUVrQixVQUFZbEIsUUFBWmtCO0lBRVIsSUFBTUMsV0FBV2IsK0JBQ1hjLE9BQU9GLE9BQU8sQ0FBQ0MsU0FBUyxFQUN4QkUsbUNBQW1DQyxJQUFBQSxxQ0FBNEIsRUFBQ0YsTUFBTSxTQUFDRyx5QkFBNEI7UUFDakcsSUFBTUMsYUFBYUQseUJBQ2JFLHlCQUF5QkMsSUFBQUEsaURBQW9DLEVBQUNGLGFBQzlERyw2QkFBNkJ0QixJQUFBQSxZQUFLLEVBQUNvQjtRQUV6QyxJQUFJRSwrQkFBK0JSLFVBQVU7WUFDM0MsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNILEdBQUduQixVQUNINEIsc0JBQXNCQyxpQkFBbUIsQ0FBQ0MsMkNBQTJDLENBQUNWLE1BQU1DLG1DQUM1RlUsMEJBQTBCSCxvQkFBb0JJLE9BQU87SUFFM0RkLE9BQU8sQ0FBQ2Esd0JBQXdCLEdBQUdIO0lBRW5DLElBQU1LLHVCQUF1QkMsa0JBQW9CLENBQUNKLDJDQUEyQyxDQUFDVixNQUFNQyxtQ0FDOUZjLDJCQUEyQkYscUJBQXFCRCxPQUFPO0lBRTdEZCxPQUFPLENBQUNpQix5QkFBeUIsR0FBR0Y7SUFFcENiLEtBQUtnQixvQkFBb0I7SUFFekIsSUFBTUMsdUNBQXVDaEMsSUFBQUEsWUFBSyxFQUFDZ0IsbUNBQzdDaUIsa0NBQWtDRCxzQ0FDbENiLGFBQWFlLG1CQUFVLENBQUNDLG9FQUFvRSxDQUFDckIsVUFBVW1CO0lBRTdHbEIsS0FBS3FCLGFBQWEsQ0FBQ2pCO0FBQ3JCIn0=