"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _reduced = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced"));
var _recursive = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _definitions = require("./utilities/definitions");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions); ///
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveRuleName = directlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName);
    directlyLeftRecursiveDefinition = (0, _definitions.mergeDirectlyLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions); ///
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], reducedRule = _reduced.default.fromRule(rule);
    if (reducedRule === null) {
        var definition = directlyLeftRecursiveDefinition, definitionString = definition.asString();
        throw new Error("The '".concat(definitionString, "' directly left recursive definition of the '").concat(ruleName, "' rule is isolated and therefore cannot be rewritten."));
    }
    var reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition, removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    rule.replaceAllDefinitions(replacementDefinition);
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = null;
    leftRecursiveDefinitions.some(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            return true;
        }
    });
    return directlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName) {
    var directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, ruleName = directlyLeftRecursiveDefinition.getRuleName();
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IFJlZHVjZWRSdWxlIGZyb20gXCIuL3J1bGUvcmVkdWNlZFwiO1xuaW1wb3J0IFJlY3Vyc2l2ZURlZmluaXRpb24gZnJvbSBcIi4vZGVmaW5pdGlvbi9yZWN1cnNpdmVcIjtcbmltcG9ydCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL2RlZmluaXRpb24vcmVjdXJzaXZlL2xlZnQvZGlyZWN0bHlcIjtcblxuaW1wb3J0IHsgbWVyZ2VEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyB9IGZyb20gXCIuL3V0aWxpdGllcy9kZWZpbml0aW9uc1wiO1xuXG5jb25zdCB7IGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGxldCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmV0cmlldmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyk7XG5cbiAgd2hpbGUgKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IHJldHJpZXZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpOyAgLy8vXG4gIH1cbn1cblxuZnVuY3Rpb24gcmV3cml0ZURpcmVjdExlZnRSZWN1cnNpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVSdWxlTmFtZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0TGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lKCksXG4gICAgICAgIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gcmV0cmlldmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIGxlZnRSZWN1cnNpdmVSdWxlTmFtZSk7XG5cbiAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG1lcmdlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpOyAgLy8vXG5cbiAgY29uc3QgcnVsZU5hbWUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXSxcbiAgICAgICAgcmVkdWNlZFJ1bGUgPSBSZWR1Y2VkUnVsZS5mcm9tUnVsZShydWxlKTtcblxuICBpZiAocmVkdWNlZFJ1bGUgPT09IG51bGwpIHtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiwgLy8vXG4gICAgICAgICAgZGVmaW5pdGlvblN0cmluZyA9IGRlZmluaXRpb24uYXNTdHJpbmcoKTtcblxuICAgIHRocm93IG5ldyBFcnJvcihgVGhlICcke2RlZmluaXRpb25TdHJpbmd9JyBkaXJlY3RseSBsZWZ0IHJlY3Vyc2l2ZSBkZWZpbml0aW9uIG9mIHRoZSAnJHtydWxlTmFtZX0nIHJ1bGUgaXMgaXNvbGF0ZWQgYW5kIHRoZXJlZm9yZSBjYW5ub3QgYmUgcmV3cml0dGVuLmApO1xuICB9XG5cbiAgY29uc3QgcmVkdWNlZFJ1bGVOYW1lID0gcmVkdWNlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbcmVkdWNlZFJ1bGVOYW1lXSA9IHJlZHVjZWRSdWxlO1xuXG4gIGNvbnN0IHJlY3Vyc2l2ZURlZmluaXRpb24gPSBSZWN1cnNpdmVEZWZpbml0aW9uLmZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pLFxuICAgICAgICByZXBsYWNlbWVudERlZmluaXRpb24gPSByZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgcnVsZS5yZXBsYWNlQWxsRGVmaW5pdGlvbnMocmVwbGFjZW1lbnREZWZpbml0aW9uKTtcblxuICBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBhbWVuZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgZmlsdGVyKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLmluY2x1ZGVzKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKTtcblxuICAgIGlmICghcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9uc0luY2x1ZGVzTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgbGV0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24gPSBudWxsO1xuXG4gIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5zb21lKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uOyAgLy8vXG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb247XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMuZmlsdGVyKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCAgLy8vXG4gICAgICAgICAgICBydWxlTmFtZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZU5hbWUoKTtcblxuICAgICAgaWYgKHJ1bGVOYW1lID09PSBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnM7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsImZpbHRlciIsImFycmF5VXRpbGl0aWVzIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicnVsZU1hcCIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXRyaWV2ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsImxlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImdldExlZnRSZWN1cnNpdmVSdWxlTmFtZSIsImRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwicmV0cmlldmVEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsIm1lcmdlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicnVsZSIsInJlZHVjZWRSdWxlIiwiUmVkdWNlZFJ1bGUiLCJmcm9tUnVsZSIsImRlZmluaXRpb24iLCJkZWZpbml0aW9uU3RyaW5nIiwiYXNTdHJpbmciLCJFcnJvciIsInJlZHVjZWRSdWxlTmFtZSIsImdldE5hbWUiLCJyZWN1cnNpdmVEZWZpbml0aW9uIiwiUmVjdXJzaXZlRGVmaW5pdGlvbiIsImZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVwbGFjZW1lbnREZWZpbml0aW9uIiwicmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJlcGxhY2VBbGxEZWZpbml0aW9ucyIsImFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zSW5jbHVkZXNMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluY2x1ZGVzIiwic29tZSIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsIkRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7OztlQVlXQSw0QkFBNEI7Ozt5QkFWckIsV0FBVzs0REFFbEIsZ0JBQWdCOzhEQUNSLHdCQUF3Qjs2REFDWixzQ0FBc0M7MkJBRTVCLHlCQUF5Qjs7Ozs7Ozs7Ozs7OztBQUUvRSxJQUFNLEFBQUVDLE1BQU0sR0FBS0MsVUFBYyxlQUFBLENBQXpCRCxNQUFNLEFBQW1CLEFBQUM7QUFFbkIsU0FBU0QsNEJBQTRCLENBQUNHLHdCQUF3QixFQUFFQyxPQUFPLEVBQUU7SUFDdEYsSUFBSUMsK0JBQStCLEdBQUdDLHVDQUF1QyxDQUFDSCx3QkFBd0IsQ0FBQyxBQUFDO0lBRXhHLE1BQU9FLCtCQUErQixLQUFLLElBQUksQ0FBRTtRQUMvQ0UsMEJBQTBCLENBQUNGLCtCQUErQixFQUFFRix3QkFBd0IsRUFBRUMsT0FBTyxDQUFDLENBQUM7UUFFL0ZDLCtCQUErQixHQUFHQyx1Q0FBdUMsQ0FBQ0gsd0JBQXdCLENBQUMsQ0FBQyxDQUFFLEdBQUc7S0FDMUc7Q0FDRjtBQUVELFNBQVNJLDBCQUEwQixDQUFDRiwrQkFBK0IsRUFBRUYsd0JBQXdCLEVBQUVDLE9BQU8sRUFBRTtJQUN0RyxJQUFNSSxxQkFBcUIsR0FBR0gsK0JBQStCLENBQUNJLHdCQUF3QixFQUFFLEVBQ2xGQyxnQ0FBZ0MsR0FBR0Msd0NBQXdDLENBQUNSLHdCQUF3QixFQUFFSyxxQkFBcUIsQ0FBQyxBQUFDO0lBRW5JSCwrQkFBK0IsR0FBR08sSUFBQUEsWUFBcUMsc0NBQUEsRUFBQ0YsZ0NBQWdDLENBQUMsQ0FBQyxDQUFFLEdBQUc7SUFFL0csSUFBTUcsUUFBUSxHQUFHUiwrQkFBK0IsQ0FBQ1MsV0FBVyxFQUFFLEVBQ3hEQyxJQUFJLEdBQUdYLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDLEVBQ3hCRyxXQUFXLEdBQUdDLFFBQVcsUUFBQSxDQUFDQyxRQUFRLENBQUNILElBQUksQ0FBQyxBQUFDO0lBRS9DLElBQUlDLFdBQVcsS0FBSyxJQUFJLEVBQUU7UUFDeEIsSUFBTUcsVUFBVSxHQUFHZCwrQkFBK0IsRUFDNUNlLGdCQUFnQixHQUFHRCxVQUFVLENBQUNFLFFBQVEsRUFBRSxBQUFDO1FBRS9DLE1BQU0sSUFBSUMsS0FBSyxDQUFDLEFBQUMsT0FBSyxDQUFrRVQsTUFBUSxDQUF4RU8sZ0JBQWdCLEVBQUMsK0NBQTZDLENBQVcsQ0FBQSxNQUFxRCxDQUE5RFAsUUFBUSxFQUFDLHVEQUFxRCxDQUFDLENBQUMsQ0FBQztLQUMxSjtJQUVELElBQU1VLGVBQWUsR0FBR1AsV0FBVyxDQUFDUSxPQUFPLEVBQUUsQUFBQztJQUU5Q3BCLE9BQU8sQ0FBQ21CLGVBQWUsQ0FBQyxHQUFHUCxXQUFXLENBQUM7SUFFdkMsSUFBTVMsbUJBQW1CLEdBQUdDLFVBQW1CLFFBQUEsQ0FBQ0MsbUNBQW1DLENBQUN0QiwrQkFBK0IsQ0FBQyxFQUM5R3VCLHFCQUFxQixHQUFHSCxtQkFBbUIsRUFDM0NJLCtCQUErQixHQUFHbkIsZ0NBQWdDLEFBQUMsRUFBQyxHQUFHO0lBRTdFSyxJQUFJLENBQUNlLHFCQUFxQixDQUFDRixxQkFBcUIsQ0FBQyxDQUFDO0lBRWxERyw2QkFBNkIsQ0FBQzVCLHdCQUF3QixFQUFFMEIsK0JBQStCLENBQUMsQ0FBQztDQUMxRjtBQUVELFNBQVNFLDZCQUE2QixDQUFDNUIsd0JBQXdCLEVBQUUwQiwrQkFBK0IsRUFBRTtJQUNoRzVCLE1BQU0sQ0FBQ0Usd0JBQXdCLEVBQUUsU0FBQzZCLHVCQUF1QixFQUFLO1FBQzVELElBQU1DLDhEQUE4RCxHQUFHSiwrQkFBK0IsQ0FBQ0ssUUFBUSxDQUFDRix1QkFBdUIsQ0FBQyxBQUFDO1FBRXpJLElBQUksQ0FBQ0MsOERBQThELEVBQUU7WUFDbkUsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGLENBQUMsQ0FBQztDQUNKO0FBRUQsU0FBUzNCLHVDQUF1QyxDQUFDSCx3QkFBd0IsRUFBRTtJQUN6RSxJQUFJRSwrQkFBK0IsR0FBRyxJQUFJLEFBQUM7SUFFM0NGLHdCQUF3QixDQUFDZ0MsSUFBSSxDQUFDLFNBQUNILHVCQUF1QixFQUFLO1FBQ3pELElBQU1JLHNEQUFzRCxHQUFJSixBQUF1QixXQUFZSyxDQUFuQ0wsdUJBQXVCLEVBQVlLLFNBQStCLFFBQUEsQ0FBQSxBQUFDLEFBQUM7UUFFcEksSUFBSUQsc0RBQXNELEVBQUU7WUFDMUQvQiwrQkFBK0IsR0FBRzJCLHVCQUF1QixDQUFDLENBQUUsR0FBRztZQUUvRCxPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTzNCLCtCQUErQixDQUFDO0NBQ3hDO0FBRUQsU0FBU00sd0NBQXdDLENBQUNSLHdCQUF3QixFQUFFSyxxQkFBcUIsRUFBRTtJQUNqRyxJQUFNRSxnQ0FBZ0MsR0FBR1Asd0JBQXdCLENBQUNGLE1BQU0sQ0FBQyxTQUFDK0IsdUJBQXVCLEVBQUs7UUFDcEcsSUFBTUksc0RBQXNELEdBQUlKLEFBQXVCLFdBQVlLLENBQW5DTCx1QkFBdUIsRUFBWUssU0FBK0IsUUFBQSxDQUFBLEFBQUMsQUFBQztRQUVwSSxJQUFJRCxzREFBc0QsRUFBRTtZQUMxRCxJQUFNL0IsK0JBQStCLEdBQUcyQix1QkFBdUIsRUFDekRuQixRQUFRLEdBQUdSLCtCQUErQixDQUFDUyxXQUFXLEVBQUUsQUFBQztZQUUvRCxJQUFJRCxRQUFRLEtBQUtMLHFCQUFxQixFQUFFO2dCQUN0QyxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7S0FDRixDQUFDLEFBQUM7SUFFSCxPQUFPRSxnQ0FBZ0MsQ0FBQztDQUN6QyJ9