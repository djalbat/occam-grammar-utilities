"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacement = /*#__PURE__*/ _interopRequireDefault(require("./definition/replacement"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var find = _necessary.arrayUtilities.find, filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions); ///
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = directlyLeftRecursiveDefinition.getRule(), directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName(), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
    var replacementDefinition = _replacement.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
    var directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,