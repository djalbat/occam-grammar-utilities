"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eliminateDirectLeftRecursion;
var _occamParsers = require("occam-parsers");
var _necessary = require("necessary");
var _reduced = _interopRequireDefault(require("./rule/reduced"));
var _directly = _interopRequireDefault(require("./definition/recursive/left/directly"));
var _part = require("./utilities/part");
var _parts = require("./utilities/parts");
var _rules = require("./utilities/rules");
var _definition = require("./utilities/definition");
var _definitions = require("./utilities/definitions");
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap);
    directlyLeftRecursiveRules.forEach(function(directlyLeftRecursiveRule) {
        var reducedRule = _reduced.default.fromDirectlyLeftRecursiveRule(directlyLeftRecursiveRule), reducedRuleName = reducedRule.getName();
        ruleMap[reducedRuleName] = reducedRule;
        var directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule), directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions), replacementDefinition = rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacedDefinition = first(directlyLeftRecursiveDefinitions), definitions = tail(directlyLeftRecursiveDefinitions); ///
        directlyLeftRecursiveRule.removeDefinitions(definitions);
        directlyLeftRecursiveRule.replaceDefinition(replacedDefinition, replacementDefinition);
    });
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, tail = _necessary.arrayUtilities.tail;
function retrieveDirectlyLeftRecursiveRules(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveRules = (0, _rules).retrieveLeftRecursiveRules(leftRecursiveDefinitions, _directly.default, ruleMap);
    return directlyLeftRecursiveRules;
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions).mergeLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions, _directly.default);
    return directlyLeftRecursiveDefinition;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var directlyLeftRecursiveDefinitionParts = (0, _definition).definitionPartsFromDefinition(directlyLeftRecursiveDefinition);
    var firstDirectlyLeftDefinitionPart = first(directlyLeftRecursiveDefinitionParts), part = firstDirectlyLeftDefinitionPart, reducedPart = (0, _part).reducedPartFromPart(part);
    var parts = directlyLeftRecursiveDefinitionParts; ///
    var repeatedPart = (0, _parts).repeatedPartFromParts(parts);
    parts = [
        reducedPart,
        repeatedPart
    ];
    var definition = new _occamParsers.Definition(parts), replacementDefinition = definition; ///
    return replacementDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveRule) {
    var definitions = directlyLeftRecursiveRule.getDefinitions(), directlyLeftRecursiveDefinitions = definitions.filter(function(definition) {
        var definitionDirectlyLeftRecursiveDefinition = _instanceof(definition, _directly.default);
        if (definitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,