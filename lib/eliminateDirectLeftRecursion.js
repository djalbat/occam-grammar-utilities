"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced/directly"));
var _directly1 = /*#__PURE__*/ _interopRequireDefault(require("./rule/repeated/directly"));
var _replacementDefinition = /*#__PURE__*/ _interopRequireDefault(require("./replacementDefinition"));
var _directly2 = /*#__PURE__*/ _interopRequireDefault(require("./recursiveDefinition/left/directly"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var find = _necessary.arrayUtilities.find, filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveDefinition = findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    }
}
function directlyReduceRule(rule, leftRecursiveDefinitions, ruleMap) {
    var directlyReducedRule = _directly.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyReducedRuleName = directlyReducedRule.getName();
    ruleMap[directlyReducedRuleName] = directlyReducedRule;
}
function directlyRepeatRule(rule, leftRecursiveDefinitions, ruleMap) {
    var directlyRepeatedRule = _directly1.default.fromRuleAndLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), directlyRepeatedRuleName = directlyRepeatedRule.getName();
    ruleMap[directlyRepeatedRuleName] = directlyRepeatedRule;
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var rule = directlyLeftRecursiveDefinition.getRule();
    directlyReduceRule(rule, leftRecursiveDefinitions, ruleMap);
    directlyRepeatRule(rule, leftRecursiveDefinitions, ruleMap);
    var directlyLeftRecursiveDefinitions = findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions), removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function findDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = leftRecursiveDefinitions.find(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            return true;
        }
    }) || null;
    return directlyLeftRecursiveDefinition;
}
function findDirectlyLeftRecursiveDefinitions(rule, leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinitions = find(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionRule = leftRecursiveDefinition.getRule();
        if (leftRecursiveDefinitionRule === rule) {
            var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly2.default);
            if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}
function rewriteDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition) {
    var rule = directlyLeftRecursiveDefinition.getRule(), replacementDefinition = _replacementDefinition.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition);
    rule.replaceAllDefinitions(replacementDefinition);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGltaW5hdGVEaXJlY3RMZWZ0UmVjdXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IERpcmVjdGx5UmVkdWNlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZWR1Y2VkL2RpcmVjdGx5XCI7XG5pbXBvcnQgRGlyZWN0bHlSZXBlYXRlZFJ1bGUgZnJvbSBcIi4vcnVsZS9yZXBlYXRlZC9kaXJlY3RseVwiO1xuaW1wb3J0IFJlcGxhY2VtZW50RGVmaW5pdGlvbiBmcm9tIFwiLi9yZXBsYWNlbWVudERlZmluaXRpb25cIjtcbmltcG9ydCBEaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIGZyb20gXCIuL3JlY3Vyc2l2ZURlZmluaXRpb24vbGVmdC9kaXJlY3RseVwiO1xuXG5jb25zdCB7IGZpbmQsIGZpbHRlciB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsaW1pbmF0ZURpcmVjdExlZnRSZWN1cnNpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGxldCBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcblxuICB3aGlsZSAoZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiAhPT0gbnVsbCkge1xuICAgIHJld3JpdGVEaXJlY3RMZWZ0UmVjdXJzaW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24sIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucywgcnVsZU1hcCk7XG5cbiAgICBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24obGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaXJlY3RseVJlZHVjZVJ1bGUocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IGRpcmVjdGx5UmVkdWNlZFJ1bGUgPSBEaXJlY3RseVJlZHVjZWRSdWxlLmZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIGRpcmVjdGx5UmVkdWNlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZWR1Y2VkUnVsZS5nZXROYW1lKCk7XG5cbiAgcnVsZU1hcFtkaXJlY3RseVJlZHVjZWRSdWxlTmFtZV0gPSBkaXJlY3RseVJlZHVjZWRSdWxlO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RseVJlcGVhdFJ1bGUocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCBydWxlTWFwKSB7XG4gIGNvbnN0IGRpcmVjdGx5UmVwZWF0ZWRSdWxlID0gRGlyZWN0bHlSZXBlYXRlZFJ1bGUuZnJvbVJ1bGVBbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSxcbiAgICAgICAgZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lID0gZGlyZWN0bHlSZXBlYXRlZFJ1bGUuZ2V0TmFtZSgpO1xuXG4gIHJ1bGVNYXBbZGlyZWN0bHlSZXBlYXRlZFJ1bGVOYW1lXSA9IGRpcmVjdGx5UmVwZWF0ZWRSdWxlO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApIHtcbiAgY29uc3QgcnVsZSA9IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0UnVsZSgpO1xuXG4gIGRpcmVjdGx5UmVkdWNlUnVsZShydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGRpcmVjdGx5UmVwZWF0UnVsZShydWxlLCBsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKHJ1bGUsIGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyksXG4gICAgICAgIHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uczsgLy8vXG5cbiAgcmV3cml0ZURpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24oZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKTtcbn1cblxuZnVuY3Rpb24gYW1lbmRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLCByZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGZpbHRlcihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uID0gcmVtb3ZlZExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5pbmNsdWRlcyhsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbik7XG5cbiAgICBpZiAoIXJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnNJbmNsdWRlc0xlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMpIHtcbiAgY29uc3QgZGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucy5maW5kKChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgaWYgKGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KSB8fCBudWxsO1xuXG4gIHJldHVybiBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMocnVsZSwgbGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zKSB7XG4gIGNvbnN0IGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zID0gZmluZChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMsIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSA9IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKTtcblxuICAgIGlmIChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvblJ1bGUgPT09IHJ1bGUpIHtcbiAgICAgIGNvbnN0IGxlZnRSZWN1cnNpdmVEZWZpbml0aW9uRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IChsZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiBpbnN0YW5jZW9mIERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gICAgICBpZiAobGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbihkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKSB7XG4gIGNvbnN0IHJ1bGUgPSBkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldFJ1bGUoKSxcbiAgICAgICAgcmVwbGFjZW1lbnREZWZpbml0aW9uID0gUmVwbGFjZW1lbnREZWZpbml0aW9uLmZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uKGRpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pO1xuXG4gIHJ1bGUucmVwbGFjZUFsbERlZmluaXRpb25zKHJlcGxhY2VtZW50RGVmaW5pdGlvbik7XG59XG4iXSwibmFtZXMiOlsiZWxpbWluYXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsImZpbmQiLCJhcnJheVV0aWxpdGllcyIsImZpbHRlciIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJ1bGVNYXAiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiZmluZERpcmVjdGx5TGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZXdyaXRlRGlyZWN0TGVmdFJlY3Vyc2lvbiIsImRpcmVjdGx5UmVkdWNlUnVsZSIsInJ1bGUiLCJkaXJlY3RseVJlZHVjZWRSdWxlIiwiRGlyZWN0bHlSZWR1Y2VkUnVsZSIsImZyb21SdWxlQW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwiZGlyZWN0bHlSZWR1Y2VkUnVsZU5hbWUiLCJnZXROYW1lIiwiZGlyZWN0bHlSZXBlYXRSdWxlIiwiZGlyZWN0bHlSZXBlYXRlZFJ1bGUiLCJEaXJlY3RseVJlcGVhdGVkUnVsZSIsImRpcmVjdGx5UmVwZWF0ZWRSdWxlTmFtZSIsImdldFJ1bGUiLCJkaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsImZpbmREaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJlbW92ZWRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJyZXdyaXRlRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImFtZW5kTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJyZW1vdmVkTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zSW5jbHVkZXNMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImluY2x1ZGVzIiwibGVmdFJlY3Vyc2l2ZURlZmluaXRpb25EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwiRGlyZWN0bHlMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbiIsImxlZnRSZWN1cnNpdmVEZWZpbml0aW9uUnVsZSIsInJlcGxhY2VtZW50RGVmaW5pdGlvbiIsIlJlcGxhY2VtZW50RGVmaW5pdGlvbiIsImZyb21EaXJlY3RseUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uIiwicmVwbGFjZUFsbERlZmluaXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7K0JBV2IsU0FRQzs7O2VBUnVCQSw0QkFBNEI7Ozt5QkFUckIsV0FBVzs2REFFVix5QkFBeUI7OERBQ3hCLDBCQUEwQjswRUFDekIseUJBQXlCOzhEQUNmLHFDQUFxQzs7Ozs7Ozs7Ozs7OztBQUVqRixJQUFRQyxJQUFJLEdBQWFDLFVBQWMsZUFBQSxDQUEvQkQsSUFBSSxFQUFFRSxNQUFNLEdBQUtELFVBQWMsZUFBQSxDQUF6QkMsTUFBTSxBQUFvQjtBQUV6QixTQUFTSCw0QkFBNEIsQ0FBQ0ksd0JBQXdCLEVBQUVDLE9BQU8sRUFBRTtJQUN0RixJQUFJQywrQkFBK0IsR0FBR0Ms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