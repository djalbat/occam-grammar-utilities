"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return eliminateDirectLeftRecursion;
    }
});
var _necessary = require("necessary");
var _reduced = /*#__PURE__*/ _interopRequireDefault(require("./rule/reduced"));
var _recursive = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive"));
var _directly = /*#__PURE__*/ _interopRequireDefault(require("./definition/recursive/left/directly"));
var _definitions = require("./utilities/definitions");
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var filter = _necessary.arrayUtilities.filter;
function eliminateDirectLeftRecursion(leftRecursiveDefinitions, ruleMap) {
    var directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions);
    while(directlyLeftRecursiveDefinition !== null){
        rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap);
        directlyLeftRecursiveDefinition = retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions); ///
    }
}
function rewriteDirectLeftRecursion(directlyLeftRecursiveDefinition, leftRecursiveDefinitions, ruleMap) {
    var leftRecursiveRuleName = directlyLeftRecursiveDefinition.getLeftRecursiveRuleName(), directlyLeftRecursiveDefinitions = retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName);
    directlyLeftRecursiveDefinition = mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions); ///
    var ruleName = directlyLeftRecursiveDefinition.getRuleName(), rule = ruleMap[ruleName], reducedRule = _reduced.default.fromRule(rule), reducedRuleName = reducedRule.getName();
    ruleMap[reducedRuleName] = reducedRule;
    var recursiveDefinition = _recursive.default.fromDirectlyLeftRecursiveDefinition(directlyLeftRecursiveDefinition), replacementDefinition = recursiveDefinition, removedLeftRecursiveDefinitions = directlyLeftRecursiveDefinitions; ///
    rule.replaceAllDefinitions(replacementDefinition);
    amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions);
}
function amendLeftRecursiveDefinitions(leftRecursiveDefinitions, removedLeftRecursiveDefinitions) {
    filter(leftRecursiveDefinitions, function(leftRecursiveDefinition) {
        var removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition = removedLeftRecursiveDefinitions.includes(leftRecursiveDefinition);
        if (!removedLeftRecursiveDefinitionsIncludesLeftRecursiveDefinition) {
            return true;
        }
    });
}
function mergeDirectlyLeftRecursiveDefinitions(directlyLeftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = (0, _definitions.mergeLeftRecursiveDefinitions)(directlyLeftRecursiveDefinitions, function(parts, ruleName) {
        var directlyLeftRecursiveDefinition = _directly.default.fromPartsAndRuleName(parts, ruleName);
        return directlyLeftRecursiveDefinition;
    });
    return directlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinition(leftRecursiveDefinitions) {
    var directlyLeftRecursiveDefinition = null;
    leftRecursiveDefinitions.some(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            directlyLeftRecursiveDefinition = leftRecursiveDefinition; ///
            return true;
        }
    });
    return directlyLeftRecursiveDefinition;
}
function retrieveDirectlyLeftRecursiveDefinitions(leftRecursiveDefinitions, leftRecursiveRuleName) {
    var directlyLeftRecursiveDefinitions = leftRecursiveDefinitions.filter(function(leftRecursiveDefinition) {
        var leftRecursiveDefinitionDirectlyLeftRecursiveDefinition = _instanceof(leftRecursiveDefinition, _directly.default);
        if (leftRecursiveDefinitionDirectlyLeftRecursiveDefinition) {
            var directlyLeftRecursiveDefinition = leftRecursiveDefinition, ruleName = directlyLeftRecursiveDefinition.getRuleName();
            if (ruleName === leftRecursiveRuleName) {
                return true;
            }
        }
    });
    return directlyLeftRecursiveDefinitions;
}

//# sourceMappingURL=data:application/json;base64,